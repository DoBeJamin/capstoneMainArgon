
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Capstone/capstoneMainArgon/target/5.3.0/argon/capstoneMainArgon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bae8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfb08  000bfb08  0000fb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e4  2003e2ec  000bfb2c  0001e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000320  2003e4d0  2003e4d0  0002e4d0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bfd10  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bfd14  000bfd14  0001fd14  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bfd1a  000bfd1a  0001fd1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bfd3e  000bfd3e  0001fd3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001a0c02  00000000  00000000  0001fd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001c7be  00000000  00000000  001c0944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005293a  00000000  00000000  001dd102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003cf8  00000000  00000000  0022fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d160  00000000  00000000  00233734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00049e42  00000000  00000000  00240894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000634fa  00000000  00000000  0028a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00149bb1  00000000  00000000  002edbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bdb8  00000000  00000000  00437784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f007 fae7 	bl	bc020 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f007 fb09 	bl	bc070 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e2ec 	.word	0x2003e2ec
   b4a68:	000bfb2c 	.word	0x000bfb2c
   b4a6c:	2003e4d0 	.word	0x2003e4d0
   b4a70:	2003e4d0 	.word	0x2003e4d0
   b4a74:	2003e7f0 	.word	0x2003e7f0

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f006 f8b9 	bl	babf4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bfae4 	.word	0x000bfae4
   b4a9c:	000bfb08 	.word	0x000bfb08

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 bf08 	b.w	b58b4 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 fe51 	bl	b574c <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f006 b859 	b.w	bab64 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f003 b911 	b.w	b7cd8 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f003 b90f 	b.w	b7cd8 <malloc>

000b4aba <_ZdaPv>:
   b4aba:	f003 b915 	b.w	b7ce8 <free>

000b4abe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4abe:	f003 b913 	b.w	b7ce8 <free>
	...

000b4ac4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac6:	4a03      	ldr	r2, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x10>)
   b4ac8:	4903      	ldr	r1, [pc, #12]	; (b4ad8 <__cxa_pure_virtual+0x14>)
   b4aca:	200c      	movs	r0, #12
   b4acc:	f003 f838 	bl	b7b40 <panic_>
  while (1);
   b4ad0:	e7fe      	b.n	b4ad0 <__cxa_pure_virtual+0xc>
   b4ad2:	bf00      	nop
   b4ad4:	000b7735 	.word	0x000b7735
   b4ad8:	000be0f8 	.word	0x000be0f8

000b4adc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4adc:	7800      	ldrb	r0, [r0, #0]
   b4ade:	fab0 f080 	clz	r0, r0
   b4ae2:	0940      	lsrs	r0, r0, #5
   b4ae4:	4770      	bx	lr

000b4ae6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae6:	2301      	movs	r3, #1
   b4ae8:	7003      	strb	r3, [r0, #0]
   b4aea:	4770      	bx	lr

000b4aec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4aec:	4770      	bx	lr

000b4aee <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4aee:	b570      	push	{r4, r5, r6, lr}
   b4af0:	4605      	mov	r5, r0
   b4af2:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4af4:	4616      	mov	r6, r2
   b4af6:	b942      	cbnz	r2, b4b0a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4af8:	6803      	ldr	r3, [r0, #0]
   b4afa:	b2c9      	uxtb	r1, r1
   b4afc:	689b      	ldr	r3, [r3, #8]
   b4afe:	4798      	blx	r3
        n += println();
   b4b00:	4628      	mov	r0, r5
    }
   b4b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4b06:	f004 bf98 	b.w	b9a3a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4b0a:	2900      	cmp	r1, #0
   b4b0c:	da0a      	bge.n	b4b24 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4b0e:	2a0a      	cmp	r2, #10
   b4b10:	d108      	bne.n	b4b24 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4b12:	212d      	movs	r1, #45	; 0x2d
   b4b14:	f004 ff8e 	bl	b9a34 <_ZN5Print5printEc>
            val = -n;
   b4b18:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b1a:	b2f2      	uxtb	r2, r6
   b4b1c:	4628      	mov	r0, r5
   b4b1e:	f004 ffa2 	bl	b9a66 <_ZN5Print11printNumberEmh>
   b4b22:	e7ed      	b.n	b4b00 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4b24:	4621      	mov	r1, r4
   b4b26:	e7f8      	b.n	b4b1a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b4b28 <_Z8callbackPcPhj>:
  display.setTextSize(1);
  display.setTextColor(WHITE); 
  display.setCursor(0,0);
}

void callback(char *topic, byte *payload, unsigned int length) {
   b4b28:	b5b0      	push	{r4, r5, r7, lr}

  //formats and extracts data from mqtt 
  char p[length + 1];
   b4b2a:	f102 0308 	add.w	r3, r2, #8
void callback(char *topic, byte *payload, unsigned int length) {
   b4b2e:	b088      	sub	sp, #32
  char p[length + 1];
   b4b30:	f023 0307 	bic.w	r3, r3, #7
void callback(char *topic, byte *payload, unsigned int length) {
   b4b34:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4b36:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char *topic, byte *payload, unsigned int length) {
   b4b3a:	4614      	mov	r4, r2
   b4b3c:	4605      	mov	r5, r0
  memcpy(p, payload, length);
   b4b3e:	4668      	mov	r0, sp
   b4b40:	f007 fa6e 	bl	bc020 <memcpy>
  p[length] = NULL;
   b4b44:	2300      	movs	r3, #0
  String s = p;
   b4b46:	4669      	mov	r1, sp
   b4b48:	4638      	mov	r0, r7
  p[length] = NULL;
   b4b4a:	f80d 3004 	strb.w	r3, [sp, r4]
  String s = p;
   b4b4e:	f003 faac 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
  int value = s.toFloat();
   b4b52:	4638      	mov	r0, r7
   b4b54:	f003 fb72 	bl	b823c <_ZNK6String7toFloatEv>
   b4b58:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b5c:	4629      	mov	r1, r5
  int value = s.toFloat();
   b4b5e:	ee17 4a90 	vmov	r4, s15
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b62:	f107 0010 	add.w	r0, r7, #16
   b4b66:	f003 faa0 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>

  Serial.print("MQTT value: ");
   b4b6a:	f006 f965 	bl	bae38 <_Z16_fetch_usbserialv>
   b4b6e:	4912      	ldr	r1, [pc, #72]	; (b4bb8 <_Z8callbackPcPhj+0x90>)
   b4b70:	f004 ff5c 	bl	b9a2c <_ZN5Print5printEPKc>
  Serial.println(value);
   b4b74:	f006 f960 	bl	bae38 <_Z16_fetch_usbserialv>
   b4b78:	4621      	mov	r1, r4
   b4b7a:	220a      	movs	r2, #10
   b4b7c:	f7ff ffb7 	bl	b4aee <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  if (callbackTopic.compareTo(A2_RSSI)) {
   b4b80:	490e      	ldr	r1, [pc, #56]	; (b4bbc <_Z8callbackPcPhj+0x94>)
   b4b82:	f107 0010 	add.w	r0, r7, #16
   b4b86:	f003 fb37 	bl	b81f8 <_ZNK6String9compareToERKS_>
   b4b8a:	b158      	cbz	r0, b4ba4 <_Z8callbackPcPhj+0x7c>
    Argon2_distance = value;
   b4b8c:	4b0c      	ldr	r3, [pc, #48]	; (b4bc0 <_Z8callbackPcPhj+0x98>)
  } else if (callbackTopic.compareTo(A3_RSSI)) {
    Argon3_distance = value;
   b4b8e:	601c      	str	r4, [r3, #0]
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b90:	f107 0010 	add.w	r0, r7, #16
   b4b94:	f003 fa3e 	bl	b8014 <_ZN6StringD1Ev>
  String s = p;
   b4b98:	4638      	mov	r0, r7
   b4b9a:	f003 fa3b 	bl	b8014 <_ZN6StringD1Ev>
  }

   b4b9e:	3720      	adds	r7, #32
   b4ba0:	46bd      	mov	sp, r7
   b4ba2:	bdb0      	pop	{r4, r5, r7, pc}
  } else if (callbackTopic.compareTo(A3_RSSI)) {
   b4ba4:	4907      	ldr	r1, [pc, #28]	; (b4bc4 <_Z8callbackPcPhj+0x9c>)
   b4ba6:	f107 0010 	add.w	r0, r7, #16
   b4baa:	f003 fb25 	bl	b81f8 <_ZNK6String9compareToERKS_>
   b4bae:	2800      	cmp	r0, #0
   b4bb0:	d0ee      	beq.n	b4b90 <_Z8callbackPcPhj+0x68>
    Argon3_distance = value;
   b4bb2:	4b05      	ldr	r3, [pc, #20]	; (b4bc8 <_Z8callbackPcPhj+0xa0>)
   b4bb4:	e7eb      	b.n	b4b8e <_Z8callbackPcPhj+0x66>
   b4bb6:	bf00      	nop
   b4bb8:	000be10d 	.word	0x000be10d
   b4bbc:	2003e4d0 	.word	0x2003e4d0
   b4bc0:	2003e4f4 	.word	0x2003e4f4
   b4bc4:	2003e4e0 	.word	0x2003e4e0
   b4bc8:	2003e4f8 	.word	0x2003e4f8

000b4bcc <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4bcc:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4bce:	f002 fdb9 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4bd2:	4b03      	ldr	r3, [pc, #12]	; (b4be0 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4bd4:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4bda:	f003 b865 	b.w	b7ca8 <spark_process>
   b4bde:	bf00      	nop
   b4be0:	2003e740 	.word	0x2003e740

000b4be4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4be4:	4b0a      	ldr	r3, [pc, #40]	; (b4c10 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4be6:	b510      	push	{r4, lr}
   b4be8:	4604      	mov	r4, r0
   b4bea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4bec:	f005 f93a 	bl	b9e64 <_ZN5spark10LogManager8instanceEv>
   b4bf0:	4621      	mov	r1, r4
   b4bf2:	f005 fb72 	bl	ba2da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4bf6:	f006 f91f 	bl	bae38 <_Z16_fetch_usbserialv>
   b4bfa:	f006 f911 	bl	bae20 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4bfe:	4620      	mov	r0, r4
   b4c00:	4b04      	ldr	r3, [pc, #16]	; (b4c14 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4c02:	f840 3b04 	str.w	r3, [r0], #4
   b4c06:	f005 fa03 	bl	ba010 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4c0a:	4620      	mov	r0, r4
   b4c0c:	bd10      	pop	{r4, pc}
   b4c0e:	bf00      	nop
   b4c10:	000be240 	.word	0x000be240
   b4c14:	000be228 	.word	0x000be228

000b4c18 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4c18:	b510      	push	{r4, lr}
   b4c1a:	4604      	mov	r4, r0
    }
   b4c1c:	f7ff ffe2 	bl	b4be4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4c20:	4620      	mov	r0, r4
   b4c22:	2124      	movs	r1, #36	; 0x24
   b4c24:	f7ff ff4b 	bl	b4abe <_ZdlPvj>
   b4c28:	4620      	mov	r0, r4
   b4c2a:	bd10      	pop	{r4, pc}

000b4c2c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4c2c:	b40e      	push	{r1, r2, r3}
   b4c2e:	b500      	push	{lr}
   b4c30:	b08c      	sub	sp, #48	; 0x30
   b4c32:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4c34:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4c38:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4c3c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c3e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4c42:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c44:	6801      	ldr	r1, [r0, #0]
   b4c46:	aa04      	add	r2, sp, #16
   b4c48:	201e      	movs	r0, #30
    attr.flags = 0;
   b4c4a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c4e:	f002 ff87 	bl	b7b60 <log_message_v>
}
   b4c52:	b00c      	add	sp, #48	; 0x30
   b4c54:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c58:	b003      	add	sp, #12
   b4c5a:	4770      	bx	lr

000b4c5c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
void scanResultCallback(const BleScanResult *scanResult, void *context) {
   b4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c60:	b08e      	sub	sp, #56	; 0x38
   b4c62:	4604      	mov	r4, r0
	BleUuid foundServiceUuid;
   b4c64:	a809      	add	r0, sp, #36	; 0x24
   b4c66:	f003 fbd9 	bl	b841c <_ZN8particle7BleUuidC1Ev>
	size_t svcCount = scanResult->advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4c6a:	a909      	add	r1, sp, #36	; 0x24
   b4c6c:	2201      	movs	r2, #1
   b4c6e:	f104 0008 	add.w	r0, r4, #8
   b4c72:	f004 fc69 	bl	b9548 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b4c76:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b4c7a:	9207      	str	r2, [sp, #28]
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b4c7c:	2100      	movs	r1, #0
   b4c7e:	4620      	mov	r0, r4
   b4c80:	f003 fb96 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
   b4c84:	2101      	movs	r1, #1
   b4c86:	9006      	str	r0, [sp, #24]
   b4c88:	4620      	mov	r0, r4
   b4c8a:	f003 fb91 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
   b4c8e:	2102      	movs	r1, #2
   b4c90:	4605      	mov	r5, r0
   b4c92:	4620      	mov	r0, r4
   b4c94:	f003 fb8c 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b4c98:	2103      	movs	r1, #3
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b4c9a:	4606      	mov	r6, r0
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	f003 fb87 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
   b4ca2:	2104      	movs	r1, #4
   b4ca4:	4607      	mov	r7, r0
   b4ca6:	4620      	mov	r0, r4
   b4ca8:	f003 fb82 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
   b4cac:	2105      	movs	r1, #5
   b4cae:	4680      	mov	r8, r0
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	f003 fb7d 	bl	b83b0 <_ZNK8particle10BleAddressixEh>
	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b4cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b4cba:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b4cbe:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b4cc2:	490a      	ldr	r1, [pc, #40]	; (b4cec <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x90>)
   b4cc4:	480a      	ldr	r0, [pc, #40]	; (b4cf0 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x94>)
   b4cc6:	9500      	str	r5, [sp, #0]
   b4cc8:	f7ff ffb0 	bl	b4c2c <_ZNK5spark6Logger4infoEPKcz>
	peripheralAddr = scanResult->address();
   b4ccc:	4621      	mov	r1, r4
   b4cce:	4809      	ldr	r0, [pc, #36]	; (b4cf4 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x98>)
   b4cd0:	f003 fb73 	bl	b83ba <_ZN8particle10BleAddressaSERKS0_>
	rssi = scanResult->rssi();
   b4cd4:	4b08      	ldr	r3, [pc, #32]	; (b4cf8 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x9c>)
   b4cd6:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b4cda:	601a      	str	r2, [r3, #0]
	BLE.stopScanning();
   b4cdc:	f003 fd5c 	bl	b8798 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ce0:	f003 fdbd 	bl	b885e <_ZNK8particle14BleLocalDevice12stopScanningEv>
}
   b4ce4:	b00e      	add	sp, #56	; 0x38
   b4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4cea:	bf00      	nop
   b4cec:	000be11a 	.word	0x000be11a
   b4cf0:	2003e6b8 	.word	0x2003e6b8
   b4cf4:	2003e64c 	.word	0x2003e64c
   b4cf8:	2003e654 	.word	0x2003e654

000b4cfc <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4cfc:	6803      	ldr	r3, [r0, #0]
   b4cfe:	b12b      	cbz	r3, b4d0c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4d00:	6842      	ldr	r2, [r0, #4]
   b4d02:	4293      	cmp	r3, r2
   b4d04:	d202      	bcs.n	b4d0c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4d06:	4618      	mov	r0, r3
   b4d08:	f007 b969 	b.w	bbfde <atoi>
   b4d0c:	2000      	movs	r0, #0
   b4d0e:	4770      	bx	lr

000b4d10 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4d10:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4d12:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4d14:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4d16:	b145      	cbz	r5, b4d2a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4d18:	6843      	ldr	r3, [r0, #4]
   b4d1a:	429d      	cmp	r5, r3
   b4d1c:	d205      	bcs.n	b4d2a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4d1e:	4628      	mov	r0, r5
   b4d20:	f7ff fe6c 	bl	b49fc <strlen>
   b4d24:	3001      	adds	r0, #1
   b4d26:	4405      	add	r5, r0
   b4d28:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	bd38      	pop	{r3, r4, r5, pc}

000b4d2e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d30:	4604      	mov	r4, r0
   b4d32:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4d34:	460d      	mov	r5, r1
   b4d36:	b921      	cbnz	r1, b4d42 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4d38:	6803      	ldr	r3, [r0, #0]
   b4d3a:	1c7a      	adds	r2, r7, #1
   b4d3c:	6042      	str	r2, [r0, #4]
   b4d3e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4d42:	4608      	mov	r0, r1
   b4d44:	f7ff fe5a 	bl	b49fc <strlen>
    if (len + l > buff_size)
   b4d48:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4d4a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4d4c:	19f2      	adds	r2, r6, r7
   b4d4e:	429a      	cmp	r2, r3
   b4d50:	d8f6      	bhi.n	b4d40 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4d52:	6820      	ldr	r0, [r4, #0]
   b4d54:	4632      	mov	r2, r6
   b4d56:	4629      	mov	r1, r5
   b4d58:	4438      	add	r0, r7
   b4d5a:	f007 f961 	bl	bc020 <memcpy>
    len += l;
   b4d5e:	6860      	ldr	r0, [r4, #4]
   b4d60:	4430      	add	r0, r6
   b4d62:	6060      	str	r0, [r4, #4]
   b4d64:	e7ec      	b.n	b4d40 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4d68 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4d68:	b538      	push	{r3, r4, r5, lr}
   b4d6a:	4604      	mov	r4, r0
   b4d6c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4d6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d72:	6825      	ldr	r5, [r4, #0]
   b4d74:	4a04      	ldr	r2, [pc, #16]	; (b4d88 <_ZN10BlynkParam3addEi+0x20>)
   b4d76:	1a09      	subs	r1, r1, r0
   b4d78:	4428      	add	r0, r5
   b4d7a:	f002 ffc5 	bl	b7d08 <snprintf>
   b4d7e:	6863      	ldr	r3, [r4, #4]
   b4d80:	3001      	adds	r0, #1
   b4d82:	4403      	add	r3, r0
   b4d84:	6063      	str	r3, [r4, #4]
    }
   b4d86:	bd38      	pop	{r3, r4, r5, pc}
   b4d88:	000be147 	.word	0x000be147

000b4d8c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4d8c:	b538      	push	{r3, r4, r5, lr}
   b4d8e:	4604      	mov	r4, r0
   b4d90:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4d92:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d96:	6825      	ldr	r5, [r4, #0]
   b4d98:	4a04      	ldr	r2, [pc, #16]	; (b4dac <_ZN10BlynkParam3addEl+0x20>)
   b4d9a:	1a09      	subs	r1, r1, r0
   b4d9c:	4428      	add	r0, r5
   b4d9e:	f002 ffb3 	bl	b7d08 <snprintf>
   b4da2:	6863      	ldr	r3, [r4, #4]
   b4da4:	3001      	adds	r0, #1
   b4da6:	4403      	add	r3, r0
   b4da8:	6063      	str	r3, [r4, #4]
    }
   b4daa:	bd38      	pop	{r3, r4, r5, pc}
   b4dac:	000be14a 	.word	0x000be14a

000b4db0 <_Z14format_displayv>:
void format_display() {
   b4db0:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4db2:	4c07      	ldr	r4, [pc, #28]	; (b4dd0 <_Z14format_displayv+0x20>)
   b4db4:	4620      	mov	r0, r4
   b4db6:	f002 f931 	bl	b701c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4dba:	2101      	movs	r1, #1
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	f001 fa96 	bl	b62ee <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4dc2:	2200      	movs	r2, #0
   b4dc4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4dc8:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
   b4dcc:	bd10      	pop	{r4, pc}
   b4dce:	bf00      	nop
   b4dd0:	2003e5b8 	.word	0x2003e5b8

000b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dd4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4dd6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dda:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ddc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4dde:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4de2:	42ae      	cmp	r6, r5
   b4de4:	d004      	beq.n	b4df0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4de6:	4628      	mov	r0, r5
   b4de8:	f003 f914 	bl	b8014 <_ZN6StringD1Ev>
   b4dec:	3514      	adds	r5, #20
   b4dee:	e7f8      	b.n	b4de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4df0:	6820      	ldr	r0, [r4, #0]
   b4df2:	f002 ff79 	bl	b7ce8 <free>
    AllocatorT::free(data_);
}
   b4df6:	4620      	mov	r0, r4
   b4df8:	bd70      	pop	{r4, r5, r6, pc}

000b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4dfa:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4dfc:	2300      	movs	r3, #0
   b4dfe:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4e00:	6800      	ldr	r0, [r0, #0]
   b4e02:	f006 fb6b 	bl	bb4dc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4e0a:	f002 bc1e 	b.w	b764a <BlynkNoOpCbk>

000b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4e0e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e12:	4604      	mov	r4, r0
   b4e14:	460d      	mov	r5, r1
   b4e16:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4e18:	d916      	bls.n	b4e48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4e1a:	4290      	cmp	r0, r2
   b4e1c:	d215      	bcs.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4e1e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4e22:	1a75      	subs	r5, r6, r1
   b4e24:	f1a1 0714 	sub.w	r7, r1, #20
   b4e28:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e2a:	42b7      	cmp	r7, r6
   b4e2c:	d01c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e2e:	b12c      	cbz	r4, b4e3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e30:	4631      	mov	r1, r6
   b4e32:	4620      	mov	r0, r4
   b4e34:	f003 f96a 	bl	b810c <_ZN6StringC1EOS_>
   b4e38:	7c33      	ldrb	r3, [r6, #16]
   b4e3a:	7423      	strb	r3, [r4, #16]
   b4e3c:	4630      	mov	r0, r6
   b4e3e:	f003 f8e9 	bl	b8014 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e42:	3e14      	subs	r6, #20
   b4e44:	3c14      	subs	r4, #20
   b4e46:	e7f0      	b.n	b4e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e48:	d00e      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e4a:	42b5      	cmp	r5, r6
   b4e4c:	d00c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e4e:	b12c      	cbz	r4, b4e5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e50:	4629      	mov	r1, r5
   b4e52:	4620      	mov	r0, r4
   b4e54:	f003 f95a 	bl	b810c <_ZN6StringC1EOS_>
   b4e58:	7c2b      	ldrb	r3, [r5, #16]
   b4e5a:	7423      	strb	r3, [r4, #16]
   b4e5c:	4628      	mov	r0, r5
   b4e5e:	f003 f8d9 	bl	b8014 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e62:	3514      	adds	r5, #20
   b4e64:	3414      	adds	r4, #20
   b4e66:	e7f0      	b.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e6e:	2300      	movs	r3, #0
   b4e70:	e9c0 3300 	strd	r3, r3, [r0]
   b4e74:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e76:	684f      	ldr	r7, [r1, #4]
   b4e78:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e7a:	4604      	mov	r4, r0
   b4e7c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e7e:	dd23      	ble.n	b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e80:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e84:	fb08 f007 	mul.w	r0, r8, r7
   b4e88:	f002 ff26 	bl	b7cd8 <malloc>
            if (!d) {
   b4e8c:	4605      	mov	r5, r0
   b4e8e:	b1d8      	cbz	r0, b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e94:	fb08 1202 	mla	r2, r8, r2, r1
   b4e98:	f7ff ffb9 	bl	b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e9c:	6820      	ldr	r0, [r4, #0]
   b4e9e:	f002 ff23 	bl	b7ce8 <free>
        data_ = d;
   b4ea2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4ea4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4ea6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4eaa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4eae:	45b8      	cmp	r8, r7
   b4eb0:	d008      	beq.n	b4ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4eb2:	4639      	mov	r1, r7
   b4eb4:	4628      	mov	r0, r5
   b4eb6:	f003 f943 	bl	b8140 <_ZN6StringC1ERKS_>
   b4eba:	7c3b      	ldrb	r3, [r7, #16]
   b4ebc:	742b      	strb	r3, [r5, #16]
   b4ebe:	3714      	adds	r7, #20
   b4ec0:	3514      	adds	r5, #20
   b4ec2:	e7f4      	b.n	b4eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4ec4:	6873      	ldr	r3, [r6, #4]
   b4ec6:	6063      	str	r3, [r4, #4]
}
   b4ec8:	4620      	mov	r0, r4
   b4eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4ed0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4ed4:	188f      	adds	r7, r1, r2
   b4ed6:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4ed8:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4eda:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4ede:	4606      	mov	r6, r0
   b4ee0:	4689      	mov	r9, r1
   b4ee2:	4690      	mov	r8, r2
    if (it >= param.end())
   b4ee4:	f080 80c2 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4ee8:	a805      	add	r0, sp, #20
   b4eea:	880d      	ldrh	r5, [r1, #0]
   b4eec:	f7ff ff10 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b4ef0:	6803      	ldr	r3, [r0, #0]
   b4ef2:	42bb      	cmp	r3, r7
   b4ef4:	f080 80ba 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4ef8:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4efa:	7803      	ldrb	r3, [r0, #0]
   b4efc:	2b41      	cmp	r3, #65	; 0x41
   b4efe:	d149      	bne.n	b4f94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4f00:	3001      	adds	r0, #1
   b4f02:	f007 f86c 	bl	bbfde <atoi>
   b4f06:	2805      	cmp	r0, #5
   b4f08:	dd37      	ble.n	b4f7a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4f0a:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4f0c:	f247 2376 	movw	r3, #29302	; 0x7276
   b4f10:	429d      	cmp	r5, r3
   b4f12:	f000 80d3 	beq.w	b50bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4f16:	d841      	bhi.n	b4f9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4f18:	f247 2361 	movw	r3, #29281	; 0x7261
   b4f1c:	429d      	cmp	r5, r3
   b4f1e:	f000 80a8 	beq.w	b5072 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4f22:	f247 2364 	movw	r3, #29284	; 0x7264
   b4f26:	429d      	cmp	r5, r3
   b4f28:	d06b      	beq.n	b5002 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4f2a:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4f2e:	429d      	cmp	r5, r3
   b4f30:	d141      	bne.n	b4fb6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4f32:	4d78      	ldr	r5, [pc, #480]	; (b5114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4f34:	4e78      	ldr	r6, [pc, #480]	; (b5118 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4f36:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b512c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4f3a:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4f3c:	42b8      	cmp	r0, r7
   b4f3e:	f080 8095 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4f42:	7803      	ldrb	r3, [r0, #0]
   b4f44:	2b41      	cmp	r3, #65	; 0x41
   b4f46:	d14b      	bne.n	b4fe0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4f48:	3001      	adds	r0, #1
   b4f4a:	f007 f848 	bl	bbfde <atoi>
   b4f4e:	2805      	cmp	r0, #5
   b4f50:	dd39      	ble.n	b4fc6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4f52:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4f54:	a805      	add	r0, sp, #20
   b4f56:	f7ff fedb 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4f5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4f5e:	4629      	mov	r1, r5
   b4f60:	4648      	mov	r0, r9
   b4f62:	f7ff fd41 	bl	b49e8 <strcmp>
   b4f66:	4601      	mov	r1, r0
   b4f68:	2800      	cmp	r0, #0
   b4f6a:	d13d      	bne.n	b4fe8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	f006 fe19 	bl	bbba4 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4f72:	a805      	add	r0, sp, #20
   b4f74:	f7ff fecc 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4f78:	e7df      	b.n	b4f3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4f7a:	9805      	ldr	r0, [sp, #20]
   b4f7c:	3001      	adds	r0, #1
   b4f7e:	f007 f82e 	bl	bbfde <atoi>
   b4f82:	2800      	cmp	r0, #0
   b4f84:	dbc1      	blt.n	b4f0a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4f86:	9805      	ldr	r0, [sp, #20]
   b4f88:	3001      	adds	r0, #1
   b4f8a:	f007 f828 	bl	bbfde <atoi>
   b4f8e:	300e      	adds	r0, #14
   b4f90:	b2c4      	uxtb	r4, r0
   b4f92:	e7bb      	b.n	b4f0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4f94:	a805      	add	r0, sp, #20
   b4f96:	f7ff feb1 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b4f9a:	e7f9      	b.n	b4f90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4f9c:	f247 7364 	movw	r3, #30564	; 0x7764
   b4fa0:	429d      	cmp	r5, r3
   b4fa2:	d04f      	beq.n	b5044 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4fa4:	f247 7376 	movw	r3, #30582	; 0x7776
   b4fa8:	429d      	cmp	r5, r3
   b4faa:	f000 8097 	beq.w	b50dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b4fae:	f247 7361 	movw	r3, #30561	; 0x7761
   b4fb2:	429d      	cmp	r5, r3
   b4fb4:	d06f      	beq.n	b5096 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4fb6:	2300      	movs	r3, #0
   b4fb8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4fbc:	2202      	movs	r2, #2
   b4fbe:	9200      	str	r2, [sp, #0]
   b4fc0:	8b72      	ldrh	r2, [r6, #26]
   b4fc2:	4619      	mov	r1, r3
   b4fc4:	e03a      	b.n	b503c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4fc6:	9805      	ldr	r0, [sp, #20]
   b4fc8:	3001      	adds	r0, #1
   b4fca:	f007 f808 	bl	bbfde <atoi>
   b4fce:	2800      	cmp	r0, #0
   b4fd0:	dbbf      	blt.n	b4f52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b4fd2:	9805      	ldr	r0, [sp, #20]
   b4fd4:	3001      	adds	r0, #1
   b4fd6:	f007 f802 	bl	bbfde <atoi>
   b4fda:	300e      	adds	r0, #14
   b4fdc:	b2c4      	uxtb	r4, r0
   b4fde:	e7b9      	b.n	b4f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4fe0:	a805      	add	r0, sp, #20
   b4fe2:	f7ff fe8b 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b4fe6:	e7f9      	b.n	b4fdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4fe8:	4631      	mov	r1, r6
   b4fea:	4648      	mov	r0, r9
   b4fec:	f7ff fcfc 	bl	b49e8 <strcmp>
   b4ff0:	b128      	cbz	r0, b4ffe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b4ff2:	4641      	mov	r1, r8
   b4ff4:	4648      	mov	r0, r9
   b4ff6:	f7ff fcf7 	bl	b49e8 <strcmp>
   b4ffa:	2800      	cmp	r0, #0
   b4ffc:	d1b9      	bne.n	b4f72 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b4ffe:	2101      	movs	r1, #1
   b5000:	e7b4      	b.n	b4f6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5002:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5004:	4945      	ldr	r1, [pc, #276]	; (b511c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b5006:	9307      	str	r3, [sp, #28]
   b5008:	a807      	add	r0, sp, #28
   b500a:	2310      	movs	r3, #16
   b500c:	2500      	movs	r5, #0
   b500e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5012:	f7ff fe8c 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5016:	a807      	add	r0, sp, #28
   b5018:	4621      	mov	r1, r4
   b501a:	f7ff fea5 	bl	b4d68 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b501e:	4620      	mov	r0, r4
   b5020:	f006 fdea 	bl	bbbf8 <digitalRead>
        rsp.add(analogRead(pin));
   b5024:	4601      	mov	r1, r0
   b5026:	a807      	add	r0, sp, #28
   b5028:	f7ff feb0 	bl	b4d8c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b502c:	9b08      	ldr	r3, [sp, #32]
   b502e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5032:	3b01      	subs	r3, #1
   b5034:	9300      	str	r3, [sp, #0]
   b5036:	9b07      	ldr	r3, [sp, #28]
   b5038:	462a      	mov	r2, r5
   b503a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b503c:	4630      	mov	r0, r6
   b503e:	f000 fa85 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b5042:	e013      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b5044:	a805      	add	r0, sp, #20
   b5046:	f7ff fe63 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b504a:	6803      	ldr	r3, [r0, #0]
   b504c:	429f      	cmp	r7, r3
   b504e:	d90d      	bls.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b5050:	b2a4      	uxth	r4, r4
   b5052:	2101      	movs	r1, #1
   b5054:	4620      	mov	r0, r4
   b5056:	f006 fda5 	bl	bbba4 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b505a:	a805      	add	r0, sp, #20
   b505c:	f7ff fe4e 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b5060:	1e01      	subs	r1, r0, #0
   b5062:	bf18      	it	ne
   b5064:	2101      	movne	r1, #1
   b5066:	4620      	mov	r0, r4
   b5068:	f006 fdad 	bl	bbbc6 <digitalWrite>
    }
}
   b506c:	b00f      	add	sp, #60	; 0x3c
   b506e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5072:	ab0a      	add	r3, sp, #40	; 0x28
   b5074:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b5076:	a807      	add	r0, sp, #28
   b5078:	2310      	movs	r3, #16
   b507a:	4929      	ldr	r1, [pc, #164]	; (b5120 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b507c:	2500      	movs	r5, #0
   b507e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5082:	f7ff fe54 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5086:	a807      	add	r0, sp, #28
   b5088:	4621      	mov	r1, r4
   b508a:	f7ff fe6d 	bl	b4d68 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b508e:	4620      	mov	r0, r4
   b5090:	f006 fdc5 	bl	bbc1e <analogRead>
   b5094:	e7c6      	b.n	b5024 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b5096:	a805      	add	r0, sp, #20
   b5098:	f7ff fe3a 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b509c:	6803      	ldr	r3, [r0, #0]
   b509e:	429f      	cmp	r7, r3
   b50a0:	d9e4      	bls.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b50a2:	b2a4      	uxth	r4, r4
   b50a4:	2101      	movs	r1, #1
   b50a6:	4620      	mov	r0, r4
   b50a8:	f006 fd7c 	bl	bbba4 <pinMode>
        analogWrite(pin, it.asInt());
   b50ac:	a805      	add	r0, sp, #20
   b50ae:	f7ff fe25 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b50b2:	4601      	mov	r1, r0
   b50b4:	4620      	mov	r0, r4
   b50b6:	f006 fdc9 	bl	bbc4c <_Z11analogWritetm>
    } break;
   b50ba:	e7d7      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b50bc:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b50be:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b50c2:	f002 fac3 	bl	b764c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b50c6:	4603      	mov	r3, r0
            handler(req);
   b50c8:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b50ca:	b123      	cbz	r3, b50d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b50cc:	4a15      	ldr	r2, [pc, #84]	; (b5124 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b50ce:	4293      	cmp	r3, r2
   b50d0:	d001      	beq.n	b50d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b50d2:	4798      	blx	r3
   b50d4:	e7ca      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b50d6:	f002 fab6 	bl	b7646 <BlynkWidgetRead>
        }
    }
   b50da:	e7c7      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b50dc:	a805      	add	r0, sp, #20
   b50de:	f7ff fe17 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b50e2:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b50e4:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b50e8:	eba3 0109 	sub.w	r1, r3, r9
   b50ec:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b50f0:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b50f2:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b50f6:	910c      	str	r1, [sp, #48]	; 0x30
   b50f8:	f002 fab2 	bl	b7660 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b50fc:	4603      	mov	r3, r0
            handler(req, param);
   b50fe:	a90a      	add	r1, sp, #40	; 0x28
   b5100:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5102:	b123      	cbz	r3, b510e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b5104:	4a08      	ldr	r2, [pc, #32]	; (b5128 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b5106:	4293      	cmp	r3, r2
   b5108:	d001      	beq.n	b510e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b510a:	4798      	blx	r3
   b510c:	e7ae      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b510e:	f002 fa9b 	bl	b7648 <BlynkWidgetWrite>
    } break;
   b5112:	e7ab      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b5114:	000be14e 	.word	0x000be14e
   b5118:	000be151 	.word	0x000be151
   b511c:	000be159 	.word	0x000be159
   b5120:	000be15c 	.word	0x000be15c
   b5124:	000b7647 	.word	0x000b7647
   b5128:	000b7649 	.word	0x000b7649
   b512c:	000be155 	.word	0x000be155

000b5130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5134:	b08c      	sub	sp, #48	; 0x30
   b5136:	af04      	add	r7, sp, #16
   b5138:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b513a:	2205      	movs	r2, #5
   b513c:	6800      	ldr	r0, [r0, #0]
   b513e:	1d39      	adds	r1, r7, #4
   b5140:	f004 fcf5 	bl	b9b2e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5144:	b3a8      	cbz	r0, b51b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5146:	2805      	cmp	r0, #5
   b5148:	d004      	beq.n	b5154 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b514a:	2000      	movs	r0, #0
}
   b514c:	3720      	adds	r7, #32
   b514e:	46bd      	mov	sp, r7
   b5150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5154:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5158:	f002 fb8a 	bl	b7870 <inet_ntohs>
   b515c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5160:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b5164:	f002 fb84 	bl	b7870 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5168:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b516c:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5170:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b5172:	2b00      	cmp	r3, #0
   b5174:	d0e9      	beq.n	b514a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5176:	793b      	ldrb	r3, [r7, #4]
   b5178:	bb23      	cbnz	r3, b51c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b517a:	f002 fa62 	bl	b7642 <_Z11BlynkMillisv>
   b517e:	4602      	mov	r2, r0
   b5180:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b5182:	7f60      	ldrb	r0, [r4, #29]
   b5184:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5188:	b9c0      	cbnz	r0, b51bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b518a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b518e:	2901      	cmp	r1, #1
   b5190:	d114      	bne.n	b51bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b5192:	2b09      	cmp	r3, #9
   b5194:	d00f      	beq.n	b51b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5196:	2bc8      	cmp	r3, #200	; 0xc8
   b5198:	d001      	beq.n	b519e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b519a:	2b04      	cmp	r3, #4
   b519c:	d1d6      	bne.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b519e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b51a0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b51a2:	4620      	mov	r0, r4
                state = CONNECTED;
   b51a4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b51a6:	f000 fa81 	bl	b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b51aa:	f7ff fd0f 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b51ae:	f002 fa4c 	bl	b764a <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b51b2:	2001      	movs	r0, #1
   b51b4:	e7ca      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b51b6:	2303      	movs	r3, #3
   b51b8:	7763      	strb	r3, [r4, #29]
                break;
   b51ba:	e7c7      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b51bc:	1f58      	subs	r0, r3, #5
   b51be:	bf18      	it	ne
   b51c0:	2001      	movne	r0, #1
   b51c2:	e7c3      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b51c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b51c8:	d903      	bls.n	b51d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b51ca:	4620      	mov	r0, r4
   b51cc:	f7ff fe15 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b51d0:	e7ef      	b.n	b51b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b51d2:	f100 0308 	add.w	r3, r0, #8
   b51d6:	f023 0307 	bic.w	r3, r3, #7
   b51da:	466e      	mov	r6, sp
   b51dc:	ebad 0d03 	sub.w	sp, sp, r3
   b51e0:	ad04      	add	r5, sp, #16
   b51e2:	4602      	mov	r2, r0
   b51e4:	4629      	mov	r1, r5
   b51e6:	6820      	ldr	r0, [r4, #0]
   b51e8:	f004 fca1 	bl	b9b2e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b51ec:	4580      	cmp	r8, r0
   b51ee:	f04f 0000 	mov.w	r0, #0
   b51f2:	d17f      	bne.n	b52f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b51f4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b51f8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b51fa:	f002 fa22 	bl	b7642 <_Z11BlynkMillisv>
    switch (hdr.type)
   b51fe:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5200:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b5202:	2b14      	cmp	r3, #20
   b5204:	f000 80a6 	beq.w	b5354 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5208:	d848      	bhi.n	b529c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b520a:	2b0f      	cmp	r3, #15
   b520c:	f000 80a2 	beq.w	b5354 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5210:	d807      	bhi.n	b5222 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b5212:	2b02      	cmp	r3, #2
   b5214:	d048      	beq.n	b52a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b5216:	2b06      	cmp	r3, #6
   b5218:	d051      	beq.n	b52be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b521a:	4620      	mov	r0, r4
   b521c:	f7ff fded 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5220:	e058      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b5222:	2b11      	cmp	r3, #17
   b5224:	d1f9      	bne.n	b521a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b5226:	2300      	movs	r3, #0
   b5228:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b522a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b522e:	442b      	add	r3, r5
        if (it >= param.end())
   b5230:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5232:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b5236:	d24d      	bcs.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b5238:	f107 000c 	add.w	r0, r7, #12
   b523c:	f8d5 8000 	ldr.w	r8, [r5]
   b5240:	f7ff fd66 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5244:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b5246:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b524a:	1b5d      	subs	r5, r3, r5
   b524c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b524e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b5252:	687b      	ldr	r3, [r7, #4]
   b5254:	61fd      	str	r5, [r7, #28]
   b5256:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b525a:	8363      	strh	r3, [r4, #26]
   b525c:	4b64      	ldr	r3, [pc, #400]	; (b53f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b525e:	4598      	cmp	r8, r3
   b5260:	f000 80bf 	beq.w	b53e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b5264:	f200 808c 	bhi.w	b5380 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5268:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b526c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5270:	4413      	add	r3, r2
   b5272:	4598      	cmp	r8, r3
   b5274:	f000 809d 	beq.w	b53b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5278:	d879      	bhi.n	b536e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b527a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b527e:	3b06      	subs	r3, #6
   b5280:	4598      	cmp	r8, r3
   b5282:	f000 809c 	beq.w	b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5286:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b528a:	3303      	adds	r3, #3
   b528c:	4598      	cmp	r8, r3
   b528e:	d16b      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b5290:	f107 0114 	add.w	r1, r7, #20
   b5294:	4638      	mov	r0, r7
   b5296:	f002 f9d7 	bl	b7648 <BlynkWidgetWrite>
   b529a:	e065      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b529c:	2b29      	cmp	r3, #41	; 0x29
   b529e:	d01b      	beq.n	b52d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b52a0:	2b37      	cmp	r3, #55	; 0x37
   b52a2:	d017      	beq.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b52a4:	2b1d      	cmp	r3, #29
   b52a6:	d1b8      	bne.n	b521a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b52a8:	7f63      	ldrb	r3, [r4, #29]
   b52aa:	b943      	cbnz	r3, b52be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b52ac:	2301      	movs	r3, #1
   b52ae:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b52b0:	4620      	mov	r0, r4
   b52b2:	f000 f9fb 	bl	b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b52b6:	f7ff fc89 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b52ba:	f002 f9c6 	bl	b764a <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b52be:	2300      	movs	r3, #0
   b52c0:	21c8      	movs	r1, #200	; 0xc8
   b52c2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b52c6:	9100      	str	r1, [sp, #0]
   b52c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b52cc:	4619      	mov	r1, r3
   b52ce:	4620      	mov	r0, r4
   b52d0:	f000 f93c 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b52d4:	2001      	movs	r0, #1
   b52d6:	e00d      	b.n	b52f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b52d8:	68a3      	ldr	r3, [r4, #8]
   b52da:	b91b      	cbnz	r3, b52e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b52dc:	2040      	movs	r0, #64	; 0x40
   b52de:	f002 fcfb 	bl	b7cd8 <malloc>
   b52e2:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b52e4:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b52e8:	44a8      	add	r8, r5
        if (it >= param.end())
   b52ea:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b52ec:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b52f0:	d302      	bcc.n	b52f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b52f2:	2000      	movs	r0, #0
   b52f4:	46b5      	mov	sp, r6
   b52f6:	e729      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b52f8:	4629      	mov	r1, r5
   b52fa:	2240      	movs	r2, #64	; 0x40
   b52fc:	68a0      	ldr	r0, [r4, #8]
   b52fe:	f006 ff20 	bl	bc142 <strncpy>
        redir_serv[63] = '\0';
   b5302:	68a3      	ldr	r3, [r4, #8]
   b5304:	2500      	movs	r5, #0
   b5306:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b530a:	f107 0014 	add.w	r0, r7, #20
   b530e:	f7ff fcff 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b5312:	6803      	ldr	r3, [r0, #0]
   b5314:	4598      	cmp	r8, r3
   b5316:	d91b      	bls.n	b5350 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b5318:	6978      	ldr	r0, [r7, #20]
   b531a:	b120      	cbz	r0, b5326 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b531c:	69bb      	ldr	r3, [r7, #24]
   b531e:	4298      	cmp	r0, r3
   b5320:	d214      	bcs.n	b534c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b5322:	f006 fe60 	bl	bbfe6 <atol>
            redir_port = it.asLong();
   b5326:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b5328:	6820      	ldr	r0, [r4, #0]
   b532a:	f006 f8d7 	bl	bb4dc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b532e:	6823      	ldr	r3, [r4, #0]
   b5330:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b5332:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b5334:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b5336:	2300      	movs	r3, #0
   b5338:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b533a:	f002 f982 	bl	b7642 <_Z11BlynkMillisv>
   b533e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b5342:	3808      	subs	r0, #8
   b5344:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5348:	6160      	str	r0, [r4, #20]
   b534a:	e7c3      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b534c:	4628      	mov	r0, r5
   b534e:	e7ea      	b.n	b5326 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b5350:	2550      	movs	r5, #80	; 0x50
   b5352:	e7e9      	b.n	b5328 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b5354:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5356:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b535a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b535e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b5360:	4629      	mov	r1, r5
   b5362:	4620      	mov	r0, r4
   b5364:	f7ff fdb4 	bl	b4ed0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5368:	2300      	movs	r3, #0
   b536a:	8363      	strh	r3, [r4, #26]
   b536c:	e7b2      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b536e:	4b21      	ldr	r3, [pc, #132]	; (b53f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5370:	4598      	cmp	r8, r3
   b5372:	d1f9      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5374:	f107 0114 	add.w	r1, r7, #20
   b5378:	4638      	mov	r0, r7
   b537a:	f002 f965 	bl	b7648 <BlynkWidgetWrite>
   b537e:	e7f3      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5380:	4b1d      	ldr	r3, [pc, #116]	; (b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b5382:	4598      	cmp	r8, r3
   b5384:	d021      	beq.n	b53ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5386:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b538a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b538e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b5392:	4598      	cmp	r8, r3
   b5394:	d01f      	beq.n	b53d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5396:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b539a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b539e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b53a2:	4598      	cmp	r8, r3
   b53a4:	d1e0      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b53a6:	f107 0114 	add.w	r1, r7, #20
   b53aa:	4638      	mov	r0, r7
   b53ac:	f002 f94c 	bl	b7648 <BlynkWidgetWrite>
   b53b0:	e7da      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b53b2:	f107 0114 	add.w	r1, r7, #20
   b53b6:	4638      	mov	r0, r7
   b53b8:	f002 f946 	bl	b7648 <BlynkWidgetWrite>
   b53bc:	e7d4      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b53be:	f107 0114 	add.w	r1, r7, #20
   b53c2:	4638      	mov	r0, r7
   b53c4:	f002 f940 	bl	b7648 <BlynkWidgetWrite>
   b53c8:	e7ce      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b53ca:	f107 0114 	add.w	r1, r7, #20
   b53ce:	4638      	mov	r0, r7
   b53d0:	f002 f93a 	bl	b7648 <BlynkWidgetWrite>
   b53d4:	e7c8      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b53d6:	f107 0114 	add.w	r1, r7, #20
   b53da:	4638      	mov	r0, r7
   b53dc:	f002 f934 	bl	b7648 <BlynkWidgetWrite>
   b53e0:	e7c2      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b53e2:	f107 0114 	add.w	r1, r7, #20
   b53e6:	4638      	mov	r0, r7
   b53e8:	f002 f92e 	bl	b7648 <BlynkWidgetWrite>
   b53ec:	e7bc      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b53ee:	bf00      	nop
   b53f0:	00736676 	.word	0x00736676
   b53f4:	00676264 	.word	0x00676264
   b53f8:	6e6f6361 	.word	0x6e6f6361

000b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b53fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5400:	4604      	mov	r4, r0
   b5402:	b08c      	sub	sp, #48	; 0x30
   b5404:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5406:	f7ff fbe1 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b540a:	7f63      	ldrb	r3, [r4, #29]
   b540c:	2b02      	cmp	r3, #2
   b540e:	d01e      	beq.n	b544e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b5410:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b5412:	8b62      	ldrh	r2, [r4, #26]
   b5414:	3301      	adds	r3, #1
   b5416:	b2db      	uxtb	r3, r3
   b5418:	7723      	strb	r3, [r4, #28]
   b541a:	b9aa      	cbnz	r2, b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b541c:	2b02      	cmp	r3, #2
   b541e:	d813      	bhi.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b5420:	6820      	ldr	r0, [r4, #0]
   b5422:	f005 ff23 	bl	bb26c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b5426:	b1a8      	cbz	r0, b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b5428:	b925      	cbnz	r5, b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b542a:	6820      	ldr	r0, [r4, #0]
   b542c:	f005 fffc 	bl	bb428 <_ZN9TCPClient9availableEv>
   b5430:	2800      	cmp	r0, #0
   b5432:	dd0f      	ble.n	b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b5434:	4620      	mov	r0, r4
   b5436:	f7ff fe7b 	bl	b5130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b543a:	2800      	cmp	r0, #0
   b543c:	d1f5      	bne.n	b542a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b543e:	6820      	ldr	r0, [r4, #0]
   b5440:	f006 f84c 	bl	bb4dc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5444:	f002 f901 	bl	b764a <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5448:	7f23      	ldrb	r3, [r4, #28]
   b544a:	3b01      	subs	r3, #1
   b544c:	7723      	strb	r3, [r4, #28]
}
   b544e:	b00c      	add	sp, #48	; 0x30
   b5450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b5454:	f002 f8f5 	bl	b7642 <_Z11BlynkMillisv>
   b5458:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b545a:	6820      	ldr	r0, [r4, #0]
   b545c:	f005 ff06 	bl	bb26c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b5460:	7f67      	ldrb	r7, [r4, #29]
   b5462:	2f01      	cmp	r7, #1
   b5464:	4606      	mov	r6, r0
   b5466:	d124      	bne.n	b54b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5468:	b920      	cbnz	r0, b5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b546a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b546c:	4620      	mov	r0, r4
   b546e:	f7ff fcc4 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b5472:	e7e9      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5474:	68e3      	ldr	r3, [r4, #12]
   b5476:	f24f 6218 	movw	r2, #63000	; 0xf618
   b547a:	1aeb      	subs	r3, r5, r3
   b547c:	4293      	cmp	r3, r2
   b547e:	d8f5      	bhi.n	b546c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5480:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5484:	4293      	cmp	r3, r2
   b5486:	d803      	bhi.n	b5490 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5488:	6923      	ldr	r3, [r4, #16]
   b548a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b548c:	4293      	cmp	r3, r2
   b548e:	d9db      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5490:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5492:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5496:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5498:	4293      	cmp	r3, r2
   b549a:	d9d5      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b549c:	2300      	movs	r3, #0
   b549e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b54a2:	9300      	str	r3, [sp, #0]
   b54a4:	461a      	mov	r2, r3
   b54a6:	2106      	movs	r1, #6
   b54a8:	4620      	mov	r0, r4
   b54aa:	f000 f84f 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b54ae:	6165      	str	r5, [r4, #20]
                return false;
   b54b0:	e7ca      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b54b2:	2f00      	cmp	r7, #0
   b54b4:	d1c8      	bne.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b54b6:	6963      	ldr	r3, [r4, #20]
   b54b8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b54ba:	b140      	cbz	r0, b54ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b54bc:	f241 7270 	movw	r2, #6000	; 0x1770
   b54c0:	4293      	cmp	r3, r2
   b54c2:	d9c1      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b54c4:	6820      	ldr	r0, [r4, #0]
   b54c6:	f006 f809 	bl	bb4dc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b54ca:	7767      	strb	r7, [r4, #29]
            return false;
   b54cc:	e7bc      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b54ce:	f241 3288 	movw	r2, #5000	; 0x1388
   b54d2:	4293      	cmp	r3, r2
   b54d4:	d9b8      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b54d6:	6820      	ldr	r0, [r4, #0]
   b54d8:	f006 f800 	bl	bb4dc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b54dc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b54e0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b54e4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b54e8:	f1be 0f00 	cmp.w	lr, #0
   b54ec:	d01b      	beq.n	b5526 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b54ee:	4633      	mov	r3, r6
   b54f0:	4642      	mov	r2, r8
   b54f2:	4671      	mov	r1, lr
   b54f4:	4660      	mov	r0, ip
   b54f6:	f005 fe3b 	bl	bb170 <_ZN9TCPClient7connectEPKctm>
   b54fa:	2801      	cmp	r0, #1
   b54fc:	d1d7      	bne.n	b54ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b54fe:	6863      	ldr	r3, [r4, #4]
   b5500:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5502:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5504:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5506:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5508:	f7ff fa78 	bl	b49fc <strlen>
   b550c:	2200      	movs	r2, #0
   b550e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5512:	9b05      	ldr	r3, [sp, #20]
   b5514:	9000      	str	r0, [sp, #0]
   b5516:	462a      	mov	r2, r5
   b5518:	211d      	movs	r1, #29
   b551a:	4620      	mov	r0, r4
   b551c:	f000 f816 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b5520:	6923      	ldr	r3, [r4, #16]
   b5522:	6163      	str	r3, [r4, #20]
            return true;
   b5524:	e790      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5526:	4b08      	ldr	r3, [pc, #32]	; (b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b5528:	9306      	str	r3, [sp, #24]
   b552a:	f10c 0720 	add.w	r7, ip, #32
   b552e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5530:	ae07      	add	r6, sp, #28
   b5532:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5534:	683b      	ldr	r3, [r7, #0]
   b5536:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b5538:	4642      	mov	r2, r8
   b553a:	4673      	mov	r3, lr
   b553c:	a906      	add	r1, sp, #24
   b553e:	4660      	mov	r0, ip
   b5540:	f005 fef6 	bl	bb330 <_ZN9TCPClient7connectE9IPAddresstm>
   b5544:	e7d9      	b.n	b54fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5546:	bf00      	nop
   b5548:	000bf43c 	.word	0x000bf43c

000b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5550:	b083      	sub	sp, #12
   b5552:	af00      	add	r7, sp, #0
   b5554:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5556:	6800      	ldr	r0, [r0, #0]
   b5558:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b555a:	4688      	mov	r8, r1
   b555c:	4616      	mov	r6, r2
   b555e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b5560:	46eb      	mov	fp, sp
   b5562:	f005 fe83 	bl	bb26c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5566:	2800      	cmp	r0, #0
   b5568:	f000 8081 	beq.w	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b556c:	f1b8 0f1d 	cmp.w	r8, #29
   b5570:	d804      	bhi.n	b557c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5572:	4b4d      	ldr	r3, [pc, #308]	; (b56a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5574:	fa23 f308 	lsr.w	r3, r3, r8
   b5578:	07db      	lsls	r3, r3, #31
   b557a:	d402      	bmi.n	b5582 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b557c:	7f63      	ldrb	r3, [r4, #29]
   b557e:	2b01      	cmp	r3, #1
   b5580:	d175      	bne.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5582:	b946      	cbnz	r6, b5596 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5584:	8b66      	ldrh	r6, [r4, #26]
   b5586:	b936      	cbnz	r6, b5596 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5588:	8b23      	ldrh	r3, [r4, #24]
   b558a:	3301      	adds	r3, #1
   b558c:	b29b      	uxth	r3, r3
   b558e:	2b00      	cmp	r3, #0
   b5590:	d072      	beq.n	b5678 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b5592:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5594:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5596:	f1a8 030c 	sub.w	r3, r8, #12
   b559a:	2b08      	cmp	r3, #8
   b559c:	d816      	bhi.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b559e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b55a2:	4293      	cmp	r3, r2
   b55a4:	bf38      	it	cc
   b55a6:	4613      	movcc	r3, r2
   b55a8:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b55ac:	f002 f849 	bl	b7642 <_Z11BlynkMillisv>
   b55b0:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b55b4:	2800      	cmp	r0, #0
   b55b6:	db61      	blt.n	b567c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b55b8:	2100      	movs	r1, #0
   b55ba:	4620      	mov	r0, r4
   b55bc:	f7ff ff1e 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b55c0:	f002 f83f 	bl	b7642 <_Z11BlynkMillisv>
   b55c4:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b55c8:	2800      	cmp	r0, #0
   b55ca:	daf5      	bge.n	b55b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b55cc:	f1b9 0f00 	cmp.w	r9, #0
   b55d0:	d05b      	beq.n	b568a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b55d2:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b55d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b55d6:	2a00      	cmp	r2, #0
   b55d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b55da:	bf08      	it	eq
   b55dc:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b55de:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b55e2:	f10a 0307 	add.w	r3, sl, #7
   b55e6:	f023 0307 	bic.w	r3, r3, #7
   b55ea:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b55ee:	4630      	mov	r0, r6
    hdr->type = cmd;
   b55f0:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b55f4:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b55f8:	f002 f942 	bl	b7880 <inet_htons>
    hdr->length = htons(length+length2);
   b55fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b55fe:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5602:	18e8      	adds	r0, r5, r3
   b5604:	b280      	uxth	r0, r0
   b5606:	f002 f93b 	bl	b7880 <inet_htons>
   b560a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b560e:	f1b9 0f00 	cmp.w	r9, #0
   b5612:	d03c      	beq.n	b568e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b5614:	2d00      	cmp	r5, #0
   b5616:	d03a      	beq.n	b568e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5618:	462a      	mov	r2, r5
   b561a:	4649      	mov	r1, r9
   b561c:	f10d 0005 	add.w	r0, sp, #5
   b5620:	f006 fcfe 	bl	bc020 <memcpy>
        pos += length;
   b5624:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5628:	b13b      	cbz	r3, b563a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b562c:	b12b      	cbz	r3, b563a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b562e:	461a      	mov	r2, r3
   b5630:	687b      	ldr	r3, [r7, #4]
   b5632:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b5634:	4418      	add	r0, r3
   b5636:	f006 fcf3 	bl	bc020 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b563a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b563c:	4555      	cmp	r5, sl
   b563e:	d22a      	bcs.n	b5696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5640:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5644:	687b      	ldr	r3, [r7, #4]
   b5646:	6820      	ldr	r0, [r4, #0]
   b5648:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b564c:	bf28      	it	cs
   b564e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5652:	1959      	adds	r1, r3, r5
   b5654:	f005 fce1 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
   b5658:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b565a:	2000      	movs	r0, #0
   b565c:	f001 ffef 	bl	b763e <_Z10BlynkDelaym>
        if (w == 0) {
   b5660:	b9be      	cbnz	r6, b5692 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b5662:	6820      	ldr	r0, [r4, #0]
   b5664:	f005 ff3a 	bl	bb4dc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5668:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b566a:	f001 ffee 	bl	b764a <BlynkNoOpCbk>
}
   b566e:	370c      	adds	r7, #12
   b5670:	46dd      	mov	sp, fp
   b5672:	46bd      	mov	sp, r7
   b5674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5678:	2301      	movs	r3, #1
   b567a:	e78a      	b.n	b5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b567c:	7f21      	ldrb	r1, [r4, #28]
   b567e:	2900      	cmp	r1, #0
   b5680:	d1a4      	bne.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5682:	4620      	mov	r0, r4
   b5684:	f7ff feba 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5688:	e7a0      	b.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b568a:	2305      	movs	r3, #5
   b568c:	e7a2      	b.n	b55d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b568e:	2005      	movs	r0, #5
   b5690:	e7c9      	b.n	b5626 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b5692:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5694:	e7d2      	b.n	b563c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5696:	d003      	beq.n	b56a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5698:	4620      	mov	r0, r4
   b569a:	f7ff fbae 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b569e:	e7e6      	b.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b56a0:	f001 ffcf 	bl	b7642 <_Z11BlynkMillisv>
   b56a4:	6120      	str	r0, [r4, #16]
   b56a6:	e7e2      	b.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b56a8:	20000045 	.word	0x20000045

000b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b56ac:	b530      	push	{r4, r5, lr}
   b56ae:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56b0:	ab08      	add	r3, sp, #32
   b56b2:	4604      	mov	r4, r0
   b56b4:	9305      	str	r3, [sp, #20]
   b56b6:	2500      	movs	r5, #0
   b56b8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b56ba:	a805      	add	r0, sp, #20
   b56bc:	490b      	ldr	r1, [pc, #44]	; (b56ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56be:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b56c2:	f7ff fb34 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        add(val);
   b56c6:	a805      	add	r0, sp, #20
   b56c8:	4909      	ldr	r1, [pc, #36]	; (b56f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b56ca:	f7ff fb30 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b56ce:	9b06      	ldr	r3, [sp, #24]
   b56d0:	9302      	str	r3, [sp, #8]
   b56d2:	9b05      	ldr	r3, [sp, #20]
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	2365      	movs	r3, #101	; 0x65
   b56d8:	9300      	str	r3, [sp, #0]
   b56da:	462a      	mov	r2, r5
   b56dc:	4b05      	ldr	r3, [pc, #20]	; (b56f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b56de:	2111      	movs	r1, #17
   b56e0:	4620      	mov	r0, r4
   b56e2:	f7ff ff33 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b56e6:	b019      	add	sp, #100	; 0x64
   b56e8:	bd30      	pop	{r4, r5, pc}
   b56ea:	bf00      	nop
   b56ec:	000be15f 	.word	0x000be15f
   b56f0:	000be164 	.word	0x000be164
   b56f4:	000be258 	.word	0x000be258

000b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b56f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56fa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56fe:	ab08      	add	r3, sp, #32
   b5700:	2400      	movs	r4, #0
   b5702:	4605      	mov	r5, r0
   b5704:	460f      	mov	r7, r1
   b5706:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b5708:	a805      	add	r0, sp, #20
   b570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b570e:	490e      	ldr	r1, [pc, #56]	; (b5748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b5710:	4616      	mov	r6, r2
   b5712:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b5716:	f7ff fb0a 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b571a:	4639      	mov	r1, r7
   b571c:	a805      	add	r0, sp, #20
   b571e:	f7ff fb23 	bl	b4d68 <_ZN10BlynkParam3addEi>
        add(last);
   b5722:	4631      	mov	r1, r6
   b5724:	a805      	add	r0, sp, #20
   b5726:	f7ff fb1f 	bl	b4d68 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b572a:	9b06      	ldr	r3, [sp, #24]
   b572c:	3b01      	subs	r3, #1
   b572e:	9300      	str	r3, [sp, #0]
   b5730:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5734:	9b05      	ldr	r3, [sp, #20]
   b5736:	4622      	mov	r2, r4
   b5738:	2114      	movs	r1, #20
   b573a:	4628      	mov	r0, r5
   b573c:	f7ff ff06 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5740:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b5744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5746:	bf00      	nop
   b5748:	000be172 	.word	0x000be172

000b574c <loop>:
void loop() {
   b574c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  display.loop();
   b5750:	4848      	ldr	r0, [pc, #288]	; (b5874 <loop+0x128>)
  if (!Argon1_distance) {
   b5752:	4c49      	ldr	r4, [pc, #292]	; (b5878 <loop+0x12c>)
  display.loop();
   b5754:	f000 fe43 	bl	b63de <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b5758:	4848      	ldr	r0, [pc, #288]	; (b587c <loop+0x130>)
   b575a:	2100      	movs	r1, #0
   b575c:	f7ff fe4e 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  format_display();
   b5760:	f7ff fb26 	bl	b4db0 <_Z14format_displayv>
  display.print("A1 : ");
   b5764:	4946      	ldr	r1, [pc, #280]	; (b5880 <loop+0x134>)
   b5766:	4843      	ldr	r0, [pc, #268]	; (b5874 <loop+0x128>)
   b5768:	f004 f960 	bl	b9a2c <_ZN5Print5printEPKc>
  if (!Argon1_distance) {
   b576c:	6821      	ldr	r1, [r4, #0]
   b576e:	2900      	cmp	r1, #0
   b5770:	d15b      	bne.n	b582a <loop+0xde>
    display.println("No data");
   b5772:	4944      	ldr	r1, [pc, #272]	; (b5884 <loop+0x138>)
   b5774:	483f      	ldr	r0, [pc, #252]	; (b5874 <loop+0x128>)
   b5776:	f004 f96c 	bl	b9a52 <_ZN5Print7printlnEPKc>
  if (!Argon2_distance) {
   b577a:	4f43      	ldr	r7, [pc, #268]	; (b5888 <loop+0x13c>)
  display.print("A2 : ");
   b577c:	4943      	ldr	r1, [pc, #268]	; (b588c <loop+0x140>)
   b577e:	483d      	ldr	r0, [pc, #244]	; (b5874 <loop+0x128>)
   b5780:	f004 f954 	bl	b9a2c <_ZN5Print5printEPKc>
  if (!Argon2_distance) {
   b5784:	6839      	ldr	r1, [r7, #0]
   b5786:	2900      	cmp	r1, #0
   b5788:	d154      	bne.n	b5834 <loop+0xe8>
    display.println("No data");
   b578a:	493e      	ldr	r1, [pc, #248]	; (b5884 <loop+0x138>)
   b578c:	4839      	ldr	r0, [pc, #228]	; (b5874 <loop+0x128>)
   b578e:	f004 f960 	bl	b9a52 <_ZN5Print7printlnEPKc>
  if (!Argon3_distance) {
   b5792:	4e3f      	ldr	r6, [pc, #252]	; (b5890 <loop+0x144>)
  display.print("A3 : ");
   b5794:	493f      	ldr	r1, [pc, #252]	; (b5894 <loop+0x148>)
   b5796:	4837      	ldr	r0, [pc, #220]	; (b5874 <loop+0x128>)
   b5798:	f004 f948 	bl	b9a2c <_ZN5Print5printEPKc>
  if (!Argon3_distance) {
   b579c:	6831      	ldr	r1, [r6, #0]
   b579e:	2900      	cmp	r1, #0
   b57a0:	d14d      	bne.n	b583e <loop+0xf2>
    display.println("No data");
   b57a2:	4938      	ldr	r1, [pc, #224]	; (b5884 <loop+0x138>)
   b57a4:	4833      	ldr	r0, [pc, #204]	; (b5874 <loop+0x128>)
   b57a6:	f004 f954 	bl	b9a52 <_ZN5Print7printlnEPKc>
	rssi = 0;
   b57aa:	4d3b      	ldr	r5, [pc, #236]	; (b5898 <loop+0x14c>)
  display.display();
   b57ac:	4831      	ldr	r0, [pc, #196]	; (b5874 <loop+0x128>)
	rssi = 0;
   b57ae:	f04f 0800 	mov.w	r8, #0
  display.display();
   b57b2:	f001 fea1 	bl	b74f8 <_ZN16Adafruit_SSD13067displayEv>
	rssi = 0;
   b57b6:	f8c5 8000 	str.w	r8, [r5]
	BLE.scan(scanResultCallback, NULL);
   b57ba:	f002 ffed 	bl	b8798 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57be:	4937      	ldr	r1, [pc, #220]	; (b589c <loop+0x150>)
   b57c0:	4642      	mov	r2, r8
   b57c2:	f003 ff9f 	bl	b9704 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
	if (rssi) {
   b57c6:	682b      	ldr	r3, [r5, #0]
   b57c8:	b1b3      	cbz	r3, b57f8 <loop+0xac>
		if (client.isConnected()) {
   b57ca:	4835      	ldr	r0, [pc, #212]	; (b58a0 <loop+0x154>)
    Argon1_distance = rssi;
   b57cc:	6023      	str	r3, [r4, #0]
		if (client.isConnected()) {
   b57ce:	f000 ff91 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b57d2:	b188      	cbz	r0, b57f8 <loop+0xac>
			string_rssi = String(rssi);
   b57d4:	6829      	ldr	r1, [r5, #0]
   b57d6:	4d33      	ldr	r5, [pc, #204]	; (b58a4 <loop+0x158>)
   b57d8:	220a      	movs	r2, #10
   b57da:	4668      	mov	r0, sp
   b57dc:	f002 fcd5 	bl	b818a <_ZN6StringC1Eih>
   b57e0:	4669      	mov	r1, sp
   b57e2:	4628      	mov	r0, r5
   b57e4:	f002 fcb7 	bl	b8156 <_ZN6StringaSEOS_>
   b57e8:	4668      	mov	r0, sp
   b57ea:	f002 fc13 	bl	b8014 <_ZN6StringD1Ev>
			client.publish("BAR/argon1/RSSI", string_rssi);
   b57ee:	682a      	ldr	r2, [r5, #0]
   b57f0:	492d      	ldr	r1, [pc, #180]	; (b58a8 <loop+0x15c>)
   b57f2:	482b      	ldr	r0, [pc, #172]	; (b58a0 <loop+0x154>)
   b57f4:	f001 f8f9 	bl	b69ea <_ZN4MQTT7publishEPKcS1_>
	if (client.isConnected()) {
   b57f8:	4829      	ldr	r0, [pc, #164]	; (b58a0 <loop+0x154>)
   b57fa:	f000 ff7b 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b57fe:	b318      	cbz	r0, b5848 <loop+0xfc>
		client.loop();
   b5800:	4827      	ldr	r0, [pc, #156]	; (b58a0 <loop+0x154>)
   b5802:	f001 f94e 	bl	b6aa2 <_ZN4MQTT4loopEv>
  Blynk.virtualWrite(V0, Argon1_distance);
   b5806:	6822      	ldr	r2, [r4, #0]
   b5808:	481c      	ldr	r0, [pc, #112]	; (b587c <loop+0x130>)
   b580a:	2100      	movs	r1, #0
   b580c:	f7ff ff74 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V1, Argon2_distance);
   b5810:	683a      	ldr	r2, [r7, #0]
   b5812:	481a      	ldr	r0, [pc, #104]	; (b587c <loop+0x130>)
   b5814:	2101      	movs	r1, #1
   b5816:	f7ff ff6f 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, Argon3_distance);
   b581a:	6832      	ldr	r2, [r6, #0]
   b581c:	4817      	ldr	r0, [pc, #92]	; (b587c <loop+0x130>)
   b581e:	2102      	movs	r1, #2
   b5820:	f7ff ff6a 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
   b5824:	b004      	add	sp, #16
   b5826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    display.println(Argon1_distance);
   b582a:	4812      	ldr	r0, [pc, #72]	; (b5874 <loop+0x128>)
   b582c:	220a      	movs	r2, #10
   b582e:	f7ff f95e 	bl	b4aee <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b5832:	e7a2      	b.n	b577a <loop+0x2e>
    display.println(Argon2_distance);
   b5834:	480f      	ldr	r0, [pc, #60]	; (b5874 <loop+0x128>)
   b5836:	220a      	movs	r2, #10
   b5838:	f7ff f959 	bl	b4aee <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b583c:	e7a9      	b.n	b5792 <loop+0x46>
    display.println(Argon3_distance);
   b583e:	480d      	ldr	r0, [pc, #52]	; (b5874 <loop+0x128>)
   b5840:	220a      	movs	r2, #10
   b5842:	f7ff f954 	bl	b4aee <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b5846:	e7b0      	b.n	b57aa <loop+0x5e>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b5848:	4668      	mov	r0, sp
   b584a:	f002 fa35 	bl	b7cb8 <spark_deviceID>
		client.connect(System.deviceID());
   b584e:	9900      	ldr	r1, [sp, #0]
   b5850:	4813      	ldr	r0, [pc, #76]	; (b58a0 <loop+0x154>)
   b5852:	f001 f83f 	bl	b68d4 <_ZN4MQTT7connectEPKc>
   b5856:	4668      	mov	r0, sp
   b5858:	f002 fbdc 	bl	b8014 <_ZN6StringD1Ev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b585c:	4b13      	ldr	r3, [pc, #76]	; (b58ac <loop+0x160>)
    client.subscribe(A2_RSSI);
   b585e:	4810      	ldr	r0, [pc, #64]	; (b58a0 <loop+0x154>)
   b5860:	6819      	ldr	r1, [r3, #0]
   b5862:	f001 fa66 	bl	b6d32 <_ZN4MQTT9subscribeEPKc>
   b5866:	4b12      	ldr	r3, [pc, #72]	; (b58b0 <loop+0x164>)
    client.subscribe(A3_RSSI);
   b5868:	480d      	ldr	r0, [pc, #52]	; (b58a0 <loop+0x154>)
   b586a:	6819      	ldr	r1, [r3, #0]
   b586c:	f001 fa61 	bl	b6d32 <_ZN4MQTT9subscribeEPKc>
   b5870:	e7c9      	b.n	b5806 <loop+0xba>
   b5872:	bf00      	nop
   b5874:	2003e5b8 	.word	0x2003e5b8
   b5878:	2003e4f0 	.word	0x2003e4f0
   b587c:	2003e4fc 	.word	0x2003e4fc
   b5880:	000be175 	.word	0x000be175
   b5884:	000be17b 	.word	0x000be17b
   b5888:	2003e4f4 	.word	0x2003e4f4
   b588c:	000be183 	.word	0x000be183
   b5890:	2003e4f8 	.word	0x2003e4f8
   b5894:	000be189 	.word	0x000be189
   b5898:	2003e654 	.word	0x2003e654
   b589c:	000b4c5d 	.word	0x000b4c5d
   b58a0:	2003e558 	.word	0x2003e558
   b58a4:	2003e66c 	.word	0x2003e66c
   b58a8:	000be18f 	.word	0x000be18f
   b58ac:	2003e4d0 	.word	0x2003e4d0
   b58b0:	2003e4e0 	.word	0x2003e4e0

000b58b4 <setup>:
void setup() {
   b58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b6:	b085      	sub	sp, #20
  Serial.begin(9600);
   b58b8:	f005 fabe 	bl	bae38 <_Z16_fetch_usbserialv>
   b58bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b58c0:	f005 faaa 	bl	bae18 <_ZN9USBSerial5beginEl>
  display.setup();
   b58c4:	4827      	ldr	r0, [pc, #156]	; (b5964 <setup+0xb0>)
        this->authkey = auth;
   b58c6:	4c28      	ldr	r4, [pc, #160]	; (b5968 <setup+0xb4>)
   b58c8:	f000 fd60 	bl	b638c <_ZN16OledWingAdafruit5setupEv>
	BLE.on();
   b58cc:	f002 ff64 	bl	b8798 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d0:	f002 ff7e 	bl	b87d0 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.setAdvertisingInterval(20);
   b58d4:	f002 ff60 	bl	b8798 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d8:	2114      	movs	r1, #20
   b58da:	f002 ff80 	bl	b87de <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
   b58de:	4668      	mov	r0, sp
   b58e0:	f002 f9ea 	bl	b7cb8 <spark_deviceID>
  client.connect(System.deviceID());
   b58e4:	9900      	ldr	r1, [sp, #0]
   b58e6:	4821      	ldr	r0, [pc, #132]	; (b596c <setup+0xb8>)
   b58e8:	f000 fff4 	bl	b68d4 <_ZN4MQTT7connectEPKc>
   b58ec:	4668      	mov	r0, sp
   b58ee:	f002 fb91 	bl	b8014 <_ZN6StringD1Ev>
   b58f2:	4b1f      	ldr	r3, [pc, #124]	; (b5970 <setup+0xbc>)
  client.subscribe(A2_RSSI);
   b58f4:	481d      	ldr	r0, [pc, #116]	; (b596c <setup+0xb8>)
   b58f6:	6819      	ldr	r1, [r3, #0]
   b58f8:	f001 fa1b 	bl	b6d32 <_ZN4MQTT9subscribeEPKc>
   b58fc:	4b1d      	ldr	r3, [pc, #116]	; (b5974 <setup+0xc0>)
  client.subscribe(A3_RSSI);
   b58fe:	481b      	ldr	r0, [pc, #108]	; (b596c <setup+0xb8>)
   b5900:	6819      	ldr	r1, [r3, #0]
   b5902:	f001 fa16 	bl	b6d32 <_ZN4MQTT9subscribeEPKc>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5906:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b590a:	f001 fe98 	bl	b763e <_Z10BlynkDelaym>
   b590e:	4b1a      	ldr	r3, [pc, #104]	; (b5978 <setup+0xc4>)
   b5910:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5912:	f001 fe96 	bl	b7642 <_Z11BlynkMillisv>
   b5916:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b591a:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b591c:	4a17      	ldr	r2, [pc, #92]	; (b597c <setup+0xc8>)
   b591e:	635a      	str	r2, [r3, #52]	; 0x34
   b5920:	3808      	subs	r0, #8
   b5922:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b5926:	2250      	movs	r2, #80	; 0x50
   b5928:	6160      	str	r0, [r4, #20]
   b592a:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b592c:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b592e:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5932:	6820      	ldr	r0, [r4, #0]
   b5934:	f005 fdd2 	bl	bb4dc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5938:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b593a:	f001 fe82 	bl	b7642 <_Z11BlynkMillisv>
   b593e:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5940:	7f63      	ldrb	r3, [r4, #29]
   b5942:	2b01      	cmp	r3, #1
   b5944:	d00c      	beq.n	b5960 <setup+0xac>
               (BlynkMillis() - started < timeout))
   b5946:	f001 fe7c 	bl	b7642 <_Z11BlynkMillisv>
   b594a:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b594c:	42b8      	cmp	r0, r7
   b594e:	d804      	bhi.n	b595a <setup+0xa6>
            run();
   b5950:	2100      	movs	r1, #0
   b5952:	4620      	mov	r0, r4
   b5954:	f7ff fd52 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5958:	e7f2      	b.n	b5940 <setup+0x8c>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b595a:	7f63      	ldrb	r3, [r4, #29]
   b595c:	2b01      	cmp	r3, #1
   b595e:	d1e8      	bne.n	b5932 <setup+0x7e>
}
   b5960:	b005      	add	sp, #20
   b5962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5964:	2003e5b8 	.word	0x2003e5b8
   b5968:	2003e4fc 	.word	0x2003e4fc
   b596c:	2003e558 	.word	0x2003e558
   b5970:	2003e4d0 	.word	0x2003e4d0
   b5974:	2003e4e0 	.word	0x2003e4e0
   b5978:	000be19f 	.word	0x000be19f
   b597c:	000be1c0 	.word	0x000be1c0

000b5980 <_GLOBAL__sub_I_Blynk>:
   b5980:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b5982:	4d39      	ldr	r5, [pc, #228]	; (b5a68 <_GLOBAL__sub_I_Blynk+0xe8>)
   b5984:	b08e      	sub	sp, #56	; 0x38
   b5986:	4628      	mov	r0, r5
   b5988:	f005 fdf2 	bl	bb570 <_ZN9TCPClientC1Ev>
   b598c:	f105 001c 	add.w	r0, r5, #28
   b5990:	f005 f99c 	bl	baccc <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5994:	4b35      	ldr	r3, [pc, #212]	; (b5a6c <_GLOBAL__sub_I_Blynk+0xec>)
   b5996:	2400      	movs	r4, #0
   b5998:	e9c3 5400 	strd	r5, r4, [r3]
   b599c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b59a0:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b59a4:	636c      	str	r4, [r5, #52]	; 0x34
   b59a6:	872c      	strh	r4, [r5, #56]	; 0x38
   b59a8:	619c      	str	r4, [r3, #24]
   b59aa:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b59ac:	4621      	mov	r1, r4
   b59ae:	2001      	movs	r0, #1
   b59b0:	f002 f8fe 	bl	b7bb0 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b59b4:	f240 725b 	movw	r2, #1883	; 0x75b
   b59b8:	4b2d      	ldr	r3, [pc, #180]	; (b5a70 <_GLOBAL__sub_I_Blynk+0xf0>)
   b59ba:	9400      	str	r4, [sp, #0]
   b59bc:	492d      	ldr	r1, [pc, #180]	; (b5a74 <_GLOBAL__sub_I_Blynk+0xf4>)
   b59be:	482e      	ldr	r0, [pc, #184]	; (b5a78 <_GLOBAL__sub_I_Blynk+0xf8>)
   b59c0:	f000 fdbc 	bl	b653c <_ZN4MQTTC1EPKctPFvPcPhjEb>
String A2_RSSI = "BAR/argon2/RSSI";
   b59c4:	492d      	ldr	r1, [pc, #180]	; (b5a7c <_GLOBAL__sub_I_Blynk+0xfc>)
   b59c6:	482e      	ldr	r0, [pc, #184]	; (b5a80 <_GLOBAL__sub_I_Blynk+0x100>)
   b59c8:	f002 fb6f 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
String A3_RSSI = "BAR/argon3/RSSI";
   b59cc:	492d      	ldr	r1, [pc, #180]	; (b5a84 <_GLOBAL__sub_I_Blynk+0x104>)
   b59ce:	482e      	ldr	r0, [pc, #184]	; (b5a88 <_GLOBAL__sub_I_Blynk+0x108>)
   b59d0:	f002 fb6b 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
OledWingAdafruit display;
   b59d4:	2107      	movs	r1, #7
   b59d6:	482d      	ldr	r0, [pc, #180]	; (b5a8c <_GLOBAL__sub_I_Blynk+0x10c>)
   b59d8:	f000 fcaa 	bl	b6330 <_ZN16OledWingAdafruitC1Ei>
        capacity_(0) {
   b59dc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b59e0:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b59e2:	f005 fa29 	bl	bae38 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b59e6:	4c2a      	ldr	r4, [pc, #168]	; (b5a90 <_GLOBAL__sub_I_Blynk+0x110>)
   b59e8:	4605      	mov	r5, r0
   b59ea:	a902      	add	r1, sp, #8
   b59ec:	a805      	add	r0, sp, #20
   b59ee:	f7ff fa3c 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b59f2:	4626      	mov	r6, r4
        stream_(&stream) {
   b59f4:	a905      	add	r1, sp, #20
   b59f6:	a808      	add	r0, sp, #32
   b59f8:	f7ff fa37 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b59fc:	4b25      	ldr	r3, [pc, #148]	; (b5a94 <_GLOBAL__sub_I_Blynk+0x114>)
   b59fe:	f846 3b04 	str.w	r3, [r6], #4
   b5a02:	a908      	add	r1, sp, #32
   b5a04:	a80b      	add	r0, sp, #44	; 0x2c
   b5a06:	f7ff fa30 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a0a:	aa0b      	add	r2, sp, #44	; 0x2c
   b5a0c:	211e      	movs	r1, #30
   b5a0e:	4630      	mov	r0, r6
   b5a10:	f004 fd46 	bl	ba4a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5a14:	a80b      	add	r0, sp, #44	; 0x2c
   b5a16:	f7ff f9dd 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5a1a:	a808      	add	r0, sp, #32
   b5a1c:	f7ff f9da 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a20:	4b1d      	ldr	r3, [pc, #116]	; (b5a98 <_GLOBAL__sub_I_Blynk+0x118>)
   b5a22:	6023      	str	r3, [r4, #0]
   b5a24:	6225      	str	r5, [r4, #32]
   b5a26:	a805      	add	r0, sp, #20
   b5a28:	f7ff f9d4 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a2c:	4b1b      	ldr	r3, [pc, #108]	; (b5a9c <_GLOBAL__sub_I_Blynk+0x11c>)
   b5a2e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5a30:	f005 fa02 	bl	bae38 <_Z16_fetch_usbserialv>
   b5a34:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a38:	f005 f9ee 	bl	bae18 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5a3c:	f004 fa12 	bl	b9e64 <_ZN5spark10LogManager8instanceEv>
   b5a40:	4621      	mov	r1, r4
   b5a42:	f004 fc03 	bl	ba24c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b5a46:	a802      	add	r0, sp, #8
   b5a48:	f7ff f9c4 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b5a4c:	4914      	ldr	r1, [pc, #80]	; (b5aa0 <_GLOBAL__sub_I_Blynk+0x120>)
   b5a4e:	4815      	ldr	r0, [pc, #84]	; (b5aa4 <_GLOBAL__sub_I_Blynk+0x124>)
   b5a50:	f002 fd9c 	bl	b858c <_ZN8particle7BleUuidC1EPKc>
BleAddress peripheralAddr;
   b5a54:	4814      	ldr	r0, [pc, #80]	; (b5aa8 <_GLOBAL__sub_I_Blynk+0x128>)
   b5a56:	f002 fcd6 	bl	b8406 <_ZN8particle10BleAddressC1Ev>
String string_rssi;
   b5a5a:	4914      	ldr	r1, [pc, #80]	; (b5aac <_GLOBAL__sub_I_Blynk+0x12c>)
   b5a5c:	4814      	ldr	r0, [pc, #80]	; (b5ab0 <_GLOBAL__sub_I_Blynk+0x130>)
   b5a5e:	b00e      	add	sp, #56	; 0x38
   b5a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String string_rssi;
   b5a64:	f002 bb21 	b.w	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5a68:	2003e51c 	.word	0x2003e51c
   b5a6c:	2003e4fc 	.word	0x2003e4fc
   b5a70:	000b4b29 	.word	0x000b4b29
   b5a74:	000be1cc 	.word	0x000be1cc
   b5a78:	2003e558 	.word	0x2003e558
   b5a7c:	000be1db 	.word	0x000be1db
   b5a80:	2003e4d0 	.word	0x2003e4d0
   b5a84:	000be1eb 	.word	0x000be1eb
   b5a88:	2003e4e0 	.word	0x2003e4e0
   b5a8c:	2003e5b8 	.word	0x2003e5b8
   b5a90:	2003e628 	.word	0x2003e628
   b5a94:	000be228 	.word	0x000be228
   b5a98:	000bf3c0 	.word	0x000bf3c0
   b5a9c:	000be240 	.word	0x000be240
   b5aa0:	000be1fb 	.word	0x000be1fb
   b5aa4:	2003e658 	.word	0x2003e658
   b5aa8:	2003e64c 	.word	0x2003e64c
   b5aac:	000bf38b 	.word	0x000bf38b
   b5ab0:	2003e66c 	.word	0x2003e66c

000b5ab4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5ab4:	4770      	bx	lr

000b5ab6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5ab6:	b510      	push	{r4, lr}
  }
   b5ab8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5aba:	4604      	mov	r4, r0
  }
   b5abc:	f7fe ffff 	bl	b4abe <_ZdlPvj>
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	bd10      	pop	{r4, pc}

000b5ac4 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5ac4:	b40e      	push	{r1, r2, r3}
   b5ac6:	b503      	push	{r0, r1, lr}
   b5ac8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5aca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5acc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5ad0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5ad2:	f003 ffe6 	bl	b9aa2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5ad6:	b002      	add	sp, #8
   b5ad8:	f85d eb04 	ldr.w	lr, [sp], #4
   b5adc:	b003      	add	sp, #12
   b5ade:	4770      	bx	lr

000b5ae0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ae2:	4604      	mov	r4, r0
   b5ae4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5ae6:	7922      	ldrb	r2, [r4, #4]
   b5ae8:	68a3      	ldr	r3, [r4, #8]
   b5aea:	b132      	cbz	r2, b5afa <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5aec:	b9a3      	cbnz	r3, b5b18 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5aee:	490b      	ldr	r1, [pc, #44]	; (b5b1c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5af0:	b002      	add	sp, #8
   b5af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5af6:	f003 bf99 	b.w	b9a2c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5afa:	4a09      	ldr	r2, [pc, #36]	; (b5b20 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5afc:	7b26      	ldrb	r6, [r4, #12]
   b5afe:	4d09      	ldr	r5, [pc, #36]	; (b5b24 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5b00:	4909      	ldr	r1, [pc, #36]	; (b5b28 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5b02:	7b64      	ldrb	r4, [r4, #13]
   b5b04:	2e01      	cmp	r6, #1
   b5b06:	bf18      	it	ne
   b5b08:	4629      	movne	r1, r5
   b5b0a:	e9cd 1400 	strd	r1, r4, [sp]
   b5b0e:	4907      	ldr	r1, [pc, #28]	; (b5b2c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5b10:	f7ff ffd8 	bl	b5ac4 <_ZN5Print6printfEPKcz>
  }
   b5b14:	b002      	add	sp, #8
   b5b16:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5b18:	4a05      	ldr	r2, [pc, #20]	; (b5b30 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5b1a:	e7ef      	b.n	b5afc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5b1c:	000be2d0 	.word	0x000be2d0
   b5b20:	000bf38b 	.word	0x000bf38b
   b5b24:	000be2cc 	.word	0x000be2cc
   b5b28:	000be2c8 	.word	0x000be2c8
   b5b2c:	000be2e6 	.word	0x000be2e6
   b5b30:	000be2bf 	.word	0x000be2bf

000b5b34 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b38:	b085      	sub	sp, #20
   b5b3a:	461f      	mov	r7, r3
   b5b3c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5b40:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5b44:	eba8 0902 	sub.w	r9, r8, r2
   b5b48:	eba7 0a01 	sub.w	sl, r7, r1
   b5b4c:	f1b9 0f00 	cmp.w	r9, #0
   b5b50:	bfb8      	it	lt
   b5b52:	f1c9 0900 	rsblt	r9, r9, #0
   b5b56:	f1ba 0f00 	cmp.w	sl, #0
   b5b5a:	bfb8      	it	lt
   b5b5c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5b60:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5b62:	4683      	mov	fp, r0
   b5b64:	460c      	mov	r4, r1
   b5b66:	4615      	mov	r5, r2
    if (steep) {
   b5b68:	dd04      	ble.n	b5b74 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5b6a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5b6c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5b6e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5b70:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5b72:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5b74:	42bc      	cmp	r4, r7
   b5b76:	dd05      	ble.n	b5b84 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5b78:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5b7a:	4645      	mov	r5, r8
   b5b7c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5b7e:	4622      	mov	r2, r4
   b5b80:	463c      	mov	r4, r7
   b5b82:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5b84:	1b3e      	subs	r6, r7, r4
   b5b86:	b2b2      	uxth	r2, r6
   b5b88:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5b8a:	eba8 0205 	sub.w	r2, r8, r5
   b5b8e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5b92:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5b96:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5b9a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5b9e:	4545      	cmp	r5, r8
   b5ba0:	bfb4      	ite	lt
   b5ba2:	2201      	movlt	r2, #1
   b5ba4:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5ba8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5baa:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5bac:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5bae:	42bc      	cmp	r4, r7
   b5bb0:	dc1c      	bgt.n	b5bec <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5bb2:	f8db 2000 	ldr.w	r2, [fp]
   b5bb6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5bb8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5bba:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5bbe:	bfc7      	ittee	gt
   b5bc0:	4629      	movgt	r1, r5
   b5bc2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5bc4:	462a      	movle	r2, r5
   b5bc6:	4621      	movle	r1, r4
   b5bc8:	4658      	mov	r0, fp
   b5bca:	47c0      	blx	r8
        }
        err -= dy;
   b5bcc:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5bce:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5bd0:	1ab6      	subs	r6, r6, r2
   b5bd2:	b2b1      	uxth	r1, r6
   b5bd4:	b236      	sxth	r6, r6
        if (err < 0) {
   b5bd6:	2e00      	cmp	r6, #0
   b5bd8:	da05      	bge.n	b5be6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5bda:	9a02      	ldr	r2, [sp, #8]
   b5bdc:	4415      	add	r5, r2
            err += dx;
   b5bde:	9a00      	ldr	r2, [sp, #0]
   b5be0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5be2:	b22d      	sxth	r5, r5
            err += dx;
   b5be4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5be6:	3401      	adds	r4, #1
   b5be8:	b224      	sxth	r4, r4
   b5bea:	e7e0      	b.n	b5bae <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5bec:	b005      	add	sp, #20
   b5bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5bf2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5bf2:	4770      	bx	lr

000b5bf4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5bf4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5bf6:	6804      	ldr	r4, [r0, #0]
   b5bf8:	6924      	ldr	r4, [r4, #16]
   b5bfa:	46a4      	mov	ip, r4
}
   b5bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5c00:	4760      	bx	ip

000b5c02 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5c02:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5c04:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5c06:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5c0a:	9502      	str	r5, [sp, #8]
   b5c0c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5c0e:	46a4      	mov	ip, r4
}
   b5c10:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5c12:	4760      	bx	ip

000b5c14 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5c14:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5c16:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5c18:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5c1c:	9502      	str	r5, [sp, #8]
   b5c1e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5c20:	46a4      	mov	ip, r4
}
   b5c22:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5c24:	4760      	bx	ip

000b5c26 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c26:	b470      	push	{r4, r5, r6}
   b5c28:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5c2c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5c30:	6804      	ldr	r4, [r0, #0]
   b5c32:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5c36:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5c38:	46a4      	mov	ip, r4
}
   b5c3a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5c3c:	4760      	bx	ip

000b5c3e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5c3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c42:	461c      	mov	r4, r3
    startWrite();
   b5c44:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5c46:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5c4a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5c4c:	4605      	mov	r5, r0
   b5c4e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5c50:	3c01      	subs	r4, #1
   b5c52:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5c54:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5c56:	b224      	sxth	r4, r4
    startWrite();
   b5c58:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5c5a:	682b      	ldr	r3, [r5, #0]
   b5c5c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5c60:	9400      	str	r4, [sp, #0]
   b5c62:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5c64:	4628      	mov	r0, r5
   b5c66:	463b      	mov	r3, r7
   b5c68:	4632      	mov	r2, r6
   b5c6a:	4639      	mov	r1, r7
   b5c6c:	47a0      	blx	r4
    endWrite();
   b5c6e:	682b      	ldr	r3, [r5, #0]
   b5c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c72:	4628      	mov	r0, r5
}
   b5c74:	b002      	add	sp, #8
   b5c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5c7a:	4718      	bx	r3

000b5c7c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c80:	461d      	mov	r5, r3
    startWrite();
   b5c82:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5c84:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5c88:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5c8a:	4604      	mov	r4, r0
   b5c8c:	4617      	mov	r7, r2
   b5c8e:	460e      	mov	r6, r1
    startWrite();
   b5c90:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5c92:	e9cd 7800 	strd	r7, r8, [sp]
   b5c96:	6822      	ldr	r2, [r4, #0]
   b5c98:	1e6b      	subs	r3, r5, #1
   b5c9a:	4433      	add	r3, r6
   b5c9c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	b21b      	sxth	r3, r3
   b5ca2:	463a      	mov	r2, r7
   b5ca4:	4631      	mov	r1, r6
   b5ca6:	47a8      	blx	r5
    endWrite();
   b5ca8:	6823      	ldr	r3, [r4, #0]
   b5caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cac:	4620      	mov	r0, r4
}
   b5cae:	b002      	add	sp, #8
   b5cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5cb4:	4718      	bx	r3

000b5cb6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5cb6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5cba:	461e      	mov	r6, r3
    startWrite();
   b5cbc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5cbe:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5cc2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5cc4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5cc8:	460c      	mov	r4, r1
   b5cca:	4605      	mov	r5, r0
   b5ccc:	4617      	mov	r7, r2
    startWrite();
   b5cce:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5cd0:	4426      	add	r6, r4
   b5cd2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5cd4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5cd6:	da0b      	bge.n	b5cf0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5cd8:	f8cd 8000 	str.w	r8, [sp]
   b5cdc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ce0:	4621      	mov	r1, r4
   b5ce2:	464b      	mov	r3, r9
   b5ce4:	463a      	mov	r2, r7
   b5ce6:	4628      	mov	r0, r5
   b5ce8:	3401      	adds	r4, #1
   b5cea:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5cec:	b224      	sxth	r4, r4
   b5cee:	e7f0      	b.n	b5cd2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cf2:	4628      	mov	r0, r5
}
   b5cf4:	b002      	add	sp, #8
   b5cf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5cfa:	4718      	bx	r3

000b5cfc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5cfc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5cfe:	6802      	ldr	r2, [r0, #0]
   b5d00:	9101      	str	r1, [sp, #4]
   b5d02:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5d06:	9100      	str	r1, [sp, #0]
   b5d08:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5d0a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5d0e:	2200      	movs	r2, #0
   b5d10:	4611      	mov	r1, r2
   b5d12:	47a0      	blx	r4
}
   b5d14:	b002      	add	sp, #8
   b5d16:	bd10      	pop	{r4, pc}

000b5d18 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5d1c:	4299      	cmp	r1, r3
        uint16_t color) {
   b5d1e:	4616      	mov	r6, r2
   b5d20:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5d24:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d28:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5d2a:	4680      	mov	r8, r0
   b5d2c:	460d      	mov	r5, r1
   b5d2e:	461c      	mov	r4, r3
    if(x0 == x1){
   b5d30:	d113      	bne.n	b5d5a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5d32:	42be      	cmp	r6, r7
   b5d34:	bfc8      	it	gt
   b5d36:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d38:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5d3c:	bfc4      	itt	gt
   b5d3e:	463e      	movgt	r6, r7
   b5d40:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d42:	1c7b      	adds	r3, r7, #1
   b5d44:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5d46:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d48:	b21b      	sxth	r3, r3
   b5d4a:	4632      	mov	r2, r6
   b5d4c:	4629      	mov	r1, r5
   b5d4e:	4640      	mov	r0, r8
   b5d50:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5d52:	b003      	add	sp, #12
   b5d54:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d58:	4760      	bx	ip
    } else if(y0 == y1){
   b5d5a:	42be      	cmp	r6, r7
   b5d5c:	d10a      	bne.n	b5d74 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5d5e:	4299      	cmp	r1, r3
   b5d60:	bfc2      	ittt	gt
   b5d62:	460b      	movgt	r3, r1
   b5d64:	4625      	movgt	r5, r4
   b5d66:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d68:	1c63      	adds	r3, r4, #1
   b5d6a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5d6e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5d70:	1b5b      	subs	r3, r3, r5
   b5d72:	e7e9      	b.n	b5d48 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5d74:	6953      	ldr	r3, [r2, #20]
   b5d76:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5d78:	e9cd 7900 	strd	r7, r9, [sp]
   b5d7c:	f8d8 3000 	ldr.w	r3, [r8]
   b5d80:	4640      	mov	r0, r8
   b5d82:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5d84:	4632      	mov	r2, r6
   b5d86:	4623      	mov	r3, r4
   b5d88:	4629      	mov	r1, r5
   b5d8a:	47b8      	blx	r7
        endWrite();
   b5d8c:	f8d8 3000 	ldr.w	r3, [r8]
   b5d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d92:	4640      	mov	r0, r8
}
   b5d94:	b003      	add	sp, #12
   b5d96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5d9a:	4718      	bx	r3

000b5d9c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5d9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5da0:	461d      	mov	r5, r3
    startWrite();
   b5da2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5da4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5da8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5daa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5dae:	4604      	mov	r4, r0
   b5db0:	460f      	mov	r7, r1
   b5db2:	4616      	mov	r6, r2
    startWrite();
   b5db4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5db6:	6823      	ldr	r3, [r4, #0]
   b5db8:	f8cd 8000 	str.w	r8, [sp]
   b5dbc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5dc0:	4632      	mov	r2, r6
   b5dc2:	462b      	mov	r3, r5
   b5dc4:	4639      	mov	r1, r7
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5dca:	6823      	ldr	r3, [r4, #0]
   b5dcc:	f8cd 8000 	str.w	r8, [sp]
   b5dd0:	f109 32ff 	add.w	r2, r9, #4294967295
   b5dd4:	4432      	add	r2, r6
   b5dd6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5dda:	4639      	mov	r1, r7
   b5ddc:	462b      	mov	r3, r5
   b5dde:	4620      	mov	r0, r4
   b5de0:	b212      	sxth	r2, r2
   b5de2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5de4:	6823      	ldr	r3, [r4, #0]
   b5de6:	f8cd 8000 	str.w	r8, [sp]
   b5dea:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5dee:	4632      	mov	r2, r6
   b5df0:	464b      	mov	r3, r9
   b5df2:	4639      	mov	r1, r7
   b5df4:	4620      	mov	r0, r4
   b5df6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5df8:	1e6b      	subs	r3, r5, #1
   b5dfa:	19d9      	adds	r1, r3, r7
   b5dfc:	6823      	ldr	r3, [r4, #0]
   b5dfe:	f8cd 8000 	str.w	r8, [sp]
   b5e02:	6a1d      	ldr	r5, [r3, #32]
   b5e04:	4620      	mov	r0, r4
   b5e06:	464b      	mov	r3, r9
   b5e08:	4632      	mov	r2, r6
   b5e0a:	b209      	sxth	r1, r1
   b5e0c:	47a8      	blx	r5
    endWrite();
   b5e0e:	6823      	ldr	r3, [r4, #0]
   b5e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e12:	4620      	mov	r0, r4
}
   b5e14:	b002      	add	sp, #8
   b5e16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5e1a:	4718      	bx	r3

000b5e1c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5e1c:	4770      	bx	lr

000b5e1e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5e1e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5e22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5e26:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5e28:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5e2a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5e2e:	bf59      	ittee	pl
   b5e30:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5e32:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5e34:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5e36:	81c3      	strhmi	r3, [r0, #14]
}
   b5e38:	4770      	bx	lr
	...

000b5e3c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5e3c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5e3e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5e40:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5e42:	4a07      	ldr	r2, [pc, #28]	; (b5e60 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5e44:	4d07      	ldr	r5, [pc, #28]	; (b5e64 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5e46:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5e48:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5e4a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5e4c:	f04f 31ff 	mov.w	r1, #4294967295
   b5e50:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5e54:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5e56:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5e58:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5e5a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5e5c:	6204      	str	r4, [r0, #32]
}
   b5e5e:	bd30      	pop	{r4, r5, pc}
   b5e60:	01000101 	.word	0x01000101
   b5e64:	000be80c 	.word	0x000be80c

000b5e68 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e6c:	b089      	sub	sp, #36	; 0x24
   b5e6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5e72:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e74:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5e78:	9304      	str	r3, [sp, #16]
   b5e7a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5e7e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e80:	9305      	str	r3, [sp, #20]
   b5e82:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5e86:	4604      	mov	r4, r0
    startWrite();
   b5e88:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5e8a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5e8e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5e92:	bf48      	it	mi
   b5e94:	f108 020e 	addmi.w	r2, r8, #14
   b5e98:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5e9c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5e9e:	4635      	mov	r5, r6
   b5ea0:	9b03      	ldr	r3, [sp, #12]
   b5ea2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5ea4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5ea8:	189a      	adds	r2, r3, r2
   b5eaa:	9b05      	ldr	r3, [sp, #20]
   b5eac:	428b      	cmp	r3, r1
   b5eae:	b212      	sxth	r2, r2
   b5eb0:	dd27      	ble.n	b5f02 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5eb2:	9b04      	ldr	r3, [sp, #16]
   b5eb4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5eb6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5eba:	9306      	str	r3, [sp, #24]
   b5ebc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5ec0:	4580      	cmp	r8, r0
   b5ec2:	fa1f f189 	uxth.w	r1, r9
   b5ec6:	dd17      	ble.n	b5ef8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5ec8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5eca:	bf05      	ittet	eq
   b5ecc:	9b06      	ldreq	r3, [sp, #24]
   b5ece:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5ed0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5ed2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5ed4:	bf18      	it	ne
   b5ed6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5ed8:	062b      	lsls	r3, r5, #24
   b5eda:	d50a      	bpl.n	b5ef2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5edc:	9b02      	ldr	r3, [sp, #8]
   b5ede:	6820      	ldr	r0, [r4, #0]
   b5ee0:	9207      	str	r2, [sp, #28]
   b5ee2:	4419      	add	r1, r3
   b5ee4:	6983      	ldr	r3, [r0, #24]
   b5ee6:	b209      	sxth	r1, r1
   b5ee8:	461f      	mov	r7, r3
   b5eea:	4620      	mov	r0, r4
   b5eec:	4653      	mov	r3, sl
   b5eee:	47b8      	blx	r7
   b5ef0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5ef2:	f109 0901 	add.w	r9, r9, #1
   b5ef6:	e7e1      	b.n	b5ebc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5ef8:	9b01      	ldr	r3, [sp, #4]
   b5efa:	3301      	adds	r3, #1
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	445e      	add	r6, fp
   b5f00:	e7ce      	b.n	b5ea0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5f02:	6823      	ldr	r3, [r4, #0]
   b5f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f06:	4620      	mov	r0, r4
}
   b5f08:	b009      	add	sp, #36	; 0x24
   b5f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5f0e:	4718      	bx	r3

000b5f10 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f14:	ed2d 8b02 	vpush	{d8}
   b5f18:	b091      	sub	sp, #68	; 0x44
   b5f1a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5f1c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5f1e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5f22:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5f26:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5f2a:	9103      	str	r1, [sp, #12]
   b5f2c:	461f      	mov	r7, r3
   b5f2e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5f32:	9304      	str	r3, [sp, #16]
   b5f34:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5f36:	2a00      	cmp	r2, #0
   b5f38:	f040 80c5 	bne.w	b60c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5f3c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5f40:	428b      	cmp	r3, r1
   b5f42:	f340 814c 	ble.w	b61de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5f46:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5f4a:	42b3      	cmp	r3, r6
   b5f4c:	f340 8147 	ble.w	b61de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f50:	2306      	movs	r3, #6
   b5f52:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5f56:	2b00      	cmp	r3, #0
   b5f58:	f340 8141 	ble.w	b61de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5f5c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f60:	2b00      	cmp	r3, #0
   b5f62:	f340 813c 	ble.w	b61de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5f66:	7f03      	ldrb	r3, [r0, #28]
   b5f68:	b91b      	cbnz	r3, b5f72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5f6a:	2faf      	cmp	r7, #175	; 0xaf
   b5f6c:	bf84      	itt	hi
   b5f6e:	3701      	addhi	r7, #1
   b5f70:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5f72:	f8db 3000 	ldr.w	r3, [fp]
   b5f76:	4658      	mov	r0, fp
   b5f78:	695b      	ldr	r3, [r3, #20]
   b5f7a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f7c:	2205      	movs	r2, #5
   b5f7e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5f80:	2200      	movs	r2, #0
   b5f82:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f84:	4a98      	ldr	r2, [pc, #608]	; (b61e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5f86:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5f8a:	18d3      	adds	r3, r2, r3
   b5f8c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5f8e:	b2b3      	uxth	r3, r6
   b5f90:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f92:	9a05      	ldr	r2, [sp, #20]
   b5f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5f96:	5c9b      	ldrb	r3, [r3, r2]
   b5f98:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f9a:	b2ab      	uxth	r3, r5
   b5f9c:	930b      	str	r3, [sp, #44]	; 0x2c
   b5f9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5fa2:	9308      	str	r3, [sp, #32]
   b5fa4:	9b03      	ldr	r3, [sp, #12]
   b5fa6:	fb02 f905 	mul.w	r9, r2, r5
   b5faa:	fa19 f983 	uxtah	r9, r9, r3
   b5fae:	fa0f f389 	sxth.w	r3, r9
   b5fb2:	ee08 3a10 	vmov	s16, r3
   b5fb6:	2308      	movs	r3, #8
   b5fb8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5fba:	9b03      	ldr	r3, [sp, #12]
   b5fbc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5fc0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5fc4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5fc8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5fca:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5fce:	07d2      	lsls	r2, r2, #31
   b5fd0:	d552      	bpl.n	b6078 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5fd2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5fd4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5fd8:	d13e      	bne.n	b6058 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5fda:	2c01      	cmp	r4, #1
   b5fdc:	d13c      	bne.n	b6058 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5fde:	699b      	ldr	r3, [r3, #24]
   b5fe0:	9906      	ldr	r1, [sp, #24]
   b5fe2:	461f      	mov	r7, r3
   b5fe4:	9b04      	ldr	r3, [sp, #16]
   b5fe6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5fe8:	b212      	sxth	r2, r2
   b5fea:	4651      	mov	r1, sl
   b5fec:	4658      	mov	r0, fp
   b5fee:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5ff0:	f109 0301 	add.w	r3, r9, #1
   b5ff4:	fa4f f983 	sxtb.w	r9, r3
   b5ff8:	9b07      	ldr	r3, [sp, #28]
   b5ffa:	085b      	lsrs	r3, r3, #1
   b5ffc:	9307      	str	r3, [sp, #28]
   b5ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6000:	3b01      	subs	r3, #1
   b6002:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6006:	930a      	str	r3, [sp, #40]	; 0x28
   b6008:	d1de      	bne.n	b5fc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b600a:	9f05      	ldr	r7, [sp, #20]
   b600c:	3701      	adds	r7, #1
   b600e:	b27b      	sxtb	r3, r7
   b6010:	9305      	str	r3, [sp, #20]
   b6012:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6014:	3b01      	subs	r3, #1
   b6016:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b601a:	9309      	str	r3, [sp, #36]	; 0x24
   b601c:	d1b9      	bne.n	b5f92 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b601e:	9b04      	ldr	r3, [sp, #16]
   b6020:	4543      	cmp	r3, r8
   b6022:	d00f      	beq.n	b6044 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6024:	2d01      	cmp	r5, #1
   b6026:	f8db 3000 	ldr.w	r3, [fp]
   b602a:	d13b      	bne.n	b60a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b602c:	2c01      	cmp	r4, #1
   b602e:	d139      	bne.n	b60a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6030:	9908      	ldr	r1, [sp, #32]
   b6032:	f8cd 8000 	str.w	r8, [sp]
   b6036:	3105      	adds	r1, #5
   b6038:	6a1c      	ldr	r4, [r3, #32]
   b603a:	4632      	mov	r2, r6
   b603c:	2308      	movs	r3, #8
   b603e:	b209      	sxth	r1, r1
   b6040:	4658      	mov	r0, fp
   b6042:	47a0      	blx	r4
        endWrite();
   b6044:	f8db 3000 	ldr.w	r3, [fp]
   b6048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b604a:	4658      	mov	r0, fp
}
   b604c:	b011      	add	sp, #68	; 0x44
   b604e:	ecbd 8b02 	vpop	{d8}
   b6052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6056:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6058:	9906      	ldr	r1, [sp, #24]
   b605a:	fb14 f202 	smulbb	r2, r4, r2
   b605e:	440a      	add	r2, r1
   b6060:	9904      	ldr	r1, [sp, #16]
   b6062:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6064:	9400      	str	r4, [sp, #0]
   b6066:	69db      	ldr	r3, [r3, #28]
   b6068:	ee18 1a10 	vmov	r1, s16
   b606c:	461f      	mov	r7, r3
   b606e:	b212      	sxth	r2, r2
   b6070:	462b      	mov	r3, r5
   b6072:	4658      	mov	r0, fp
   b6074:	47b8      	blx	r7
   b6076:	e7bb      	b.n	b5ff0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6078:	9a04      	ldr	r2, [sp, #16]
   b607a:	4542      	cmp	r2, r8
   b607c:	d0b8      	beq.n	b5ff0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b607e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6080:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6084:	d107      	bne.n	b6096 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6086:	2c01      	cmp	r4, #1
   b6088:	d105      	bne.n	b6096 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b608a:	699b      	ldr	r3, [r3, #24]
   b608c:	9906      	ldr	r1, [sp, #24]
   b608e:	461f      	mov	r7, r3
   b6090:	440a      	add	r2, r1
   b6092:	4643      	mov	r3, r8
   b6094:	e7a8      	b.n	b5fe8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6096:	9906      	ldr	r1, [sp, #24]
   b6098:	f8cd 8004 	str.w	r8, [sp, #4]
   b609c:	fb14 f202 	smulbb	r2, r4, r2
   b60a0:	440a      	add	r2, r1
   b60a2:	e7df      	b.n	b6064 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b60a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b60a6:	f8cd 8004 	str.w	r8, [sp, #4]
   b60aa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b60ae:	9a08      	ldr	r2, [sp, #32]
   b60b0:	00e4      	lsls	r4, r4, #3
   b60b2:	440a      	add	r2, r1
   b60b4:	4611      	mov	r1, r2
   b60b6:	9400      	str	r4, [sp, #0]
   b60b8:	69dc      	ldr	r4, [r3, #28]
   b60ba:	4632      	mov	r2, r6
   b60bc:	462b      	mov	r3, r5
   b60be:	b209      	sxth	r1, r1
   b60c0:	4658      	mov	r0, fp
   b60c2:	47a0      	blx	r4
        endWrite();
   b60c4:	e7be      	b.n	b6044 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b60c6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b60c8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b60ca:	6812      	ldr	r2, [r2, #0]
   b60cc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b60ce:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b60d0:	b2ff      	uxtb	r7, r7
   b60d2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b60d6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b60da:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b60dc:	789a      	ldrb	r2, [r3, #2]
   b60de:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b60e0:	78da      	ldrb	r2, [r3, #3]
   b60e2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b60e4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b60e6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b60ea:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b60ee:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b60f0:	d801      	bhi.n	b60f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b60f2:	2c01      	cmp	r4, #1
   b60f4:	d957      	bls.n	b61a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b60f6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b60fa:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b60fc:	fa0f f38a 	sxth.w	r3, sl
   b6100:	9307      	str	r3, [sp, #28]
        startWrite();
   b6102:	f8db 3000 	ldr.w	r3, [fp]
   b6106:	4658      	mov	r0, fp
   b6108:	695b      	ldr	r3, [r3, #20]
   b610a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b610c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b610e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6112:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6114:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6118:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b611a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b611c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b611e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6120:	429f      	cmp	r7, r3
   b6122:	d28f      	bcs.n	b6044 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6124:	9b07      	ldr	r3, [sp, #28]
   b6126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6128:	443b      	add	r3, r7
   b612a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b612e:	2200      	movs	r2, #0
   b6130:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6134:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6136:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b613a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b613e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6142:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6144:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6146:	9905      	ldr	r1, [sp, #20]
   b6148:	4291      	cmp	r1, r2
   b614a:	d241      	bcs.n	b61d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b614c:	1c5a      	adds	r2, r3, #1
   b614e:	b2d2      	uxtb	r2, r2
   b6150:	075b      	lsls	r3, r3, #29
   b6152:	920d      	str	r2, [sp, #52]	; 0x34
   b6154:	d107      	bne.n	b6166 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6156:	9b06      	ldr	r3, [sp, #24]
   b6158:	9906      	ldr	r1, [sp, #24]
   b615a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b615c:	3301      	adds	r3, #1
   b615e:	b29b      	uxth	r3, r3
   b6160:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6164:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6166:	f019 0f80 	tst.w	r9, #128	; 0x80
   b616a:	d012      	beq.n	b6192 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b616c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b616e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6172:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6176:	d11a      	bne.n	b61ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6178:	2c01      	cmp	r4, #1
   b617a:	d118      	bne.n	b61ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b617e:	699b      	ldr	r3, [r3, #24]
   b6180:	4411      	add	r1, r2
   b6182:	9a05      	ldr	r2, [sp, #20]
   b6184:	4411      	add	r1, r2
   b6186:	461e      	mov	r6, r3
   b6188:	4652      	mov	r2, sl
   b618a:	9b04      	ldr	r3, [sp, #16]
   b618c:	b209      	sxth	r1, r1
   b618e:	4658      	mov	r0, fp
   b6190:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6192:	9e05      	ldr	r6, [sp, #20]
   b6194:	3601      	adds	r6, #1
   b6196:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6198:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b619c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b619e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b61a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b61a4:	e7ce      	b.n	b6144 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b61a6:	2300      	movs	r3, #0
   b61a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b61ac:	e7a9      	b.n	b6102 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b61ae:	9805      	ldr	r0, [sp, #20]
   b61b0:	9a08      	ldr	r2, [sp, #32]
   b61b2:	4402      	add	r2, r0
   b61b4:	fb02 1105 	mla	r1, r2, r5, r1
   b61b8:	9a04      	ldr	r2, [sp, #16]
   b61ba:	e9cd 4200 	strd	r4, r2, [sp]
   b61be:	69db      	ldr	r3, [r3, #28]
   b61c0:	ee18 2a10 	vmov	r2, s16
   b61c4:	461e      	mov	r6, r3
   b61c6:	b209      	sxth	r1, r1
   b61c8:	462b      	mov	r3, r5
   b61ca:	4658      	mov	r0, fp
   b61cc:	47b0      	blx	r6
   b61ce:	e7e0      	b.n	b6192 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b61d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b61d2:	3701      	adds	r7, #1
   b61d4:	4498      	add	r8, r3
   b61d6:	fa5f f888 	uxtb.w	r8, r8
   b61da:	b2ff      	uxtb	r7, r7
   b61dc:	e79f      	b.n	b611e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b61de:	b011      	add	sp, #68	; 0x44
   b61e0:	ecbd 8b02 	vpop	{d8}
   b61e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61e8:	000be303 	.word	0x000be303

000b61ec <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b61ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b61ee:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b61f0:	b085      	sub	sp, #20
   b61f2:	4604      	mov	r4, r0
   b61f4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b61f6:	2a00      	cmp	r2, #0
   b61f8:	d134      	bne.n	b6264 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b61fa:	290a      	cmp	r1, #10
   b61fc:	d108      	bne.n	b6210 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b61fe:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6200:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6202:	7e42      	ldrb	r2, [r0, #25]
   b6204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6208:	8263      	strh	r3, [r4, #18]
}
   b620a:	2001      	movs	r0, #1
   b620c:	b005      	add	sp, #20
   b620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6210:	290d      	cmp	r1, #13
   b6212:	d0fa      	beq.n	b620a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6214:	7ee1      	ldrb	r1, [r4, #27]
   b6216:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6218:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b621a:	b171      	cbz	r1, b623a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b621c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6220:	2106      	movs	r1, #6
   b6222:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6226:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b622a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b622c:	bfc1      	itttt	gt
   b622e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6232:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6234:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6238:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b623a:	8ae2      	ldrh	r2, [r4, #22]
   b623c:	9201      	str	r2, [sp, #4]
   b623e:	8aa2      	ldrh	r2, [r4, #20]
   b6240:	9200      	str	r2, [sp, #0]
   b6242:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6246:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b624a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b624e:	4620      	mov	r0, r4
   b6250:	f7ff fe5e 	bl	b5f10 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6254:	7e23      	ldrb	r3, [r4, #24]
   b6256:	8a22      	ldrh	r2, [r4, #16]
   b6258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b625c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6260:	8223      	strh	r3, [r4, #16]
   b6262:	e7d2      	b.n	b620a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6264:	290a      	cmp	r1, #10
   b6266:	d107      	bne.n	b6278 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6268:	2300      	movs	r3, #0
   b626a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b626c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b626e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6270:	8a43      	ldrh	r3, [r0, #18]
   b6272:	fb01 3302 	mla	r3, r1, r2, r3
   b6276:	e7c7      	b.n	b6208 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6278:	290d      	cmp	r1, #13
   b627a:	d0c6      	beq.n	b620a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b627c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b627e:	42a9      	cmp	r1, r5
   b6280:	d3c3      	bcc.n	b620a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6282:	7a51      	ldrb	r1, [r2, #9]
   b6284:	4299      	cmp	r1, r3
   b6286:	d3c0      	bcc.n	b620a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6288:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b628a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b628c:	b2ed      	uxtb	r5, r5
   b628e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6292:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6294:	b328      	cbz	r0, b62e2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6296:	78e9      	ldrb	r1, [r5, #3]
   b6298:	b319      	cbz	r1, b62e2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b629a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b629c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b629e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b62a0:	b191      	cbz	r1, b62c8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b62a2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b62a6:	4408      	add	r0, r1
   b62a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b62ac:	fb06 1100 	mla	r1, r6, r0, r1
   b62b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b62b4:	4281      	cmp	r1, r0
   b62b6:	dd07      	ble.n	b62c8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b62b8:	2000      	movs	r0, #0
   b62ba:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b62bc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b62c0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b62c2:	fb02 1207 	mla	r2, r2, r7, r1
   b62c6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b62c8:	8ae2      	ldrh	r2, [r4, #22]
   b62ca:	9201      	str	r2, [sp, #4]
   b62cc:	8aa2      	ldrh	r2, [r4, #20]
   b62ce:	9200      	str	r2, [sp, #0]
   b62d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b62d4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b62d8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b62dc:	4620      	mov	r0, r4
   b62de:	f7ff fe17 	bl	b5f10 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b62e2:	7929      	ldrb	r1, [r5, #4]
   b62e4:	7e22      	ldrb	r2, [r4, #24]
   b62e6:	8a23      	ldrh	r3, [r4, #16]
   b62e8:	fb01 3302 	mla	r3, r1, r2, r3
   b62ec:	e7b8      	b.n	b6260 <_ZN12Adafruit_GFX5writeEh+0x74>

000b62ee <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b62ee:	2901      	cmp	r1, #1
   b62f0:	bf38      	it	cc
   b62f2:	2101      	movcc	r1, #1
   b62f4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b62f6:	7641      	strb	r1, [r0, #25]
}
   b62f8:	4770      	bx	lr
	...

000b62fc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b62fc:	b510      	push	{r4, lr}
   b62fe:	4b06      	ldr	r3, [pc, #24]	; (b6318 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6300:	6003      	str	r3, [r0, #0]
   b6302:	4604      	mov	r4, r0
	if (mutex) {
   b6304:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6306:	b108      	cbz	r0, b630c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6308:	f001 fa6a 	bl	b77e0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b630c:	4620      	mov	r0, r4
   b630e:	f000 fd13 	bl	b6d38 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6312:	4620      	mov	r0, r4
   b6314:	bd10      	pop	{r4, pc}
   b6316:	bf00      	nop
   b6318:	000be864 	.word	0x000be864

000b631c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b631c:	b510      	push	{r4, lr}
   b631e:	4604      	mov	r4, r0
}
   b6320:	f7ff ffec 	bl	b62fc <_ZN16OledWingAdafruitD1Ev>
   b6324:	4620      	mov	r0, r4
   b6326:	2170      	movs	r1, #112	; 0x70
   b6328:	f7fe fbc9 	bl	b4abe <_ZdlPvj>
   b632c:	4620      	mov	r0, r4
   b632e:	bd10      	pop	{r4, pc}

000b6330 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6330:	b530      	push	{r4, r5, lr}
   b6332:	b085      	sub	sp, #20
   b6334:	4604      	mov	r4, r0
   b6336:	460d      	mov	r5, r1
   b6338:	f005 fd0a 	bl	bbd50 <_Z19__fetch_global_Wirev>
   b633c:	4a10      	ldr	r2, [pc, #64]	; (b6380 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b633e:	4911      	ldr	r1, [pc, #68]	; (b6384 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6340:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6344:	f04f 32ff 	mov.w	r2, #4294967295
   b6348:	2180      	movs	r1, #128	; 0x80
   b634a:	4603      	mov	r3, r0
   b634c:	9200      	str	r2, [sp, #0]
   b634e:	4620      	mov	r0, r4
   b6350:	2220      	movs	r2, #32
   b6352:	f000 fd69 	bl	b6e28 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6356:	4b0c      	ldr	r3, [pc, #48]	; (b6388 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6358:	6023      	str	r3, [r4, #0]
   b635a:	2300      	movs	r3, #0
   b635c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6360:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6364:	f000 f854 	bl	b6410 <_ZN8DebounceC1Ev>
   b6368:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b636c:	f000 f850 	bl	b6410 <_ZN8DebounceC1Ev>
   b6370:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6374:	f000 f84c 	bl	b6410 <_ZN8DebounceC1Ev>
}
   b6378:	4620      	mov	r0, r4
   b637a:	b005      	add	sp, #20
   b637c:	bd30      	pop	{r4, r5, pc}
   b637e:	bf00      	nop
   b6380:	00061a80 	.word	0x00061a80
   b6384:	000186a0 	.word	0x000186a0
   b6388:	000be864 	.word	0x000be864

000b638c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b638c:	b513      	push	{r0, r1, r4, lr}
   b638e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6390:	3050      	adds	r0, #80	; 0x50
   b6392:	f001 fa1d 	bl	b77d0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6396:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6398:	07d9      	lsls	r1, r3, #31
   b639a:	d505      	bpl.n	b63a8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b639c:	2202      	movs	r2, #2
   b639e:	2104      	movs	r1, #4
   b63a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b63a4:	f000 f848 	bl	b6438 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b63a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63aa:	079a      	lsls	r2, r3, #30
   b63ac:	d505      	bpl.n	b63ba <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b63ae:	2200      	movs	r2, #0
   b63b0:	2103      	movs	r1, #3
   b63b2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b63b6:	f000 f83f 	bl	b6438 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b63ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63bc:	075b      	lsls	r3, r3, #29
   b63be:	d505      	bpl.n	b63cc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b63c0:	2202      	movs	r2, #2
   b63c2:	4611      	mov	r1, r2
   b63c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b63c8:	f000 f836 	bl	b6438 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b63cc:	2301      	movs	r3, #1
   b63ce:	9300      	str	r3, [sp, #0]
   b63d0:	223c      	movs	r2, #60	; 0x3c
   b63d2:	2102      	movs	r1, #2
   b63d4:	4620      	mov	r0, r4
   b63d6:	f000 fe2f 	bl	b7038 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b63da:	b002      	add	sp, #8
   b63dc:	bd10      	pop	{r4, pc}

000b63de <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b63de:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b63e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b63e2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b63e4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b63e6:	d502      	bpl.n	b63ee <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b63e8:	3058      	adds	r0, #88	; 0x58
   b63ea:	f000 f832 	bl	b6452 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b63ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63f0:	079a      	lsls	r2, r3, #30
   b63f2:	d503      	bpl.n	b63fc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b63f4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b63f8:	f000 f82b 	bl	b6452 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b63fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63fe:	075b      	lsls	r3, r3, #29
   b6400:	d505      	bpl.n	b640e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6402:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b640a:	f000 b822 	b.w	b6452 <_ZN8Debounce6updateEv>
}
   b640e:	bd10      	pop	{r4, pc}

000b6410 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6410:	2100      	movs	r1, #0
   b6412:	220a      	movs	r2, #10
   b6414:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6418:	4770      	bx	lr

000b641a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b641a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b641c:	b510      	push	{r4, lr}
   b641e:	4604      	mov	r4, r0
    this->pin = pin;
   b6420:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6422:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6424:	b288      	uxth	r0, r1
   b6426:	f005 fbe7 	bl	bbbf8 <digitalRead>
   b642a:	b108      	cbz	r0, b6430 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b642c:	2303      	movs	r3, #3
   b642e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6430:	f001 f988 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6434:	6020      	str	r0, [r4, #0]
#endif
}
   b6436:	bd10      	pop	{r4, pc}

000b6438 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6438:	b538      	push	{r3, r4, r5, lr}
   b643a:	460c      	mov	r4, r1
   b643c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b643e:	4611      	mov	r1, r2
   b6440:	b2a0      	uxth	r0, r4
   b6442:	f005 fbaf 	bl	bbba4 <pinMode>
  
  this->attach(pin);
   b6446:	4621      	mov	r1, r4
   b6448:	4628      	mov	r0, r5
}
   b644a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b644e:	f7ff bfe4 	b.w	b641a <_ZN8Debounce6attachEi>

000b6452 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6452:	b538      	push	{r3, r4, r5, lr}
   b6454:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6456:	79c0      	ldrb	r0, [r0, #7]
   b6458:	f005 fbce 	bl	bbbf8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b645c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b645e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6460:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6464:	bf18      	it	ne
   b6466:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6468:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b646c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b646e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6470:	d00a      	beq.n	b6488 <_ZN8Debounce6updateEv+0x36>
   b6472:	f001 f967 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6476:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6478:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b647a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b647e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6480:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6482:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6486:	bd38      	pop	{r3, r4, r5, pc}
   b6488:	f001 f95c 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b648c:	6823      	ldr	r3, [r4, #0]
   b648e:	1ac0      	subs	r0, r0, r3
   b6490:	88a3      	ldrh	r3, [r4, #4]
   b6492:	4298      	cmp	r0, r3
   b6494:	d3f4      	bcc.n	b6480 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6496:	79a3      	ldrb	r3, [r4, #6]
   b6498:	f003 0301 	and.w	r3, r3, #1
   b649c:	42ab      	cmp	r3, r5
   b649e:	d0ef      	beq.n	b6480 <_ZN8Debounce6updateEv+0x2e>
   b64a0:	f001 f950 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b64a4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b64a6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b64a8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b64ac:	f043 0308 	orr.w	r3, r3, #8
   b64b0:	e7e5      	b.n	b647e <_ZN8Debounce6updateEv+0x2c>

000b64b2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b64b2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b64b6:	b510      	push	{r4, lr}
   b64b8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b64ba:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b64bc:	b113      	cbz	r3, b64c4 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b64be:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b64c0:	f001 f996 	bl	b77f0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b64c4:	4620      	mov	r0, r4
   b64c6:	bd10      	pop	{r4, pc}

000b64c8 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b64c8:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b64ca:	6803      	ldr	r3, [r0, #0]
   b64cc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b64d0:	4604      	mov	r4, r0
            if (mqtt->thread)
   b64d2:	b112      	cbz	r2, b64da <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b64d4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b64d6:	f001 f993 	bl	b7800 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b64da:	4620      	mov	r0, r4
   b64dc:	bd10      	pop	{r4, pc}

000b64de <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b64de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64e0:	461f      	mov	r7, r3
   b64e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b64e6:	4604      	mov	r4, r0
   b64e8:	460d      	mov	r5, r1
   b64ea:	4616      	mov	r6, r2
    if (thread) {
   b64ec:	b12b      	cbz	r3, b64fa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b64ee:	2301      	movs	r3, #1
   b64f0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b64f4:	3058      	adds	r0, #88	; 0x58
   b64f6:	f001 f96b 	bl	b77d0 <os_mutex_create>
    }
    this->callback = callback;
   b64fa:	9b08      	ldr	r3, [sp, #32]
   b64fc:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b64fe:	2300      	movs	r3, #0
   b6500:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6502:	b106      	cbz	r6, b6506 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6504:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6506:	b125      	cbz	r5, b6512 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6508:	4629      	mov	r1, r5
   b650a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b650e:	f001 fe2a 	bl	b8166 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6512:	9b06      	ldr	r3, [sp, #24]
   b6514:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6516:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6518:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b651a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b651e:	2bff      	cmp	r3, #255	; 0xff
   b6520:	bfb8      	it	lt
   b6522:	23ff      	movlt	r3, #255	; 0xff
   b6524:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6528:	b108      	cbz	r0, b652e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b652a:	f7fe fac6 	bl	b4aba <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b652e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6532:	f7fe fac0 	bl	b4ab6 <_Znaj>
   b6536:	61e0      	str	r0, [r4, #28]
}
   b6538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b653c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b653c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6540:	4604      	mov	r4, r0
            bool thread) {
   b6542:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6544:	4617      	mov	r7, r2
   b6546:	4698      	mov	r8, r3
   b6548:	460e      	mov	r6, r1
            bool thread) {
   b654a:	f005 f811 	bl	bb570 <_ZN9TCPClientC1Ev>
   b654e:	490d      	ldr	r1, [pc, #52]	; (b6584 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6550:	61e5      	str	r5, [r4, #28]
   b6552:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6556:	f001 fda8 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b655a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b655e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6560:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6564:	22ff      	movs	r2, #255	; 0xff
   b6566:	230f      	movs	r3, #15
   b6568:	e9cd 3200 	strd	r3, r2, [sp]
   b656c:	4620      	mov	r0, r4
            bool thread) {
   b656e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6572:	463b      	mov	r3, r7
   b6574:	462a      	mov	r2, r5
   b6576:	4631      	mov	r1, r6
   b6578:	f7ff ffb1 	bl	b64de <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b657c:	4620      	mov	r0, r4
   b657e:	b004      	add	sp, #16
   b6580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6584:	000bf38b 	.word	0x000bf38b

000b6588 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6588:	b510      	push	{r4, lr}
   b658a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b658c:	4620      	mov	r0, r4
   b658e:	f004 ff4b 	bl	bb428 <_ZN9TCPClient9availableEv>
   b6592:	2800      	cmp	r0, #0
   b6594:	d0fa      	beq.n	b658c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b6596:	4620      	mov	r0, r4
   b6598:	f004 fd54 	bl	bb044 <_ZN9TCPClient4readEv>
}
   b659c:	b2c0      	uxtb	r0, r0
   b659e:	bd10      	pop	{r4, pc}

000b65a0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b65a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b65a4:	4605      	mov	r5, r0
   b65a6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b65a8:	f7ff ffee 	bl	b6588 <_ZN4MQTT8readByteEv>
   b65ac:	69eb      	ldr	r3, [r5, #28]
   b65ae:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b65b0:	69eb      	ldr	r3, [r5, #28]
   b65b2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b65b6:	f04f 0901 	mov.w	r9, #1
   b65ba:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b65be:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b65c0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b65c2:	4628      	mov	r0, r5
   b65c4:	f7ff ffe0 	bl	b6588 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b65c8:	4626      	mov	r6, r4
   b65ca:	69eb      	ldr	r3, [r5, #28]
   b65cc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b65ce:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b65d2:	fb13 f309 	smulbb	r3, r3, r9
   b65d6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b65d8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b65da:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b65dc:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b65de:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b65e0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b65e4:	d4ed      	bmi.n	b65c2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b65e6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b65e8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b65ec:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b65f0:	d11e      	bne.n	b6630 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b65f2:	4628      	mov	r0, r5
   b65f4:	f7ff ffc8 	bl	b6588 <_ZN4MQTT8readByteEv>
   b65f8:	69eb      	ldr	r3, [r5, #28]
   b65fa:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b65fc:	4628      	mov	r0, r5
   b65fe:	f7ff ffc3 	bl	b6588 <_ZN4MQTT8readByteEv>
   b6602:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6604:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6606:	b2b6      	uxth	r6, r6
   b6608:	69eb      	ldr	r3, [r5, #28]
   b660a:	b2a4      	uxth	r4, r4
   b660c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b660e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6610:	b2b6      	uxth	r6, r6
   b6612:	42be      	cmp	r6, r7
   b6614:	d20e      	bcs.n	b6634 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6616:	4628      	mov	r0, r5
   b6618:	f7ff ffb6 	bl	b6588 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b661c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6620:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6622:	bf84      	itt	hi
   b6624:	69eb      	ldrhi	r3, [r5, #28]
   b6626:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6628:	3401      	adds	r4, #1
   b662a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b662c:	3601      	adds	r6, #1
   b662e:	e7ef      	b.n	b6610 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6630:	2600      	movs	r6, #0
   b6632:	e7ed      	b.n	b6610 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6634:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6638:	42a3      	cmp	r3, r4
   b663a:	bf2c      	ite	cs
   b663c:	4620      	movcs	r0, r4
   b663e:	2000      	movcc	r0, #0
   b6640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6644 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6648:	4615      	mov	r5, r2
   b664a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b664c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b664e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6650:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6652:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6654:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6656:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b665a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b665e:	f103 0401 	add.w	r4, r3, #1
   b6662:	4403      	add	r3, r0
            digit |= 0x80;
   b6664:	bf88      	it	hi
   b6666:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b666a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b666e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6672:	b2e4      	uxtb	r4, r4
   b6674:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6678:	d81e      	bhi.n	b66b8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b667a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b667e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6682:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6684:	4622      	mov	r2, r4
   b6686:	a901      	add	r1, sp, #4
   b6688:	4428      	add	r0, r5
    buf[4-llen] = header;
   b668a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b668e:	f005 fcc7 	bl	bc020 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6692:	1c72      	adds	r2, r6, #1
   b6694:	4422      	add	r2, r4
   b6696:	4641      	mov	r1, r8
   b6698:	4638      	mov	r0, r7
   b669a:	f004 fcbe 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
   b669e:	4605      	mov	r5, r0
   b66a0:	f001 f850 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b66a4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b66a6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b66a8:	4432      	add	r2, r6
   b66aa:	b2a8      	uxth	r0, r5
}
   b66ac:	1a13      	subs	r3, r2, r0
   b66ae:	4258      	negs	r0, r3
   b66b0:	4158      	adcs	r0, r3
   b66b2:	b002      	add	sp, #8
   b66b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b66b8:	4623      	mov	r3, r4
   b66ba:	e7ca      	b.n	b6652 <_ZN4MQTT5writeEhPht+0xe>

000b66bc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b66bc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b66be:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66c0:	4605      	mov	r5, r0
    pos += 2;
   b66c2:	b298      	uxth	r0, r3
   b66c4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b66c6:	5cce      	ldrb	r6, [r1, r3]
   b66c8:	b29c      	uxth	r4, r3
   b66ca:	b156      	cbz	r6, b66e2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b66cc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b66d0:	4584      	cmp	ip, r0
   b66d2:	f103 0701 	add.w	r7, r3, #1
   b66d6:	d904      	bls.n	b66e2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b66d8:	1c44      	adds	r4, r0, #1
   b66da:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b66dc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b66de:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b66e0:	e7f1      	b.n	b66c6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b66e2:	b299      	uxth	r1, r3
   b66e4:	1a41      	subs	r1, r0, r1
   b66e6:	440a      	add	r2, r1
   b66e8:	0a21      	lsrs	r1, r4, #8
   b66ea:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b66ee:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b66f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b66f4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b66f4:	b538      	push	{r3, r4, r5, lr}
   b66f6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b66f8:	f004 fdb8 	bl	bb26c <_ZN9TCPClient9connectedEv>
   b66fc:	2800      	cmp	r0, #0
   b66fe:	bf14      	ite	ne
   b6700:	2501      	movne	r5, #1
   b6702:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6704:	d102      	bne.n	b670c <_ZN4MQTT11isConnectedEv+0x18>
   b6706:	4620      	mov	r0, r4
   b6708:	f004 fee8 	bl	bb4dc <_ZN9TCPClient4stopEv>
    return rc;
}
   b670c:	4628      	mov	r0, r5
   b670e:	bd38      	pop	{r3, r4, r5, pc}

000b6710 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6714:	b088      	sub	sp, #32
   b6716:	4604      	mov	r4, r0
   b6718:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b671c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6720:	4689      	mov	r9, r1
   b6722:	4617      	mov	r7, r2
   b6724:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6726:	f7ff ffe5 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b672a:	4605      	mov	r5, r0
   b672c:	2800      	cmp	r0, #0
   b672e:	f040 80cd 	bne.w	b68cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6732:	4621      	mov	r1, r4
   b6734:	a801      	add	r0, sp, #4
   b6736:	f7ff febc 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b673a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b673c:	2900      	cmp	r1, #0
   b673e:	f040 8088 	bne.w	b6852 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6742:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6748:	462b      	mov	r3, r5
   b674a:	4620      	mov	r0, r4
   b674c:	f004 fd10 	bl	bb170 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6750:	2800      	cmp	r0, #0
   b6752:	d07a      	beq.n	b684a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6754:	2301      	movs	r3, #1
   b6756:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6758:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b675c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b675e:	2b04      	cmp	r3, #4
   b6760:	4b5b      	ldr	r3, [pc, #364]	; (b68d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6762:	f040 8081 	bne.w	b6868 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6766:	6818      	ldr	r0, [r3, #0]
   b6768:	8899      	ldrh	r1, [r3, #4]
   b676a:	799b      	ldrb	r3, [r3, #6]
   b676c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6770:	f88d 300e 	strb.w	r3, [sp, #14]
   b6774:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6776:	f8c2 0005 	str.w	r0, [r2, #5]
   b677a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b677e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6782:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6786:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6788:	230c      	movs	r3, #12
            if (willTopic) {
   b678a:	f1b8 0f00 	cmp.w	r8, #0
   b678e:	f000 8081 	beq.w	b6894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6792:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b6796:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b679a:	0140      	lsls	r0, r0, #5
   b679c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b67a0:	f040 0006 	orr.w	r0, r0, #6
   b67a4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b67a6:	f1ba 0f00 	cmp.w	sl, #0
   b67aa:	d101      	bne.n	b67b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b67ac:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b67b0:	b11f      	cbz	r7, b67ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b67b2:	2e00      	cmp	r6, #0
   b67b4:	d170      	bne.n	b6898 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b67b6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b67ba:	69e2      	ldr	r2, [r4, #28]
   b67bc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b67be:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b67c0:	69e1      	ldr	r1, [r4, #28]
   b67c2:	1c58      	adds	r0, r3, #1
   b67c4:	1212      	asrs	r2, r2, #8
   b67c6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b67c8:	1c9a      	adds	r2, r3, #2
   b67ca:	69e1      	ldr	r1, [r4, #28]
   b67cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b67ce:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b67d0:	3303      	adds	r3, #3
   b67d2:	69e2      	ldr	r2, [r4, #28]
   b67d4:	4649      	mov	r1, r9
   b67d6:	4620      	mov	r0, r4
   b67d8:	f7ff ff70 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
   b67dc:	4603      	mov	r3, r0
            if (willTopic) {
   b67de:	f1b8 0f00 	cmp.w	r8, #0
   b67e2:	d00b      	beq.n	b67fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b67e4:	69e2      	ldr	r2, [r4, #28]
   b67e6:	4641      	mov	r1, r8
   b67e8:	4620      	mov	r0, r4
   b67ea:	f7ff ff67 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b67ee:	69e2      	ldr	r2, [r4, #28]
   b67f0:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b67f2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b67f4:	4620      	mov	r0, r4
   b67f6:	f7ff ff61 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
   b67fa:	4603      	mov	r3, r0
            if(user != NULL) {
   b67fc:	b167      	cbz	r7, b6818 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b67fe:	69e2      	ldr	r2, [r4, #28]
   b6800:	4639      	mov	r1, r7
   b6802:	4620      	mov	r0, r4
   b6804:	f7ff ff5a 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
   b6808:	4603      	mov	r3, r0
                if(pass != NULL) {
   b680a:	b12e      	cbz	r6, b6818 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b680c:	69e2      	ldr	r2, [r4, #28]
   b680e:	4631      	mov	r1, r6
   b6810:	4620      	mov	r0, r4
   b6812:	f7ff ff53 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
   b6816:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6818:	3b05      	subs	r3, #5
   b681a:	69e2      	ldr	r2, [r4, #28]
   b681c:	b29b      	uxth	r3, r3
   b681e:	2110      	movs	r1, #16
   b6820:	4620      	mov	r0, r4
   b6822:	f7ff ff0f 	bl	b6644 <_ZN4MQTT5writeEhPht>
   b6826:	f000 ff8d 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b682a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b682e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6832:	4620      	mov	r0, r4
   b6834:	f004 fdf8 	bl	bb428 <_ZN9TCPClient9availableEv>
   b6838:	bb88      	cbnz	r0, b689e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b683a:	f000 ff83 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b683e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6840:	1ac0      	subs	r0, r0, r3
   b6842:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6844:	4373      	muls	r3, r6
   b6846:	4298      	cmp	r0, r3
   b6848:	d9f3      	bls.n	b6832 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b684a:	4620      	mov	r0, r4
   b684c:	f004 fe46 	bl	bb4dc <_ZN9TCPClient4stopEv>
   b6850:	e035      	b.n	b68be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6852:	a802      	add	r0, sp, #8
   b6854:	f004 fa7e 	bl	bad54 <_ZN9IPAddressC1EPKh>
   b6858:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b685c:	462b      	mov	r3, r5
   b685e:	a902      	add	r1, sp, #8
   b6860:	4620      	mov	r0, r4
   b6862:	f004 fd65 	bl	bb330 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6866:	e773      	b.n	b6750 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6868:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b686c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6870:	7bdb      	ldrb	r3, [r3, #15]
   b6872:	f10d 0c08 	add.w	ip, sp, #8
   b6876:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b687a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b687e:	ab02      	add	r3, sp, #8
   b6880:	cb03      	ldmia	r3!, {r0, r1}
   b6882:	f8c2 0005 	str.w	r0, [r2, #5]
   b6886:	f8c2 1009 	str.w	r1, [r2, #9]
   b688a:	f89c 3000 	ldrb.w	r3, [ip]
   b688e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6890:	230e      	movs	r3, #14
   b6892:	e77a      	b.n	b678a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6894:	2002      	movs	r0, #2
   b6896:	e786      	b.n	b67a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6898:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b689c:	e78d      	b.n	b67ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b689e:	a902      	add	r1, sp, #8
   b68a0:	4620      	mov	r0, r4
   b68a2:	f7ff fe7d 	bl	b65a0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b68a6:	2804      	cmp	r0, #4
   b68a8:	d1cf      	bne.n	b684a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b68aa:	69e3      	ldr	r3, [r4, #28]
   b68ac:	78de      	ldrb	r6, [r3, #3]
   b68ae:	2e00      	cmp	r6, #0
   b68b0:	d1cb      	bne.n	b684a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b68b2:	f000 ff47 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b68b6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b68b8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b68ba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b68be:	a801      	add	r0, sp, #4
   b68c0:	f7ff fe02 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b68c4:	4628      	mov	r0, r5
   b68c6:	b008      	add	sp, #32
   b68c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b68cc:	2500      	movs	r5, #0
   b68ce:	e7f9      	b.n	b68c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b68d0:	000be0bc 	.word	0x000be0bc

000b68d4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b68d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b68d6:	2301      	movs	r3, #1
   b68d8:	2204      	movs	r2, #4
   b68da:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b68de:	2300      	movs	r3, #0
   b68e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b68e4:	e9cd 3300 	strd	r3, r3, [sp]
   b68e8:	461a      	mov	r2, r3
   b68ea:	f7ff ff11 	bl	b6710 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b68ee:	b007      	add	sp, #28
   b68f0:	f85d fb04 	ldr.w	pc, [sp], #4

000b68f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b68f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68f8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b68fc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6900:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6904:	4604      	mov	r4, r0
   b6906:	468b      	mov	fp, r1
   b6908:	4616      	mov	r6, r2
   b690a:	461f      	mov	r7, r3
    if (isConnected()) {
   b690c:	f7ff fef2 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b6910:	4682      	mov	sl, r0
   b6912:	2800      	cmp	r0, #0
   b6914:	d051      	beq.n	b69ba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6916:	4621      	mov	r1, r4
   b6918:	a801      	add	r0, sp, #4
   b691a:	f7ff fdca 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b691e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6922:	69e0      	ldr	r0, [r4, #28]
   b6924:	2100      	movs	r1, #0
   b6926:	f005 fba3 	bl	bc070 <memset>
        length = writeString(topic, buffer, length);
   b692a:	2305      	movs	r3, #5
   b692c:	69e2      	ldr	r2, [r4, #28]
   b692e:	4659      	mov	r1, fp
   b6930:	4620      	mov	r0, r4
   b6932:	f7ff fec3 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6936:	1e6b      	subs	r3, r5, #1
   b6938:	2b01      	cmp	r3, #1
   b693a:	d815      	bhi.n	b6968 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b693c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b693e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6940:	3101      	adds	r1, #1
   b6942:	b289      	uxth	r1, r1
   b6944:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6946:	0a09      	lsrs	r1, r1, #8
   b6948:	5419      	strb	r1, [r3, r0]
   b694a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b694c:	69e3      	ldr	r3, [r4, #28]
   b694e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6950:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6952:	3002      	adds	r0, #2
   b6954:	5499      	strb	r1, [r3, r2]
   b6956:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6958:	f1b8 0f00 	cmp.w	r8, #0
   b695c:	d004      	beq.n	b6968 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b695e:	8c23      	ldrh	r3, [r4, #32]
   b6960:	1c5a      	adds	r2, r3, #1
   b6962:	8422      	strh	r2, [r4, #32]
   b6964:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6968:	2100      	movs	r1, #0
   b696a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b696c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b696e:	69e2      	ldr	r2, [r4, #28]
   b6970:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6972:	d90a      	bls.n	b698a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6974:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6978:	459c      	cmp	ip, r3
   b697a:	d906      	bls.n	b698a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b697c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6980:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6984:	3101      	adds	r1, #1
   b6986:	b289      	uxth	r1, r1
   b6988:	e7ef      	b.n	b696a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b698a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b698e:	2900      	cmp	r1, #0
   b6990:	bf0c      	ite	eq
   b6992:	2130      	moveq	r1, #48	; 0x30
   b6994:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6996:	f1b9 0f00 	cmp.w	r9, #0
   b699a:	d001      	beq.n	b69a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b699c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b69a0:	2d02      	cmp	r5, #2
   b69a2:	d10e      	bne.n	b69c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b69a4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b69a8:	3b05      	subs	r3, #5
   b69aa:	b29b      	uxth	r3, r3
   b69ac:	4620      	mov	r0, r4
   b69ae:	f7ff fe49 	bl	b6644 <_ZN4MQTT5writeEhPht>
   b69b2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b69b4:	a801      	add	r0, sp, #4
   b69b6:	f7ff fd87 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b69ba:	4650      	mov	r0, sl
   b69bc:	b003      	add	sp, #12
   b69be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b69c2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b69c4:	bf08      	it	eq
   b69c6:	f041 0102 	orreq.w	r1, r1, #2
   b69ca:	e7ed      	b.n	b69a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b69cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b69cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b69ce:	9c08      	ldr	r4, [sp, #32]
   b69d0:	9403      	str	r4, [sp, #12]
   b69d2:	2400      	movs	r4, #0
   b69d4:	9402      	str	r4, [sp, #8]
   b69d6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b69da:	9401      	str	r4, [sp, #4]
   b69dc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b69e0:	9400      	str	r4, [sp, #0]
   b69e2:	f7ff ff87 	bl	b68f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b69e6:	b004      	add	sp, #16
   b69e8:	bd10      	pop	{r4, pc}

000b69ea <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b69ea:	b530      	push	{r4, r5, lr}
   b69ec:	b087      	sub	sp, #28
   b69ee:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b69f0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b69f2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b69f4:	9204      	str	r2, [sp, #16]
   b69f6:	f7fe f801 	bl	b49fc <strlen>
   b69fa:	2500      	movs	r5, #0
   b69fc:	4603      	mov	r3, r0
   b69fe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6a02:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6a06:	9500      	str	r5, [sp, #0]
   b6a08:	4620      	mov	r0, r4
   b6a0a:	f7ff ffdf 	bl	b69cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b6a0e:	b007      	add	sp, #28
   b6a10:	bd30      	pop	{r4, r5, pc}

000b6a12 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b6a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a14:	4604      	mov	r4, r0
   b6a16:	460e      	mov	r6, r1
    if (isConnected()) {
   b6a18:	f7ff fe6c 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b6a1c:	4605      	mov	r5, r0
   b6a1e:	b1c8      	cbz	r0, b6a54 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6a20:	4621      	mov	r1, r4
   b6a22:	a801      	add	r0, sp, #4
   b6a24:	f7ff fd45 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6a28:	69e3      	ldr	r3, [r4, #28]
   b6a2a:	2262      	movs	r2, #98	; 0x62
   b6a2c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6a2e:	69e3      	ldr	r3, [r4, #28]
   b6a30:	2202      	movs	r2, #2
   b6a32:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6a34:	69e3      	ldr	r3, [r4, #28]
   b6a36:	0a32      	lsrs	r2, r6, #8
   b6a38:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6a3a:	69e3      	ldr	r3, [r4, #28]
   b6a3c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6a3e:	69e1      	ldr	r1, [r4, #28]
   b6a40:	2204      	movs	r2, #4
   b6a42:	4620      	mov	r0, r4
   b6a44:	f004 fae9 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
   b6a48:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6a4a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6a4c:	bf18      	it	ne
   b6a4e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6a50:	f7ff fd3a 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6a54:	4628      	mov	r0, r5
   b6a56:	b002      	add	sp, #8
   b6a58:	bd70      	pop	{r4, r5, r6, pc}

000b6a5a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a5c:	4604      	mov	r4, r0
   b6a5e:	460e      	mov	r6, r1
    if (isConnected()) {
   b6a60:	f7ff fe48 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b6a64:	4605      	mov	r5, r0
   b6a66:	b1c8      	cbz	r0, b6a9c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6a68:	4621      	mov	r1, r4
   b6a6a:	a801      	add	r0, sp, #4
   b6a6c:	f7ff fd21 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6a70:	69e3      	ldr	r3, [r4, #28]
   b6a72:	2272      	movs	r2, #114	; 0x72
   b6a74:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6a76:	69e3      	ldr	r3, [r4, #28]
   b6a78:	2202      	movs	r2, #2
   b6a7a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6a7c:	69e3      	ldr	r3, [r4, #28]
   b6a7e:	0a32      	lsrs	r2, r6, #8
   b6a80:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6a82:	69e3      	ldr	r3, [r4, #28]
   b6a84:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6a86:	69e1      	ldr	r1, [r4, #28]
   b6a88:	2204      	movs	r2, #4
   b6a8a:	4620      	mov	r0, r4
   b6a8c:	f004 fac5 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
   b6a90:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6a92:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6a94:	bf18      	it	ne
   b6a96:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6a98:	f7ff fd16 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6a9c:	4628      	mov	r0, r5
   b6a9e:	b002      	add	sp, #8
   b6aa0:	bd70      	pop	{r4, r5, r6, pc}

000b6aa2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6aa6:	ed2d 8b02 	vpush	{d8}
   b6aaa:	b087      	sub	sp, #28
   b6aac:	af00      	add	r7, sp, #0
   b6aae:	4604      	mov	r4, r0
    if (isConnected()) {
   b6ab0:	f7ff fe20 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b6ab4:	4681      	mov	r9, r0
   b6ab6:	b1f8      	cbz	r0, b6af8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6ab8:	4621      	mov	r1, r4
   b6aba:	f107 0014 	add.w	r0, r7, #20
   b6abe:	f7ff fcf8 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
   b6ac2:	f000 fe3f 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6ac6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6acc:	4353      	muls	r3, r2
   b6ace:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6ad0:	1a82      	subs	r2, r0, r2
   b6ad2:	429a      	cmp	r2, r3
   b6ad4:	4606      	mov	r6, r0
   b6ad6:	d803      	bhi.n	b6ae0 <_ZN4MQTT4loopEv+0x3e>
   b6ad8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b6ada:	1a82      	subs	r2, r0, r2
   b6adc:	4293      	cmp	r3, r2
   b6ade:	d221      	bcs.n	b6b24 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6ae0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6ae4:	b17b      	cbz	r3, b6b06 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6ae6:	4620      	mov	r0, r4
   b6ae8:	f004 fcf8 	bl	bb4dc <_ZN9TCPClient4stopEv>
                return false;
   b6aec:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6af0:	f107 0014 	add.w	r0, r7, #20
   b6af4:	f7ff fce8 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6af8:	4648      	mov	r0, r9
   b6afa:	371c      	adds	r7, #28
   b6afc:	46bd      	mov	sp, r7
   b6afe:	ecbd 8b02 	vpop	{d8}
   b6b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6b06:	69e2      	ldr	r2, [r4, #28]
   b6b08:	21c0      	movs	r1, #192	; 0xc0
   b6b0a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b6b0c:	69e2      	ldr	r2, [r4, #28]
   b6b0e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6b10:	69e1      	ldr	r1, [r4, #28]
   b6b12:	2202      	movs	r2, #2
   b6b14:	4620      	mov	r0, r4
   b6b16:	f004 fa80 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b6b1a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b6b1e:	2301      	movs	r3, #1
   b6b20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6b24:	4620      	mov	r0, r4
   b6b26:	f004 fc7f 	bl	bb428 <_ZN9TCPClient9availableEv>
   b6b2a:	2800      	cmp	r0, #0
   b6b2c:	d0e0      	beq.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6b2e:	f107 0113 	add.w	r1, r7, #19
   b6b32:	4620      	mov	r0, r4
   b6b34:	f7ff fd34 	bl	b65a0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6b38:	4683      	mov	fp, r0
   b6b3a:	2800      	cmp	r0, #0
   b6b3c:	d0d8      	beq.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6b3e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6b40:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6b42:	7819      	ldrb	r1, [r3, #0]
   b6b44:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6b48:	2a30      	cmp	r2, #48	; 0x30
   b6b4a:	d17f      	bne.n	b6c4c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6b4c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6b50:	f1ba 0f00 	cmp.w	sl, #0
   b6b54:	d0cc      	beq.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6b56:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6b5a:	466a      	mov	r2, sp
   b6b5c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6b60:	eb03 020c 	add.w	r2, r3, ip
   b6b64:	7851      	ldrb	r1, [r2, #1]
   b6b66:	7895      	ldrb	r5, [r2, #2]
   b6b68:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6b6c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b6b6e:	f105 0208 	add.w	r2, r5, #8
   b6b72:	4669      	mov	r1, sp
   b6b74:	08d2      	lsrs	r2, r2, #3
   b6b76:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b6b7a:	4695      	mov	sp, r2
   b6b7c:	f10c 0203 	add.w	r2, ip, #3
   b6b80:	60fa      	str	r2, [r7, #12]
   b6b82:	eb03 0e02 	add.w	lr, r3, r2
   b6b86:	eb0d 0205 	add.w	r2, sp, r5
   b6b8a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b6b8c:	f8c7 d008 	str.w	sp, [r7, #8]
   b6b90:	607a      	str	r2, [r7, #4]
   b6b92:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6b96:	428a      	cmp	r2, r1
   b6b98:	d006      	beq.n	b6ba8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b6b9a:	460a      	mov	r2, r1
   b6b9c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6ba0:	f802 8b01 	strb.w	r8, [r2], #1
   b6ba4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6ba6:	e7f4      	b.n	b6b92 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6ba8:	2200      	movs	r2, #0
   b6baa:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6bac:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bb0:	68f9      	ldr	r1, [r7, #12]
   b6bb2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6bb6:	ebab 020c 	sub.w	r2, fp, ip
   b6bba:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6bbc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6bc0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bc4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6bc6:	d125      	bne.n	b6c14 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bc8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6bcc:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b6bce:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bd0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6bd4:	f10c 0105 	add.w	r1, ip, #5
   b6bd8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6bda:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bdc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6be0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6be2:	69e3      	ldr	r3, [r4, #28]
   b6be4:	2240      	movs	r2, #64	; 0x40
   b6be6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6be8:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bea:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6bee:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6bf2:	69e3      	ldr	r3, [r4, #28]
   b6bf4:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6bf8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6bfa:	69e3      	ldr	r3, [r4, #28]
   b6bfc:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6c00:	69e1      	ldr	r1, [r4, #28]
   b6c02:	2204      	movs	r2, #4
   b6c04:	4620      	mov	r0, r4
   b6c06:	f004 fa08 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6c0a:	6266      	str	r6, [r4, #36]	; 0x24
   b6c0c:	ee18 3a10 	vmov	r3, s16
   b6c10:	469d      	mov	sp, r3
   b6c12:	e76d      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6c14:	f1b8 0f04 	cmp.w	r8, #4
   b6c18:	d115      	bne.n	b6c46 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c1a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6c1e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c20:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c22:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6c26:	f10c 0105 	add.w	r1, ip, #5
   b6c2a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c2c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c2e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c32:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6c34:	69e3      	ldr	r3, [r4, #28]
   b6c36:	2250      	movs	r2, #80	; 0x50
   b6c38:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6c3a:	69e3      	ldr	r3, [r4, #28]
   b6c3c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c3e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6c42:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6c44:	e7d5      	b.n	b6bf2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6c46:	4419      	add	r1, r3
   b6c48:	47d0      	blx	sl
   b6c4a:	e7df      	b.n	b6c0c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6c4c:	2a50      	cmp	r2, #80	; 0x50
   b6c4e:	d108      	bne.n	b6c62 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6c50:	789a      	ldrb	r2, [r3, #2]
   b6c52:	78d9      	ldrb	r1, [r3, #3]
   b6c54:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6c58:	b289      	uxth	r1, r1
   b6c5a:	4620      	mov	r0, r4
   b6c5c:	f7ff fed9 	bl	b6a12 <_ZN4MQTT14publishReleaseEt>
   b6c60:	e746      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6c62:	2a40      	cmp	r2, #64	; 0x40
   b6c64:	d112      	bne.n	b6c8c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6c66:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6c68:	2a00      	cmp	r2, #0
   b6c6a:	f43f af41 	beq.w	b6af0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6c6e:	f1bb 0f04 	cmp.w	fp, #4
   b6c72:	f47f af3d 	bne.w	b6af0 <_ZN4MQTT4loopEv+0x4e>
   b6c76:	f011 0f06 	tst.w	r1, #6
   b6c7a:	f47f af39 	bne.w	b6af0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6c7e:	7899      	ldrb	r1, [r3, #2]
   b6c80:	78d8      	ldrb	r0, [r3, #3]
   b6c82:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6c86:	b280      	uxth	r0, r0
   b6c88:	4790      	blx	r2
   b6c8a:	e731      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6c8c:	2a60      	cmp	r2, #96	; 0x60
   b6c8e:	d108      	bne.n	b6ca2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6c90:	789a      	ldrb	r2, [r3, #2]
   b6c92:	78d9      	ldrb	r1, [r3, #3]
   b6c94:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6c98:	b289      	uxth	r1, r1
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	f7ff fedd 	bl	b6a5a <_ZN4MQTT15publishCompleteEt>
   b6ca0:	e726      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6ca2:	2a70      	cmp	r2, #112	; 0x70
   b6ca4:	d0df      	beq.n	b6c66 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6ca6:	2a90      	cmp	r2, #144	; 0x90
   b6ca8:	f43f af22 	beq.w	b6af0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6cac:	2ac0      	cmp	r2, #192	; 0xc0
   b6cae:	d10a      	bne.n	b6cc6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6cb0:	22d0      	movs	r2, #208	; 0xd0
   b6cb2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6cb4:	69e3      	ldr	r3, [r4, #28]
   b6cb6:	2200      	movs	r2, #0
   b6cb8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6cba:	69e1      	ldr	r1, [r4, #28]
   b6cbc:	2202      	movs	r2, #2
   b6cbe:	4620      	mov	r0, r4
   b6cc0:	f004 f9ab 	bl	bb01a <_ZN9TCPClient5writeEPKhj>
   b6cc4:	e714      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6cc6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6cc8:	bf04      	itt	eq
   b6cca:	2300      	moveq	r3, #0
   b6ccc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6cd0:	e70e      	b.n	b6af0 <_ZN4MQTT4loopEv+0x4e>

000b6cd2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6cd4:	4604      	mov	r4, r0
   b6cd6:	460f      	mov	r7, r1
   b6cd8:	4616      	mov	r6, r2
    if (isConnected()) {
   b6cda:	f7ff fd0b 	bl	b66f4 <_ZN4MQTT11isConnectedEv>
   b6cde:	4605      	mov	r5, r0
   b6ce0:	b310      	cbz	r0, b6d28 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6ce2:	4621      	mov	r1, r4
   b6ce4:	a801      	add	r0, sp, #4
   b6ce6:	f7ff fbe4 	bl	b64b2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6cea:	8c23      	ldrh	r3, [r4, #32]
   b6cec:	3301      	adds	r3, #1
   b6cee:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6cf0:	b1eb      	cbz	r3, b6d2e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6cf2:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6cf4:	8c23      	ldrh	r3, [r4, #32]
   b6cf6:	69e2      	ldr	r2, [r4, #28]
   b6cf8:	0a1b      	lsrs	r3, r3, #8
   b6cfa:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6cfc:	69e3      	ldr	r3, [r4, #28]
   b6cfe:	8c22      	ldrh	r2, [r4, #32]
   b6d00:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6d02:	69e2      	ldr	r2, [r4, #28]
   b6d04:	2307      	movs	r3, #7
   b6d06:	4639      	mov	r1, r7
   b6d08:	4620      	mov	r0, r4
   b6d0a:	f7ff fcd7 	bl	b66bc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6d0e:	69e3      	ldr	r3, [r4, #28]
   b6d10:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6d12:	3804      	subs	r0, #4
   b6d14:	b283      	uxth	r3, r0
   b6d16:	69e2      	ldr	r2, [r4, #28]
   b6d18:	2182      	movs	r1, #130	; 0x82
   b6d1a:	4620      	mov	r0, r4
   b6d1c:	f7ff fc92 	bl	b6644 <_ZN4MQTT5writeEhPht>
   b6d20:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6d22:	a801      	add	r0, sp, #4
   b6d24:	f7ff fbd0 	bl	b64c8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6d28:	4628      	mov	r0, r5
   b6d2a:	b003      	add	sp, #12
   b6d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6d2e:	2301      	movs	r3, #1
   b6d30:	e7df      	b.n	b6cf2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6d32 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6d32:	2200      	movs	r2, #0
   b6d34:	f7ff bfcd 	b.w	b6cd2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6d38 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6d38:	b510      	push	{r4, lr}
   b6d3a:	4b04      	ldr	r3, [pc, #16]	; (b6d4c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6d3c:	6003      	str	r3, [r0, #0]
   b6d3e:	4604      	mov	r4, r0
  if(buffer) {
   b6d40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6d42:	b108      	cbz	r0, b6d48 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6d44:	f000 ffd0 	bl	b7ce8 <free>
    buffer = NULL;
  }
}
   b6d48:	4620      	mov	r0, r4
   b6d4a:	bd10      	pop	{r4, pc}
   b6d4c:	000bed70 	.word	0x000bed70

000b6d50 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6d50:	b510      	push	{r4, lr}
   b6d52:	4604      	mov	r4, r0
}
   b6d54:	f7ff fff0 	bl	b6d38 <_ZN16Adafruit_SSD1306D1Ev>
   b6d58:	4620      	mov	r0, r4
   b6d5a:	2150      	movs	r1, #80	; 0x50
   b6d5c:	f7fd feaf 	bl	b4abe <_ZdlPvj>
   b6d60:	4620      	mov	r0, r4
   b6d62:	bd10      	pop	{r4, pc}

000b6d64 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6d64:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6d66:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6d68:	db4b      	blt.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d6a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6d6e:	428c      	cmp	r4, r1
   b6d70:	dd47      	ble.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d72:	2a00      	cmp	r2, #0
   b6d74:	db45      	blt.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d76:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6d7a:	4294      	cmp	r4, r2
   b6d7c:	dd41      	ble.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6d7e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6d80:	2c02      	cmp	r4, #2
   b6d82:	d01f      	beq.n	b6dc4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6d84:	2c03      	cmp	r4, #3
   b6d86:	d026      	beq.n	b6dd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6d88:	2c01      	cmp	r4, #1
   b6d8a:	d104      	bne.n	b6d96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6d8c:	8904      	ldrh	r4, [r0, #8]
   b6d8e:	43d2      	mvns	r2, r2
   b6d90:	4414      	add	r4, r2
      break;
   b6d92:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6d94:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6d96:	2b01      	cmp	r3, #1
   b6d98:	d023      	beq.n	b6de2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6d9a:	2b02      	cmp	r3, #2
   b6d9c:	d032      	beq.n	b6e04 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6d9e:	bb83      	cbnz	r3, b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6da0:	2a00      	cmp	r2, #0
   b6da2:	4613      	mov	r3, r2
   b6da4:	8904      	ldrh	r4, [r0, #8]
   b6da6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6da8:	bfb8      	it	lt
   b6daa:	1dd3      	addlt	r3, r2, #7
   b6dac:	10db      	asrs	r3, r3, #3
   b6dae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6db2:	f002 0207 	and.w	r2, r2, #7
   b6db6:	2301      	movs	r3, #1
   b6db8:	4093      	lsls	r3, r2
   b6dba:	5c42      	ldrb	r2, [r0, r1]
   b6dbc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6dc0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6dc2:	e01e      	b.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6dc4:	8904      	ldrh	r4, [r0, #8]
   b6dc6:	3c01      	subs	r4, #1
   b6dc8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6dca:	8944      	ldrh	r4, [r0, #10]
   b6dcc:	43d2      	mvns	r2, r2
   b6dce:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6dd0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6dd2:	b212      	sxth	r2, r2
      break;
   b6dd4:	e7df      	b.n	b6d96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6dd6:	8944      	ldrh	r4, [r0, #10]
   b6dd8:	3c01      	subs	r4, #1
   b6dda:	1a64      	subs	r4, r4, r1
      break;
   b6ddc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6dde:	b222      	sxth	r2, r4
      break;
   b6de0:	e7d9      	b.n	b6d96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6de2:	2a00      	cmp	r2, #0
   b6de4:	8904      	ldrh	r4, [r0, #8]
   b6de6:	4613      	mov	r3, r2
   b6de8:	bfb8      	it	lt
   b6dea:	1dd3      	addlt	r3, r2, #7
   b6dec:	10db      	asrs	r3, r3, #3
   b6dee:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6df2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6df4:	f002 0007 	and.w	r0, r2, #7
   b6df8:	2201      	movs	r2, #1
   b6dfa:	4082      	lsls	r2, r0
   b6dfc:	5c58      	ldrb	r0, [r3, r1]
   b6dfe:	4302      	orrs	r2, r0
   b6e00:	545a      	strb	r2, [r3, r1]
}
   b6e02:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6e04:	2a00      	cmp	r2, #0
   b6e06:	4613      	mov	r3, r2
   b6e08:	8904      	ldrh	r4, [r0, #8]
   b6e0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6e0c:	bfb8      	it	lt
   b6e0e:	1dd3      	addlt	r3, r2, #7
   b6e10:	10db      	asrs	r3, r3, #3
   b6e12:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6e16:	f002 0207 	and.w	r2, r2, #7
   b6e1a:	2301      	movs	r3, #1
   b6e1c:	fa03 f202 	lsl.w	r2, r3, r2
   b6e20:	5c43      	ldrb	r3, [r0, r1]
   b6e22:	405a      	eors	r2, r3
   b6e24:	e7cc      	b.n	b6dc0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6e28 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b6e28:	b570      	push	{r4, r5, r6, lr}
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6e2e:	2600      	movs	r6, #0
   b6e30:	f7ff f804 	bl	b5e3c <_ZN12Adafruit_GFXC1Ess>
   b6e34:	4b11      	ldr	r3, [pc, #68]	; (b6e7c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b6e36:	6023      	str	r3, [r4, #0]
   b6e38:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b6e3a:	b915      	cbnz	r5, b6e42 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b6e3c:	f004 ff88 	bl	bbd50 <_Z19__fetch_global_Wirev>
   b6e40:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6e42:	23ff      	movs	r3, #255	; 0xff
   b6e44:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6e48:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b6e4c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6e50:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b6e54:	4b0a      	ldr	r3, [pc, #40]	; (b6e80 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b6e56:	63a3      	str	r3, [r4, #56]	; 0x38
   b6e58:	2301      	movs	r3, #1
   b6e5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6e5e:	9b05      	ldr	r3, [sp, #20]
   b6e60:	64a3      	str	r3, [r4, #72]	; 0x48
   b6e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6e66:	9b06      	ldr	r3, [sp, #24]
   b6e68:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6e6a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6e6e:	6426      	str	r6, [r4, #64]	; 0x40
   b6e70:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6e74:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6e76:	4620      	mov	r0, r4
   b6e78:	bd70      	pop	{r4, r5, r6, pc}
   b6e7a:	bf00      	nop
   b6e7c:	000bed70 	.word	0x000bed70
   b6e80:	000be8bc 	.word	0x000be8bc

000b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e86:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6e88:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6e8a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6e8c:	b190      	cbz	r0, b6eb4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6e8e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6e92:	f004 f8ab 	bl	bafec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6e96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e98:	6803      	ldr	r3, [r0, #0]
   b6e9a:	2100      	movs	r1, #0
   b6e9c:	689b      	ldr	r3, [r3, #8]
   b6e9e:	4798      	blx	r3
    WIRE_WRITE(c);
   b6ea0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ea2:	6803      	ldr	r3, [r0, #0]
   b6ea4:	4629      	mov	r1, r5
   b6ea6:	689b      	ldr	r3, [r3, #8]
   b6ea8:	4798      	blx	r3
    wire->endTransmission();
   b6eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6eac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6eb0:	f004 b8a3 	b.w	baffa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6eb4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6eb8:	4601      	mov	r1, r0
   b6eba:	b298      	uxth	r0, r3
   b6ebc:	f004 fe83 	bl	bbbc6 <digitalWrite>
  if(spi) {
   b6ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6ec2:	b120      	cbz	r0, b6ece <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6ec4:	4629      	mov	r1, r5
}
   b6ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6eca:	f001 b83f 	b.w	b7f4c <_ZN8SPIClass8transferEh>
   b6ece:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6ed0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6ed2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6ed6:	ea05 0107 	and.w	r1, r5, r7
   b6eda:	b280      	uxth	r0, r0
   b6edc:	f004 fe73 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6ee0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ee4:	2101      	movs	r1, #1
   b6ee6:	b280      	uxth	r0, r0
   b6ee8:	f004 fe6d 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6eec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ef0:	2100      	movs	r1, #0
   b6ef2:	b280      	uxth	r0, r0
   b6ef4:	f004 fe67 	bl	bbbc6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6ef8:	3e01      	subs	r6, #1
   b6efa:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6efe:	d1e8      	bne.n	b6ed2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f02 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6f02:	b538      	push	{r3, r4, r5, lr}
   b6f04:	4604      	mov	r4, r0
  TRANSACTION_START
   b6f06:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6f08:	460d      	mov	r5, r1
  TRANSACTION_START
   b6f0a:	b180      	cbz	r0, b6f2e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6f0e:	f004 f85f 	bl	bafd0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6f12:	2d00      	cmp	r5, #0
   b6f14:	4620      	mov	r0, r4
   b6f16:	bf14      	ite	ne
   b6f18:	21a7      	movne	r1, #167	; 0xa7
   b6f1a:	21a6      	moveq	r1, #166	; 0xa6
   b6f1c:	f7ff ffb2 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6f20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f22:	b188      	cbz	r0, b6f48 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6f24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6f2a:	f004 b851 	b.w	bafd0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6f2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6f30:	b118      	cbz	r0, b6f3a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6f32:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6f36:	f000 ff9b 	bl	b7e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6f3a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f3e:	2100      	movs	r1, #0
   b6f40:	b280      	uxth	r0, r0
   b6f42:	f004 fe40 	bl	bbbc6 <digitalWrite>
   b6f46:	e7e4      	b.n	b6f12 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6f48:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f4c:	2101      	movs	r1, #1
   b6f4e:	b280      	uxth	r0, r0
   b6f50:	f004 fe39 	bl	bbbc6 <digitalWrite>
   b6f54:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6f56:	b118      	cbz	r0, b6f60 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6f5c:	f000 bf6e 	b.w	b7e3c <_ZN8SPIClass14endTransactionEv>
}
   b6f60:	bd38      	pop	{r3, r4, r5, pc}

000b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6f66:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6f68:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6f6a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6f6c:	188f      	adds	r7, r1, r2
   b6f6e:	b340      	cbz	r0, b6fc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6f70:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6f74:	f004 f83a 	bl	bafec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6f78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f7a:	6803      	ldr	r3, [r0, #0]
   b6f7c:	2100      	movs	r1, #0
   b6f7e:	689b      	ldr	r3, [r3, #8]
   b6f80:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6f82:	2601      	movs	r6, #1
    while(n--) {
   b6f84:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6f86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6f88:	d017      	beq.n	b6fba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6f8a:	2e1f      	cmp	r6, #31
   b6f8c:	d90c      	bls.n	b6fa8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6f8e:	f004 f834 	bl	baffa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6f92:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6f96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f98:	f004 f828 	bl	bafec <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f9e:	6803      	ldr	r3, [r0, #0]
   b6fa0:	2100      	movs	r1, #0
   b6fa2:	689b      	ldr	r3, [r3, #8]
   b6fa4:	4798      	blx	r3
        bytesOut = 1;
   b6fa6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6fa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6faa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6fae:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6fb0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6fb2:	689b      	ldr	r3, [r3, #8]
   b6fb4:	4798      	blx	r3
      bytesOut++;
   b6fb6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6fb8:	e7e4      	b.n	b6f84 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6fba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6fbe:	f004 b81c 	b.w	baffa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6fc2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6fc6:	4601      	mov	r1, r0
   b6fc8:	b298      	uxth	r0, r3
   b6fca:	f004 fdfc 	bl	bbbc6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6fce:	42bd      	cmp	r5, r7
   b6fd0:	d022      	beq.n	b7018 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6fd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6fd4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6fd8:	b118      	cbz	r0, b6fe2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6fda:	4649      	mov	r1, r9
   b6fdc:	f000 ffb6 	bl	b7f4c <_ZN8SPIClass8transferEh>
   b6fe0:	e7f5      	b.n	b6fce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6fe2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6fe4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6fe8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6fec:	ea09 0108 	and.w	r1, r9, r8
   b6ff0:	b280      	uxth	r0, r0
   b6ff2:	f004 fde8 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6ff6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ffa:	2101      	movs	r1, #1
   b6ffc:	b280      	uxth	r0, r0
   b6ffe:	f004 fde2 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7002:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7006:	2100      	movs	r1, #0
   b7008:	b280      	uxth	r0, r0
   b700a:	f004 fddc 	bl	bbbc6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b700e:	3e01      	subs	r6, #1
   b7010:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7014:	d1e8      	bne.n	b6fe8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7016:	e7da      	b.n	b6fce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b701c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b701c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7020:	1dda      	adds	r2, r3, #7
   b7022:	bf48      	it	mi
   b7024:	f103 020e 	addmi.w	r2, r3, #14
   b7028:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b702c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b702e:	10d2      	asrs	r2, r2, #3
   b7030:	435a      	muls	r2, r3
   b7032:	2100      	movs	r1, #0
   b7034:	f005 b81c 	b.w	bc070 <memset>

000b7038 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7038:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b703c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b703e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7040:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7044:	4604      	mov	r4, r0
   b7046:	460f      	mov	r7, r1
   b7048:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b704a:	b1c3      	cbz	r3, b707e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b704c:	4620      	mov	r0, r4
   b704e:	f7ff ffe5 	bl	b701c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7052:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b7056:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b705a:	2820      	cmp	r0, #32
   b705c:	dc21      	bgt.n	b70a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b705e:	2320      	movs	r3, #32
   b7060:	2201      	movs	r2, #1
   b7062:	3820      	subs	r0, #32
   b7064:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b7068:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b706c:	2373      	movs	r3, #115	; 0x73
   b706e:	3973      	subs	r1, #115	; 0x73
   b7070:	9300      	str	r3, [sp, #0]
   b7072:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7076:	4b89      	ldr	r3, [pc, #548]	; (b729c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b7078:	f340 024f 	sbfx	r2, r0, #1, #16
   b707c:	e021      	b.n	b70c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b707e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7082:	1dd8      	adds	r0, r3, #7
   b7084:	bf48      	it	mi
   b7086:	f103 000e 	addmi.w	r0, r3, #14
   b708a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b708e:	10c0      	asrs	r0, r0, #3
   b7090:	4358      	muls	r0, r3
   b7092:	f000 fe21 	bl	b7cd8 <malloc>
   b7096:	62e0      	str	r0, [r4, #44]	; 0x2c
   b7098:	2800      	cmp	r0, #0
   b709a:	d1d7      	bne.n	b704c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b709c:	b004      	add	sp, #16
   b709e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b70a2:	3840      	subs	r0, #64	; 0x40
   b70a4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b70a8:	fa02 f280 	sxtah	r2, r2, r0
   b70ac:	2340      	movs	r3, #64	; 0x40
   b70ae:	2001      	movs	r0, #1
   b70b0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b70b4:	2352      	movs	r3, #82	; 0x52
   b70b6:	3952      	subs	r1, #82	; 0x52
   b70b8:	9300      	str	r3, [sp, #0]
   b70ba:	4b79      	ldr	r3, [pc, #484]	; (b72a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b70bc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b70c0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b70c2:	4620      	mov	r0, r4
   b70c4:	f341 014f 	sbfx	r1, r1, #1, #16
   b70c8:	f7fe fece 	bl	b5e68 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b70cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b70ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b70d2:	2800      	cmp	r0, #0
   b70d4:	d078      	beq.n	b71c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b70d6:	2d00      	cmp	r5, #0
   b70d8:	d174      	bne.n	b71c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b70da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b70de:	2b20      	cmp	r3, #32
   b70e0:	bf0c      	ite	eq
   b70e2:	253c      	moveq	r5, #60	; 0x3c
   b70e4:	253d      	movne	r5, #61	; 0x3d
   b70e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b70ea:	f1b8 0f00 	cmp.w	r8, #0
   b70ee:	d001      	beq.n	b70f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b70f0:	f003 ff72 	bl	bafd8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b70f4:	b1fe      	cbz	r6, b7136 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b70f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b70fa:	2800      	cmp	r0, #0
   b70fc:	db1b      	blt.n	b7136 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b70fe:	2101      	movs	r1, #1
   b7100:	b280      	uxth	r0, r0
   b7102:	f004 fd4f 	bl	bbba4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b7106:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b710a:	2101      	movs	r1, #1
   b710c:	b280      	uxth	r0, r0
   b710e:	f004 fd5a 	bl	bbbc6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7112:	2001      	movs	r0, #1
   b7114:	f003 fce4 	bl	baae0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7118:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b711c:	2100      	movs	r1, #0
   b711e:	b280      	uxth	r0, r0
   b7120:	f004 fd51 	bl	bbbc6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7124:	200a      	movs	r0, #10
   b7126:	f003 fcdb 	bl	baae0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b712a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b712e:	2101      	movs	r1, #1
   b7130:	b280      	uxth	r0, r0
   b7132:	f004 fd48 	bl	bbbc6 <digitalWrite>
  TRANSACTION_START
   b7136:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7138:	2800      	cmp	r0, #0
   b713a:	d074      	beq.n	b7226 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b713c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b713e:	f003 ff47 	bl	bafd0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7142:	2204      	movs	r2, #4
   b7144:	4957      	ldr	r1, [pc, #348]	; (b72a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7146:	4620      	mov	r0, r4
   b7148:	f7ff ff0b 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b714c:	8961      	ldrh	r1, [r4, #10]
   b714e:	3901      	subs	r1, #1
   b7150:	b2c9      	uxtb	r1, r1
   b7152:	4620      	mov	r0, r4
   b7154:	f7ff fe96 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b7158:	4953      	ldr	r1, [pc, #332]	; (b72a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b715a:	2204      	movs	r2, #4
   b715c:	4620      	mov	r0, r4
   b715e:	f7ff ff00 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b7162:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7166:	2b01      	cmp	r3, #1
   b7168:	bf0c      	ite	eq
   b716a:	2110      	moveq	r1, #16
   b716c:	2114      	movne	r1, #20
   b716e:	4620      	mov	r0, r4
   b7170:	f7ff fe88 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b7174:	2204      	movs	r2, #4
   b7176:	494d      	ldr	r1, [pc, #308]	; (b72ac <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b7178:	4620      	mov	r0, r4
   b717a:	f7ff fef2 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b717e:	68a3      	ldr	r3, [r4, #8]
   b7180:	4a4b      	ldr	r2, [pc, #300]	; (b72b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b7182:	4293      	cmp	r3, r2
   b7184:	d15c      	bne.n	b7240 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b7186:	494b      	ldr	r1, [pc, #300]	; (b72b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b7188:	2204      	movs	r2, #4
   b718a:	4620      	mov	r0, r4
   b718c:	f7ff fee9 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b7190:	21d9      	movs	r1, #217	; 0xd9
   b7192:	4620      	mov	r0, r4
   b7194:	f7ff fe76 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b7198:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b719c:	2b01      	cmp	r3, #1
   b719e:	bf0c      	ite	eq
   b71a0:	2122      	moveq	r1, #34	; 0x22
   b71a2:	21f1      	movne	r1, #241	; 0xf1
   b71a4:	4620      	mov	r0, r4
   b71a6:	f7ff fe6d 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b71aa:	4620      	mov	r0, r4
   b71ac:	4942      	ldr	r1, [pc, #264]	; (b72b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b71ae:	2206      	movs	r2, #6
   b71b0:	f7ff fed7 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b71b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b71b6:	2800      	cmp	r0, #0
   b71b8:	d063      	beq.n	b7282 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b71ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b71bc:	f003 ff08 	bl	bafd0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b71c0:	2001      	movs	r0, #1
   b71c2:	e76b      	b.n	b709c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b71c4:	b26d      	sxtb	r5, r5
   b71c6:	e78e      	b.n	b70e6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b71c8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b71cc:	2101      	movs	r1, #1
   b71ce:	b280      	uxth	r0, r0
   b71d0:	f004 fce8 	bl	bbba4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b71d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b71d8:	2101      	movs	r1, #1
   b71da:	b280      	uxth	r0, r0
   b71dc:	f004 fce2 	bl	bbba4 <pinMode>
    SSD1306_DESELECT
   b71e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b71e4:	2101      	movs	r1, #1
   b71e6:	b280      	uxth	r0, r0
   b71e8:	f004 fced 	bl	bbbc6 <digitalWrite>
    if(spi) { // Hardware SPI
   b71ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b71ee:	b13d      	cbz	r5, b7200 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b71f0:	f1b8 0f00 	cmp.w	r8, #0
   b71f4:	f43f af7e 	beq.w	b70f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b71f8:	4628      	mov	r0, r5
   b71fa:	f000 fe0b 	bl	b7e14 <_ZN8SPIClass5beginEv>
   b71fe:	e779      	b.n	b70f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b7200:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7204:	2101      	movs	r1, #1
   b7206:	b280      	uxth	r0, r0
   b7208:	f004 fccc 	bl	bbba4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b720c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7210:	2101      	movs	r1, #1
   b7212:	b280      	uxth	r0, r0
   b7214:	f004 fcc6 	bl	bbba4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7218:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b721c:	4629      	mov	r1, r5
   b721e:	b280      	uxth	r0, r0
   b7220:	f004 fcd1 	bl	bbbc6 <digitalWrite>
   b7224:	e766      	b.n	b70f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b7226:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7228:	b118      	cbz	r0, b7232 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b722a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b722e:	f000 fe1f 	bl	b7e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7232:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7236:	2100      	movs	r1, #0
   b7238:	b280      	uxth	r0, r0
   b723a:	f004 fcc4 	bl	bbbc6 <digitalWrite>
   b723e:	e780      	b.n	b7142 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7240:	4a1e      	ldr	r2, [pc, #120]	; (b72bc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7242:	4293      	cmp	r3, r2
   b7244:	d10e      	bne.n	b7264 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b7246:	491e      	ldr	r1, [pc, #120]	; (b72c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b7248:	2203      	movs	r2, #3
   b724a:	4620      	mov	r0, r4
   b724c:	f7ff fe89 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b7250:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7254:	2b01      	cmp	r3, #1
   b7256:	bf0c      	ite	eq
   b7258:	219f      	moveq	r1, #159	; 0x9f
   b725a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b725c:	4620      	mov	r0, r4
   b725e:	f7ff fe11 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b7262:	e795      	b.n	b7190 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b7264:	4a17      	ldr	r2, [pc, #92]	; (b72c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b7266:	4293      	cmp	r3, r2
   b7268:	d192      	bne.n	b7190 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b726a:	4917      	ldr	r1, [pc, #92]	; (b72c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b726c:	2203      	movs	r2, #3
   b726e:	4620      	mov	r0, r4
   b7270:	f7ff fe77 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7274:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7278:	2b01      	cmp	r3, #1
   b727a:	bf0c      	ite	eq
   b727c:	2110      	moveq	r1, #16
   b727e:	21af      	movne	r1, #175	; 0xaf
   b7280:	e7ec      	b.n	b725c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b7282:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7286:	2101      	movs	r1, #1
   b7288:	b280      	uxth	r0, r0
   b728a:	f004 fc9c 	bl	bbbc6 <digitalWrite>
   b728e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7290:	2800      	cmp	r0, #0
   b7292:	d095      	beq.n	b71c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b7294:	f000 fdd2 	bl	b7e3c <_ZN8SPIClass14endTransactionEv>
   b7298:	e792      	b.n	b71c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b729a:	bf00      	nop
   b729c:	000beb88 	.word	0x000beb88
   b72a0:	000be8c8 	.word	0x000be8c8
   b72a4:	000bedd0 	.word	0x000bedd0
   b72a8:	000bedd4 	.word	0x000bedd4
   b72ac:	000bedd8 	.word	0x000bedd8
   b72b0:	00200080 	.word	0x00200080
   b72b4:	000bede2 	.word	0x000bede2
   b72b8:	000beddc 	.word	0x000beddc
   b72bc:	00400080 	.word	0x00400080
   b72c0:	000bede6 	.word	0x000bede6
   b72c4:	00100060 	.word	0x00100060
   b72c8:	000bede9 	.word	0x000bede9

000b72cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72cc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b72ce:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72d0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b72d4:	db3d      	blt.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b72d6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b72da:	4294      	cmp	r4, r2
   b72dc:	dd39      	ble.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b72de:	2900      	cmp	r1, #0
      w += x;
   b72e0:	bfbe      	ittt	lt
   b72e2:	185b      	addlt	r3, r3, r1
   b72e4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b72e6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b72e8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b72ec:	18ce      	adds	r6, r1, r3
   b72ee:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b72f0:	bfc4      	itt	gt
   b72f2:	1a63      	subgt	r3, r4, r1
   b72f4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b72f6:	2b00      	cmp	r3, #0
   b72f8:	dd2b      	ble.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b72fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b72fc:	10d6      	asrs	r6, r2, #3
   b72fe:	fb14 1106 	smlabb	r1, r4, r6, r1
   b7302:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b7304:	f002 0007 	and.w	r0, r2, #7
   b7308:	2201      	movs	r2, #1
   b730a:	4082      	lsls	r2, r0
      switch(color) {
   b730c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b730e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b7310:	d016      	beq.n	b7340 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b7312:	2d02      	cmp	r5, #2
   b7314:	d00b      	beq.n	b732e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b7316:	b9e5      	cbnz	r5, b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7318:	43d2      	mvns	r2, r2
   b731a:	b2d2      	uxtb	r2, r2
   b731c:	440b      	add	r3, r1
   b731e:	4299      	cmp	r1, r3
   b7320:	d017      	beq.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7322:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7326:	4010      	ands	r0, r2
   b7328:	f801 0c01 	strb.w	r0, [r1, #-1]
   b732c:	e7f7      	b.n	b731e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b732e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7330:	4299      	cmp	r1, r3
   b7332:	d00e      	beq.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7334:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7338:	4050      	eors	r0, r2
   b733a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b733e:	e7f7      	b.n	b7330 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7340:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b7342:	4299      	cmp	r1, r3
   b7344:	d005      	beq.n	b7352 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7346:	f811 0b01 	ldrb.w	r0, [r1], #1
   b734a:	4310      	orrs	r0, r2
   b734c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7350:	e7f7      	b.n	b7342 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b7352:	bd70      	pop	{r4, r5, r6, pc}

000b7354 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7354:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7356:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7358:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b735c:	db76      	blt.n	b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b735e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b7362:	42b1      	cmp	r1, r6
   b7364:	da72      	bge.n	b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b7366:	2a00      	cmp	r2, #0
      __h += __y;
   b7368:	bfbe      	ittt	lt
   b736a:	189b      	addlt	r3, r3, r2
   b736c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b736e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7370:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7374:	18d7      	adds	r7, r2, r3
   b7376:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b7378:	bfc4      	itt	gt
   b737a:	1aa3      	subgt	r3, r4, r2
   b737c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b737e:	2b00      	cmp	r3, #0
   b7380:	dd64      	ble.n	b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7382:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b7386:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b7388:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b738c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b7390:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7392:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b7396:	d023      	beq.n	b73e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b7398:	f1c2 0208 	rsb	r2, r2, #8
   b739c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b739e:	492d      	ldr	r1, [pc, #180]	; (b7454 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b73a0:	4293      	cmp	r3, r2
   b73a2:	bf3c      	itt	cc
   b73a4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b73a8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b73ac:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b73ae:	bf3c      	itt	cc
   b73b0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b73b4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b73b8:	2d01      	cmp	r5, #1
   b73ba:	d007      	beq.n	b73cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b73bc:	2d02      	cmp	r5, #2
   b73be:	d02e      	beq.n	b741e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b73c0:	b94d      	cbnz	r5, b73d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b73c2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b73c6:	ea2c 0101 	bic.w	r1, ip, r1
   b73ca:	e003      	b.n	b73d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b73cc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b73d0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b73d4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b73d6:	4293      	cmp	r3, r2
   b73d8:	d338      	bcc.n	b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b73da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b73de:	440c      	add	r4, r1
        h -= mod;
   b73e0:	1a9a      	subs	r2, r3, r2
   b73e2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b73e4:	2a07      	cmp	r2, #7
   b73e6:	d90e      	bls.n	b7406 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b73e8:	2d02      	cmp	r5, #2
   b73ea:	d11d      	bne.n	b7428 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b73ec:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b73ee:	7821      	ldrb	r1, [r4, #0]
   b73f0:	43c9      	mvns	r1, r1
   b73f2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b73f4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b73f6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b73fa:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b73fc:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b73fe:	440c      	add	r4, r1
            } while(h >= 8);
   b7400:	d8f5      	bhi.n	b73ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b7402:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b7406:	b30a      	cbz	r2, b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b7408:	4b13      	ldr	r3, [pc, #76]	; (b7458 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b740a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b740c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b740e:	d01a      	beq.n	b7446 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b7410:	2d02      	cmp	r5, #2
   b7412:	d01c      	beq.n	b744e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b7414:	b9d5      	cbnz	r5, b744c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b7416:	7822      	ldrb	r2, [r4, #0]
   b7418:	ea22 0303 	bic.w	r3, r2, r3
   b741c:	e015      	b.n	b744a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b741e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7422:	ea81 010c 	eor.w	r1, r1, ip
   b7426:	e7d5      	b.n	b73d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7428:	1e29      	subs	r1, r5, #0
   b742a:	bf18      	it	ne
   b742c:	2101      	movne	r1, #1
   b742e:	4249      	negs	r1, r1
   b7430:	b2c9      	uxtb	r1, r1
   b7432:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b7434:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b7436:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7438:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b743c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b743e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7440:	4434      	add	r4, r6
            } while(h >= 8);
   b7442:	d8f7      	bhi.n	b7434 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b7444:	e7dd      	b.n	b7402 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b7446:	7822      	ldrb	r2, [r4, #0]
   b7448:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b744a:	7023      	strb	r3, [r4, #0]
}
   b744c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b744e:	7822      	ldrb	r2, [r4, #0]
   b7450:	4053      	eors	r3, r2
   b7452:	e7fa      	b.n	b744a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b7454:	000bedc0 	.word	0x000bedc0
   b7458:	000bedc8 	.word	0x000bedc8

000b745c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b745c:	b470      	push	{r4, r5, r6}
   b745e:	4614      	mov	r4, r2
  switch(rotation) {
   b7460:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7462:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b7466:	2a02      	cmp	r2, #2
   b7468:	d00d      	beq.n	b7486 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b746a:	2a03      	cmp	r2, #3
   b746c:	d018      	beq.n	b74a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b746e:	2a01      	cmp	r2, #1
   b7470:	d111      	bne.n	b7496 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b7472:	8902      	ldrh	r2, [r0, #8]
   b7474:	43e4      	mvns	r4, r4
   b7476:	4414      	add	r4, r2
   b7478:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b747a:	9603      	str	r6, [sp, #12]
   b747c:	460a      	mov	r2, r1
   b747e:	4621      	mov	r1, r4
}
   b7480:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7482:	f7ff bf67 	b.w	b7354 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b7486:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b7488:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b748a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b748c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b748e:	4414      	add	r4, r2
    x -= (w-1);
   b7490:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b7492:	b224      	sxth	r4, r4
    x -= (w-1);
   b7494:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b7496:	9603      	str	r6, [sp, #12]
   b7498:	4622      	mov	r2, r4
}
   b749a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b749c:	f7ff bf16 	b.w	b72cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b74a0:	8945      	ldrh	r5, [r0, #10]
   b74a2:	4419      	add	r1, r3
   b74a4:	1a69      	subs	r1, r5, r1
   b74a6:	b209      	sxth	r1, r1
    break;
   b74a8:	e7e7      	b.n	b747a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b74aa <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b74aa:	b430      	push	{r4, r5}
   b74ac:	4614      	mov	r4, r2
  switch(rotation) {
   b74ae:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b74b0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b74b4:	2a02      	cmp	r2, #2
   b74b6:	d00d      	beq.n	b74d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b74b8:	2a03      	cmp	r2, #3
   b74ba:	d018      	beq.n	b74ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b74bc:	2a01      	cmp	r2, #1
   b74be:	d111      	bne.n	b74e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b74c0:	18e2      	adds	r2, r4, r3
   b74c2:	8904      	ldrh	r4, [r0, #8]
   b74c4:	1aa4      	subs	r4, r4, r2
   b74c6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b74c8:	9502      	str	r5, [sp, #8]
   b74ca:	460a      	mov	r2, r1
   b74cc:	4621      	mov	r1, r4
}
   b74ce:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b74d0:	f7ff befc 	b.w	b72cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b74d4:	8902      	ldrh	r2, [r0, #8]
   b74d6:	43c9      	mvns	r1, r1
   b74d8:	4411      	add	r1, r2
    y -= (h-1);
   b74da:	18e2      	adds	r2, r4, r3
   b74dc:	8944      	ldrh	r4, [r0, #10]
   b74de:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b74e0:	b209      	sxth	r1, r1
    y -= (h-1);
   b74e2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b74e4:	9502      	str	r5, [sp, #8]
   b74e6:	4622      	mov	r2, r4
}
   b74e8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b74ea:	f7ff bf33 	b.w	b7354 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b74ee:	8942      	ldrh	r2, [r0, #10]
   b74f0:	43c9      	mvns	r1, r1
   b74f2:	4411      	add	r1, r2
   b74f4:	b209      	sxth	r1, r1
    break;
   b74f6:	e7e7      	b.n	b74c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b74f8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b74f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74fc:	4604      	mov	r4, r0
  TRANSACTION_START
   b74fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7500:	2800      	cmp	r0, #0
   b7502:	d042      	beq.n	b758a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b7504:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7506:	f003 fd63 	bl	bafd0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b750a:	4947      	ldr	r1, [pc, #284]	; (b7628 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b750c:	2205      	movs	r2, #5
   b750e:	4620      	mov	r0, r4
   b7510:	f7ff fd27 	bl	b6f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b7514:	8921      	ldrh	r1, [r4, #8]
   b7516:	3901      	subs	r1, #1
   b7518:	4620      	mov	r0, r4
   b751a:	b2c9      	uxtb	r1, r1
   b751c:	f7ff fcb2 	bl	b6e84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7520:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7524:	1dde      	adds	r6, r3, #7
   b7526:	bf48      	it	mi
   b7528:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b752c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7530:	8923      	ldrh	r3, [r4, #8]
   b7532:	10f6      	asrs	r6, r6, #3
   b7534:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b7538:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b753c:	2800      	cmp	r0, #0
   b753e:	d03a      	beq.n	b75b6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b7540:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7544:	f003 fd52 	bl	bafec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b7548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b754a:	6803      	ldr	r3, [r0, #0]
   b754c:	2140      	movs	r1, #64	; 0x40
   b754e:	689b      	ldr	r3, [r3, #8]
   b7550:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7552:	2701      	movs	r7, #1
    while(count--) {
   b7554:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b7556:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b7558:	d024      	beq.n	b75a4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b755a:	2f1f      	cmp	r7, #31
   b755c:	d90c      	bls.n	b7578 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b755e:	f003 fd4c 	bl	baffa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7562:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7566:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7568:	f003 fd40 	bl	bafec <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b756c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b756e:	6803      	ldr	r3, [r0, #0]
   b7570:	2140      	movs	r1, #64	; 0x40
   b7572:	689b      	ldr	r3, [r3, #8]
   b7574:	4798      	blx	r3
        bytesOut = 1;
   b7576:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b7578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b757a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b757e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7580:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b7582:	689b      	ldr	r3, [r3, #8]
   b7584:	4798      	blx	r3
      bytesOut++;
   b7586:	b2ff      	uxtb	r7, r7
    while(count--) {
   b7588:	e7e4      	b.n	b7554 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b758a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b758c:	b118      	cbz	r0, b7596 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b758e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7592:	f000 fc6d 	bl	b7e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7596:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b759a:	2100      	movs	r1, #0
   b759c:	b280      	uxth	r0, r0
   b759e:	f004 fb12 	bl	bbbc6 <digitalWrite>
   b75a2:	e7b2      	b.n	b750a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b75a4:	f003 fd29 	bl	baffa <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b75a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b75aa:	b378      	cbz	r0, b760c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b75ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b75ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b75b2:	f003 bd0d 	b.w	bafd0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b75b6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b75ba:	2101      	movs	r1, #1
   b75bc:	b280      	uxth	r0, r0
   b75be:	f004 fb02 	bl	bbbc6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b75c2:	42ae      	cmp	r6, r5
   b75c4:	d0f0      	beq.n	b75a8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b75c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b75c8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b75cc:	b118      	cbz	r0, b75d6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b75ce:	4649      	mov	r1, r9
   b75d0:	f000 fcbc 	bl	b7f4c <_ZN8SPIClass8transferEh>
   b75d4:	e7f5      	b.n	b75c2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b75d6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b75d8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b75dc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b75e0:	ea09 0108 	and.w	r1, r9, r8
   b75e4:	b280      	uxth	r0, r0
   b75e6:	f004 faee 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b75ea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b75ee:	2101      	movs	r1, #1
   b75f0:	b280      	uxth	r0, r0
   b75f2:	f004 fae8 	bl	bbbc6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b75f6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b75fa:	2100      	movs	r1, #0
   b75fc:	b280      	uxth	r0, r0
   b75fe:	f004 fae2 	bl	bbbc6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7602:	3f01      	subs	r7, #1
   b7604:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7608:	d1e8      	bne.n	b75dc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b760a:	e7da      	b.n	b75c2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b760c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7610:	2101      	movs	r1, #1
   b7612:	b280      	uxth	r0, r0
   b7614:	f004 fad7 	bl	bbbc6 <digitalWrite>
   b7618:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b761a:	b118      	cbz	r0, b7624 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b761c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b7620:	f000 bc0c 	b.w	b7e3c <_ZN8SPIClass14endTransactionEv>
}
   b7624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7628:	000bedec 	.word	0x000bedec

000b762c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b762c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b762e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7630:	4604      	mov	r4, r0
      if (_M_manager)
   b7632:	b113      	cbz	r3, b763a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7634:	2203      	movs	r2, #3
   b7636:	4601      	mov	r1, r0
   b7638:	4798      	blx	r3
    }
   b763a:	4620      	mov	r0, r4
   b763c:	bd10      	pop	{r4, pc}

000b763e <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b763e:	f003 ba4f 	b.w	baae0 <delay>

000b7642 <_Z11BlynkMillisv>:
   b7642:	f000 b87f 	b.w	b7744 <HAL_Timer_Get_Milli_Seconds>

000b7646 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b7646:	4770      	bx	lr

000b7648 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b7648:	4770      	bx	lr

000b764a <BlynkNoOpCbk>:
{}
   b764a:	4770      	bx	lr

000b764c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b764c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b764e:	bf5a      	itte	pl
   b7650:	4b02      	ldrpl	r3, [pc, #8]	; (b765c <GetReadHandler+0x10>)
   b7652:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b7656:	2000      	movmi	r0, #0
#endif
}
   b7658:	4770      	bx	lr
   b765a:	bf00      	nop
   b765c:	000bedf4 	.word	0x000bedf4

000b7660 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b7660:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b7662:	bf5a      	itte	pl
   b7664:	4b02      	ldrpl	r3, [pc, #8]	; (b7670 <GetWriteHandler+0x10>)
   b7666:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b766a:	2000      	movmi	r0, #0
#endif
}
   b766c:	4770      	bx	lr
   b766e:	bf00      	nop
   b7670:	000beff4 	.word	0x000beff4

000b7674 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7674:	b508      	push	{r3, lr}
   b7676:	4b02      	ldr	r3, [pc, #8]	; (b7680 <netdb_freeaddrinfo+0xc>)
   b7678:	681b      	ldr	r3, [r3, #0]
   b767a:	689b      	ldr	r3, [r3, #8]
   b767c:	9301      	str	r3, [sp, #4]
   b767e:	bd08      	pop	{r3, pc}
   b7680:	00030268 	.word	0x00030268

000b7684 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7684:	b508      	push	{r3, lr}
   b7686:	4b02      	ldr	r3, [pc, #8]	; (b7690 <netdb_getaddrinfo+0xc>)
   b7688:	681b      	ldr	r3, [r3, #0]
   b768a:	68db      	ldr	r3, [r3, #12]
   b768c:	9301      	str	r3, [sp, #4]
   b768e:	bd08      	pop	{r3, pc}
   b7690:	00030268 	.word	0x00030268

000b7694 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b7694:	b508      	push	{r3, lr}
   b7696:	4b02      	ldr	r3, [pc, #8]	; (b76a0 <hal_pin_validate_function+0xc>)
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	685b      	ldr	r3, [r3, #4]
   b769c:	9301      	str	r3, [sp, #4]
   b769e:	bd08      	pop	{r3, pc}
   b76a0:	0003022c 	.word	0x0003022c

000b76a4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b76a4:	b508      	push	{r3, lr}
   b76a6:	4b02      	ldr	r3, [pc, #8]	; (b76b0 <hal_gpio_mode+0xc>)
   b76a8:	681b      	ldr	r3, [r3, #0]
   b76aa:	689b      	ldr	r3, [r3, #8]
   b76ac:	9301      	str	r3, [sp, #4]
   b76ae:	bd08      	pop	{r3, pc}
   b76b0:	0003022c 	.word	0x0003022c

000b76b4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b76b4:	b508      	push	{r3, lr}
   b76b6:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <hal_gpio_get_mode+0xc>)
   b76b8:	681b      	ldr	r3, [r3, #0]
   b76ba:	68db      	ldr	r3, [r3, #12]
   b76bc:	9301      	str	r3, [sp, #4]
   b76be:	bd08      	pop	{r3, pc}
   b76c0:	0003022c 	.word	0x0003022c

000b76c4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b76c4:	b508      	push	{r3, lr}
   b76c6:	4b02      	ldr	r3, [pc, #8]	; (b76d0 <hal_gpio_write+0xc>)
   b76c8:	681b      	ldr	r3, [r3, #0]
   b76ca:	691b      	ldr	r3, [r3, #16]
   b76cc:	9301      	str	r3, [sp, #4]
   b76ce:	bd08      	pop	{r3, pc}
   b76d0:	0003022c 	.word	0x0003022c

000b76d4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b02      	ldr	r3, [pc, #8]	; (b76e0 <hal_gpio_read+0xc>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	695b      	ldr	r3, [r3, #20]
   b76dc:	9301      	str	r3, [sp, #4]
   b76de:	bd08      	pop	{r3, pc}
   b76e0:	0003022c 	.word	0x0003022c

000b76e4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b02      	ldr	r3, [pc, #8]	; (b76f0 <HAL_DAC_Write+0xc>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b76ec:	9301      	str	r3, [sp, #4]
   b76ee:	bd08      	pop	{r3, pc}
   b76f0:	0003022c 	.word	0x0003022c

000b76f4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b76f4:	b508      	push	{r3, lr}
   b76f6:	4b02      	ldr	r3, [pc, #8]	; (b7700 <hal_adc_read+0xc>)
   b76f8:	681b      	ldr	r3, [r3, #0]
   b76fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	bd08      	pop	{r3, pc}
   b7700:	0003022c 	.word	0x0003022c

000b7704 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b7704:	b508      	push	{r3, lr}
   b7706:	4b02      	ldr	r3, [pc, #8]	; (b7710 <hal_pwm_write_ext+0xc>)
   b7708:	681b      	ldr	r3, [r3, #0]
   b770a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b770c:	9301      	str	r3, [sp, #4]
   b770e:	bd08      	pop	{r3, pc}
   b7710:	0003022c 	.word	0x0003022c

000b7714 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7714:	b508      	push	{r3, lr}
   b7716:	4b02      	ldr	r3, [pc, #8]	; (b7720 <if_index_to_name+0xc>)
   b7718:	681b      	ldr	r3, [r3, #0]
   b771a:	695b      	ldr	r3, [r3, #20]
   b771c:	9301      	str	r3, [sp, #4]
   b771e:	bd08      	pop	{r3, pc}
   b7720:	0003026c 	.word	0x0003026c

000b7724 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b02      	ldr	r3, [pc, #8]	; (b7730 <HAL_RNG_GetRandomNumber+0xc>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	685b      	ldr	r3, [r3, #4]
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	bd08      	pop	{r3, pc}
   b7730:	00030218 	.word	0x00030218

000b7734 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b02      	ldr	r3, [pc, #8]	; (b7740 <HAL_Delay_Microseconds+0xc>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	68db      	ldr	r3, [r3, #12]
   b773c:	9301      	str	r3, [sp, #4]
   b773e:	bd08      	pop	{r3, pc}
   b7740:	00030218 	.word	0x00030218

000b7744 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7744:	b508      	push	{r3, lr}
   b7746:	4b02      	ldr	r3, [pc, #8]	; (b7750 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7748:	681b      	ldr	r3, [r3, #0]
   b774a:	695b      	ldr	r3, [r3, #20]
   b774c:	9301      	str	r3, [sp, #4]
   b774e:	bd08      	pop	{r3, pc}
   b7750:	00030218 	.word	0x00030218

000b7754 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <hal_ble_stack_init+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	689b      	ldr	r3, [r3, #8]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	00030278 	.word	0x00030278

000b7764 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <hal_ble_gap_set_advertising_parameters+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	00030278 	.word	0x00030278

000b7774 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <hal_ble_gap_get_advertising_parameters+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030278 	.word	0x00030278

000b7784 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_ble_gap_start_scan+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	00030278 	.word	0x00030278

000b7794 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b03      	ldr	r3, [pc, #12]	; (b77a4 <hal_ble_gap_stop_scan+0x10>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b779e:	9301      	str	r3, [sp, #4]
   b77a0:	bd08      	pop	{r3, pc}
   b77a2:	0000      	.short	0x0000
   b77a4:	00030278 	.word	0x00030278

000b77a8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b77a8:	b508      	push	{r3, lr}
   b77aa:	4b03      	ldr	r3, [pc, #12]	; (b77b8 <hal_ble_gap_disconnect+0x10>)
   b77ac:	681b      	ldr	r3, [r3, #0]
   b77ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b77b2:	9301      	str	r3, [sp, #4]
   b77b4:	bd08      	pop	{r3, pc}
   b77b6:	0000      	.short	0x0000
   b77b8:	00030278 	.word	0x00030278

000b77bc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b77bc:	b508      	push	{r3, lr}
   b77be:	4b03      	ldr	r3, [pc, #12]	; (b77cc <hal_ble_set_callback_on_periph_link_events+0x10>)
   b77c0:	681b      	ldr	r3, [r3, #0]
   b77c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b77c6:	9301      	str	r3, [sp, #4]
   b77c8:	bd08      	pop	{r3, pc}
   b77ca:	0000      	.short	0x0000
   b77cc:	00030278 	.word	0x00030278

000b77d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b02      	ldr	r3, [pc, #8]	; (b77dc <os_mutex_create+0xc>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77d8:	9301      	str	r3, [sp, #4]
   b77da:	bd08      	pop	{r3, pc}
   b77dc:	00030248 	.word	0x00030248

000b77e0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b77e0:	b508      	push	{r3, lr}
   b77e2:	4b02      	ldr	r3, [pc, #8]	; (b77ec <os_mutex_destroy+0xc>)
   b77e4:	681b      	ldr	r3, [r3, #0]
   b77e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b77e8:	9301      	str	r3, [sp, #4]
   b77ea:	bd08      	pop	{r3, pc}
   b77ec:	00030248 	.word	0x00030248

000b77f0 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b77f0:	b508      	push	{r3, lr}
   b77f2:	4b02      	ldr	r3, [pc, #8]	; (b77fc <os_mutex_lock+0xc>)
   b77f4:	681b      	ldr	r3, [r3, #0]
   b77f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b77f8:	9301      	str	r3, [sp, #4]
   b77fa:	bd08      	pop	{r3, pc}
   b77fc:	00030248 	.word	0x00030248

000b7800 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b7800:	b508      	push	{r3, lr}
   b7802:	4b02      	ldr	r3, [pc, #8]	; (b780c <os_mutex_unlock+0xc>)
   b7804:	681b      	ldr	r3, [r3, #0]
   b7806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7808:	9301      	str	r3, [sp, #4]
   b780a:	bd08      	pop	{r3, pc}
   b780c:	00030248 	.word	0x00030248

000b7810 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7810:	b508      	push	{r3, lr}
   b7812:	4b02      	ldr	r3, [pc, #8]	; (b781c <os_mutex_recursive_create+0xc>)
   b7814:	681b      	ldr	r3, [r3, #0]
   b7816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7818:	9301      	str	r3, [sp, #4]
   b781a:	bd08      	pop	{r3, pc}
   b781c:	00030248 	.word	0x00030248

000b7820 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7820:	b508      	push	{r3, lr}
   b7822:	4b02      	ldr	r3, [pc, #8]	; (b782c <os_mutex_recursive_destroy+0xc>)
   b7824:	681b      	ldr	r3, [r3, #0]
   b7826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7828:	9301      	str	r3, [sp, #4]
   b782a:	bd08      	pop	{r3, pc}
   b782c:	00030248 	.word	0x00030248

000b7830 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7830:	b508      	push	{r3, lr}
   b7832:	4b02      	ldr	r3, [pc, #8]	; (b783c <os_mutex_recursive_lock+0xc>)
   b7834:	681b      	ldr	r3, [r3, #0]
   b7836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7838:	9301      	str	r3, [sp, #4]
   b783a:	bd08      	pop	{r3, pc}
   b783c:	00030248 	.word	0x00030248

000b7840 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7840:	b508      	push	{r3, lr}
   b7842:	4b02      	ldr	r3, [pc, #8]	; (b784c <os_mutex_recursive_unlock+0xc>)
   b7844:	681b      	ldr	r3, [r3, #0]
   b7846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7848:	9301      	str	r3, [sp, #4]
   b784a:	bd08      	pop	{r3, pc}
   b784c:	00030248 	.word	0x00030248

000b7850 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7850:	b508      	push	{r3, lr}
   b7852:	4b02      	ldr	r3, [pc, #8]	; (b785c <inet_inet_ntop+0xc>)
   b7854:	681b      	ldr	r3, [r3, #0]
   b7856:	695b      	ldr	r3, [r3, #20]
   b7858:	9301      	str	r3, [sp, #4]
   b785a:	bd08      	pop	{r3, pc}
   b785c:	00030264 	.word	0x00030264

000b7860 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7860:	b508      	push	{r3, lr}
   b7862:	4b02      	ldr	r3, [pc, #8]	; (b786c <inet_htonl+0xc>)
   b7864:	681b      	ldr	r3, [r3, #0]
   b7866:	6a1b      	ldr	r3, [r3, #32]
   b7868:	9301      	str	r3, [sp, #4]
   b786a:	bd08      	pop	{r3, pc}
   b786c:	00030264 	.word	0x00030264

000b7870 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b7870:	b508      	push	{r3, lr}
   b7872:	4b02      	ldr	r3, [pc, #8]	; (b787c <inet_ntohs+0xc>)
   b7874:	681b      	ldr	r3, [r3, #0]
   b7876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7878:	9301      	str	r3, [sp, #4]
   b787a:	bd08      	pop	{r3, pc}
   b787c:	00030264 	.word	0x00030264

000b7880 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7880:	b508      	push	{r3, lr}
   b7882:	4b02      	ldr	r3, [pc, #8]	; (b788c <inet_htons+0xc>)
   b7884:	681b      	ldr	r3, [r3, #0]
   b7886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7888:	9301      	str	r3, [sp, #4]
   b788a:	bd08      	pop	{r3, pc}
   b788c:	00030264 	.word	0x00030264

000b7890 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b7890:	b508      	push	{r3, lr}
   b7892:	4b02      	ldr	r3, [pc, #8]	; (b789c <hal_usart_end+0xc>)
   b7894:	681b      	ldr	r3, [r3, #0]
   b7896:	689b      	ldr	r3, [r3, #8]
   b7898:	9301      	str	r3, [sp, #4]
   b789a:	bd08      	pop	{r3, pc}
   b789c:	0003023c 	.word	0x0003023c

000b78a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b78a0:	b508      	push	{r3, lr}
   b78a2:	4b02      	ldr	r3, [pc, #8]	; (b78ac <hal_usart_write+0xc>)
   b78a4:	681b      	ldr	r3, [r3, #0]
   b78a6:	68db      	ldr	r3, [r3, #12]
   b78a8:	9301      	str	r3, [sp, #4]
   b78aa:	bd08      	pop	{r3, pc}
   b78ac:	0003023c 	.word	0x0003023c

000b78b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b78b0:	b508      	push	{r3, lr}
   b78b2:	4b02      	ldr	r3, [pc, #8]	; (b78bc <hal_usart_available+0xc>)
   b78b4:	681b      	ldr	r3, [r3, #0]
   b78b6:	691b      	ldr	r3, [r3, #16]
   b78b8:	9301      	str	r3, [sp, #4]
   b78ba:	bd08      	pop	{r3, pc}
   b78bc:	0003023c 	.word	0x0003023c

000b78c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b78c0:	b508      	push	{r3, lr}
   b78c2:	4b02      	ldr	r3, [pc, #8]	; (b78cc <hal_usart_read+0xc>)
   b78c4:	681b      	ldr	r3, [r3, #0]
   b78c6:	695b      	ldr	r3, [r3, #20]
   b78c8:	9301      	str	r3, [sp, #4]
   b78ca:	bd08      	pop	{r3, pc}
   b78cc:	0003023c 	.word	0x0003023c

000b78d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b78d0:	b508      	push	{r3, lr}
   b78d2:	4b02      	ldr	r3, [pc, #8]	; (b78dc <hal_usart_peek+0xc>)
   b78d4:	681b      	ldr	r3, [r3, #0]
   b78d6:	699b      	ldr	r3, [r3, #24]
   b78d8:	9301      	str	r3, [sp, #4]
   b78da:	bd08      	pop	{r3, pc}
   b78dc:	0003023c 	.word	0x0003023c

000b78e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b78e0:	b508      	push	{r3, lr}
   b78e2:	4b02      	ldr	r3, [pc, #8]	; (b78ec <hal_usart_flush+0xc>)
   b78e4:	681b      	ldr	r3, [r3, #0]
   b78e6:	69db      	ldr	r3, [r3, #28]
   b78e8:	9301      	str	r3, [sp, #4]
   b78ea:	bd08      	pop	{r3, pc}
   b78ec:	0003023c 	.word	0x0003023c

000b78f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b78f0:	b508      	push	{r3, lr}
   b78f2:	4b02      	ldr	r3, [pc, #8]	; (b78fc <hal_usart_is_enabled+0xc>)
   b78f4:	681b      	ldr	r3, [r3, #0]
   b78f6:	6a1b      	ldr	r3, [r3, #32]
   b78f8:	9301      	str	r3, [sp, #4]
   b78fa:	bd08      	pop	{r3, pc}
   b78fc:	0003023c 	.word	0x0003023c

000b7900 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7900:	b508      	push	{r3, lr}
   b7902:	4b02      	ldr	r3, [pc, #8]	; (b790c <hal_usart_available_data_for_write+0xc>)
   b7904:	681b      	ldr	r3, [r3, #0]
   b7906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7908:	9301      	str	r3, [sp, #4]
   b790a:	bd08      	pop	{r3, pc}
   b790c:	0003023c 	.word	0x0003023c

000b7910 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7910:	b508      	push	{r3, lr}
   b7912:	4b02      	ldr	r3, [pc, #8]	; (b791c <hal_usart_begin_config+0xc>)
   b7914:	681b      	ldr	r3, [r3, #0]
   b7916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7918:	9301      	str	r3, [sp, #4]
   b791a:	bd08      	pop	{r3, pc}
   b791c:	0003023c 	.word	0x0003023c

000b7920 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7920:	b508      	push	{r3, lr}
   b7922:	4b02      	ldr	r3, [pc, #8]	; (b792c <hal_usart_init_ex+0xc>)
   b7924:	681b      	ldr	r3, [r3, #0]
   b7926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7928:	9301      	str	r3, [sp, #4]
   b792a:	bd08      	pop	{r3, pc}
   b792c:	0003023c 	.word	0x0003023c

000b7930 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7930:	b508      	push	{r3, lr}
   b7932:	4b02      	ldr	r3, [pc, #8]	; (b793c <hal_i2c_set_speed+0xc>)
   b7934:	681b      	ldr	r3, [r3, #0]
   b7936:	681b      	ldr	r3, [r3, #0]
   b7938:	9301      	str	r3, [sp, #4]
   b793a:	bd08      	pop	{r3, pc}
   b793c:	00030228 	.word	0x00030228

000b7940 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7940:	b508      	push	{r3, lr}
   b7942:	4b02      	ldr	r3, [pc, #8]	; (b794c <hal_i2c_begin+0xc>)
   b7944:	681b      	ldr	r3, [r3, #0]
   b7946:	68db      	ldr	r3, [r3, #12]
   b7948:	9301      	str	r3, [sp, #4]
   b794a:	bd08      	pop	{r3, pc}
   b794c:	00030228 	.word	0x00030228

000b7950 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7950:	b508      	push	{r3, lr}
   b7952:	4b02      	ldr	r3, [pc, #8]	; (b795c <hal_i2c_begin_transmission+0xc>)
   b7954:	681b      	ldr	r3, [r3, #0]
   b7956:	699b      	ldr	r3, [r3, #24]
   b7958:	9301      	str	r3, [sp, #4]
   b795a:	bd08      	pop	{r3, pc}
   b795c:	00030228 	.word	0x00030228

000b7960 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7960:	b508      	push	{r3, lr}
   b7962:	4b02      	ldr	r3, [pc, #8]	; (b796c <hal_i2c_end_transmission+0xc>)
   b7964:	681b      	ldr	r3, [r3, #0]
   b7966:	69db      	ldr	r3, [r3, #28]
   b7968:	9301      	str	r3, [sp, #4]
   b796a:	bd08      	pop	{r3, pc}
   b796c:	00030228 	.word	0x00030228

000b7970 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <hal_i2c_write+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	6a1b      	ldr	r3, [r3, #32]
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030228 	.word	0x00030228

000b7980 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <hal_i2c_available+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030228 	.word	0x00030228

000b7990 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <hal_i2c_read+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	00030228 	.word	0x00030228

000b79a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b02      	ldr	r3, [pc, #8]	; (b79ac <hal_i2c_peek+0xc>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79a8:	9301      	str	r3, [sp, #4]
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	00030228 	.word	0x00030228

000b79b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b79b0:	b508      	push	{r3, lr}
   b79b2:	4b02      	ldr	r3, [pc, #8]	; (b79bc <hal_i2c_flush+0xc>)
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	bd08      	pop	{r3, pc}
   b79bc:	00030228 	.word	0x00030228

000b79c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <hal_i2c_is_enabled+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030228 	.word	0x00030228

000b79d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <hal_i2c_init+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030228 	.word	0x00030228

000b79e0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <sock_setsockopt+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	699b      	ldr	r3, [r3, #24]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030238 	.word	0x00030238

000b79f0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <sock_close+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	69db      	ldr	r3, [r3, #28]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030238 	.word	0x00030238

000b7a00 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <sock_connect+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	6a1b      	ldr	r3, [r3, #32]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030238 	.word	0x00030238

000b7a10 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <sock_recv+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030238 	.word	0x00030238

000b7a20 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <sock_send+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030238 	.word	0x00030238

000b7a30 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <sock_socket+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030238 	.word	0x00030238

000b7a40 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <hal_spi_begin+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	681b      	ldr	r3, [r3, #0]
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	00030230 	.word	0x00030230

000b7a50 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <hal_spi_transfer+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	695b      	ldr	r3, [r3, #20]
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	00030230 	.word	0x00030230

000b7a60 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <hal_spi_init+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	69db      	ldr	r3, [r3, #28]
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	00030230 	.word	0x00030230

000b7a70 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <hal_spi_is_enabled+0xc>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	6a1b      	ldr	r3, [r3, #32]
   b7a78:	9301      	str	r3, [sp, #4]
   b7a7a:	bd08      	pop	{r3, pc}
   b7a7c:	00030230 	.word	0x00030230

000b7a80 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7a80:	b508      	push	{r3, lr}
   b7a82:	4b02      	ldr	r3, [pc, #8]	; (b7a8c <hal_spi_info+0xc>)
   b7a84:	681b      	ldr	r3, [r3, #0]
   b7a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7a88:	9301      	str	r3, [sp, #4]
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	00030230 	.word	0x00030230

000b7a90 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7a90:	b508      	push	{r3, lr}
   b7a92:	4b02      	ldr	r3, [pc, #8]	; (b7a9c <hal_spi_set_settings+0xc>)
   b7a94:	681b      	ldr	r3, [r3, #0]
   b7a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7a98:	9301      	str	r3, [sp, #4]
   b7a9a:	bd08      	pop	{r3, pc}
   b7a9c:	00030230 	.word	0x00030230

000b7aa0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7aa0:	b508      	push	{r3, lr}
   b7aa2:	4b02      	ldr	r3, [pc, #8]	; (b7aac <hal_spi_acquire+0xc>)
   b7aa4:	681b      	ldr	r3, [r3, #0]
   b7aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	bd08      	pop	{r3, pc}
   b7aac:	00030230 	.word	0x00030230

000b7ab0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7ab0:	b508      	push	{r3, lr}
   b7ab2:	4b02      	ldr	r3, [pc, #8]	; (b7abc <hal_spi_release+0xc>)
   b7ab4:	681b      	ldr	r3, [r3, #0]
   b7ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ab8:	9301      	str	r3, [sp, #4]
   b7aba:	bd08      	pop	{r3, pc}
   b7abc:	00030230 	.word	0x00030230

000b7ac0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b02      	ldr	r3, [pc, #8]	; (b7acc <HAL_USB_USART_Init+0xc>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	681b      	ldr	r3, [r3, #0]
   b7ac8:	9301      	str	r3, [sp, #4]
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	0003024c 	.word	0x0003024c

000b7ad0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7ad0:	b508      	push	{r3, lr}
   b7ad2:	4b02      	ldr	r3, [pc, #8]	; (b7adc <HAL_USB_USART_Begin+0xc>)
   b7ad4:	681b      	ldr	r3, [r3, #0]
   b7ad6:	685b      	ldr	r3, [r3, #4]
   b7ad8:	9301      	str	r3, [sp, #4]
   b7ada:	bd08      	pop	{r3, pc}
   b7adc:	0003024c 	.word	0x0003024c

000b7ae0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7ae0:	b508      	push	{r3, lr}
   b7ae2:	4b02      	ldr	r3, [pc, #8]	; (b7aec <HAL_USB_USART_End+0xc>)
   b7ae4:	681b      	ldr	r3, [r3, #0]
   b7ae6:	689b      	ldr	r3, [r3, #8]
   b7ae8:	9301      	str	r3, [sp, #4]
   b7aea:	bd08      	pop	{r3, pc}
   b7aec:	0003024c 	.word	0x0003024c

000b7af0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7af0:	b508      	push	{r3, lr}
   b7af2:	4b02      	ldr	r3, [pc, #8]	; (b7afc <HAL_USB_USART_Available_Data+0xc>)
   b7af4:	681b      	ldr	r3, [r3, #0]
   b7af6:	691b      	ldr	r3, [r3, #16]
   b7af8:	9301      	str	r3, [sp, #4]
   b7afa:	bd08      	pop	{r3, pc}
   b7afc:	0003024c 	.word	0x0003024c

000b7b00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7b00:	b508      	push	{r3, lr}
   b7b02:	4b02      	ldr	r3, [pc, #8]	; (b7b0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7b04:	681b      	ldr	r3, [r3, #0]
   b7b06:	695b      	ldr	r3, [r3, #20]
   b7b08:	9301      	str	r3, [sp, #4]
   b7b0a:	bd08      	pop	{r3, pc}
   b7b0c:	0003024c 	.word	0x0003024c

000b7b10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4b02      	ldr	r3, [pc, #8]	; (b7b1c <HAL_USB_USART_Receive_Data+0xc>)
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	699b      	ldr	r3, [r3, #24]
   b7b18:	9301      	str	r3, [sp, #4]
   b7b1a:	bd08      	pop	{r3, pc}
   b7b1c:	0003024c 	.word	0x0003024c

000b7b20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b20:	b508      	push	{r3, lr}
   b7b22:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <HAL_USB_USART_Send_Data+0xc>)
   b7b24:	681b      	ldr	r3, [r3, #0]
   b7b26:	69db      	ldr	r3, [r3, #28]
   b7b28:	9301      	str	r3, [sp, #4]
   b7b2a:	bd08      	pop	{r3, pc}
   b7b2c:	0003024c 	.word	0x0003024c

000b7b30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7b30:	b508      	push	{r3, lr}
   b7b32:	4b02      	ldr	r3, [pc, #8]	; (b7b3c <HAL_USB_USART_Flush_Data+0xc>)
   b7b34:	681b      	ldr	r3, [r3, #0]
   b7b36:	6a1b      	ldr	r3, [r3, #32]
   b7b38:	9301      	str	r3, [sp, #4]
   b7b3a:	bd08      	pop	{r3, pc}
   b7b3c:	0003024c 	.word	0x0003024c

000b7b40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b40:	b508      	push	{r3, lr}
   b7b42:	4b02      	ldr	r3, [pc, #8]	; (b7b4c <panic_+0xc>)
   b7b44:	681b      	ldr	r3, [r3, #0]
   b7b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b48:	9301      	str	r3, [sp, #4]
   b7b4a:	bd08      	pop	{r3, pc}
   b7b4c:	00030260 	.word	0x00030260

000b7b50 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7b50:	b508      	push	{r3, lr}
   b7b52:	4b02      	ldr	r3, [pc, #8]	; (b7b5c <log_message+0xc>)
   b7b54:	681b      	ldr	r3, [r3, #0]
   b7b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7b58:	9301      	str	r3, [sp, #4]
   b7b5a:	bd08      	pop	{r3, pc}
   b7b5c:	00030260 	.word	0x00030260

000b7b60 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7b60:	b508      	push	{r3, lr}
   b7b62:	4b02      	ldr	r3, [pc, #8]	; (b7b6c <log_message_v+0xc>)
   b7b64:	681b      	ldr	r3, [r3, #0]
   b7b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7b68:	9301      	str	r3, [sp, #4]
   b7b6a:	bd08      	pop	{r3, pc}
   b7b6c:	00030260 	.word	0x00030260

000b7b70 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7b70:	b508      	push	{r3, lr}
   b7b72:	4b02      	ldr	r3, [pc, #8]	; (b7b7c <log_level_name+0xc>)
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7b78:	9301      	str	r3, [sp, #4]
   b7b7a:	bd08      	pop	{r3, pc}
   b7b7c:	00030260 	.word	0x00030260

000b7b80 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7b80:	b508      	push	{r3, lr}
   b7b82:	4b02      	ldr	r3, [pc, #8]	; (b7b8c <log_set_callbacks+0xc>)
   b7b84:	681b      	ldr	r3, [r3, #0]
   b7b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7b88:	9301      	str	r3, [sp, #4]
   b7b8a:	bd08      	pop	{r3, pc}
   b7b8c:	00030260 	.word	0x00030260

000b7b90 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7b90:	b508      	push	{r3, lr}
   b7b92:	4b02      	ldr	r3, [pc, #8]	; (b7b9c <set_system_mode+0xc>)
   b7b94:	681b      	ldr	r3, [r3, #0]
   b7b96:	685b      	ldr	r3, [r3, #4]
   b7b98:	9301      	str	r3, [sp, #4]
   b7b9a:	bd08      	pop	{r3, pc}
   b7b9c:	00030220 	.word	0x00030220

000b7ba0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7ba0:	b508      	push	{r3, lr}
   b7ba2:	4b02      	ldr	r3, [pc, #8]	; (b7bac <system_delay_ms+0xc>)
   b7ba4:	681b      	ldr	r3, [r3, #0]
   b7ba6:	695b      	ldr	r3, [r3, #20]
   b7ba8:	9301      	str	r3, [sp, #4]
   b7baa:	bd08      	pop	{r3, pc}
   b7bac:	00030220 	.word	0x00030220

000b7bb0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7bb0:	b508      	push	{r3, lr}
   b7bb2:	4b02      	ldr	r3, [pc, #8]	; (b7bbc <system_thread_set_state+0xc>)
   b7bb4:	681b      	ldr	r3, [r3, #0]
   b7bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bb8:	9301      	str	r3, [sp, #4]
   b7bba:	bd08      	pop	{r3, pc}
   b7bbc:	00030220 	.word	0x00030220

000b7bc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7bc0:	b508      	push	{r3, lr}
   b7bc2:	4b03      	ldr	r3, [pc, #12]	; (b7bd0 <system_ctrl_set_app_request_handler+0x10>)
   b7bc4:	681b      	ldr	r3, [r3, #0]
   b7bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7bca:	9301      	str	r3, [sp, #4]
   b7bcc:	bd08      	pop	{r3, pc}
   b7bce:	0000      	.short	0x0000
   b7bd0:	00030220 	.word	0x00030220

000b7bd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7bd4:	b508      	push	{r3, lr}
   b7bd6:	4b03      	ldr	r3, [pc, #12]	; (b7be4 <system_ctrl_set_result+0x10>)
   b7bd8:	681b      	ldr	r3, [r3, #0]
   b7bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7bde:	9301      	str	r3, [sp, #4]
   b7be0:	bd08      	pop	{r3, pc}
   b7be2:	0000      	.short	0x0000
   b7be4:	00030220 	.word	0x00030220

000b7be8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7be8:	b508      	push	{r3, lr}
   b7bea:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <network_connect+0xc>)
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	685b      	ldr	r3, [r3, #4]
   b7bf0:	9301      	str	r3, [sp, #4]
   b7bf2:	bd08      	pop	{r3, pc}
   b7bf4:	00030240 	.word	0x00030240

000b7bf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7bf8:	b508      	push	{r3, lr}
   b7bfa:	4b02      	ldr	r3, [pc, #8]	; (b7c04 <network_connecting+0xc>)
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	689b      	ldr	r3, [r3, #8]
   b7c00:	9301      	str	r3, [sp, #4]
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	00030240 	.word	0x00030240

000b7c08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <network_disconnect+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	68db      	ldr	r3, [r3, #12]
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	00030240 	.word	0x00030240

000b7c18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <network_ready+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	691b      	ldr	r3, [r3, #16]
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	00030240 	.word	0x00030240

000b7c28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <network_on+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	695b      	ldr	r3, [r3, #20]
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030240 	.word	0x00030240

000b7c38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <network_off+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	699b      	ldr	r3, [r3, #24]
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030240 	.word	0x00030240

000b7c48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <network_listen+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	69db      	ldr	r3, [r3, #28]
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030240 	.word	0x00030240

000b7c58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <network_listening+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	6a1b      	ldr	r3, [r3, #32]
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030240 	.word	0x00030240

000b7c68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <network_set_listen_timeout+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030240 	.word	0x00030240

000b7c78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <network_get_listen_timeout+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030240 	.word	0x00030240

000b7c88 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <network_is_on+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030240 	.word	0x00030240

000b7c98 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <network_is_off+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	00030240 	.word	0x00030240

000b7ca8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <spark_process+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	689b      	ldr	r3, [r3, #8]
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	00030244 	.word	0x00030244

000b7cb8 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <spark_deviceID+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	69db      	ldr	r3, [r3, #28]
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	00030244 	.word	0x00030244

000b7cc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	00030244 	.word	0x00030244

000b7cd8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <malloc+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	681b      	ldr	r3, [r3, #0]
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	0003021c 	.word	0x0003021c

000b7ce8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <free+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	685b      	ldr	r3, [r3, #4]
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	0003021c 	.word	0x0003021c

000b7cf8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <realloc+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	689b      	ldr	r3, [r3, #8]
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	0003021c 	.word	0x0003021c

000b7d08 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <snprintf+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	69db      	ldr	r3, [r3, #28]
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	0003021c 	.word	0x0003021c

000b7d18 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <vsnprintf+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	0003021c 	.word	0x0003021c

000b7d28 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <abort+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	0003021c 	.word	0x0003021c

000b7d38 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <_malloc_r+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	0003021c 	.word	0x0003021c

000b7d48 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <__errno+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	0003021c 	.word	0x0003021c

000b7d58 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <__assert_func+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	0003021c 	.word	0x0003021c

000b7d68 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <newlib_impure_ptr_callback+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	0003021c 	.word	0x0003021c

000b7d78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d78:	2200      	movs	r2, #0
   b7d7a:	6840      	ldr	r0, [r0, #4]
   b7d7c:	4611      	mov	r1, r2
   b7d7e:	f7ff bf6b 	b.w	b7c58 <network_listening>

000b7d82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7d82:	2200      	movs	r2, #0
   b7d84:	6840      	ldr	r0, [r0, #4]
   b7d86:	4611      	mov	r1, r2
   b7d88:	f7ff bf76 	b.w	b7c78 <network_get_listen_timeout>

000b7d8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7d8c:	6840      	ldr	r0, [r0, #4]
   b7d8e:	2200      	movs	r2, #0
   b7d90:	f7ff bf6a 	b.w	b7c68 <network_set_listen_timeout>

000b7d94 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7d94:	6840      	ldr	r0, [r0, #4]
   b7d96:	2200      	movs	r2, #0
   b7d98:	f081 0101 	eor.w	r1, r1, #1
   b7d9c:	f7ff bf54 	b.w	b7c48 <network_listen>

000b7da0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7da0:	2300      	movs	r3, #0
   b7da2:	6840      	ldr	r0, [r0, #4]
   b7da4:	461a      	mov	r2, r3
   b7da6:	4619      	mov	r1, r3
   b7da8:	f7ff bf46 	b.w	b7c38 <network_off>

000b7dac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7dac:	2300      	movs	r3, #0
   b7dae:	6840      	ldr	r0, [r0, #4]
   b7db0:	461a      	mov	r2, r3
   b7db2:	4619      	mov	r1, r3
   b7db4:	f7ff bf38 	b.w	b7c28 <network_on>

000b7db8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7db8:	2200      	movs	r2, #0
   b7dba:	6840      	ldr	r0, [r0, #4]
   b7dbc:	4611      	mov	r1, r2
   b7dbe:	f7ff bf2b 	b.w	b7c18 <network_ready>

000b7dc2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7dc2:	2200      	movs	r2, #0
   b7dc4:	6840      	ldr	r0, [r0, #4]
   b7dc6:	4611      	mov	r1, r2
   b7dc8:	f7ff bf16 	b.w	b7bf8 <network_connecting>

000b7dcc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7dcc:	6840      	ldr	r0, [r0, #4]
   b7dce:	2200      	movs	r2, #0
   b7dd0:	2102      	movs	r1, #2
   b7dd2:	f7ff bf19 	b.w	b7c08 <network_disconnect>

000b7dd6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7dd6:	2300      	movs	r3, #0
   b7dd8:	6840      	ldr	r0, [r0, #4]
   b7dda:	461a      	mov	r2, r3
   b7ddc:	f7ff bf04 	b.w	b7be8 <network_connect>

000b7de0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7de0:	4b02      	ldr	r3, [pc, #8]	; (b7dec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7de2:	2203      	movs	r2, #3
   b7de4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7de6:	4a02      	ldr	r2, [pc, #8]	; (b7df0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7de8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7dea:	4770      	bx	lr
   b7dec:	2003e688 	.word	0x2003e688
   b7df0:	000bf1fc 	.word	0x000bf1fc

000b7df4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7df4:	2100      	movs	r1, #0
   b7df6:	f7ff be5b 	b.w	b7ab0 <hal_spi_release>

000b7dfa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7dfa:	2100      	movs	r1, #0
   b7dfc:	f7ff be50 	b.w	b7aa0 <hal_spi_acquire>

000b7e00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7e00:	b510      	push	{r4, lr}
   b7e02:	4604      	mov	r4, r0
   b7e04:	4608      	mov	r0, r1
{
    _spi = spi;
   b7e06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7e08:	f7ff fe2a 	bl	b7a60 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7e0c:	2300      	movs	r3, #0
   b7e0e:	6063      	str	r3, [r4, #4]
}
   b7e10:	4620      	mov	r0, r4
   b7e12:	bd10      	pop	{r4, pc}

000b7e14 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7e14:	b513      	push	{r0, r1, r4, lr}
   b7e16:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7e18:	7800      	ldrb	r0, [r0, #0]
   b7e1a:	f7ff ffee 	bl	b7dfa <_ZN8SPIClass4lockEv.isra.0>
   b7e1e:	b958      	cbnz	r0, b7e38 <_ZN8SPIClass5beginEv+0x24>
   b7e20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7e22:	9001      	str	r0, [sp, #4]
   b7e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7e28:	f7ff fe0a 	bl	b7a40 <hal_spi_begin>
        unlock();
   b7e2c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7e2e:	b002      	add	sp, #8
   b7e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e34:	f7ff bfde 	b.w	b7df4 <_ZN8SPIClass6unlockEv.isra.0>
   b7e38:	b002      	add	sp, #8
   b7e3a:	bd10      	pop	{r4, pc}

000b7e3c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7e3c:	7800      	ldrb	r0, [r0, #0]
   b7e3e:	f7ff bfd9 	b.w	b7df4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7e44 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7e44:	0840      	lsrs	r0, r0, #1
{
   b7e46:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7e48:	6018      	str	r0, [r3, #0]
   b7e4a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7e4c:	6818      	ldr	r0, [r3, #0]
   b7e4e:	4288      	cmp	r0, r1
   b7e50:	b2e5      	uxtb	r5, r4
   b7e52:	d906      	bls.n	b7e62 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7e54:	3401      	adds	r4, #1
   b7e56:	2c08      	cmp	r4, #8
   b7e58:	d002      	beq.n	b7e60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7e5a:	0840      	lsrs	r0, r0, #1
   b7e5c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7e5e:	e7f5      	b.n	b7e4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7e60:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7e62:	4b02      	ldr	r3, [pc, #8]	; (b7e6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7e64:	5d5b      	ldrb	r3, [r3, r5]
   b7e66:	7013      	strb	r3, [r2, #0]
}
   b7e68:	bd30      	pop	{r4, r5, pc}
   b7e6a:	bf00      	nop
   b7e6c:	000bf230 	.word	0x000bf230

000b7e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e74:	4606      	mov	r6, r0
   b7e76:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7e78:	7800      	ldrb	r0, [r0, #0]
{
   b7e7a:	460c      	mov	r4, r1
    CHECK(lock());
   b7e7c:	f7ff ffbd 	bl	b7dfa <_ZN8SPIClass4lockEv.isra.0>
   b7e80:	2800      	cmp	r0, #0
   b7e82:	db1b      	blt.n	b7ebc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7e84:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7e86:	2214      	movs	r2, #20
   b7e88:	2100      	movs	r1, #0
   b7e8a:	a809      	add	r0, sp, #36	; 0x24
   b7e8c:	f004 f8f0 	bl	bc070 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e90:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7e92:	2200      	movs	r2, #0
   b7e94:	a909      	add	r1, sp, #36	; 0x24
   b7e96:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7e9c:	f7ff fdf0 	bl	b7a80 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7ea0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7ea4:	b113      	cbz	r3, b7eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7ea6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7eaa:	b155      	cbz	r5, b7ec2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7eac:	2700      	movs	r7, #0
   b7eae:	46b9      	mov	r9, r7
   b7eb0:	46b8      	mov	r8, r7
   b7eb2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7eb4:	7923      	ldrb	r3, [r4, #4]
   b7eb6:	b15d      	cbz	r5, b7ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7eb8:	b1c3      	cbz	r3, b7eec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7eba:	2000      	movs	r0, #0
}
   b7ebc:	b00f      	add	sp, #60	; 0x3c
   b7ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7ec2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7ec6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7eca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7ece:	e7f1      	b.n	b7eb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7ed0:	2b00      	cmp	r3, #0
   b7ed2:	d135      	bne.n	b7f40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7ed4:	68a3      	ldr	r3, [r4, #8]
   b7ed6:	4543      	cmp	r3, r8
   b7ed8:	d108      	bne.n	b7eec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7eda:	f88d 9020 	strb.w	r9, [sp, #32]
   b7ede:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7ee2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7ee6:	89a3      	ldrh	r3, [r4, #12]
   b7ee8:	429a      	cmp	r2, r3
   b7eea:	d0e6      	beq.n	b7eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7eec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7eee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7ef0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7ef4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7ef6:	ab04      	add	r3, sp, #16
   b7ef8:	f10d 020f 	add.w	r2, sp, #15
   b7efc:	f7ff ffa2 	bl	b7e44 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7f00:	7921      	ldrb	r1, [r4, #4]
   b7f02:	b985      	cbnz	r5, b7f26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7f04:	b989      	cbnz	r1, b7f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7f06:	68a3      	ldr	r3, [r4, #8]
   b7f08:	4543      	cmp	r3, r8
   b7f0a:	d30e      	bcc.n	b7f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7f0c:	f88d 9020 	strb.w	r9, [sp, #32]
   b7f10:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7f14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7f18:	89a3      	ldrh	r3, [r4, #12]
   b7f1a:	429a      	cmp	r2, r3
   b7f1c:	d105      	bne.n	b7f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7f1e:	9b04      	ldr	r3, [sp, #16]
   b7f20:	4543      	cmp	r3, r8
   b7f22:	d102      	bne.n	b7f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7f24:	e7c9      	b.n	b7eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7f26:	2900      	cmp	r1, #0
   b7f28:	d1f9      	bne.n	b7f1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7f2a:	2300      	movs	r3, #0
   b7f2c:	9301      	str	r3, [sp, #4]
   b7f2e:	7b63      	ldrb	r3, [r4, #13]
   b7f30:	9300      	str	r3, [sp, #0]
   b7f32:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7f36:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7f38:	7830      	ldrb	r0, [r6, #0]
   b7f3a:	f7ff fda9 	bl	b7a90 <hal_spi_set_settings>
   b7f3e:	e7bc      	b.n	b7eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7f40:	e9cd 5500 	strd	r5, r5, [sp]
   b7f44:	462b      	mov	r3, r5
   b7f46:	462a      	mov	r2, r5
   b7f48:	2101      	movs	r1, #1
   b7f4a:	e7f5      	b.n	b7f38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7f4c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7f4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7f4e:	7800      	ldrb	r0, [r0, #0]
   b7f50:	f7ff fd7e 	bl	b7a50 <hal_spi_transfer>
}
   b7f54:	b2c0      	uxtb	r0, r0
   b7f56:	bd08      	pop	{r3, pc}

000b7f58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7f58:	4b05      	ldr	r3, [pc, #20]	; (b7f70 <_GLOBAL__sub_I_System+0x18>)
   b7f5a:	2202      	movs	r2, #2
   b7f5c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7f5e:	4b05      	ldr	r3, [pc, #20]	; (b7f74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7f60:	4a05      	ldr	r2, [pc, #20]	; (b7f78 <_GLOBAL__sub_I_System+0x20>)
   b7f62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7f64:	2000      	movs	r0, #0
   b7f66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7f6a:	f7ff be11 	b.w	b7b90 <set_system_mode>
   b7f6e:	bf00      	nop
   b7f70:	2003e69c 	.word	0x2003e69c
   b7f74:	2003e690 	.word	0x2003e690
   b7f78:	ffff0000 	.word	0xffff0000

000b7f7c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7f7c:	b510      	push	{r4, lr}
   b7f7e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7f80:	f7fc fd3c 	bl	b49fc <strlen>
   b7f84:	3801      	subs	r0, #1
   b7f86:	1823      	adds	r3, r4, r0
   b7f88:	4620      	mov	r0, r4
	while(i<j){
   b7f8a:	4283      	cmp	r3, r0
   b7f8c:	d906      	bls.n	b7f9c <_Z11str_reversePc+0x20>
		c = *i;
   b7f8e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7f90:	7819      	ldrb	r1, [r3, #0]
   b7f92:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7f96:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7f9a:	e7f6      	b.n	b7f8a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7f9c:	bd10      	pop	{r4, pc}

000b7f9e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7f9e:	b570      	push	{r4, r5, r6, lr}
   b7fa0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7fa2:	1e91      	subs	r1, r2, #2
   b7fa4:	2922      	cmp	r1, #34	; 0x22
   b7fa6:	d81d      	bhi.n	b7fe4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7fa8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7faa:	b930      	cbnz	r0, b7fba <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7fac:	4423      	add	r3, r4
            *ptr++ = '0';
   b7fae:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7fb0:	429d      	cmp	r5, r3
   b7fb2:	d210      	bcs.n	b7fd6 <ultoa+0x38>
            *ptr++ = '0';
   b7fb4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7fb8:	e7fa      	b.n	b7fb0 <ultoa+0x12>
            result.quot = a/radix;
   b7fba:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7fbe:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7fc2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7fc4:	2809      	cmp	r0, #9
                *ptr += '0';
   b7fc6:	bf94      	ite	ls
   b7fc8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7fca:	3157      	addhi	r1, #87	; 0x57
   b7fcc:	b2c9      	uxtb	r1, r1
   b7fce:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7fd2:	4630      	mov	r0, r6
	while(a){
   b7fd4:	e7e9      	b.n	b7faa <ultoa+0xc>

	*ptr = '\0';
   b7fd6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7fd8:	4620      	mov	r0, r4
	*ptr = '\0';
   b7fda:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7fdc:	f7ff ffce 	bl	b7f7c <_Z11str_reversePc>
	return buffer;
   b7fe0:	4620      	mov	r0, r4
}
   b7fe2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7fe4:	2000      	movs	r0, #0
   b7fe6:	e7fc      	b.n	b7fe2 <ultoa+0x44>

000b7fe8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7fe8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7fea:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7fec:	460c      	mov	r4, r1
   b7fee:	4615      	mov	r5, r2
	if(a<0){
   b7ff0:	da0e      	bge.n	b8010 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7ff6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7ffa:	bf14      	ite	ne
   b7ffc:	4258      	negne	r0, r3
   b7ffe:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8000:	2301      	movs	r3, #1
		*buffer = '-';
   b8002:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8004:	462a      	mov	r2, r5
   b8006:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8008:	f7ff ffc9 	bl	b7f9e <ultoa>
	}
	return buffer;
}
   b800c:	4620      	mov	r0, r4
   b800e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8010:	2301      	movs	r3, #1
   b8012:	e7f9      	b.n	b8008 <itoa+0x20>

000b8014 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8014:	b510      	push	{r4, lr}
   b8016:	4604      	mov	r4, r0
{
	free(buffer);
   b8018:	6800      	ldr	r0, [r0, #0]
   b801a:	f7ff fe65 	bl	b7ce8 <free>
}
   b801e:	4620      	mov	r0, r4
   b8020:	bd10      	pop	{r4, pc}

000b8022 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8022:	b510      	push	{r4, lr}
   b8024:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8026:	6800      	ldr	r0, [r0, #0]
   b8028:	b108      	cbz	r0, b802e <_ZN6String10invalidateEv+0xc>
   b802a:	f7ff fe5d 	bl	b7ce8 <free>
	buffer = NULL;
   b802e:	2300      	movs	r3, #0
	capacity = len = 0;
   b8030:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8034:	6023      	str	r3, [r4, #0]
}
   b8036:	bd10      	pop	{r4, pc}

000b8038 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8038:	b538      	push	{r3, r4, r5, lr}
   b803a:	4604      	mov	r4, r0
   b803c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b803e:	6800      	ldr	r0, [r0, #0]
   b8040:	3101      	adds	r1, #1
   b8042:	f7ff fe59 	bl	b7cf8 <realloc>
	if (newbuffer) {
   b8046:	b110      	cbz	r0, b804e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8048:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b804c:	2001      	movs	r0, #1
	}
	return 0;
}
   b804e:	bd38      	pop	{r3, r4, r5, pc}

000b8050 <_ZN6String7reserveEj>:
{
   b8050:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8052:	6803      	ldr	r3, [r0, #0]
{
   b8054:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8056:	b123      	cbz	r3, b8062 <_ZN6String7reserveEj+0x12>
   b8058:	6843      	ldr	r3, [r0, #4]
   b805a:	428b      	cmp	r3, r1
   b805c:	d301      	bcc.n	b8062 <_ZN6String7reserveEj+0x12>
   b805e:	2001      	movs	r0, #1
}
   b8060:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8062:	4620      	mov	r0, r4
   b8064:	f7ff ffe8 	bl	b8038 <_ZN6String12changeBufferEj>
   b8068:	2800      	cmp	r0, #0
   b806a:	d0f9      	beq.n	b8060 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b806c:	68a3      	ldr	r3, [r4, #8]
   b806e:	2b00      	cmp	r3, #0
   b8070:	d1f5      	bne.n	b805e <_ZN6String7reserveEj+0xe>
   b8072:	6822      	ldr	r2, [r4, #0]
   b8074:	7013      	strb	r3, [r2, #0]
   b8076:	e7f2      	b.n	b805e <_ZN6String7reserveEj+0xe>

000b8078 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8078:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b807a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b807c:	4611      	mov	r1, r2
   b807e:	9201      	str	r2, [sp, #4]
{
   b8080:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8082:	f7ff ffe5 	bl	b8050 <_ZN6String7reserveEj>
   b8086:	9a01      	ldr	r2, [sp, #4]
   b8088:	b928      	cbnz	r0, b8096 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b808a:	4620      	mov	r0, r4
   b808c:	f7ff ffc9 	bl	b8022 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8090:	4620      	mov	r0, r4
   b8092:	b003      	add	sp, #12
   b8094:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8096:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8098:	4629      	mov	r1, r5
   b809a:	6820      	ldr	r0, [r4, #0]
   b809c:	f003 ffc0 	bl	bc020 <memcpy>
	buffer[len] = 0;
   b80a0:	6822      	ldr	r2, [r4, #0]
   b80a2:	68a3      	ldr	r3, [r4, #8]
   b80a4:	2100      	movs	r1, #0
   b80a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b80a8:	e7f2      	b.n	b8090 <_ZN6String4copyEPKcj+0x18>

000b80aa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b80aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b80ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b80ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b80b2:	4604      	mov	r4, r0
	len = 0;
   b80b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b80b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b80b8:	b141      	cbz	r1, b80cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b80ba:	4608      	mov	r0, r1
   b80bc:	9101      	str	r1, [sp, #4]
   b80be:	f7fc fc9d 	bl	b49fc <strlen>
   b80c2:	9901      	ldr	r1, [sp, #4]
   b80c4:	4602      	mov	r2, r0
   b80c6:	4620      	mov	r0, r4
   b80c8:	f7ff ffd6 	bl	b8078 <_ZN6String4copyEPKcj>
}
   b80cc:	4620      	mov	r0, r4
   b80ce:	b002      	add	sp, #8
   b80d0:	bd10      	pop	{r4, pc}

000b80d2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b80d2:	b538      	push	{r3, r4, r5, lr}
   b80d4:	4605      	mov	r5, r0
	if (buffer) {
   b80d6:	6800      	ldr	r0, [r0, #0]
{
   b80d8:	460c      	mov	r4, r1
	if (buffer) {
   b80da:	b168      	cbz	r0, b80f8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b80dc:	686a      	ldr	r2, [r5, #4]
   b80de:	688b      	ldr	r3, [r1, #8]
   b80e0:	429a      	cmp	r2, r3
   b80e2:	d307      	bcc.n	b80f4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b80e4:	6809      	ldr	r1, [r1, #0]
   b80e6:	f004 f810 	bl	bc10a <strcpy>
			len = rhs.len;
   b80ea:	68a3      	ldr	r3, [r4, #8]
   b80ec:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b80ee:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b80f0:	60a3      	str	r3, [r4, #8]
}
   b80f2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b80f4:	f7ff fdf8 	bl	b7ce8 <free>
	buffer = rhs.buffer;
   b80f8:	6823      	ldr	r3, [r4, #0]
   b80fa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b80fc:	6863      	ldr	r3, [r4, #4]
   b80fe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8100:	68a3      	ldr	r3, [r4, #8]
   b8102:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8104:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8106:	e9c4 3300 	strd	r3, r3, [r4]
   b810a:	e7f1      	b.n	b80f0 <_ZN6String4moveERS_+0x1e>

000b810c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b810c:	b510      	push	{r4, lr}
	buffer = NULL;
   b810e:	2300      	movs	r3, #0
	capacity = 0;
   b8110:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8114:	4604      	mov	r4, r0
	len = 0;
   b8116:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8118:	7303      	strb	r3, [r0, #12]
	move(rval);
   b811a:	f7ff ffda 	bl	b80d2 <_ZN6String4moveERS_>
}
   b811e:	4620      	mov	r0, r4
   b8120:	bd10      	pop	{r4, pc}

000b8122 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8122:	4288      	cmp	r0, r1
{
   b8124:	b510      	push	{r4, lr}
   b8126:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8128:	d005      	beq.n	b8136 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b812a:	680b      	ldr	r3, [r1, #0]
   b812c:	b12b      	cbz	r3, b813a <_ZN6StringaSERKS_+0x18>
   b812e:	688a      	ldr	r2, [r1, #8]
   b8130:	4619      	mov	r1, r3
   b8132:	f7ff ffa1 	bl	b8078 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8136:	4620      	mov	r0, r4
   b8138:	bd10      	pop	{r4, pc}
	else invalidate();
   b813a:	f7ff ff72 	bl	b8022 <_ZN6String10invalidateEv>
   b813e:	e7fa      	b.n	b8136 <_ZN6StringaSERKS_+0x14>

000b8140 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8140:	b510      	push	{r4, lr}
	buffer = NULL;
   b8142:	2300      	movs	r3, #0
String::String(const String &value)
   b8144:	4604      	mov	r4, r0
	capacity = 0;
   b8146:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b814a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b814c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b814e:	f7ff ffe8 	bl	b8122 <_ZN6StringaSERKS_>
}
   b8152:	4620      	mov	r0, r4
   b8154:	bd10      	pop	{r4, pc}

000b8156 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8156:	4288      	cmp	r0, r1
{
   b8158:	b510      	push	{r4, lr}
   b815a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b815c:	d001      	beq.n	b8162 <_ZN6StringaSEOS_+0xc>
   b815e:	f7ff ffb8 	bl	b80d2 <_ZN6String4moveERS_>
	return *this;
}
   b8162:	4620      	mov	r0, r4
   b8164:	bd10      	pop	{r4, pc}

000b8166 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8166:	b513      	push	{r0, r1, r4, lr}
   b8168:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b816a:	b159      	cbz	r1, b8184 <_ZN6StringaSEPKc+0x1e>
   b816c:	4608      	mov	r0, r1
   b816e:	9101      	str	r1, [sp, #4]
   b8170:	f7fc fc44 	bl	b49fc <strlen>
   b8174:	9901      	ldr	r1, [sp, #4]
   b8176:	4602      	mov	r2, r0
   b8178:	4620      	mov	r0, r4
   b817a:	f7ff ff7d 	bl	b8078 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b817e:	4620      	mov	r0, r4
   b8180:	b002      	add	sp, #8
   b8182:	bd10      	pop	{r4, pc}
	else invalidate();
   b8184:	f7ff ff4d 	bl	b8022 <_ZN6String10invalidateEv>
   b8188:	e7f9      	b.n	b817e <_ZN6StringaSEPKc+0x18>

000b818a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b818a:	b510      	push	{r4, lr}
   b818c:	4604      	mov	r4, r0
   b818e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8190:	2300      	movs	r3, #0
	capacity = 0;
   b8192:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8196:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8198:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b819a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b819c:	a901      	add	r1, sp, #4
   b819e:	f7ff ff23 	bl	b7fe8 <itoa>
	*this = buf;
   b81a2:	a901      	add	r1, sp, #4
   b81a4:	4620      	mov	r0, r4
   b81a6:	f7ff ffde 	bl	b8166 <_ZN6StringaSEPKc>
}
   b81aa:	4620      	mov	r0, r4
   b81ac:	b00a      	add	sp, #40	; 0x28
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b81b0:	b570      	push	{r4, r5, r6, lr}
   b81b2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b81b4:	460e      	mov	r6, r1
   b81b6:	b909      	cbnz	r1, b81bc <_ZN6String6concatEPKcj+0xc>
   b81b8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b81ba:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b81bc:	b16a      	cbz	r2, b81da <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b81be:	6884      	ldr	r4, [r0, #8]
   b81c0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81c2:	4621      	mov	r1, r4
   b81c4:	f7ff ff44 	bl	b8050 <_ZN6String7reserveEj>
   b81c8:	2800      	cmp	r0, #0
   b81ca:	d0f5      	beq.n	b81b8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b81cc:	6828      	ldr	r0, [r5, #0]
   b81ce:	68ab      	ldr	r3, [r5, #8]
   b81d0:	4631      	mov	r1, r6
   b81d2:	4418      	add	r0, r3
   b81d4:	f003 ff99 	bl	bc10a <strcpy>
	len = newlen;
   b81d8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b81da:	2001      	movs	r0, #1
   b81dc:	e7ed      	b.n	b81ba <_ZN6String6concatEPKcj+0xa>

000b81de <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b81de:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b81e0:	2300      	movs	r3, #0
	buf[0] = c;
   b81e2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b81e6:	2201      	movs	r2, #1
   b81e8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b81ea:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b81ee:	f7ff ffdf 	bl	b81b0 <_ZN6String6concatEPKcj>
}
   b81f2:	b003      	add	sp, #12
   b81f4:	f85d fb04 	ldr.w	pc, [sp], #4

000b81f8 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b81f8:	6802      	ldr	r2, [r0, #0]
{
   b81fa:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b81fc:	6809      	ldr	r1, [r1, #0]
   b81fe:	b162      	cbz	r2, b821a <_ZNK6String9compareToERKS_+0x22>
   b8200:	b941      	cbnz	r1, b8214 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b8202:	6880      	ldr	r0, [r0, #8]
   b8204:	b160      	cbz	r0, b8220 <_ZNK6String9compareToERKS_+0x28>
   b8206:	7810      	ldrb	r0, [r2, #0]
   b8208:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b820a:	6898      	ldr	r0, [r3, #8]
   b820c:	b140      	cbz	r0, b8220 <_ZNK6String9compareToERKS_+0x28>
   b820e:	7809      	ldrb	r1, [r1, #0]
   b8210:	4248      	negs	r0, r1
   b8212:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8214:	4610      	mov	r0, r2
   b8216:	f7fc bbe7 	b.w	b49e8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b821a:	2900      	cmp	r1, #0
   b821c:	d1f5      	bne.n	b820a <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b821e:	4608      	mov	r0, r1
}
   b8220:	4770      	bx	lr

000b8222 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b8222:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b8224:	6882      	ldr	r2, [r0, #8]
   b8226:	688b      	ldr	r3, [r1, #8]
   b8228:	429a      	cmp	r2, r3
   b822a:	d105      	bne.n	b8238 <_ZNK6String6equalsERKS_+0x16>
   b822c:	f7ff ffe4 	bl	b81f8 <_ZNK6String9compareToERKS_>
   b8230:	fab0 f080 	clz	r0, r0
   b8234:	0940      	lsrs	r0, r0, #5
}
   b8236:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b8238:	2000      	movs	r0, #0
   b823a:	e7fc      	b.n	b8236 <_ZNK6String6equalsERKS_+0x14>

000b823c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b823c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b823e:	6800      	ldr	r0, [r0, #0]
   b8240:	b140      	cbz	r0, b8254 <_ZNK6String7toFloatEv+0x18>
   b8242:	f003 fec9 	bl	bbfd8 <atof>
   b8246:	ec51 0b10 	vmov	r0, r1, d0
   b824a:	f7fc fb5f 	bl	b490c <__aeabi_d2f>
   b824e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8252:	bd08      	pop	{r3, pc}
	return 0;
   b8254:	ed9f 0a01 	vldr	s0, [pc, #4]	; b825c <_ZNK6String7toFloatEv+0x20>
   b8258:	e7fb      	b.n	b8252 <_ZNK6String7toFloatEv+0x16>
   b825a:	bf00      	nop
   b825c:	00000000 	.word	0x00000000

000b8260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b8260:	4770      	bx	lr
	...

000b8264 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b8264:	4b06      	ldr	r3, [pc, #24]	; (b8280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8266:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8268:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b826a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b826e:	d005      	beq.n	b827c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8270:	4608      	mov	r0, r1
   b8272:	f003 fd99 	bl	bbda8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b8276:	2800      	cmp	r0, #0
   b8278:	bf08      	it	eq
   b827a:	2400      	moveq	r4, #0
      }
   b827c:	4620      	mov	r0, r4
   b827e:	bd10      	pop	{r4, pc}
   b8280:	000bf32c 	.word	0x000bf32c

000b8284 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8284:	b510      	push	{r4, lr}
   b8286:	2130      	movs	r1, #48	; 0x30
   b8288:	4604      	mov	r4, r0
   b828a:	f7fc fc18 	bl	b4abe <_ZdlPvj>
   b828e:	4620      	mov	r0, r4
   b8290:	bd10      	pop	{r4, pc}

000b8292 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8292:	2130      	movs	r1, #48	; 0x30
   b8294:	f7fc bc13 	b.w	b4abe <_ZdlPvj>

000b8298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8298:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b829a:	2500      	movs	r5, #0
   b829c:	1cec      	adds	r4, r5, #3
   b829e:	428c      	cmp	r4, r1
   b82a0:	d80d      	bhi.n	b82be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b82a2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b82a4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b82a6:	5d87      	ldrb	r7, [r0, r6]
   b82a8:	4297      	cmp	r7, r2
   b82aa:	d105      	bne.n	b82b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b82ac:	4426      	add	r6, r4
   b82ae:	42b1      	cmp	r1, r6
   b82b0:	d305      	bcc.n	b82be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b82b2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b82b4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b82b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b82b8:	3401      	adds	r4, #1
   b82ba:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82bc:	e7ee      	b.n	b829c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b82be:	2000      	movs	r0, #0
   b82c0:	e7f9      	b.n	b82b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b82c2 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataOS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82c2:	b410      	push	{r4}
   b82c4:	460c      	mov	r4, r1
	    return __source._M_access<_Functor*>();
   b82c6:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b82c8:	6820      	ldr	r0, [r4, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b82ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   b82ce:	e9d3 2100 	ldrd	r2, r1, [r3]
   b82d2:	4710      	bx	r2

000b82d4 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b82d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82d6:	b538      	push	{r3, r4, r5, lr}
   b82d8:	4604      	mov	r4, r0
	switch (__op)
   b82da:	d102      	bne.n	b82e2 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b82dc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b82de:	6023      	str	r3, [r4, #0]
	}
   b82e0:	e003      	b.n	b82ea <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b82e2:	2a02      	cmp	r2, #2
   b82e4:	d003      	beq.n	b82ee <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b82e6:	2a03      	cmp	r2, #3
   b82e8:	d00d      	beq.n	b8306 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b82ea:	2000      	movs	r0, #0
   b82ec:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b82ee:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b82f0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b82f2:	f7fc fbde 	bl	b4ab2 <_Znwj>
   b82f6:	4603      	mov	r3, r0
   b82f8:	2800      	cmp	r0, #0
   b82fa:	d0f0      	beq.n	b82de <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b82fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8300:	e883 0003 	stmia.w	r3, {r0, r1}
   b8304:	e7eb      	b.n	b82de <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8306:	6800      	ldr	r0, [r0, #0]
   b8308:	2800      	cmp	r0, #0
   b830a:	d0ee      	beq.n	b82ea <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b830c:	2108      	movs	r1, #8
   b830e:	f7fc fbd6 	bl	b4abe <_ZdlPvj>
   b8312:	e7ea      	b.n	b82ea <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b8314 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b8314:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b8316:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b8318:	4604      	mov	r4, r0
	if (_M_manager)
   b831a:	b12b      	cbz	r3, b8328 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b831c:	2203      	movs	r2, #3
   b831e:	4601      	mov	r1, r0
   b8320:	4798      	blx	r3
	    _M_manager = nullptr;
   b8322:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b8324:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b8328:	bd10      	pop	{r4, pc}

000b832a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b832a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b832c:	6843      	ldr	r3, [r0, #4]
   b832e:	3b01      	subs	r3, #1
    {
   b8330:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8332:	6043      	str	r3, [r0, #4]
   b8334:	b963      	cbnz	r3, b8350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8336:	6803      	ldr	r3, [r0, #0]
   b8338:	689b      	ldr	r3, [r3, #8]
   b833a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b833c:	68a3      	ldr	r3, [r4, #8]
   b833e:	3b01      	subs	r3, #1
   b8340:	60a3      	str	r3, [r4, #8]
   b8342:	b92b      	cbnz	r3, b8350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8344:	6823      	ldr	r3, [r4, #0]
   b8346:	4620      	mov	r0, r4
   b8348:	68db      	ldr	r3, [r3, #12]
    }
   b834a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b834e:	4718      	bx	r3
    }
   b8350:	bd10      	pop	{r4, pc}

000b8352 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8352:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8356:	b2da      	uxtb	r2, r3
   b8358:	2a09      	cmp	r2, #9
   b835a:	d801      	bhi.n	b8360 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b835c:	4618      	mov	r0, r3
   b835e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8360:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8364:	2b05      	cmp	r3, #5
   b8366:	d801      	bhi.n	b836c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8368:	3857      	subs	r0, #87	; 0x57
   b836a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b836c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8370:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8372:	bf94      	ite	ls
   b8374:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8376:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b837a:	4770      	bx	lr

000b837c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b837c:	b510      	push	{r4, lr}
            locked_(false) {
   b837e:	2300      	movs	r3, #0
   b8380:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8382:	4b04      	ldr	r3, [pc, #16]	; (b8394 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8384:	4604      	mov	r4, r0
   b8386:	6818      	ldr	r0, [r3, #0]
   b8388:	f7ff fa52 	bl	b7830 <os_mutex_recursive_lock>
        locked_ = true;
   b838c:	2301      	movs	r3, #1
   b838e:	7023      	strb	r3, [r4, #0]
    }
   b8390:	4620      	mov	r0, r4
   b8392:	bd10      	pop	{r4, pc}
   b8394:	2003e6a4 	.word	0x2003e6a4

000b8398 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b8398:	b510      	push	{r4, lr}
        if (locked_) {
   b839a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b839c:	4604      	mov	r4, r0
        if (locked_) {
   b839e:	b11b      	cbz	r3, b83a8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b83a0:	4b02      	ldr	r3, [pc, #8]	; (b83ac <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b83a2:	6818      	ldr	r0, [r3, #0]
   b83a4:	f7ff fa4c 	bl	b7840 <os_mutex_recursive_unlock>
    }
   b83a8:	4620      	mov	r0, r4
   b83aa:	bd10      	pop	{r4, pc}
   b83ac:	2003e6a4 	.word	0x2003e6a4

000b83b0 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b83b0:	2905      	cmp	r1, #5
    return address_.addr[i];
   b83b2:	bf94      	ite	ls
   b83b4:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b83b6:	2000      	movhi	r0, #0
}
   b83b8:	4770      	bx	lr

000b83ba <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b83ba:	680a      	ldr	r2, [r1, #0]
   b83bc:	6002      	str	r2, [r0, #0]
   b83be:	684a      	ldr	r2, [r1, #4]
   b83c0:	6042      	str	r2, [r0, #4]
}
   b83c2:	4770      	bx	lr

000b83c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b83c4:	b082      	sub	sp, #8
   b83c6:	4603      	mov	r3, r0
    address_ = addr;
   b83c8:	6808      	ldr	r0, [r1, #0]
   b83ca:	6849      	ldr	r1, [r1, #4]
   b83cc:	466a      	mov	r2, sp
   b83ce:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b83d0:	466a      	mov	r2, sp
   b83d2:	ca03      	ldmia	r2!, {r0, r1}
   b83d4:	6018      	str	r0, [r3, #0]
}
   b83d6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b83d8:	6059      	str	r1, [r3, #4]
}
   b83da:	b002      	add	sp, #8
   b83dc:	4770      	bx	lr

000b83de <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b83de:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b83e0:	7982      	ldrb	r2, [r0, #6]
   b83e2:	798b      	ldrb	r3, [r1, #6]
   b83e4:	429a      	cmp	r2, r3
   b83e6:	d106      	bne.n	b83f6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b83e8:	2206      	movs	r2, #6
   b83ea:	f003 fe09 	bl	bc000 <memcmp>
   b83ee:	fab0 f080 	clz	r0, r0
   b83f2:	0940      	lsrs	r0, r0, #5
}
   b83f4:	bd08      	pop	{r3, pc}
    return false;
   b83f6:	2000      	movs	r0, #0
   b83f8:	e7fc      	b.n	b83f4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b83fa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b83fa:	f04f 33ff 	mov.w	r3, #4294967295
   b83fe:	6003      	str	r3, [r0, #0]
   b8400:	8083      	strh	r3, [r0, #4]
}
   b8402:	2000      	movs	r0, #0
   b8404:	4770      	bx	lr

000b8406 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8406:	b508      	push	{r3, lr}
   b8408:	4602      	mov	r2, r0
        : address_{} {
   b840a:	2100      	movs	r1, #0
   b840c:	6001      	str	r1, [r0, #0]
   b840e:	6041      	str	r1, [r0, #4]
    clear();
   b8410:	f7ff fff3 	bl	b83fa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8414:	7191      	strb	r1, [r2, #6]
}
   b8416:	4610      	mov	r0, r2
   b8418:	bd08      	pop	{r3, pc}
	...

000b841c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b841c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b841e:	2301      	movs	r3, #1
   b8420:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8422:	4b05      	ldr	r3, [pc, #20]	; (b8438 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8424:	4602      	mov	r2, r0
   b8426:	f103 0110 	add.w	r1, r3, #16
   b842a:	f853 4b04 	ldr.w	r4, [r3], #4
   b842e:	f842 4b04 	str.w	r4, [r2], #4
   b8432:	428b      	cmp	r3, r1
   b8434:	d1f9      	bne.n	b842a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8436:	bd10      	pop	{r4, pc}
   b8438:	000be0d2 	.word	0x000be0d2

000b843c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b843c:	b510      	push	{r4, lr}
    if (uuid128) {
   b843e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8440:	4604      	mov	r4, r0
    if (uuid128) {
   b8442:	b1b1      	cbz	r1, b8472 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8444:	2a01      	cmp	r2, #1
   b8446:	f101 0210 	add.w	r2, r1, #16
   b844a:	d10a      	bne.n	b8462 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b844c:	4601      	mov	r1, r0
   b844e:	f853 0b04 	ldr.w	r0, [r3], #4
   b8452:	f841 0b04 	str.w	r0, [r1], #4
   b8456:	4293      	cmp	r3, r2
   b8458:	d1f9      	bne.n	b844e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b845a:	2301      	movs	r3, #1
   b845c:	6123      	str	r3, [r4, #16]
}
   b845e:	4620      	mov	r0, r4
   b8460:	bd10      	pop	{r4, pc}
   b8462:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8464:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8468:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b846c:	429a      	cmp	r2, r3
   b846e:	d1f9      	bne.n	b8464 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8470:	e7f3      	b.n	b845a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8472:	2210      	movs	r2, #16
   b8474:	f003 fdfc 	bl	bc070 <memset>
   b8478:	e7f1      	b.n	b845e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b847a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b847a:	b538      	push	{r3, r4, r5, lr}
   b847c:	4604      	mov	r4, r0
   b847e:	460d      	mov	r5, r1
        : BleUuid() {
   b8480:	f7ff ffcc 	bl	b841c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b8484:	2300      	movs	r3, #0
   b8486:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8488:	81a5      	strh	r5, [r4, #12]
}
   b848a:	4620      	mov	r0, r4
   b848c:	bd38      	pop	{r3, r4, r5, pc}

000b848e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b848e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8490:	6902      	ldr	r2, [r0, #16]
   b8492:	690b      	ldr	r3, [r1, #16]
   b8494:	429a      	cmp	r2, r3
   b8496:	d106      	bne.n	b84a6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8498:	2210      	movs	r2, #16
   b849a:	f003 fdb1 	bl	bc000 <memcmp>
   b849e:	fab0 f080 	clz	r0, r0
   b84a2:	0940      	lsrs	r0, r0, #5
}
   b84a4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b84a6:	2000      	movs	r0, #0
   b84a8:	e7fc      	b.n	b84a4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b84ac <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b84ac:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b84ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b84b2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84b4:	4b34      	ldr	r3, [pc, #208]	; (b8588 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b84b6:	460c      	mov	r4, r1
   b84b8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84ba:	4602      	mov	r2, r0
   b84bc:	f103 0110 	add.w	r1, r3, #16
   b84c0:	f853 0b04 	ldr.w	r0, [r3], #4
   b84c4:	f842 0b04 	str.w	r0, [r2], #4
   b84c8:	428b      	cmp	r3, r1
   b84ca:	d1f9      	bne.n	b84c0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b84cc:	b344      	cbz	r4, b8520 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b84ce:	2124      	movs	r1, #36	; 0x24
   b84d0:	4620      	mov	r0, r4
   b84d2:	f003 fe49 	bl	bc168 <strnlen>
   b84d6:	2804      	cmp	r0, #4
   b84d8:	f04f 0500 	mov.w	r5, #0
   b84dc:	d123      	bne.n	b8526 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b84de:	f8ad 5004 	strh.w	r5, [sp, #4]
   b84e2:	af01      	add	r7, sp, #4
   b84e4:	1ca5      	adds	r5, r4, #2
   b84e6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b84e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b84ec:	f7ff ff31 	bl	b8352 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b84f0:	f1b0 0800 	subs.w	r8, r0, #0
   b84f4:	db12      	blt.n	b851c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b84f6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b84fa:	f7ff ff2a 	bl	b8352 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b84fe:	2800      	cmp	r0, #0
   b8500:	db0c      	blt.n	b851c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8502:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8504:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8508:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b850a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b850e:	d1eb      	bne.n	b84e8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8510:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8514:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8516:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b851a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b851c:	2300      	movs	r3, #0
   b851e:	6133      	str	r3, [r6, #16]
}
   b8520:	b002      	add	sp, #8
   b8522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8526:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b852a:	2124      	movs	r1, #36	; 0x24
   b852c:	4620      	mov	r0, r4
   b852e:	f003 fe1b 	bl	bc168 <strnlen>
   b8532:	42a8      	cmp	r0, r5
   b8534:	d807      	bhi.n	b8546 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8536:	4642      	mov	r2, r8
   b8538:	2100      	movs	r1, #0
   b853a:	4630      	mov	r0, r6
}
   b853c:	b002      	add	sp, #8
   b853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8542:	f003 bd95 	b.w	bc070 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8546:	f1b8 0f00 	cmp.w	r8, #0
   b854a:	d0e9      	beq.n	b8520 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b854c:	5d60      	ldrb	r0, [r4, r5]
   b854e:	f7ff ff00 	bl	b8352 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8552:	0603      	lsls	r3, r0, #24
   b8554:	d415      	bmi.n	b8582 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8556:	0100      	lsls	r0, r0, #4
   b8558:	f108 38ff 	add.w	r8, r8, #4294967295
   b855c:	b2c7      	uxtb	r7, r0
   b855e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8562:	2124      	movs	r1, #36	; 0x24
   b8564:	4620      	mov	r0, r4
   b8566:	f003 fdff 	bl	bc168 <strnlen>
   b856a:	3501      	adds	r5, #1
   b856c:	42a8      	cmp	r0, r5
   b856e:	d908      	bls.n	b8582 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8570:	5d60      	ldrb	r0, [r4, r5]
   b8572:	f7ff feee 	bl	b8352 <_ZN8particle11hexToNibbleEc>
   b8576:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8578:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b857a:	bfa4      	itt	ge
   b857c:	4338      	orrge	r0, r7
   b857e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8582:	3501      	adds	r5, #1
   b8584:	e7d1      	b.n	b852a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8586:	bf00      	nop
   b8588:	000be0d2 	.word	0x000be0d2

000b858c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b858c:	b513      	push	{r0, r1, r4, lr}
   b858e:	4604      	mov	r4, r0
   b8590:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8592:	f7ff ff43 	bl	b841c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8596:	4620      	mov	r0, r4
   b8598:	9901      	ldr	r1, [sp, #4]
   b859a:	f7ff ff87 	bl	b84ac <_ZN8particle7BleUuid9constructEPKc>
}
   b859e:	4620      	mov	r0, r4
   b85a0:	b002      	add	sp, #8
   b85a2:	bd10      	pop	{r4, pc}

000b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b85a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b85a6:	4605      	mov	r5, r0
   b85a8:	4616      	mov	r6, r2
   b85aa:	461f      	mov	r7, r3
   b85ac:	460a      	mov	r2, r1
   b85ae:	ab01      	add	r3, sp, #4
   b85b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b85b4:	f7ff fe70 	bl	b8298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b85b8:	f030 0402 	bics.w	r4, r0, #2
   b85bc:	d00c      	beq.n	b85d8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b85be:	1e84      	subs	r4, r0, #2
   b85c0:	42bc      	cmp	r4, r7
   b85c2:	bf28      	it	cs
   b85c4:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b85c6:	b13e      	cbz	r6, b85d8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b85c8:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b85ca:	682b      	ldr	r3, [r5, #0]
   b85cc:	3102      	adds	r1, #2
   b85ce:	4622      	mov	r2, r4
   b85d0:	4419      	add	r1, r3
   b85d2:	4630      	mov	r0, r6
   b85d4:	f003 fd24 	bl	bc020 <memcpy>
}
   b85d8:	4620      	mov	r0, r4
   b85da:	b003      	add	sp, #12
   b85dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b85de <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b85de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b85e0:	4613      	mov	r3, r2
   b85e2:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b85e4:	9201      	str	r2, [sp, #4]
   b85e6:	460a      	mov	r2, r1
   b85e8:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b85ea:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b85ec:	f7ff ffda 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b85f0:	b940      	cbnz	r0, b8604 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b85f2:	9b01      	ldr	r3, [sp, #4]
   b85f4:	4622      	mov	r2, r4
   b85f6:	2109      	movs	r1, #9
   b85f8:	4628      	mov	r0, r5
}
   b85fa:	b003      	add	sp, #12
   b85fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b8600:	f7ff bfd0 	b.w	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b8604:	b003      	add	sp, #12
   b8606:	bd30      	pop	{r4, r5, pc}

000b8608 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b8608:	b5f0      	push	{r4, r5, r6, r7, lr}
   b860a:	460c      	mov	r4, r1
   b860c:	b089      	sub	sp, #36	; 0x24
    String name;
   b860e:	490c      	ldr	r1, [pc, #48]	; (b8640 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b8610:	4605      	mov	r5, r0
    String name;
   b8612:	f7ff fd4a 	bl	b80aa <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b8616:	221f      	movs	r2, #31
   b8618:	4669      	mov	r1, sp
   b861a:	4620      	mov	r0, r4
   b861c:	f7ff ffdf 	bl	b85de <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b8620:	4606      	mov	r6, r0
   b8622:	b150      	cbz	r0, b863a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b8624:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b8626:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b8628:	f814 1b01 	ldrb.w	r1, [r4], #1
   b862c:	4628      	mov	r0, r5
   b862e:	f7ff fdd6 	bl	b81de <_ZN6String6concatEc>
   b8632:	b110      	cbz	r0, b863a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b8634:	3701      	adds	r7, #1
   b8636:	42be      	cmp	r6, r7
   b8638:	d1f6      	bne.n	b8628 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b863a:	4628      	mov	r0, r5
   b863c:	b009      	add	sp, #36	; 0x24
   b863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8640:	000bf38b 	.word	0x000bf38b

000b8644 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b8644:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b8646:	2302      	movs	r3, #2
   b8648:	aa01      	add	r2, sp, #4
   b864a:	2119      	movs	r1, #25
   b864c:	f7ff ffaa 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b8650:	b108      	cbz	r0, b8656 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b8652:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b8656:	b003      	add	sp, #12
   b8658:	f85d fb04 	ldr.w	pc, [sp], #4

000b865c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b865c:	b510      	push	{r4, lr}
    return data_ + size_;
   b865e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8662:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8666:	4293      	cmp	r3, r2
   b8668:	4618      	mov	r0, r3
   b866a:	d006      	beq.n	b867a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b866c:	6804      	ldr	r4, [r0, #0]
   b866e:	8824      	ldrh	r4, [r4, #0]
   b8670:	428c      	cmp	r4, r1
   b8672:	f103 0308 	add.w	r3, r3, #8
   b8676:	d1f6      	bne.n	b8666 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b8678:	bd10      	pop	{r4, pc}
        return nullptr;
   b867a:	2000      	movs	r0, #0
   b867c:	e7fc      	b.n	b8678 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8680 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8680:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8682:	2500      	movs	r5, #0
   b8684:	6005      	str	r5, [r0, #0]
   b8686:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8688:	2030      	movs	r0, #48	; 0x30
   b868a:	f7fc fa12 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b868e:	4604      	mov	r4, r0
   b8690:	b188      	cbz	r0, b86b6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8692:	2301      	movs	r3, #1
   b8694:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8698:	4b09      	ldr	r3, [pc, #36]	; (b86c0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b869a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b869c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b86a0:	8183      	strh	r3, [r0, #12]
   b86a2:	300e      	adds	r0, #14
   b86a4:	f7ff feaf 	bl	b8406 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b86a8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b86ac:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b86b0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b86b4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b86b6:	6074      	str	r4, [r6, #4]
   b86b8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b86ba:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b86bc:	4630      	mov	r0, r6
   b86be:	bd70      	pop	{r4, r5, r6, pc}
   b86c0:	000bf318 	.word	0x000bf318

000b86c4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b86c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86c6:	460d      	mov	r5, r1
   b86c8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b86ca:	a801      	add	r0, sp, #4
   b86cc:	f7ff fe56 	bl	b837c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b86d0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b86d2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b86d6:	6023      	str	r3, [r4, #0]
   b86d8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b86dc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b86de:	a801      	add	r0, sp, #4
   b86e0:	f7ff fe5a 	bl	b8398 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b86e4:	4620      	mov	r0, r4
   b86e6:	b003      	add	sp, #12
   b86e8:	bd30      	pop	{r4, r5, pc}

000b86ea <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b86ea:	b530      	push	{r4, r5, lr}
   b86ec:	4605      	mov	r5, r0
   b86ee:	b087      	sub	sp, #28
   b86f0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b86f2:	a801      	add	r0, sp, #4
   b86f4:	f7ff fe42 	bl	b837c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b86f8:	682a      	ldr	r2, [r5, #0]
   b86fa:	6823      	ldr	r3, [r4, #0]
   b86fc:	8812      	ldrh	r2, [r2, #0]
   b86fe:	881b      	ldrh	r3, [r3, #0]
   b8700:	429a      	cmp	r2, r3
   b8702:	d10d      	bne.n	b8720 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8704:	4629      	mov	r1, r5
   b8706:	a802      	add	r0, sp, #8
   b8708:	f7ff ffdc 	bl	b86c4 <_ZNK8particle13BlePeerDevice7addressEv>
   b870c:	4621      	mov	r1, r4
   b870e:	a804      	add	r0, sp, #16
   b8710:	f7ff ffd8 	bl	b86c4 <_ZNK8particle13BlePeerDevice7addressEv>
   b8714:	a904      	add	r1, sp, #16
   b8716:	a802      	add	r0, sp, #8
   b8718:	f7ff fe61 	bl	b83de <_ZNK8particle10BleAddresseqERKS0_>
   b871c:	4604      	mov	r4, r0
   b871e:	b900      	cbnz	r0, b8722 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8720:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8722:	a801      	add	r0, sp, #4
   b8724:	f7ff fe38 	bl	b8398 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8728:	4620      	mov	r0, r4
   b872a:	b007      	add	sp, #28
   b872c:	bd30      	pop	{r4, r5, pc}
	...

000b8730 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8730:	b510      	push	{r4, lr}
   b8732:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8734:	2064      	movs	r0, #100	; 0x64
   b8736:	f7fc f9bc 	bl	b4ab2 <_Znwj>
   b873a:	b168      	cbz	r0, b8758 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b873c:	2300      	movs	r3, #0
   b873e:	e9c0 3300 	strd	r3, r3, [r0]
   b8742:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8746:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b874a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b874e:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b8750:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8752:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8754:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8756:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8758:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b875a:	b920      	cbnz	r0, b8766 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b875c:	4a0a      	ldr	r2, [pc, #40]	; (b8788 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b875e:	490b      	ldr	r1, [pc, #44]	; (b878c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8760:	200a      	movs	r0, #10
   b8762:	f7ff f9ed 	bl	b7b40 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8766:	2000      	movs	r0, #0
   b8768:	f7fe fff4 	bl	b7754 <hal_ble_stack_init>
   b876c:	b120      	cbz	r0, b8778 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b876e:	4a06      	ldr	r2, [pc, #24]	; (b8788 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8770:	4907      	ldr	r1, [pc, #28]	; (b8790 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8772:	200a      	movs	r0, #10
   b8774:	f7ff f9e4 	bl	b7b40 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8778:	6821      	ldr	r1, [r4, #0]
   b877a:	4806      	ldr	r0, [pc, #24]	; (b8794 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b877c:	2200      	movs	r2, #0
   b877e:	f7ff f81d 	bl	b77bc <hal_ble_set_callback_on_periph_link_events>
}
   b8782:	4620      	mov	r0, r4
   b8784:	bd10      	pop	{r4, pc}
   b8786:	bf00      	nop
   b8788:	000b7735 	.word	0x000b7735
   b878c:	000bf238 	.word	0x000bf238
   b8790:	000bf276 	.word	0x000bf276
   b8794:	000b909d 	.word	0x000b909d

000b8798 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8798:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b879a:	4c0a      	ldr	r4, [pc, #40]	; (b87c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b879c:	7823      	ldrb	r3, [r4, #0]
   b879e:	f3bf 8f5b 	dmb	ish
   b87a2:	07db      	lsls	r3, r3, #31
   b87a4:	d40c      	bmi.n	b87c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7fc f998 	bl	b4adc <__cxa_guard_acquire>
   b87ac:	b140      	cbz	r0, b87c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b87ae:	4806      	ldr	r0, [pc, #24]	; (b87c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b87b0:	f7ff ffbe 	bl	b8730 <_ZN8particle14BleLocalDeviceC1Ev>
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7fc f996 	bl	b4ae6 <__cxa_guard_release>
   b87ba:	4804      	ldr	r0, [pc, #16]	; (b87cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b87bc:	f003 fc06 	bl	bbfcc <atexit>
    return instance;
}
   b87c0:	4801      	ldr	r0, [pc, #4]	; (b87c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b87c2:	bd10      	pop	{r4, pc}
   b87c4:	2003e6a0 	.word	0x2003e6a0
   b87c8:	2003e6a8 	.word	0x2003e6a8
   b87cc:	000b89a1 	.word	0x000b89a1

000b87d0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b87d0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b87d2:	2000      	movs	r0, #0
   b87d4:	f7fe ffbe 	bl	b7754 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b87d8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b87dc:	bd08      	pop	{r3, pc}

000b87de <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b87de:	b530      	push	{r4, r5, lr}
   b87e0:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b87e2:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b87e4:	230c      	movs	r3, #12
   b87e6:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b87ea:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b87ec:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b87ee:	4621      	mov	r1, r4
   b87f0:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b87f2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b87f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b87fa:	f7fe ffbb 	bl	b7774 <hal_ble_gap_get_advertising_parameters>
   b87fe:	2800      	cmp	r0, #0
   b8800:	db05      	blt.n	b880e <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b8802:	4621      	mov	r1, r4
   b8804:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b8806:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b880a:	f7fe ffab 	bl	b7764 <hal_ble_gap_set_advertising_parameters>
}
   b880e:	b005      	add	sp, #20
   b8810:	bd30      	pop	{r4, r5, pc}

000b8812 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b8812:	b510      	push	{r4, lr}
   b8814:	4604      	mov	r4, r0
    ::free(ptr);
   b8816:	6940      	ldr	r0, [r0, #20]
   b8818:	f7ff fa66 	bl	b7ce8 <free>
   b881c:	68a0      	ldr	r0, [r4, #8]
   b881e:	f7ff fa63 	bl	b7ce8 <free>
   b8822:	4620      	mov	r0, r4
   b8824:	bd10      	pop	{r4, pc}

000b8826 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b8826:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b8828:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b882c:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b8830:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8834:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b8838:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b883c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b8840:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b8844:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b8848:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b884c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b8850:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8854:	6202      	str	r2, [r0, #32]
   b8856:	6302      	str	r2, [r0, #48]	; 0x30
   b8858:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b885c:	4770      	bx	lr

000b885e <_ZNK8particle14BleLocalDevice12stopScanningEv>:
    BleScanDelegator scanner;
    return scanner.setScanFilter(filter).start();
}

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
   b885e:	2000      	movs	r0, #0
   b8860:	f7fe bf98 	b.w	b7794 <hal_ble_gap_stop_scan>

000b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8864:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8866:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b886a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b886c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8870:	42ae      	cmp	r6, r5
   b8872:	d004      	beq.n	b887e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8874:	4628      	mov	r0, r5
   b8876:	f7ff fbcd 	bl	b8014 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b887a:	3510      	adds	r5, #16
   b887c:	e7f8      	b.n	b8870 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b887e:	6820      	ldr	r0, [r4, #0]
   b8880:	f7ff fa32 	bl	b7ce8 <free>
}
   b8884:	4620      	mov	r0, r4
   b8886:	bd70      	pop	{r4, r5, r6, pc}

000b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8888:	b510      	push	{r4, lr}
   b888a:	4604      	mov	r4, r0
    ::free(ptr);
   b888c:	6800      	ldr	r0, [r0, #0]
   b888e:	f7ff fa2b 	bl	b7ce8 <free>
}
   b8892:	4620      	mov	r0, r4
   b8894:	bd10      	pop	{r4, pc}

000b8896 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b8896:	b570      	push	{r4, r5, r6, lr}
   b8898:	4604      	mov	r4, r0
    ::free(ptr);
   b889a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b889c:	f7ff fa24 	bl	b7ce8 <free>
   b88a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b88a2:	f7ff fa21 	bl	b7ce8 <free>
    }
    ~BleScanFilter() = default;
   b88a6:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b88aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b88ae:	f7ff ffeb 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b88b2:	4628      	mov	r0, r5
   b88b4:	f7ff ffd6 	bl	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b88b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b88bc:	f7fe feb6 	bl	b762c <_ZNSt14_Function_baseD1Ev>
   b88c0:	f104 0018 	add.w	r0, r4, #24
   b88c4:	f7fe feb2 	bl	b762c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b88c8:	e9d4 5300 	ldrd	r5, r3, [r4]
   b88cc:	2624      	movs	r6, #36	; 0x24
   b88ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b88d2:	42ae      	cmp	r6, r5
   b88d4:	d004      	beq.n	b88e0 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b88d6:	4628      	mov	r0, r5
   b88d8:	f7ff ff9b 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b88dc:	3524      	adds	r5, #36	; 0x24
   b88de:	e7f8      	b.n	b88d2 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b88e0:	6820      	ldr	r0, [r4, #0]
   b88e2:	f7ff fa01 	bl	b7ce8 <free>
   b88e6:	4620      	mov	r0, r4
   b88e8:	bd70      	pop	{r4, r5, r6, pc}

000b88ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b88ea:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b88ec:	1e14      	subs	r4, r2, #0
   b88ee:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b88f0:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b88f2:	db02      	blt.n	b88fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b88f4:	1862      	adds	r2, r4, r1
   b88f6:	429a      	cmp	r2, r3
   b88f8:	dd00      	ble.n	b88fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b88fa:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b88fc:	682a      	ldr	r2, [r5, #0]
   b88fe:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8900:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8902:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8904:	1a52      	subs	r2, r2, r1
   b8906:	f003 fb99 	bl	bc03c <memmove>
    size_ -= n;
   b890a:	686a      	ldr	r2, [r5, #4]
   b890c:	1b12      	subs	r2, r2, r4
   b890e:	606a      	str	r2, [r5, #4]
}
   b8910:	bd38      	pop	{r3, r4, r5, pc}

000b8912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8912:	680b      	ldr	r3, [r1, #0]
   b8914:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8916:	b113      	cbz	r3, b891e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8918:	685a      	ldr	r2, [r3, #4]
   b891a:	3201      	adds	r2, #1
   b891c:	605a      	str	r2, [r3, #4]
      }
   b891e:	4770      	bx	lr

000b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8920:	b510      	push	{r4, lr}
   b8922:	f851 3b04 	ldr.w	r3, [r1], #4
   b8926:	4604      	mov	r4, r0
   b8928:	f840 3b04 	str.w	r3, [r0], #4
   b892c:	f7ff fff1 	bl	b8912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8930:	4620      	mov	r0, r4
   b8932:	bd10      	pop	{r4, pc}

000b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8934:	b510      	push	{r4, lr}
   b8936:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8938:	6800      	ldr	r0, [r0, #0]
   b893a:	b108      	cbz	r0, b8940 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b893c:	f7ff fcf5 	bl	b832a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8940:	4620      	mov	r0, r4
   b8942:	bd10      	pop	{r4, pc}

000b8944 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8944:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8946:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b894a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b894c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8950:	42ae      	cmp	r6, r5
   b8952:	d004      	beq.n	b895e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b8954:	1d28      	adds	r0, r5, #4
   b8956:	f7ff ffed 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b895a:	3508      	adds	r5, #8
   b895c:	e7f8      	b.n	b8950 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b895e:	6820      	ldr	r0, [r4, #0]
   b8960:	f7ff f9c2 	bl	b7ce8 <free>
}
   b8964:	4620      	mov	r0, r4
   b8966:	bd70      	pop	{r4, r5, r6, pc}

000b8968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8968:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b896a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b896e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8970:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8974:	42ae      	cmp	r6, r5
   b8976:	d004      	beq.n	b8982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8978:	1d28      	adds	r0, r5, #4
   b897a:	f7ff ffdb 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b897e:	3508      	adds	r5, #8
   b8980:	e7f8      	b.n	b8974 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8982:	6820      	ldr	r0, [r4, #0]
   b8984:	f7ff f9b0 	bl	b7ce8 <free>
}
   b8988:	4620      	mov	r0, r4
   b898a:	bd70      	pop	{r4, r5, r6, pc}

000b898c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b898c:	b510      	push	{r4, lr}
   b898e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8990:	3024      	adds	r0, #36	; 0x24
   b8992:	f7ff ffe9 	bl	b8968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8996:	f104 0018 	add.w	r0, r4, #24
   b899a:	f7ff ffd3 	bl	b8944 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b899e:	bd10      	pop	{r4, pc}

000b89a0 <__tcf_0>:
    static BleLocalDevice instance;
   b89a0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b89a2:	4b17      	ldr	r3, [pc, #92]	; (b8a00 <__tcf_0+0x60>)
   b89a4:	681c      	ldr	r4, [r3, #0]
   b89a6:	b354      	cbz	r4, b89fe <__tcf_0+0x5e>
   b89a8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b89ac:	f7fe fe3e 	bl	b762c <_ZNSt14_Function_baseD1Ev>
   b89b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89b4:	f7fe fe3a 	bl	b762c <_ZNSt14_Function_baseD1Ev>
   b89b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b89bc:	f7fe fe36 	bl	b762c <_ZNSt14_Function_baseD1Ev>
   b89c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b89c4:	f7fe fe32 	bl	b762c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b89c8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b89cc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b89d0:	42ae      	cmp	r6, r5
   b89d2:	d004      	beq.n	b89de <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b89d4:	1d28      	adds	r0, r5, #4
   b89d6:	f7ff ffad 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89da:	3508      	adds	r5, #8
   b89dc:	e7f8      	b.n	b89d0 <__tcf_0+0x30>
    ::free(ptr);
   b89de:	69a0      	ldr	r0, [r4, #24]
   b89e0:	f7ff f982 	bl	b7ce8 <free>
    ~BleLocalDeviceImpl() = default;
   b89e4:	f104 000c 	add.w	r0, r4, #12
   b89e8:	f7ff ffbe 	bl	b8968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b89ec:	4620      	mov	r0, r4
   b89ee:	f7ff ffa9 	bl	b8944 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b89f2:	4620      	mov	r0, r4
   b89f4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b89f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b89fa:	f7fc b860 	b.w	b4abe <_ZdlPvj>
   b89fe:	bd70      	pop	{r4, r5, r6, pc}
   b8a00:	2003e6a8 	.word	0x2003e6a8

000b8a04 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b8a04:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8a06:	b510      	push	{r4, lr}
      if (_M_empty())
   b8a08:	b90a      	cbnz	r2, b8a0e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8a0a:	f003 f9c9 	bl	bbda0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b8a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8a12:	68c3      	ldr	r3, [r0, #12]
   b8a14:	4718      	bx	r3

000b8a16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b8a1a:	2300      	movs	r3, #0
   b8a1c:	e9c0 3300 	strd	r3, r3, [r0]
   b8a20:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a22:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b8a26:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a28:	4605      	mov	r5, r0
   b8a2a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a2c:	dd4a      	ble.n	b8ac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b8a2e:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b8a32:	f7ff f951 	bl	b7cd8 <malloc>
            if (!d) {
   b8a36:	4606      	mov	r6, r0
   b8a38:	2800      	cmp	r0, #0
   b8a3a:	d043      	beq.n	b8ac4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b8a3c:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b8a40:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b8a42:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b8a46:	d916      	bls.n	b8a76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b8a48:	4550      	cmp	r0, sl
   b8a4a:	d215      	bcs.n	b8a78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b8a4c:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b8a50:	f1a4 0910 	sub.w	r9, r4, #16
   b8a54:	ebaa 0404 	sub.w	r4, sl, r4
   b8a58:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b8a5a:	45d1      	cmp	r9, sl
   b8a5c:	d01d      	beq.n	b8a9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b8a5e:	b11c      	cbz	r4, b8a68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b8a60:	4651      	mov	r1, sl
   b8a62:	4620      	mov	r0, r4
   b8a64:	f7ff fb52 	bl	b810c <_ZN6StringC1EOS_>
                end->~T();
   b8a68:	4650      	mov	r0, sl
   b8a6a:	f7ff fad3 	bl	b8014 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8a6e:	f1aa 0a10 	sub.w	sl, sl, #16
   b8a72:	3c10      	subs	r4, #16
   b8a74:	e7f1      	b.n	b8a5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b8a76:	d010      	beq.n	b8a9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b8a78:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b8a7a:	45a2      	cmp	sl, r4
   b8a7c:	d00d      	beq.n	b8a9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8a7e:	f1b9 0f00 	cmp.w	r9, #0
   b8a82:	d003      	beq.n	b8a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b8a84:	4621      	mov	r1, r4
   b8a86:	4648      	mov	r0, r9
   b8a88:	f7ff fb40 	bl	b810c <_ZN6StringC1EOS_>
                p->~T();
   b8a8c:	4620      	mov	r0, r4
   b8a8e:	f7ff fac1 	bl	b8014 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8a92:	3410      	adds	r4, #16
   b8a94:	f109 0910 	add.w	r9, r9, #16
   b8a98:	e7ef      	b.n	b8a7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b8a9a:	6828      	ldr	r0, [r5, #0]
   b8a9c:	f7ff f924 	bl	b7ce8 <free>
        capacity_ = n;
   b8aa0:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b8aa4:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8aa6:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8aaa:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8aae:	45a0      	cmp	r8, r4
   b8ab0:	d006      	beq.n	b8ac0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b8ab2:	4621      	mov	r1, r4
   b8ab4:	4630      	mov	r0, r6
   b8ab6:	f7ff fb43 	bl	b8140 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b8aba:	3410      	adds	r4, #16
   b8abc:	3610      	adds	r6, #16
   b8abe:	e7f6      	b.n	b8aae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8ac0:	687b      	ldr	r3, [r7, #4]
   b8ac2:	606b      	str	r3, [r5, #4]
}
   b8ac4:	4628      	mov	r0, r5
   b8ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8aca <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b8aca:	b530      	push	{r4, r5, lr}
   b8acc:	b08d      	sub	sp, #52	; 0x34
   b8ace:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8ad0:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b8ad4:	a801      	add	r0, sp, #4
   b8ad6:	f7ff ff9e 	bl	b8a16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b8ada:	9b02      	ldr	r3, [sp, #8]
   b8adc:	2b00      	cmp	r3, #0
   b8ade:	dd2f      	ble.n	b8b40 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8ae0:	f104 0114 	add.w	r1, r4, #20
   b8ae4:	a804      	add	r0, sp, #16
   b8ae6:	f7ff fd8f 	bl	b8608 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b8aea:	f104 0108 	add.w	r1, r4, #8
   b8aee:	a808      	add	r0, sp, #32
   b8af0:	f7ff fd8a 	bl	b8608 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8af6:	9b06      	ldr	r3, [sp, #24]
   b8af8:	4313      	orrs	r3, r2
   b8afa:	d01f      	beq.n	b8b3c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8afc:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8b00:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8b04:	42ac      	cmp	r4, r5
   b8b06:	d019      	beq.n	b8b3c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b8b08:	a904      	add	r1, sp, #16
   b8b0a:	4620      	mov	r0, r4
   b8b0c:	f7ff fb89 	bl	b8222 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b10:	b160      	cbz	r0, b8b2c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8b12:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8b14:	a808      	add	r0, sp, #32
   b8b16:	f7ff fa7d 	bl	b8014 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b8b1a:	a804      	add	r0, sp, #16
   b8b1c:	f7ff fa7a 	bl	b8014 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b8b20:	a801      	add	r0, sp, #4
   b8b22:	f7ff fe9f 	bl	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b8b26:	4620      	mov	r0, r4
   b8b28:	b00d      	add	sp, #52	; 0x34
   b8b2a:	bd30      	pop	{r4, r5, pc}
   b8b2c:	4620      	mov	r0, r4
   b8b2e:	a908      	add	r1, sp, #32
   b8b30:	f7ff fb77 	bl	b8222 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b34:	3410      	adds	r4, #16
   b8b36:	2800      	cmp	r0, #0
   b8b38:	d0e4      	beq.n	b8b04 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b8b3a:	e7ea      	b.n	b8b12 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b8b3c:	2400      	movs	r4, #0
   b8b3e:	e7e9      	b.n	b8b14 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b8b40:	2401      	movs	r4, #1
   b8b42:	e7ed      	b.n	b8b20 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b8b44 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b8b46:	2300      	movs	r3, #0
   b8b48:	e9c0 3300 	strd	r3, r3, [r0]
   b8b4c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b4e:	684f      	ldr	r7, [r1, #4]
   b8b50:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b52:	4605      	mov	r5, r0
   b8b54:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b56:	dd3e      	ble.n	b8bd6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b8b58:	00f8      	lsls	r0, r7, #3
   b8b5a:	f7ff f8bd 	bl	b7cd8 <malloc>
            if (!d) {
   b8b5e:	4604      	mov	r4, r0
   b8b60:	b3c8      	cbz	r0, b8bd6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b8b62:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b8b66:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b8b68:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b8b6c:	d910      	bls.n	b8b90 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8b6e:	429c      	cmp	r4, r3
   b8b70:	d20f      	bcs.n	b8b92 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b8b72:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b8b74:	1a1a      	subs	r2, r3, r0
   b8b76:	f1a0 0c08 	sub.w	ip, r0, #8
   b8b7a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8b7c:	459c      	cmp	ip, r3
   b8b7e:	d018      	beq.n	b8bb2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8b80:	b11a      	cbz	r2, b8b8a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8b82:	6819      	ldr	r1, [r3, #0]
   b8b84:	6011      	str	r1, [r2, #0]
   b8b86:	6859      	ldr	r1, [r3, #4]
   b8b88:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b8b8a:	3b08      	subs	r3, #8
   b8b8c:	3a08      	subs	r2, #8
   b8b8e:	e7f5      	b.n	b8b7c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8b90:	d00f      	beq.n	b8bb2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b8b92:	4601      	mov	r1, r0
   b8b94:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b8b96:	428b      	cmp	r3, r1
   b8b98:	d00b      	beq.n	b8bb2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b8b9a:	b13a      	cbz	r2, b8bac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8b9c:	f8d1 c000 	ldr.w	ip, [r1]
   b8ba0:	f8c2 c000 	str.w	ip, [r2]
   b8ba4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8ba8:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8bac:	3108      	adds	r1, #8
   b8bae:	3208      	adds	r2, #8
   b8bb0:	e7f1      	b.n	b8b96 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8bb2:	f7ff f899 	bl	b7ce8 <free>
        data_ = d;
   b8bb6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8bb8:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bba:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8bbe:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8bc2:	4298      	cmp	r0, r3
   b8bc4:	d006      	beq.n	b8bd4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b8bc6:	681a      	ldr	r2, [r3, #0]
   b8bc8:	6022      	str	r2, [r4, #0]
   b8bca:	685a      	ldr	r2, [r3, #4]
   b8bcc:	6062      	str	r2, [r4, #4]
   b8bce:	3308      	adds	r3, #8
   b8bd0:	3408      	adds	r4, #8
   b8bd2:	e7f6      	b.n	b8bc2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8bd4:	6069      	str	r1, [r5, #4]
}
   b8bd6:	4628      	mov	r0, r5
   b8bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bda <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bda:	b570      	push	{r4, r5, r6, lr}
   b8bdc:	4604      	mov	r4, r0
        capacity_(0) {
   b8bde:	2000      	movs	r0, #0
   b8be0:	e9c4 0000 	strd	r0, r0, [r4]
   b8be4:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8be6:	684e      	ldr	r6, [r1, #4]
   b8be8:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bea:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8bec:	dd12      	ble.n	b8c14 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8bee:	0071      	lsls	r1, r6, #1
   b8bf0:	f7ff f882 	bl	b7cf8 <realloc>
            if (!d) {
   b8bf4:	b170      	cbz	r0, b8c14 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b8bf6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8bf8:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bfa:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8bfe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8c02:	429a      	cmp	r2, r3
   b8c04:	d004      	beq.n	b8c10 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b8c06:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8c0a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8c0e:	e7f8      	b.n	b8c02 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8c10:	686b      	ldr	r3, [r5, #4]
   b8c12:	6063      	str	r3, [r4, #4]
}
   b8c14:	4620      	mov	r0, r4
   b8c16:	bd70      	pop	{r4, r5, r6, pc}

000b8c18 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b8c18:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c1a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c1c:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c1e:	b923      	cbnz	r3, b8c2a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c20:	6803      	ldr	r3, [r0, #0]
   b8c22:	6818      	ldr	r0, [r3, #0]
   b8c24:	b108      	cbz	r0, b8c2a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b8c26:	f7ff f85f 	bl	b7ce8 <free>
            func_();
        }
    }
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	bd10      	pop	{r4, pc}

000b8c2e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b8c2e:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c30:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c32:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c34:	b923      	cbnz	r3, b8c40 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c36:	6803      	ldr	r3, [r0, #0]
   b8c38:	6818      	ldr	r0, [r3, #0]
   b8c3a:	b108      	cbz	r0, b8c40 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b8c3c:	f7ff f854 	bl	b7ce8 <free>
    }
   b8c40:	4620      	mov	r0, r4
   b8c42:	bd10      	pop	{r4, pc}

000b8c44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b8c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b8c48:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b8c4c:	b08f      	sub	sp, #60	; 0x3c
   b8c4e:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b8c50:	f1b8 0f00 	cmp.w	r8, #0
   b8c54:	d072      	beq.n	b8d3c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b8c56:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b8c58:	2d00      	cmp	r5, #0
   b8c5a:	d06f      	beq.n	b8d3c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b8c5c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c60:	231f      	movs	r3, #31
   b8c62:	2200      	movs	r2, #0
   b8c64:	21ff      	movs	r1, #255	; 0xff
   b8c66:	4648      	mov	r0, r9
   b8c68:	f7ff fc9c 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b8c6c:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c6e:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c70:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c72:	2200      	movs	r2, #0
   b8c74:	4619      	mov	r1, r3
   b8c76:	4638      	mov	r0, r7
   b8c78:	f7ff fc94 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8c7c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c7e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8c80:	d006      	beq.n	b8c90 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8c82:	42ae      	cmp	r6, r5
   b8c84:	d030      	beq.n	b8ce8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b8c86:	2400      	movs	r4, #0
    }
   b8c88:	4620      	mov	r0, r4
   b8c8a:	b00f      	add	sp, #60	; 0x3c
   b8c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8c90:	4620      	mov	r0, r4
   b8c92:	f7ff f821 	bl	b7cd8 <malloc>
            dismissed_(false) {
   b8c96:	ab03      	add	r3, sp, #12
   b8c98:	9304      	str	r3, [sp, #16]
   b8c9a:	2300      	movs	r3, #0
   b8c9c:	4604      	mov	r4, r0
   b8c9e:	9003      	str	r0, [sp, #12]
   b8ca0:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8ca4:	b970      	cbnz	r0, b8cc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b8ca6:	2320      	movs	r3, #32
   b8ca8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8cac:	4b24      	ldr	r3, [pc, #144]	; (b8d40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8cae:	9300      	str	r3, [sp, #0]
   b8cb0:	4924      	ldr	r1, [pc, #144]	; (b8d44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8cb2:	4603      	mov	r3, r0
   b8cb4:	aa06      	add	r2, sp, #24
   b8cb6:	2032      	movs	r0, #50	; 0x32
   b8cb8:	f7fe ff4a 	bl	b7b50 <log_message>
                    return false;
   b8cbc:	a804      	add	r0, sp, #16
   b8cbe:	f7ff ffab 	bl	b8c18 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8cc2:	e7e1      	b.n	b8c88 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8cc4:	4602      	mov	r2, r0
   b8cc6:	21ff      	movs	r1, #255	; 0xff
   b8cc8:	462b      	mov	r3, r5
   b8cca:	4648      	mov	r0, r9
   b8ccc:	f7ff fc6a 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8cd0:	9803      	ldr	r0, [sp, #12]
   b8cd2:	462a      	mov	r2, r5
   b8cd4:	4641      	mov	r1, r8
   b8cd6:	f003 f993 	bl	bc000 <memcmp>
   b8cda:	b118      	cbz	r0, b8ce4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8cdc:	a804      	add	r0, sp, #16
   b8cde:	f7ff ff9b 	bl	b8c18 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8ce2:	e7ce      	b.n	b8c82 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8ce4:	2401      	movs	r4, #1
   b8ce6:	e7e9      	b.n	b8cbc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8ce8:	4628      	mov	r0, r5
   b8cea:	f7fe fff5 	bl	b7cd8 <malloc>
   b8cee:	2400      	movs	r4, #0
   b8cf0:	ab03      	add	r3, sp, #12
   b8cf2:	4606      	mov	r6, r0
   b8cf4:	9003      	str	r0, [sp, #12]
   b8cf6:	9304      	str	r3, [sp, #16]
   b8cf8:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8cfc:	b978      	cbnz	r0, b8d1e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8cfe:	2320      	movs	r3, #32
   b8d00:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8d04:	4b0e      	ldr	r3, [pc, #56]	; (b8d40 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8d06:	9300      	str	r3, [sp, #0]
   b8d08:	490e      	ldr	r1, [pc, #56]	; (b8d44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8d0a:	4603      	mov	r3, r0
   b8d0c:	aa06      	add	r2, sp, #24
   b8d0e:	2032      	movs	r0, #50	; 0x32
   b8d10:	f7fe ff1e 	bl	b7b50 <log_message>
                    return false;
   b8d14:	4634      	mov	r4, r6
   b8d16:	a804      	add	r0, sp, #16
   b8d18:	f7ff ff89 	bl	b8c2e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b8d1c:	e7b4      	b.n	b8c88 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b8d1e:	4602      	mov	r2, r0
   b8d20:	21ff      	movs	r1, #255	; 0xff
   b8d22:	462b      	mov	r3, r5
   b8d24:	4638      	mov	r0, r7
   b8d26:	f7ff fc3d 	bl	b85a4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b8d2a:	9803      	ldr	r0, [sp, #12]
   b8d2c:	462a      	mov	r2, r5
   b8d2e:	4641      	mov	r1, r8
   b8d30:	f003 f966 	bl	bc000 <memcmp>
   b8d34:	2800      	cmp	r0, #0
   b8d36:	d1ee      	bne.n	b8d16 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b8d38:	2401      	movs	r4, #1
   b8d3a:	e7ec      	b.n	b8d16 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b8d3c:	2401      	movs	r4, #1
   b8d3e:	e7a3      	b.n	b8c88 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b8d40:	000bf2b8 	.word	0x000bf2b8
   b8d44:	000bf24f 	.word	0x000bf24f

000b8d48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8d48:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8d4a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8d4c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8d4e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8d50:	dd03      	ble.n	b8d5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8d52:	f7fe ffd1 	bl	b7cf8 <realloc>
            if (!d) {
   b8d56:	b918      	cbnz	r0, b8d60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8d58:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8d5a:	f7fe ffc5 	bl	b7ce8 <free>
        T* d = nullptr;
   b8d5e:	2000      	movs	r0, #0
        data_ = d;
   b8d60:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8d62:	60a5      	str	r5, [r4, #8]
        return true;
   b8d64:	2001      	movs	r0, #1
   b8d66:	e7f7      	b.n	b8d58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8d68:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8d6a:	6883      	ldr	r3, [r0, #8]
   b8d6c:	428b      	cmp	r3, r1
   b8d6e:	da02      	bge.n	b8d76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8d70:	f7ff ffea 	bl	b8d48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8d74:	bd08      	pop	{r3, pc}
    return true;
   b8d76:	2001      	movs	r0, #1
   b8d78:	e7fc      	b.n	b8d74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8d7a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8d7c:	2300      	movs	r3, #0
   b8d7e:	e9c0 3300 	strd	r3, r3, [r0]
   b8d82:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8d84:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8d86:	6849      	ldr	r1, [r1, #4]
   b8d88:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8d8a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8d8c:	dd10      	ble.n	b8db0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b8d8e:	f7ff ffdb 	bl	b8d48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8d92:	b168      	cbz	r0, b8db0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8d94:	e9d5 3100 	ldrd	r3, r1, [r5]
   b8d98:	6822      	ldr	r2, [r4, #0]
   b8d9a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b8d9c:	4299      	cmp	r1, r3
   b8d9e:	d005      	beq.n	b8dac <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b8da0:	b10a      	cbz	r2, b8da6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b8da2:	7818      	ldrb	r0, [r3, #0]
   b8da4:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b8da6:	3301      	adds	r3, #1
   b8da8:	3201      	adds	r2, #1
   b8daa:	e7f7      	b.n	b8d9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b8dac:	686b      	ldr	r3, [r5, #4]
   b8dae:	6063      	str	r3, [r4, #4]
}
   b8db0:	4620      	mov	r0, r4
   b8db2:	bd38      	pop	{r3, r4, r5, pc}

000b8db4 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b8db4:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b8db6:	680b      	ldr	r3, [r1, #0]
   b8db8:	6003      	str	r3, [r0, #0]
   b8dba:	684b      	ldr	r3, [r1, #4]
   b8dbc:	6043      	str	r3, [r0, #4]
   b8dbe:	4604      	mov	r4, r0
   b8dc0:	460d      	mov	r5, r1
class BleAdvertisingData {
   b8dc2:	3008      	adds	r0, #8
   b8dc4:	3108      	adds	r1, #8
   b8dc6:	f7ff ffd8 	bl	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8dca:	f105 0114 	add.w	r1, r5, #20
   b8dce:	f104 0014 	add.w	r0, r4, #20
   b8dd2:	f7ff ffd2 	bl	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8dd6:	f895 3020 	ldrb.w	r3, [r5, #32]
   b8dda:	f884 3020 	strb.w	r3, [r4, #32]
   b8dde:	4620      	mov	r0, r4
   b8de0:	bd38      	pop	{r3, r4, r5, pc}

000b8de2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8de2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8de4:	4604      	mov	r4, r0
   b8de6:	a801      	add	r0, sp, #4
   b8de8:	f7ff ffc7 	bl	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8dec:	9b01      	ldr	r3, [sp, #4]
   b8dee:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8df0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8df2:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8df4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8df6:	6062      	str	r2, [r4, #4]
   b8df8:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dfa:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8dfc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8dfe:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e00:	9001      	str	r0, [sp, #4]
   b8e02:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8e04:	f7fe ff70 	bl	b7ce8 <free>
   b8e08:	b004      	add	sp, #16
   b8e0a:	bd10      	pop	{r4, pc}

000b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e10:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e12:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e14:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e16:	4419      	add	r1, r3
   b8e18:	6883      	ldr	r3, [r0, #8]
   b8e1a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e1c:	4604      	mov	r4, r0
   b8e1e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e20:	dc12      	bgt.n	b8e48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8e22:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e24:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8e26:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e28:	1bd2      	subs	r2, r2, r7
   b8e2a:	4631      	mov	r1, r6
   b8e2c:	1970      	adds	r0, r6, r5
   b8e2e:	f003 f905 	bl	bc03c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8e32:	462a      	mov	r2, r5
   b8e34:	4641      	mov	r1, r8
   b8e36:	4630      	mov	r0, r6
   b8e38:	f003 f8f2 	bl	bc020 <memcpy>
    size_ += n;
   b8e3c:	6863      	ldr	r3, [r4, #4]
   b8e3e:	442b      	add	r3, r5
   b8e40:	6063      	str	r3, [r4, #4]
    return true;
   b8e42:	2001      	movs	r0, #1
}
   b8e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e48:	f7ff ff7e 	bl	b8d48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8e4c:	2800      	cmp	r0, #0
   b8e4e:	d1e8      	bne.n	b8e22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8e50:	e7f8      	b.n	b8e44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8e52 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8e52:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8e54:	460a      	mov	r2, r1
   b8e56:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8e58:	b510      	push	{r4, lr}
   b8e5a:	4604      	mov	r4, r0
    size_ = 0;
   b8e5c:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b8e5e:	b102      	cbz	r2, b8e62 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b8e60:	b90b      	cbnz	r3, b8e66 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b8e62:	2000      	movs	r0, #0
}
   b8e64:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8e66:	2bff      	cmp	r3, #255	; 0xff
   b8e68:	bf28      	it	cs
   b8e6a:	23ff      	movcs	r3, #255	; 0xff
   b8e6c:	f7ff ffce 	bl	b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b8e70:	2800      	cmp	r0, #0
   b8e72:	d0f7      	beq.n	b8e64 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8e74:	6860      	ldr	r0, [r4, #4]
   b8e76:	e7f5      	b.n	b8e64 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8e78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e7a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e7c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8e80:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8e82:	4604      	mov	r4, r0
   b8e84:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e86:	da0b      	bge.n	b8ea0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8e88:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8e8c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e8e:	1b52      	subs	r2, r2, r5
   b8e90:	1c48      	adds	r0, r1, #1
   b8e92:	f003 f8d3 	bl	bc03c <memmove>
    new(p) T(std::move(value));
   b8e96:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8e98:	6863      	ldr	r3, [r4, #4]
   b8e9a:	3301      	adds	r3, #1
   b8e9c:	6063      	str	r3, [r4, #4]
}
   b8e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ea0:	3101      	adds	r1, #1
   b8ea2:	f7ff ff51 	bl	b8d48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8ea6:	2800      	cmp	r0, #0
   b8ea8:	d1ee      	bne.n	b8e88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8eaa:	e7f8      	b.n	b8e9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8eac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8eac:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8eae:	6841      	ldr	r1, [r0, #4]
   b8eb0:	f7ff bfe2 	b.w	b8e78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8eb8:	4604      	mov	r4, r0
   b8eba:	461d      	mov	r5, r3
   b8ebc:	460f      	mov	r7, r1
   b8ebe:	ab01      	add	r3, sp, #4
   b8ec0:	4690      	mov	r8, r2
   b8ec2:	460a      	mov	r2, r1
   b8ec4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8ec8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8ecc:	f7ff f9e4 	bl	b8298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8ed0:	1cae      	adds	r6, r5, #2
   b8ed2:	6863      	ldr	r3, [r4, #4]
   b8ed4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8ed6:	f1b9 0f00 	cmp.w	r9, #0
   b8eda:	d126      	bne.n	b8f2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8edc:	b328      	cbz	r0, b8f2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ede:	4433      	add	r3, r6
   b8ee0:	1a1b      	subs	r3, r3, r0
   b8ee2:	2bff      	cmp	r3, #255	; 0xff
   b8ee4:	d809      	bhi.n	b8efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8ee6:	9901      	ldr	r1, [sp, #4]
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f7ff fcfe 	bl	b88ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8eee:	6861      	ldr	r1, [r4, #4]
   b8ef0:	4620      	mov	r0, r4
   b8ef2:	4431      	add	r1, r6
   b8ef4:	f7ff ff38 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8ef8:	b918      	cbnz	r0, b8f02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8efa:	6860      	ldr	r0, [r4, #4]
}
   b8efc:	b003      	add	sp, #12
   b8efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8f02:	1c6a      	adds	r2, r5, #1
   b8f04:	9901      	ldr	r1, [sp, #4]
   b8f06:	b2d2      	uxtb	r2, r2
   b8f08:	4620      	mov	r0, r4
   b8f0a:	f7ff ffb5 	bl	b8e78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8f0e:	9901      	ldr	r1, [sp, #4]
   b8f10:	463a      	mov	r2, r7
   b8f12:	3101      	adds	r1, #1
   b8f14:	4620      	mov	r0, r4
   b8f16:	f7ff ffaf 	bl	b8e78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8f1a:	9901      	ldr	r1, [sp, #4]
   b8f1c:	462b      	mov	r3, r5
   b8f1e:	4642      	mov	r2, r8
   b8f20:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8f22:	4620      	mov	r0, r4
   b8f24:	f7ff ff72 	bl	b8e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8f28:	e7e7      	b.n	b8efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8f2a:	18f1      	adds	r1, r6, r3
   b8f2c:	29ff      	cmp	r1, #255	; 0xff
   b8f2e:	d8e4      	bhi.n	b8efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8f30:	4620      	mov	r0, r4
   b8f32:	f7ff ff19 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8f36:	2800      	cmp	r0, #0
   b8f38:	d0df      	beq.n	b8efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8f3a:	1c69      	adds	r1, r5, #1
   b8f3c:	b2c9      	uxtb	r1, r1
   b8f3e:	4620      	mov	r0, r4
   b8f40:	f7ff ffb4 	bl	b8eac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8f44:	4639      	mov	r1, r7
   b8f46:	4620      	mov	r0, r4
   b8f48:	f7ff ffb0 	bl	b8eac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8f4c:	6861      	ldr	r1, [r4, #4]
   b8f4e:	462b      	mov	r3, r5
   b8f50:	4642      	mov	r2, r8
   b8f52:	e7e6      	b.n	b8f22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8f54:	b430      	push	{r4, r5}
   b8f56:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8f5a:	b11a      	cbz	r2, b8f64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8f5c:	9502      	str	r5, [sp, #8]
}
   b8f5e:	bc30      	pop	{r4, r5}
   b8f60:	f7ff bfa8 	b.w	b8eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8f64:	6840      	ldr	r0, [r0, #4]
}
   b8f66:	bc30      	pop	{r4, r5}
   b8f68:	4770      	bx	lr

000b8f6a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8f6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8f6c:	2300      	movs	r3, #0
   b8f6e:	e9c0 3300 	strd	r3, r3, [r0]
   b8f72:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f74:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f76:	9300      	str	r3, [sp, #0]
   b8f78:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f7a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f7e:	4619      	mov	r1, r3
   b8f80:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8f84:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f86:	f7ff ffe5 	bl	b8f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8f8a:	4620      	mov	r0, r4
   b8f8c:	b004      	add	sp, #16
   b8f8e:	bd10      	pop	{r4, pc}

000b8f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8f90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f94:	4604      	mov	r4, r0
   b8f96:	460d      	mov	r5, r1
   b8f98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8f9a:	d914      	bls.n	b8fc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8f9c:	4290      	cmp	r0, r2
   b8f9e:	d213      	bcs.n	b8fc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8fa0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8fa4:	1a75      	subs	r5, r6, r1
   b8fa6:	f1a1 0708 	sub.w	r7, r1, #8
   b8faa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8fac:	42b7      	cmp	r7, r6
   b8fae:	d018      	beq.n	b8fe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8fb0:	b11c      	cbz	r4, b8fba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8fb2:	4631      	mov	r1, r6
   b8fb4:	4620      	mov	r0, r4
   b8fb6:	f7ff fcb3 	bl	b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8fba:	1d30      	adds	r0, r6, #4
   b8fbc:	f7ff fcba 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8fc0:	3e08      	subs	r6, #8
   b8fc2:	3c08      	subs	r4, #8
   b8fc4:	e7f2      	b.n	b8fac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8fc6:	d00c      	beq.n	b8fe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8fc8:	42b5      	cmp	r5, r6
   b8fca:	d00a      	beq.n	b8fe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8fcc:	b11c      	cbz	r4, b8fd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8fce:	4629      	mov	r1, r5
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7ff fca5 	bl	b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8fd6:	1d28      	adds	r0, r5, #4
   b8fd8:	f7ff fcac 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8fdc:	3508      	adds	r5, #8
   b8fde:	3408      	adds	r4, #8
   b8fe0:	e7f2      	b.n	b8fc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fe4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8fe6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8fe8:	6846      	ldr	r6, [r0, #4]
   b8fea:	4668      	mov	r0, sp
   b8fec:	f7ff fc98 	bl	b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ff0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8ff4:	429f      	cmp	r7, r3
   b8ff6:	db12      	blt.n	b901e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8ff8:	3701      	adds	r7, #1
        if (n > 0) {
   b8ffa:	2f00      	cmp	r7, #0
   b8ffc:	dd29      	ble.n	b9052 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8ffe:	00f8      	lsls	r0, r7, #3
   b9000:	f7fe fe6a 	bl	b7cd8 <malloc>
            if (!d) {
   b9004:	4605      	mov	r5, r0
   b9006:	b1f0      	cbz	r0, b9046 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b9008:	e9d4 1200 	ldrd	r1, r2, [r4]
   b900c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9010:	f7ff ffbe 	bl	b8f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9014:	6820      	ldr	r0, [r4, #0]
   b9016:	f7fe fe67 	bl	b7ce8 <free>
        data_ = d;
   b901a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b901c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b901e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9020:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9022:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b9026:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b902a:	4631      	mov	r1, r6
   b902c:	f106 0008 	add.w	r0, r6, #8
   b9030:	f7ff ffae 	bl	b8f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9034:	b11e      	cbz	r6, b903e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9036:	4669      	mov	r1, sp
   b9038:	4630      	mov	r0, r6
   b903a:	f7ff fc71 	bl	b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b903e:	6863      	ldr	r3, [r4, #4]
   b9040:	3301      	adds	r3, #1
   b9042:	6063      	str	r3, [r4, #4]
    return true;
   b9044:	2501      	movs	r5, #1
   b9046:	a801      	add	r0, sp, #4
   b9048:	f7ff fc74 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b904c:	4628      	mov	r0, r5
   b904e:	b003      	add	sp, #12
   b9050:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9052:	2500      	movs	r5, #0
   b9054:	e7de      	b.n	b9014 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9058:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b905c:	4605      	mov	r5, r0
   b905e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9060:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9064:	42a6      	cmp	r6, r4
   b9066:	d005      	beq.n	b9074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9068:	4639      	mov	r1, r7
   b906a:	4620      	mov	r0, r4
   b906c:	f7ff fb3d 	bl	b86ea <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9070:	b108      	cbz	r0, b9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9072:	b914      	cbnz	r4, b907a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9076:	3408      	adds	r4, #8
   b9078:	e7f4      	b.n	b9064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b907a:	1d20      	adds	r0, r4, #4
   b907c:	f7ff fc5a 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9080:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9084:	f104 0108 	add.w	r1, r4, #8
   b9088:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b908c:	4620      	mov	r0, r4
   b908e:	f7ff ff7f 	bl	b8f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9092:	686b      	ldr	r3, [r5, #4]
   b9094:	3b01      	subs	r3, #1
   b9096:	606b      	str	r3, [r5, #4]
    return true;
   b9098:	e7ec      	b.n	b9074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b909c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90a0:	4605      	mov	r5, r0
   b90a2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b90a4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b90a6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b90a8:	f7ff f968 	bl	b837c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b90ac:	682e      	ldr	r6, [r5, #0]
   b90ae:	1ef3      	subs	r3, r6, #3
   b90b0:	2b0d      	cmp	r3, #13
   b90b2:	d83c      	bhi.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b90b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b90b8:	0057000e 	.word	0x0057000e
   b90bc:	00d3003b 	.word	0x00d3003b
   b90c0:	003b003b 	.word	0x003b003b
   b90c4:	003b003b 	.word	0x003b003b
   b90c8:	009d003b 	.word	0x009d003b
   b90cc:	009d009d 	.word	0x009d009d
   b90d0:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b90d4:	a804      	add	r0, sp, #16
   b90d6:	f7ff fad3 	bl	b8680 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b90da:	9b04      	ldr	r3, [sp, #16]
   b90dc:	89aa      	ldrh	r2, [r5, #12]
   b90de:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b90e0:	6869      	ldr	r1, [r5, #4]
   b90e2:	9804      	ldr	r0, [sp, #16]
   b90e4:	3108      	adds	r1, #8
   b90e6:	3002      	adds	r0, #2
   b90e8:	f7ff f96c 	bl	b83c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b90ec:	a904      	add	r1, sp, #16
   b90ee:	a806      	add	r0, sp, #24
   b90f0:	f7ff fc16 	bl	b8920 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b90f4:	a906      	add	r1, sp, #24
   b90f6:	f104 0018 	add.w	r0, r4, #24
   b90fa:	f7ff ff73 	bl	b8fe4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b90fe:	4605      	mov	r5, r0
   b9100:	a807      	add	r0, sp, #28
   b9102:	f7ff fc17 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9106:	b9c5      	cbnz	r5, b913a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b9108:	2320      	movs	r3, #32
   b910a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b910e:	4b5e      	ldr	r3, [pc, #376]	; (b9288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9110:	495e      	ldr	r1, [pc, #376]	; (b928c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b9112:	9300      	str	r3, [sp, #0]
   b9114:	aa06      	add	r2, sp, #24
   b9116:	462b      	mov	r3, r5
   b9118:	2001      	movs	r0, #1
   b911a:	f7fe fd19 	bl	b7b50 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b911e:	9b04      	ldr	r3, [sp, #16]
   b9120:	4629      	mov	r1, r5
   b9122:	8818      	ldrh	r0, [r3, #0]
   b9124:	f7fe fb40 	bl	b77a8 <hal_ble_gap_disconnect>
   b9128:	a805      	add	r0, sp, #20
   b912a:	f7ff fc03 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b912e:	a803      	add	r0, sp, #12
   b9130:	f7ff f932 	bl	b8398 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9134:	b00e      	add	sp, #56	; 0x38
   b9136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b913a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b913c:	b123      	cbz	r3, b9148 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b913e:	a904      	add	r1, sp, #16
   b9140:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9144:	f7ff fc5e 	bl	b8a04 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9148:	a805      	add	r0, sp, #20
   b914a:	f7ff fbf3 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b914e:	2120      	movs	r1, #32
   b9150:	2300      	movs	r3, #0
   b9152:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b9156:	4a4e      	ldr	r2, [pc, #312]	; (b9290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b9158:	9200      	str	r2, [sp, #0]
   b915a:	494c      	ldr	r1, [pc, #304]	; (b928c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b915c:	aa06      	add	r2, sp, #24
   b915e:	2001      	movs	r0, #1
   b9160:	f7fe fcf6 	bl	b7b50 <log_message>
   b9164:	e7e3      	b.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9166:	89a9      	ldrh	r1, [r5, #12]
   b9168:	4620      	mov	r0, r4
   b916a:	f7ff fa77 	bl	b865c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b916e:	4606      	mov	r6, r0
   b9170:	2800      	cmp	r0, #0
   b9172:	d0dc      	beq.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9174:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9176:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b917a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b917e:	8029      	strh	r1, [r5, #0]
   b9180:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9184:	429a      	cmp	r2, r3
   b9186:	d003      	beq.n	b9190 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b9188:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b918c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b918e:	e7f9      	b.n	b9184 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b9190:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9194:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9198:	45b8      	cmp	r8, r7
   b919a:	d004      	beq.n	b91a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b919c:	1d38      	adds	r0, r7, #4
   b919e:	f7ff fbc9 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b91a2:	3708      	adds	r7, #8
   b91a4:	e7f8      	b.n	b9198 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b91a6:	2300      	movs	r3, #0
   b91a8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b91aa:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b91ae:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b91b2:	45b8      	cmp	r8, r7
   b91b4:	d004      	beq.n	b91c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b91b6:	1d38      	adds	r0, r7, #4
   b91b8:	f7ff fbbc 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b91bc:	3708      	adds	r7, #8
   b91be:	e7f8      	b.n	b91b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b91c0:	2300      	movs	r3, #0
   b91c2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b91c4:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b91c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b91c8:	b123      	cbz	r3, b91d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b91ca:	4631      	mov	r1, r6
   b91cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b91d0:	f7ff fc18 	bl	b8a04 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b91d4:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b91d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b91da:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b91dc:	4631      	mov	r1, r6
   b91de:	f104 0018 	add.w	r0, r4, #24
   b91e2:	f7ff ff38 	bl	b9056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b91e6:	2220      	movs	r2, #32
   b91e8:	2300      	movs	r3, #0
   b91ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b91ee:	4a29      	ldr	r2, [pc, #164]	; (b9294 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b91f0:	e7b2      	b.n	b9158 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b91f2:	89a9      	ldrh	r1, [r5, #12]
   b91f4:	4620      	mov	r0, r4
   b91f6:	f7ff fa31 	bl	b865c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b91fa:	2800      	cmp	r0, #0
   b91fc:	d097      	beq.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b91fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9200:	2b00      	cmp	r3, #0
   b9202:	d094      	beq.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9204:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9206:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9208:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b920c:	d001      	beq.n	b9212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b920e:	2e10      	cmp	r6, #16
   b9210:	d117      	bne.n	b9242 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b9212:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9214:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9216:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9218:	2506      	movs	r5, #6
                        };
   b921a:	f88d 3015 	strb.w	r3, [sp, #21]
   b921e:	9104      	str	r1, [sp, #16]
   b9220:	f88d 2014 	strb.w	r2, [sp, #20]
   b9224:	9006      	str	r0, [sp, #24]
   b9226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b922a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b922c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b9230:	9508      	str	r5, [sp, #32]
   b9232:	e883 0003 	stmia.w	r3, {r0, r1}
   b9236:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9238:	a906      	add	r1, sp, #24
   b923a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b923e:	4798      	blx	r3
   b9240:	e775      	b.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b9242:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9244:	bf01      	itttt	eq
   b9246:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9248:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b924a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b924e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b9250:	bf0f      	iteee	eq
   b9252:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9256:	461a      	movne	r2, r3
   b9258:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b925a:	461d      	movne	r5, r3
   b925c:	e7dd      	b.n	b921a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b925e:	89a9      	ldrh	r1, [r5, #12]
   b9260:	4620      	mov	r0, r4
   b9262:	f7ff f9fb 	bl	b865c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9266:	4601      	mov	r1, r0
   b9268:	2800      	cmp	r0, #0
   b926a:	f43f af60 	beq.w	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b926e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9270:	2b00      	cmp	r3, #0
   b9272:	f43f af5c 	beq.w	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9276:	686b      	ldr	r3, [r5, #4]
   b9278:	9306      	str	r3, [sp, #24]
   b927a:	aa06      	add	r2, sp, #24
   b927c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b927e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9282:	4798      	blx	r3
   b9284:	e753      	b.n	b912e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9286:	bf00      	nop
   b9288:	000bf2d3 	.word	0x000bf2d3
   b928c:	000bf24f 	.word	0x000bf24f
   b9290:	000bf2f9 	.word	0x000bf2f9
   b9294:	000bf303 	.word	0x000bf303

000b9298 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9298:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b929a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b929c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b929e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b92a0:	dd05      	ble.n	b92ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b92a2:	2114      	movs	r1, #20
   b92a4:	4369      	muls	r1, r5
   b92a6:	f7fe fd27 	bl	b7cf8 <realloc>
            if (!d) {
   b92aa:	b918      	cbnz	r0, b92b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b92ac:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b92ae:	f7fe fd1b 	bl	b7ce8 <free>
        T* d = nullptr;
   b92b2:	2000      	movs	r0, #0
        data_ = d;
   b92b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b92b6:	60a5      	str	r5, [r4, #8]
        return true;
   b92b8:	2001      	movs	r0, #1
   b92ba:	e7f7      	b.n	b92ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b92bc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b92c0:	2400      	movs	r4, #0
   b92c2:	e9c0 4400 	strd	r4, r4, [r0]
   b92c6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92c8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92ca:	6849      	ldr	r1, [r1, #4]
   b92cc:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92ce:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92d0:	dd1a      	ble.n	b9308 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b92d2:	f7ff ffe1 	bl	b9298 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b92d6:	b1b8      	cbz	r0, b9308 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b92d8:	e9d8 9300 	ldrd	r9, r3, [r8]
   b92dc:	f04f 0c14 	mov.w	ip, #20
   b92e0:	f8d7 e000 	ldr.w	lr, [r7]
   b92e4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b92e8:	eb09 0504 	add.w	r5, r9, r4
   b92ec:	45ac      	cmp	ip, r5
   b92ee:	d008      	beq.n	b9302 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b92f0:	eb1e 0604 	adds.w	r6, lr, r4
   b92f4:	bf1f      	itttt	ne
   b92f6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b92f8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b92fa:	682b      	ldrne	r3, [r5, #0]
   b92fc:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b92fe:	3414      	adds	r4, #20
   b9300:	e7f2      	b.n	b92e8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b9302:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9306:	607b      	str	r3, [r7, #4]
}
   b9308:	4638      	mov	r0, r7
   b930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b930e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b9312:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b9316:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9318:	6883      	ldr	r3, [r0, #8]
   b931a:	19e9      	adds	r1, r5, r7
   b931c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b931e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9320:	dc17      	bgt.n	b9352 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b9322:	2314      	movs	r3, #20
   b9324:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b9326:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9328:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b932a:	fb03 f907 	mul.w	r9, r3, r7
   b932e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9330:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9332:	1b52      	subs	r2, r2, r5
   b9334:	4631      	mov	r1, r6
   b9336:	eb06 0009 	add.w	r0, r6, r9
   b933a:	f002 fe7f 	bl	bc03c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b933e:	464a      	mov	r2, r9
   b9340:	4641      	mov	r1, r8
   b9342:	4630      	mov	r0, r6
   b9344:	f002 fe6c 	bl	bc020 <memcpy>
    size_ += n;
   b9348:	6863      	ldr	r3, [r4, #4]
   b934a:	443b      	add	r3, r7
   b934c:	6063      	str	r3, [r4, #4]
}
   b934e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9352:	f7ff ffa1 	bl	b9298 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9356:	2800      	cmp	r0, #0
   b9358:	d1e3      	bne.n	b9322 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b935a:	e7f8      	b.n	b934e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b935c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b935c:	b082      	sub	sp, #8
   b935e:	b570      	push	{r4, r5, r6, lr}
   b9360:	460c      	mov	r4, r1
   b9362:	a904      	add	r1, sp, #16
   b9364:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9368:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b936c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b936e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9370:	da17      	bge.n	b93a2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b9372:	2314      	movs	r3, #20
   b9374:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b9378:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b937a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b937c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b937e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9380:	1a52      	subs	r2, r2, r1
   b9382:	18e0      	adds	r0, r4, r3
   b9384:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b9386:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9388:	f002 fe58 	bl	bc03c <memmove>
    new(p) T(std::move(value));
   b938c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b938e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9390:	6833      	ldr	r3, [r6, #0]
   b9392:	6023      	str	r3, [r4, #0]
    ++size_;
   b9394:	686b      	ldr	r3, [r5, #4]
   b9396:	3301      	adds	r3, #1
   b9398:	606b      	str	r3, [r5, #4]
}
   b939a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b939e:	b002      	add	sp, #8
   b93a0:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b93a2:	3101      	adds	r1, #1
   b93a4:	f7ff ff78 	bl	b9298 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b93a8:	2800      	cmp	r0, #0
   b93aa:	d1e2      	bne.n	b9372 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b93ac:	e7f5      	b.n	b939a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b93ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b93b2:	2400      	movs	r4, #0
   b93b4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93b6:	1e93      	subs	r3, r2, #2
   b93b8:	e9c0 4400 	strd	r4, r4, [r0]
   b93bc:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b93be:	4605      	mov	r5, r0
   b93c0:	460f      	mov	r7, r1
   b93c2:	4690      	mov	r8, r2
   b93c4:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93c6:	9305      	str	r3, [sp, #20]
    return size_;
   b93c8:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b93ca:	428c      	cmp	r4, r1
   b93cc:	da72      	bge.n	b94b4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b93ce:	6838      	ldr	r0, [r7, #0]
   b93d0:	ab07      	add	r3, sp, #28
   b93d2:	4642      	mov	r2, r8
   b93d4:	1b09      	subs	r1, r1, r4
   b93d6:	4420      	add	r0, r4
   b93d8:	f7fe ff5e 	bl	b8298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b93dc:	4606      	mov	r6, r0
   b93de:	2800      	cmp	r0, #0
   b93e0:	d068      	beq.n	b94b4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93e2:	9b05      	ldr	r3, [sp, #20]
   b93e4:	2b01      	cmp	r3, #1
   b93e6:	d82f      	bhi.n	b9448 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93e8:	f1a0 0b02 	sub.w	fp, r0, #2
   b93ec:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b93f0:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b93f4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b93f8:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93fa:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b93fc:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b93fe:	d055      	beq.n	b94ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b9400:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b9402:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b9406:	4413      	add	r3, r2
   b9408:	a808      	add	r0, sp, #32
   b940a:	78d9      	ldrb	r1, [r3, #3]
   b940c:	789b      	ldrb	r3, [r3, #2]
   b940e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b9412:	f7ff f832 	bl	b847a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b9416:	f10d 0e20 	add.w	lr, sp, #32
   b941a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b941e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9426:	f8de 3000 	ldr.w	r3, [lr]
   b942a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b942e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b9432:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b9436:	ab0d      	add	r3, sp, #52	; 0x34
   b9438:	cb0c      	ldmia	r3, {r2, r3}
   b943a:	6869      	ldr	r1, [r5, #4]
   b943c:	4628      	mov	r0, r5
   b943e:	f7ff ff8d 	bl	b935c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9442:	f109 0901 	add.w	r9, r9, #1
   b9446:	e7d7      	b.n	b93f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b9448:	f1a8 0306 	sub.w	r3, r8, #6
   b944c:	2b01      	cmp	r3, #1
   b944e:	d82d      	bhi.n	b94ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9450:	f1a0 0b02 	sub.w	fp, r0, #2
   b9454:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b9458:	f04f 0900 	mov.w	r9, #0
   b945c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b9460:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9462:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9464:	d022      	beq.n	b94ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9466:	3302      	adds	r3, #2
    return data_[i];
   b9468:	6839      	ldr	r1, [r7, #0]
   b946a:	4423      	add	r3, r4
   b946c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b9470:	2201      	movs	r2, #1
   b9472:	4419      	add	r1, r3
   b9474:	a808      	add	r0, sp, #32
   b9476:	f7fe ffe1 	bl	b843c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b947a:	f10d 0e20 	add.w	lr, sp, #32
   b947e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b9482:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b948a:	f8de 3000 	ldr.w	r3, [lr]
   b948e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b9492:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b9496:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b949a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b949e:	6869      	ldr	r1, [r5, #4]
   b94a0:	4628      	mov	r0, r5
   b94a2:	f7ff ff5b 	bl	b935c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b94a6:	f109 0901 	add.w	r9, r9, #1
   b94aa:	e7d9      	b.n	b9460 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b94ac:	9b07      	ldr	r3, [sp, #28]
   b94ae:	441c      	add	r4, r3
   b94b0:	4434      	add	r4, r6
   b94b2:	e789      	b.n	b93c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b94b4:	4628      	mov	r0, r5
   b94b6:	b013      	add	sp, #76	; 0x4c
   b94b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b94bc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b94bc:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b94be:	2300      	movs	r3, #0
   b94c0:	b085      	sub	sp, #20
   b94c2:	e9c0 3300 	strd	r3, r3, [r0]
   b94c6:	6083      	str	r3, [r0, #8]
   b94c8:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94ca:	2202      	movs	r2, #2
   b94cc:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b94ce:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94d0:	f7ff ff6d 	bl	b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94d4:	a901      	add	r1, sp, #4
   b94d6:	4620      	mov	r0, r4
   b94d8:	f7ff ff19 	bl	b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94dc:	a801      	add	r0, sp, #4
   b94de:	f7ff f9d3 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94e2:	2202      	movs	r2, #2
   b94e4:	4629      	mov	r1, r5
   b94e6:	a801      	add	r0, sp, #4
   b94e8:	f7ff ff61 	bl	b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94ec:	a901      	add	r1, sp, #4
   b94ee:	4620      	mov	r0, r4
   b94f0:	f7ff ff0d 	bl	b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94f4:	a801      	add	r0, sp, #4
   b94f6:	f7ff f9c7 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b94fa:	2203      	movs	r2, #3
   b94fc:	4629      	mov	r1, r5
   b94fe:	a801      	add	r0, sp, #4
   b9500:	f7ff ff55 	bl	b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9504:	a901      	add	r1, sp, #4
   b9506:	4620      	mov	r0, r4
   b9508:	f7ff ff01 	bl	b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b950c:	a801      	add	r0, sp, #4
   b950e:	f7ff f9bb 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b9512:	2206      	movs	r2, #6
   b9514:	4629      	mov	r1, r5
   b9516:	a801      	add	r0, sp, #4
   b9518:	f7ff ff49 	bl	b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b951c:	a901      	add	r1, sp, #4
   b951e:	4620      	mov	r0, r4
   b9520:	f7ff fef5 	bl	b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9524:	a801      	add	r0, sp, #4
   b9526:	f7ff f9af 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b952a:	2207      	movs	r2, #7
   b952c:	4629      	mov	r1, r5
   b952e:	a801      	add	r0, sp, #4
   b9530:	f7ff ff3d 	bl	b93ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9534:	a901      	add	r1, sp, #4
   b9536:	4620      	mov	r0, r4
   b9538:	f7ff fee9 	bl	b930e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b953c:	a801      	add	r0, sp, #4
   b953e:	f7ff f9a3 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b9542:	4620      	mov	r0, r4
   b9544:	b005      	add	sp, #20
   b9546:	bd30      	pop	{r4, r5, pc}

000b9548 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b9548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b954c:	b085      	sub	sp, #20
   b954e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9550:	4601      	mov	r1, r0
   b9552:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b9554:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9556:	f7ff ffb1 	bl	b94bc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b955a:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b955c:	9b02      	ldr	r3, [sp, #8]
   b955e:	f04f 0e14 	mov.w	lr, #20
   b9562:	fb0e 6c03 	mla	ip, lr, r3, r6
   b9566:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b9568:	45b4      	cmp	ip, r6
   b956a:	d00d      	beq.n	b9588 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b956c:	45b9      	cmp	r9, r7
   b956e:	f106 0614 	add.w	r6, r6, #20
   b9572:	d009      	beq.n	b9588 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b9574:	f1a6 0514 	sub.w	r5, r6, #20
   b9578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b957a:	fb0e 8407 	mla	r4, lr, r7, r8
   b957e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9580:	682b      	ldr	r3, [r5, #0]
   b9582:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b9584:	3701      	adds	r7, #1
   b9586:	e7ef      	b.n	b9568 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9588:	a801      	add	r0, sp, #4
   b958a:	f7ff f97d 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b958e:	4638      	mov	r0, r7
   b9590:	b005      	add	sp, #20
   b9592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9596 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b9596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b959a:	b08b      	sub	sp, #44	; 0x2c
   b959c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b959e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b95a2:	a801      	add	r0, sp, #4
   b95a4:	f7ff fe8a 	bl	b92bc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b95a8:	9b02      	ldr	r3, [sp, #8]
   b95aa:	2b00      	cmp	r3, #0
   b95ac:	dd4a      	ble.n	b9644 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b95ae:	f104 0114 	add.w	r1, r4, #20
   b95b2:	a804      	add	r0, sp, #16
   b95b4:	f7ff ff82 	bl	b94bc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b95b8:	f104 0108 	add.w	r1, r4, #8
   b95bc:	a807      	add	r0, sp, #28
   b95be:	f7ff ff7d 	bl	b94bc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b95c2:	9d05      	ldr	r5, [sp, #20]
   b95c4:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b95c6:	2d00      	cmp	r5, #0
   b95c8:	dc01      	bgt.n	b95ce <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b95ca:	2e00      	cmp	r6, #0
   b95cc:	dd38      	ble.n	b9640 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b95ce:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b95d0:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b95d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b95d6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b95da:	2314      	movs	r3, #20
   b95dc:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b95e0:	fb03 8505 	mla	r5, r3, r5, r8
   b95e4:	fb03 9606 	mla	r6, r3, r6, r9
   b95e8:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b95ea:	45ba      	cmp	sl, r7
   b95ec:	d028      	beq.n	b9640 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b95ee:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b95f0:	45ab      	cmp	fp, r5
   b95f2:	d015      	beq.n	b9620 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b95f4:	4659      	mov	r1, fp
   b95f6:	4650      	mov	r0, sl
   b95f8:	f7fe ff49 	bl	b848e <_ZNK8particle7BleUuideqERKS0_>
   b95fc:	f10b 0b14 	add.w	fp, fp, #20
   b9600:	4604      	mov	r4, r0
   b9602:	2800      	cmp	r0, #0
   b9604:	d0f4      	beq.n	b95f0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b9606:	a807      	add	r0, sp, #28
   b9608:	f7ff f93e 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b960c:	a804      	add	r0, sp, #16
   b960e:	f7ff f93b 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b9612:	a801      	add	r0, sp, #4
   b9614:	f7ff f938 	bl	b8888 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b9618:	4620      	mov	r0, r4
   b961a:	b00b      	add	sp, #44	; 0x2c
   b961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9620:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b9622:	45b3      	cmp	fp, r6
   b9624:	d009      	beq.n	b963a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b9626:	4659      	mov	r1, fp
   b9628:	4650      	mov	r0, sl
   b962a:	f7fe ff30 	bl	b848e <_ZNK8particle7BleUuideqERKS0_>
   b962e:	f10b 0b14 	add.w	fp, fp, #20
   b9632:	4604      	mov	r4, r0
   b9634:	2800      	cmp	r0, #0
   b9636:	d0f4      	beq.n	b9622 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b9638:	e7e5      	b.n	b9606 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b963a:	f10a 0a14 	add.w	sl, sl, #20
   b963e:	e7d4      	b.n	b95ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b9640:	2400      	movs	r4, #0
   b9642:	e7e0      	b.n	b9606 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b9644:	2401      	movs	r4, #1
   b9646:	e7e4      	b.n	b9612 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b9648 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9648:	b513      	push	{r0, r1, r4, lr}
   b964a:	460b      	mov	r3, r1
   b964c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b964e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9652:	466c      	mov	r4, sp
   b9654:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9658:	e893 0003 	ldmia.w	r3, {r0, r1}
   b965c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9660:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9664:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9668:	b002      	add	sp, #8
   b966a:	bd10      	pop	{r4, pc}

000b966c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>:
    int start(BleOnScanResultCallback callback, void* context) {
   b966c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b966e:	4604      	mov	r4, r0
   b9670:	b089      	sub	sp, #36	; 0x24
   b9672:	4616      	mov	r6, r2
        scanResultCallback_ = callback ? std::bind(callback, _1, context) : (std::function<void(const BleScanResult*)>)nullptr;
   b9674:	f100 0718 	add.w	r7, r0, #24
   b9678:	460d      	mov	r5, r1
   b967a:	2900      	cmp	r1, #0
   b967c:	d03a      	beq.n	b96f4 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x88>
    _Function_base() : _M_manager(nullptr) { }
   b967e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9680:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   b9682:	9302      	str	r3, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9684:	f7fb fa15 	bl	b4ab2 <_Znwj>
   b9688:	b108      	cbz	r0, b968e <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x22>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b968a:	e9c0 5600 	strd	r5, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b968e:	4b1a      	ldr	r3, [pc, #104]	; (b96f8 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x8c>)
   b9690:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9692:	4b1a      	ldr	r3, [pc, #104]	; (b96fc <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9694:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9696:	9302      	str	r3, [sp, #8]
    _Function_base() : _M_manager(nullptr) { }
   b9698:	2500      	movs	r5, #0
	std::swap(_M_functor, __x._M_functor);
   b969a:	a904      	add	r1, sp, #16
   b969c:	4668      	mov	r0, sp
    _Function_base() : _M_manager(nullptr) { }
   b969e:	9506      	str	r5, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
   b96a0:	f7ff ffd2 	bl	b9648 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96a4:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b96a6:	9a06      	ldr	r2, [sp, #24]
   b96a8:	9202      	str	r2, [sp, #8]
   b96aa:	4639      	mov	r1, r7
   b96ac:	9a07      	ldr	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b96ae:	9306      	str	r3, [sp, #24]
   b96b0:	a804      	add	r0, sp, #16
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96b2:	9b03      	ldr	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b96b4:	9307      	str	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b96b6:	9203      	str	r2, [sp, #12]
   b96b8:	f7ff ffc6 	bl	b9648 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96bc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b96be:	6a22      	ldr	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b96c0:	6223      	str	r3, [r4, #32]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96c2:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b96c4:	9206      	str	r2, [sp, #24]
    class function<_Res(_ArgTypes...)>
   b96c6:	a804      	add	r0, sp, #16
   b96c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
   b96ca:	6263      	str	r3, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b96cc:	9207      	str	r2, [sp, #28]
   b96ce:	f7fd ffad 	bl	b762c <_ZNSt14_Function_baseD1Ev>
   b96d2:	4668      	mov	r0, sp
   b96d4:	f7fd ffaa 	bl	b762c <_ZNSt14_Function_baseD1Ev>
        scanResultCallbackRef_ = nullptr;
   b96d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b96dc:	f7fe fe1a 	bl	b8314 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b96e0:	462a      	mov	r2, r5
   b96e2:	4621      	mov	r1, r4
   b96e4:	4806      	ldr	r0, [pc, #24]	; (b9700 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x94>)
   b96e6:	f7fe f84d 	bl	b7784 <hal_ble_gap_start_scan>
   b96ea:	2800      	cmp	r0, #0
        return foundCount_;
   b96ec:	bfa8      	it	ge
   b96ee:	6960      	ldrge	r0, [r4, #20]
    }
   b96f0:	b009      	add	sp, #36	; 0x24
   b96f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Function_base() : _M_manager(nullptr) { }
   b96f4:	9102      	str	r1, [sp, #8]
      : _Function_base() { }
   b96f6:	e7cf      	b.n	b9698 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x2c>
   b96f8:	000b82c3 	.word	0x000b82c3
   b96fc:	000b82d5 	.word	0x000b82d5
   b9700:	000b97b3 	.word	0x000b97b3

000b9704 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b9704:	b510      	push	{r4, lr}
   b9706:	b0a0      	sub	sp, #128	; 0x80
    BleScanDelegator scanner;
   b9708:	a803      	add	r0, sp, #12
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b970a:	e9cd 2100 	strd	r2, r1, [sp]
    BleScanDelegator scanner;
   b970e:	f7ff f88a 	bl	b8826 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(callback, context);
   b9712:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9716:	a803      	add	r0, sp, #12
   b9718:	f7ff ffa8 	bl	b966c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>
   b971c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b971e:	a803      	add	r0, sp, #12
   b9720:	f7ff f8b9 	bl	b8896 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b9724:	4620      	mov	r0, r4
   b9726:	b020      	add	sp, #128	; 0x80
   b9728:	bd10      	pop	{r4, pc}

000b972a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b972a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b972e:	4604      	mov	r4, r0
   b9730:	460d      	mov	r5, r1
   b9732:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9734:	d914      	bls.n	b9760 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9736:	4290      	cmp	r0, r2
   b9738:	d213      	bcs.n	b9762 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b973a:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b973e:	1a75      	subs	r5, r6, r1
   b9740:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b9744:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9746:	42b7      	cmp	r7, r6
   b9748:	d018      	beq.n	b977c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b974a:	b11c      	cbz	r4, b9754 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b974c:	4631      	mov	r1, r6
   b974e:	4620      	mov	r0, r4
   b9750:	f7ff fb30 	bl	b8db4 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b9754:	4630      	mov	r0, r6
   b9756:	f7ff f85c 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b975a:	3e24      	subs	r6, #36	; 0x24
   b975c:	3c24      	subs	r4, #36	; 0x24
   b975e:	e7f2      	b.n	b9746 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9760:	d00c      	beq.n	b977c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9762:	42b5      	cmp	r5, r6
   b9764:	d00a      	beq.n	b977c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9766:	b11c      	cbz	r4, b9770 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9768:	4629      	mov	r1, r5
   b976a:	4620      	mov	r0, r4
   b976c:	f7ff fb22 	bl	b8db4 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b9770:	4628      	mov	r0, r5
   b9772:	f7ff f84e 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b9776:	3524      	adds	r5, #36	; 0x24
   b9778:	3424      	adds	r4, #36	; 0x24
   b977a:	e7f2      	b.n	b9762 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b977c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b977e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b977e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b9780:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9782:	4605      	mov	r5, r0
        if (n > 0) {
   b9784:	dd13      	ble.n	b97ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9786:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9788:	fb07 f006 	mul.w	r0, r7, r6
   b978c:	f7fe faa4 	bl	b7cd8 <malloc>
            if (!d) {
   b9790:	4604      	mov	r4, r0
   b9792:	b158      	cbz	r0, b97ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b9794:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9798:	fb07 1202 	mla	r2, r7, r2, r1
   b979c:	f7ff ffc5 	bl	b972a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b97a0:	6828      	ldr	r0, [r5, #0]
   b97a2:	f7fe faa1 	bl	b7ce8 <free>
        data_ = d;
   b97a6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b97a8:	60ae      	str	r6, [r5, #8]
        return true;
   b97aa:	2001      	movs	r0, #1
    }
   b97ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b97ae:	2400      	movs	r4, #0
   b97b0:	e7f6      	b.n	b97a0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b97b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b97b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b97b6:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b97b8:	ad01      	add	r5, sp, #4
   b97ba:	4606      	mov	r6, r0
   b97bc:	4628      	mov	r0, r5
   b97be:	460c      	mov	r4, r1
   b97c0:	f7fe fe21 	bl	b8406 <_ZN8particle10BleAddressC1Ev>
   b97c4:	a803      	add	r0, sp, #12
   b97c6:	f7ff fbd0 	bl	b8f6a <_ZN8particle18BleAdvertisingDataC1Ev>
   b97ca:	a806      	add	r0, sp, #24
   b97cc:	f7ff fbcd 	bl	b8f6a <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b97d0:	6930      	ldr	r0, [r6, #16]
   b97d2:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b97d4:	89f2      	ldrh	r2, [r6, #14]
   b97d6:	ab13      	add	r3, sp, #76	; 0x4c
   b97d8:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b97da:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b97de:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b97e0:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b97e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b97e6:	a806      	add	r0, sp, #24
   b97e8:	f7ff fb33 	bl	b8e52 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b97ec:	89b2      	ldrh	r2, [r6, #12]
   b97ee:	6871      	ldr	r1, [r6, #4]
   b97f0:	a803      	add	r0, sp, #12
   b97f2:	f7ff fb2e 	bl	b8e52 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b97f6:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b97fa:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b97fc:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b97fe:	d003      	beq.n	b9808 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9800:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9804:	429a      	cmp	r2, r3
   b9806:	db5c      	blt.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9808:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b980c:	2b7f      	cmp	r3, #127	; 0x7f
   b980e:	d003      	beq.n	b9818 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9810:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9814:	429a      	cmp	r2, r3
   b9816:	dc54      	bgt.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9818:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b981c:	4638      	mov	r0, r7
   b981e:	f7ff f991 	bl	b8b44 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9822:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9824:	2b00      	cmp	r3, #0
   b9826:	dd52      	ble.n	b98ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9828:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b982a:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b982e:	45b1      	cmp	r9, r6
   b9830:	d050      	beq.n	b98d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9832:	4630      	mov	r0, r6
   b9834:	4629      	mov	r1, r5
   b9836:	f7fe fdd2 	bl	b83de <_ZNK8particle10BleAddresseqERKS0_>
   b983a:	3608      	adds	r6, #8
   b983c:	4680      	mov	r8, r0
   b983e:	2800      	cmp	r0, #0
   b9840:	d0f5      	beq.n	b982e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9842:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9844:	f7fe fa50 	bl	b7ce8 <free>
        if (!delegator->filterByRssi(result) ||
   b9848:	f1b8 0f00 	cmp.w	r8, #0
   b984c:	d039      	beq.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b984e:	4629      	mov	r1, r5
   b9850:	4620      	mov	r0, r4
   b9852:	f7ff f93a 	bl	b8aca <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9856:	b3a0      	cbz	r0, b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9858:	4629      	mov	r1, r5
   b985a:	4620      	mov	r0, r4
   b985c:	f7ff fe9b 	bl	b9596 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b9860:	4606      	mov	r6, r0
   b9862:	b370      	cbz	r0, b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9864:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9868:	4638      	mov	r0, r7
   b986a:	f7ff f9b6 	bl	b8bda <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b986e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9870:	2b00      	cmp	r3, #0
   b9872:	dd12      	ble.n	b989a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9874:	a806      	add	r0, sp, #24
   b9876:	f7fe fee5 	bl	b8644 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b987a:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b987c:	a803      	add	r0, sp, #12
   b987e:	f7fe fee1 	bl	b8644 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b9882:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9886:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b988a:	429a      	cmp	r2, r3
   b988c:	d025      	beq.n	b98da <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b988e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9892:	4588      	cmp	r8, r1
   b9894:	d001      	beq.n	b989a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9896:	4288      	cmp	r0, r1
   b9898:	d1f7      	bne.n	b988a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b989a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b989c:	f7fe fa24 	bl	b7ce8 <free>
              !delegator->filterByServiceUUID(result) ||
   b98a0:	b17e      	cbz	r6, b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b98a2:	4629      	mov	r1, r5
   b98a4:	4620      	mov	r0, r4
   b98a6:	f7ff f9cd 	bl	b8c44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b98aa:	b150      	cbz	r0, b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b98ac:	6a23      	ldr	r3, [r4, #32]
   b98ae:	b1b3      	cbz	r3, b98de <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b98b0:	6963      	ldr	r3, [r4, #20]
   b98b2:	9513      	str	r5, [sp, #76]	; 0x4c
   b98b4:	3301      	adds	r3, #1
   b98b6:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b98b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b98ba:	4639      	mov	r1, r7
   b98bc:	f104 0018 	add.w	r0, r4, #24
   b98c0:	4798      	blx	r3
            return;
   b98c2:	4628      	mov	r0, r5
   b98c4:	f7fe ffa5 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
    }
   b98c8:	b01d      	add	sp, #116	; 0x74
   b98ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b98ce:	f04f 0801 	mov.w	r8, #1
   b98d2:	e7b6      	b.n	b9842 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98d4:	f04f 0800 	mov.w	r8, #0
   b98d8:	e7b3      	b.n	b9842 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98da:	2600      	movs	r6, #0
   b98dc:	e7dd      	b.n	b989a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b98de:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b98e2:	f1b8 0f00 	cmp.w	r8, #0
   b98e6:	d007      	beq.n	b98f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b98e8:	6963      	ldr	r3, [r4, #20]
   b98ea:	3301      	adds	r3, #1
   b98ec:	6163      	str	r3, [r4, #20]
   b98ee:	4629      	mov	r1, r5
   b98f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b98f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b98f6:	e7e3      	b.n	b98c0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b98f8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b98fc:	f1bc 0f00 	cmp.w	ip, #0
   b9900:	d025      	beq.n	b994e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9902:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9904:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9906:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9908:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b990a:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b990c:	d8d9      	bhi.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b990e:	2224      	movs	r2, #36	; 0x24
   b9910:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9912:	462a      	mov	r2, r5
   b9914:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9916:	3b24      	subs	r3, #36	; 0x24
   b9918:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b991c:	f84c 0003 	str.w	r0, [ip, r3]
   b9920:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9922:	f106 0008 	add.w	r0, r6, #8
   b9926:	a903      	add	r1, sp, #12
   b9928:	f7ff fa5b 	bl	b8de2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b992c:	a906      	add	r1, sp, #24
   b992e:	f106 0014 	add.w	r0, r6, #20
   b9932:	f7ff fa56 	bl	b8de2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9936:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b993a:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b993e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9942:	429a      	cmp	r2, r3
   b9944:	d3bd      	bcc.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9946:	4640      	mov	r0, r8
   b9948:	f7fd ff24 	bl	b7794 <hal_ble_gap_stop_scan>
   b994c:	e7b9      	b.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b994e:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9952:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9956:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b995a:	a903      	add	r1, sp, #12
   b995c:	a80c      	add	r0, sp, #48	; 0x30
   b995e:	f7ff fa0c 	bl	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9962:	a906      	add	r1, sp, #24
   b9964:	a80f      	add	r0, sp, #60	; 0x3c
   b9966:	f7ff fa08 	bl	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b996a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b996e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9972:	4641      	mov	r1, r8
   b9974:	4638      	mov	r0, r7
   b9976:	6866      	ldr	r6, [r4, #4]
   b9978:	f7ff fa1c 	bl	b8db4 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b997c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9980:	4299      	cmp	r1, r3
   b9982:	da10      	bge.n	b99a6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b9984:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9986:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9988:	2224      	movs	r2, #36	; 0x24
   b998a:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b998e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9992:	fb02 3201 	mla	r2, r2, r1, r3
   b9996:	4631      	mov	r1, r6
   b9998:	f7ff fec7 	bl	b972a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b999c:	b986      	cbnz	r6, b99c0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b999e:	6863      	ldr	r3, [r4, #4]
   b99a0:	3301      	adds	r3, #1
   b99a2:	6063      	str	r3, [r4, #4]
    return true;
   b99a4:	e005      	b.n	b99b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99a6:	3101      	adds	r1, #1
   b99a8:	4620      	mov	r0, r4
   b99aa:	f7ff fee8 	bl	b977e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b99ae:	2800      	cmp	r0, #0
   b99b0:	d1e8      	bne.n	b9984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b99b2:	4638      	mov	r0, r7
   b99b4:	f7fe ff2d 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b99b8:	4640      	mov	r0, r8
   b99ba:	f7fe ff2a 	bl	b8812 <_ZN8particle13BleScanResultD1Ev>
   b99be:	e780      	b.n	b98c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b99c0:	4639      	mov	r1, r7
   b99c2:	4630      	mov	r0, r6
   b99c4:	f7ff f9f6 	bl	b8db4 <_ZN8particle13BleScanResultC1EOS0_>
   b99c8:	e7e9      	b.n	b999e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

000b99cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b99cc:	4802      	ldr	r0, [pc, #8]	; (b99d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b99ce:	2300      	movs	r3, #0
   b99d0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b99d2:	f7fd bf1d 	b.w	b7810 <os_mutex_recursive_create>
   b99d6:	bf00      	nop
   b99d8:	2003e6a4 	.word	0x2003e6a4

000b99dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b99dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99de:	4606      	mov	r6, r0
   b99e0:	460d      	mov	r5, r1
  size_t n = 0;
   b99e2:	188f      	adds	r7, r1, r2
   b99e4:	2400      	movs	r4, #0
  while (size--) {
   b99e6:	42bd      	cmp	r5, r7
   b99e8:	d00c      	beq.n	b9a04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b99ea:	6833      	ldr	r3, [r6, #0]
   b99ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b99f0:	689b      	ldr	r3, [r3, #8]
   b99f2:	4630      	mov	r0, r6
   b99f4:	4798      	blx	r3
     if (chunk>=0)
   b99f6:	1e03      	subs	r3, r0, #0
   b99f8:	db01      	blt.n	b99fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b99fa:	441c      	add	r4, r3
  while (size--) {
   b99fc:	e7f3      	b.n	b99e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b99fe:	2c00      	cmp	r4, #0
   b9a00:	bf08      	it	eq
   b9a02:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9a04:	4620      	mov	r0, r4
   b9a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9a08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b9a08:	b513      	push	{r0, r1, r4, lr}
   b9a0a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b9a0c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9a0e:	b159      	cbz	r1, b9a28 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9a10:	9101      	str	r1, [sp, #4]
   b9a12:	f7fa fff3 	bl	b49fc <strlen>
   b9a16:	6823      	ldr	r3, [r4, #0]
   b9a18:	9901      	ldr	r1, [sp, #4]
   b9a1a:	68db      	ldr	r3, [r3, #12]
   b9a1c:	4602      	mov	r2, r0
   b9a1e:	4620      	mov	r0, r4
    }
   b9a20:	b002      	add	sp, #8
   b9a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9a26:	4718      	bx	r3
    }
   b9a28:	b002      	add	sp, #8
   b9a2a:	bd10      	pop	{r4, pc}

000b9a2c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9a2c:	b508      	push	{r3, lr}
  return write(str);
   b9a2e:	f7ff ffeb 	bl	b9a08 <_ZN5Print5writeEPKc>
}
   b9a32:	bd08      	pop	{r3, pc}

000b9a34 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9a34:	6803      	ldr	r3, [r0, #0]
   b9a36:	689b      	ldr	r3, [r3, #8]
   b9a38:	4718      	bx	r3

000b9a3a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9a3a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9a3c:	210d      	movs	r1, #13
{
   b9a3e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9a40:	f7ff fff8 	bl	b9a34 <_ZN5Print5printEc>
  n += print('\n');
   b9a44:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9a46:	4604      	mov	r4, r0
  n += print('\n');
   b9a48:	4628      	mov	r0, r5
   b9a4a:	f7ff fff3 	bl	b9a34 <_ZN5Print5printEc>
  return n;
}
   b9a4e:	4420      	add	r0, r4
   b9a50:	bd38      	pop	{r3, r4, r5, pc}

000b9a52 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9a52:	b538      	push	{r3, r4, r5, lr}
   b9a54:	4605      	mov	r5, r0
  return write(str);
   b9a56:	f7ff ffd7 	bl	b9a08 <_ZN5Print5writeEPKc>
   b9a5a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9a5c:	4628      	mov	r0, r5
   b9a5e:	f7ff ffec 	bl	b9a3a <_ZN5Print7printlnEv>
  return n;
}
   b9a62:	4420      	add	r0, r4
   b9a64:	bd38      	pop	{r3, r4, r5, pc}

000b9a66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9a66:	b530      	push	{r4, r5, lr}
   b9a68:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9a6a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9a6c:	2a01      	cmp	r2, #1
  *str = '\0';
   b9a6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9a72:	bf98      	it	ls
   b9a74:	220a      	movls	r2, #10
   b9a76:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9a78:	460d      	mov	r5, r1
   b9a7a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9a7e:	fb01 5312 	mls	r3, r1, r2, r5
   b9a82:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a86:	2b09      	cmp	r3, #9
   b9a88:	bf94      	ite	ls
   b9a8a:	3330      	addls	r3, #48	; 0x30
   b9a8c:	3337      	addhi	r3, #55	; 0x37
   b9a8e:	b2db      	uxtb	r3, r3
  } while(n);
   b9a90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9a92:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9a96:	d9ef      	bls.n	b9a78 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9a98:	4621      	mov	r1, r4
   b9a9a:	f7ff ffb5 	bl	b9a08 <_ZN5Print5writeEPKc>
}
   b9a9e:	b00b      	add	sp, #44	; 0x2c
   b9aa0:	bd30      	pop	{r4, r5, pc}

000b9aa2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9aa6:	b086      	sub	sp, #24
   b9aa8:	af00      	add	r7, sp, #0
   b9aaa:	4605      	mov	r5, r0
   b9aac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9aae:	1d38      	adds	r0, r7, #4
   b9ab0:	2114      	movs	r1, #20
{
   b9ab2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9ab4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9ab6:	f7fe f92f 	bl	b7d18 <vsnprintf>

    if (n<bufsize)
   b9aba:	2813      	cmp	r0, #19
   b9abc:	d80e      	bhi.n	b9adc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9abe:	1d39      	adds	r1, r7, #4
   b9ac0:	4628      	mov	r0, r5
   b9ac2:	f7ff ffa1 	bl	b9a08 <_ZN5Print5writeEPKc>
   b9ac6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9ac8:	b11e      	cbz	r6, b9ad2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9aca:	4628      	mov	r0, r5
   b9acc:	f7ff ffb5 	bl	b9a3a <_ZN5Print7printlnEv>
   b9ad0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9ad2:	4620      	mov	r0, r4
   b9ad4:	3718      	adds	r7, #24
   b9ad6:	46bd      	mov	sp, r7
   b9ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9adc:	f100 0308 	add.w	r3, r0, #8
   b9ae0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9ae4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9ae6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9aea:	4622      	mov	r2, r4
   b9aec:	1c41      	adds	r1, r0, #1
   b9aee:	683b      	ldr	r3, [r7, #0]
   b9af0:	4668      	mov	r0, sp
   b9af2:	f7fe f911 	bl	b7d18 <vsnprintf>
  return write(str);
   b9af6:	4669      	mov	r1, sp
   b9af8:	4628      	mov	r0, r5
   b9afa:	f7ff ff85 	bl	b9a08 <_ZN5Print5writeEPKc>
   b9afe:	4604      	mov	r4, r0
   b9b00:	46c5      	mov	sp, r8
   b9b02:	e7e1      	b.n	b9ac8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9b04 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b9b04:	b510      	push	{r4, lr}
   b9b06:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9b08:	f7fd fe1c 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b9b0c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b9b0e:	6823      	ldr	r3, [r4, #0]
   b9b10:	4620      	mov	r0, r4
   b9b12:	695b      	ldr	r3, [r3, #20]
   b9b14:	4798      	blx	r3
    if (c >= 0) return c;
   b9b16:	2800      	cmp	r0, #0
   b9b18:	da08      	bge.n	b9b2c <_ZN6Stream9timedReadEv+0x28>
   b9b1a:	f7fd fe13 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b9b1e:	68e3      	ldr	r3, [r4, #12]
   b9b20:	1ac0      	subs	r0, r0, r3
   b9b22:	68a3      	ldr	r3, [r4, #8]
   b9b24:	4298      	cmp	r0, r3
   b9b26:	d3f2      	bcc.n	b9b0e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b9b28:	f04f 30ff 	mov.w	r0, #4294967295
}
   b9b2c:	bd10      	pop	{r4, pc}

000b9b2e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b9b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b32:	4607      	mov	r7, r0
   b9b34:	460c      	mov	r4, r1
   b9b36:	188e      	adds	r6, r1, r2
   b9b38:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b9b3a:	42b5      	cmp	r5, r6
   b9b3c:	eba5 0804 	sub.w	r8, r5, r4
   b9b40:	d007      	beq.n	b9b52 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b9b42:	4638      	mov	r0, r7
   b9b44:	f7ff ffde 	bl	b9b04 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b9b48:	1e03      	subs	r3, r0, #0
   b9b4a:	db02      	blt.n	b9b52 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b9b4c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b9b50:	e7f3      	b.n	b9b3a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b9b52:	4640      	mov	r0, r8
   b9b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9b58 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9b58:	6880      	ldr	r0, [r0, #8]
   b9b5a:	6803      	ldr	r3, [r0, #0]
   b9b5c:	68db      	ldr	r3, [r3, #12]
   b9b5e:	4718      	bx	r3

000b9b60 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9b60:	4770      	bx	lr

000b9b62 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9b62:	4608      	mov	r0, r1
   b9b64:	b111      	cbz	r1, b9b6c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9b66:	680b      	ldr	r3, [r1, #0]
   b9b68:	685b      	ldr	r3, [r3, #4]
   b9b6a:	4718      	bx	r3
}
   b9b6c:	4770      	bx	lr

000b9b6e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9b6e:	4770      	bx	lr

000b9b70 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9b70:	4770      	bx	lr

000b9b72 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9b72:	4770      	bx	lr

000b9b74 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9b74:	4770      	bx	lr

000b9b76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9b76:	b538      	push	{r3, r4, r5, lr}
   b9b78:	4604      	mov	r4, r0
   b9b7a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9b7c:	6800      	ldr	r0, [r0, #0]
   b9b7e:	212e      	movs	r1, #46	; 0x2e
   b9b80:	f002 fab9 	bl	bc0f6 <strchrnul>
    size = s - category;
   b9b84:	6823      	ldr	r3, [r4, #0]
   b9b86:	1ac3      	subs	r3, r0, r3
   b9b88:	602b      	str	r3, [r5, #0]
    if (size) {
   b9b8a:	b123      	cbz	r3, b9b96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9b8c:	7803      	ldrb	r3, [r0, #0]
   b9b8e:	b103      	cbz	r3, b9b92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9b90:	3001      	adds	r0, #1
   b9b92:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9b94:	6020      	str	r0, [r4, #0]
}
   b9b96:	4618      	mov	r0, r3
   b9b98:	bd38      	pop	{r3, r4, r5, pc}

000b9b9a <_ZN5spark16JSONStreamWriterD0Ev>:
   b9b9a:	b510      	push	{r4, lr}
   b9b9c:	210c      	movs	r1, #12
   b9b9e:	4604      	mov	r4, r0
   b9ba0:	f7fa ff8d 	bl	b4abe <_ZdlPvj>
   b9ba4:	4620      	mov	r0, r4
   b9ba6:	bd10      	pop	{r4, pc}

000b9ba8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9ba8:	b510      	push	{r4, lr}
   b9baa:	2104      	movs	r1, #4
   b9bac:	4604      	mov	r4, r0
   b9bae:	f7fa ff86 	bl	b4abe <_ZdlPvj>
   b9bb2:	4620      	mov	r0, r4
   b9bb4:	bd10      	pop	{r4, pc}

000b9bb6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9bb6:	b510      	push	{r4, lr}
   b9bb8:	2104      	movs	r1, #4
   b9bba:	4604      	mov	r4, r0
   b9bbc:	f7fa ff7f 	bl	b4abe <_ZdlPvj>
   b9bc0:	4620      	mov	r0, r4
   b9bc2:	bd10      	pop	{r4, pc}

000b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b9bc4:	f7fd be34 	b.w	b7830 <os_mutex_recursive_lock>

000b9bc8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9bc8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9bca:	f7fa ff0d 	bl	b49e8 <strcmp>
}
   b9bce:	fab0 f080 	clz	r0, r0
   b9bd2:	0940      	lsrs	r0, r0, #5
   b9bd4:	bd08      	pop	{r3, pc}

000b9bd6 <__tcf_1>:
   b9bd6:	4770      	bx	lr

000b9bd8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9bd8:	b510      	push	{r4, lr}
   b9bda:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9bdc:	f001 f92c 	bl	bae38 <_Z16_fetch_usbserialv>
   b9be0:	4284      	cmp	r4, r0
   b9be2:	d010      	beq.n	b9c06 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9be4:	f002 f874 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
   b9be8:	4284      	cmp	r4, r0
   b9bea:	d105      	bne.n	b9bf8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9bec:	f002 f870 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9bf4:	f001 b99f 	b.w	baf36 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9bf8:	b12c      	cbz	r4, b9c06 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9bfa:	6823      	ldr	r3, [r4, #0]
   b9bfc:	4620      	mov	r0, r4
   b9bfe:	685b      	ldr	r3, [r3, #4]
}
   b9c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9c04:	4718      	bx	r3
   b9c06:	bd10      	pop	{r4, pc}

000b9c08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c08:	680b      	ldr	r3, [r1, #0]
   b9c0a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9c0c:	684b      	ldr	r3, [r1, #4]
   b9c0e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9c10:	b113      	cbz	r3, b9c18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9c12:	685a      	ldr	r2, [r3, #4]
   b9c14:	3201      	adds	r2, #1
   b9c16:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c18:	4770      	bx	lr

000b9c1a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9c1a:	b513      	push	{r0, r1, r4, lr}
   b9c1c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9c1e:	4608      	mov	r0, r1
   b9c20:	9101      	str	r1, [sp, #4]
   b9c22:	f7fa feeb 	bl	b49fc <strlen>
   b9c26:	9901      	ldr	r1, [sp, #4]
   b9c28:	4602      	mov	r2, r0
   b9c2a:	4620      	mov	r0, r4
}
   b9c2c:	b002      	add	sp, #8
   b9c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9c32:	f001 bf69 	b.w	bbb08 <_ZN5spark10JSONWriter5valueEPKcj>

000b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9c36:	b513      	push	{r0, r1, r4, lr}
   b9c38:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9c3a:	4608      	mov	r0, r1
   b9c3c:	9101      	str	r1, [sp, #4]
   b9c3e:	f7fa fedd 	bl	b49fc <strlen>
   b9c42:	6823      	ldr	r3, [r4, #0]
   b9c44:	9901      	ldr	r1, [sp, #4]
   b9c46:	68db      	ldr	r3, [r3, #12]
   b9c48:	4602      	mov	r2, r0
   b9c4a:	4620      	mov	r0, r4
}
   b9c4c:	b002      	add	sp, #8
   b9c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9c52:	4718      	bx	r3

000b9c54 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9c54:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9c56:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9c58:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9c5c:	68db      	ldr	r3, [r3, #12]
   b9c5e:	2201      	movs	r2, #1
   b9c60:	f10d 0107 	add.w	r1, sp, #7
   b9c64:	4798      	blx	r3
}
   b9c66:	b003      	add	sp, #12
   b9c68:	f85d fb04 	ldr.w	pc, [sp], #4

000b9c6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9c6c:	680a      	ldr	r2, [r1, #0]
   b9c6e:	6002      	str	r2, [r0, #0]
   b9c70:	684a      	ldr	r2, [r1, #4]
   b9c72:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9c74:	2200      	movs	r2, #0
   b9c76:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9c7a:	b510      	push	{r4, lr}
   b9c7c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9c7e:	688c      	ldr	r4, [r1, #8]
   b9c80:	6084      	str	r4, [r0, #8]
   b9c82:	68cc      	ldr	r4, [r1, #12]
   b9c84:	60c4      	str	r4, [r0, #12]
   b9c86:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c88:	608a      	str	r2, [r1, #8]
   b9c8a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9c8c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c8e:	610a      	str	r2, [r1, #16]
   b9c90:	bd10      	pop	{r4, pc}
	...

000b9c94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
   b9c98:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9c9c:	f04f 0a14 	mov.w	sl, #20
   b9ca0:	9300      	str	r3, [sp, #0]
   b9ca2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9ca6:	4b18      	ldr	r3, [pc, #96]	; (b9d08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9ca8:	10a4      	asrs	r4, r4, #2
   b9caa:	4617      	mov	r7, r2
   b9cac:	435c      	muls	r4, r3
   b9cae:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9cb0:	2c00      	cmp	r4, #0
   b9cb2:	dd21      	ble.n	b9cf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9cb4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9cb6:	fb0a f006 	mul.w	r0, sl, r6
   b9cba:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9cbe:	463a      	mov	r2, r7
   b9cc0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9cc4:	5828      	ldr	r0, [r5, r0]
   b9cc6:	9101      	str	r1, [sp, #4]
   b9cc8:	455f      	cmp	r7, fp
   b9cca:	bf28      	it	cs
   b9ccc:	465a      	movcs	r2, fp
   b9cce:	f002 fa24 	bl	bc11a <strncmp>
                if (cmp == 0) {
   b9cd2:	2800      	cmp	r0, #0
   b9cd4:	9901      	ldr	r1, [sp, #4]
   b9cd6:	f04f 0301 	mov.w	r3, #1
   b9cda:	d10b      	bne.n	b9cf4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9cdc:	455f      	cmp	r7, fp
   b9cde:	d103      	bne.n	b9ce8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9ce0:	9a00      	ldr	r2, [sp, #0]
   b9ce2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9ce4:	4634      	mov	r4, r6
   b9ce6:	e7e3      	b.n	b9cb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9ce8:	d9fc      	bls.n	b9ce4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9cea:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9cec:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9cf0:	3e01      	subs	r6, #1
   b9cf2:	e7f7      	b.n	b9ce4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9cf4:	dbf9      	blt.n	b9cea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9cf6:	e7f5      	b.n	b9ce4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9cf8:	eba5 0508 	sub.w	r5, r5, r8
}
   b9cfc:	4802      	ldr	r0, [pc, #8]	; (b9d08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9cfe:	10ad      	asrs	r5, r5, #2
   b9d00:	4368      	muls	r0, r5
   b9d02:	b003      	add	sp, #12
   b9d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d08:	cccccccd 	.word	0xcccccccd

000b9d0c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9d0e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9d10:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9d12:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9d14:	b303      	cbz	r3, b9d58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9d16:	b1f9      	cbz	r1, b9d58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9d18:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9d1a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9d1e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9d20:	a903      	add	r1, sp, #12
   b9d22:	a801      	add	r0, sp, #4
   b9d24:	f7ff ff27 	bl	b9b76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9d28:	4601      	mov	r1, r0
   b9d2a:	b1a8      	cbz	r0, b9d58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d2c:	f10d 030b 	add.w	r3, sp, #11
   b9d30:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9d32:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d36:	4620      	mov	r0, r4
   b9d38:	f7ff ffac 	bl	b9c94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9d3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9d40:	b153      	cbz	r3, b9d58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9d42:	6823      	ldr	r3, [r4, #0]
   b9d44:	2414      	movs	r4, #20
   b9d46:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9d4a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9d4c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9d50:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9d52:	bfa8      	it	ge
   b9d54:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9d56:	e7e3      	b.n	b9d20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9d58:	4628      	mov	r0, r5
   b9d5a:	b004      	add	sp, #16
   b9d5c:	bd70      	pop	{r4, r5, r6, pc}

000b9d5e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9d5e:	b40e      	push	{r1, r2, r3}
   b9d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d62:	b08c      	sub	sp, #48	; 0x30
   b9d64:	af00      	add	r7, sp, #0
   b9d66:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b9d6a:	4604      	mov	r4, r0
   b9d6c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d70:	607a      	str	r2, [r7, #4]
   b9d72:	462b      	mov	r3, r5
   b9d74:	2120      	movs	r1, #32
   b9d76:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b9d7a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d7c:	f7fd ffcc 	bl	b7d18 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b9d80:	281f      	cmp	r0, #31
   b9d82:	687a      	ldr	r2, [r7, #4]
   b9d84:	d91a      	bls.n	b9dbc <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b9d86:	f100 0308 	add.w	r3, r0, #8
   b9d8a:	f023 0307 	bic.w	r3, r3, #7
        }
   b9d8e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b9d90:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d94:	1c41      	adds	r1, r0, #1
   b9d96:	462b      	mov	r3, r5
   b9d98:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9d9a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d9c:	f7fd ffbc 	bl	b7d18 <vsnprintf>
        if (n > 0) {
   b9da0:	1e02      	subs	r2, r0, #0
   b9da2:	dd04      	ble.n	b9dae <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b9da4:	6823      	ldr	r3, [r4, #0]
   b9da6:	4669      	mov	r1, sp
   b9da8:	68db      	ldr	r3, [r3, #12]
   b9daa:	4620      	mov	r0, r4
   b9dac:	4798      	blx	r3
   b9dae:	46b5      	mov	sp, r6
}
   b9db0:	3730      	adds	r7, #48	; 0x30
   b9db2:	46bd      	mov	sp, r7
   b9db4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9db8:	b003      	add	sp, #12
   b9dba:	4770      	bx	lr
    } else if (n > 0) {
   b9dbc:	2800      	cmp	r0, #0
   b9dbe:	d0f7      	beq.n	b9db0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b9dc0:	6823      	ldr	r3, [r4, #0]
   b9dc2:	4602      	mov	r2, r0
   b9dc4:	68db      	ldr	r3, [r3, #12]
   b9dc6:	f107 0110 	add.w	r1, r7, #16
   b9dca:	4620      	mov	r0, r4
   b9dcc:	4798      	blx	r3
}
   b9dce:	e7ef      	b.n	b9db0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b9dd0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9dd0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9dd2:	4c09      	ldr	r4, [pc, #36]	; (b9df8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9dd4:	7823      	ldrb	r3, [r4, #0]
   b9dd6:	f3bf 8f5b 	dmb	ish
   b9dda:	07db      	lsls	r3, r3, #31
   b9ddc:	d409      	bmi.n	b9df2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9dde:	4620      	mov	r0, r4
   b9de0:	f7fa fe7c 	bl	b4adc <__cxa_guard_acquire>
   b9de4:	b128      	cbz	r0, b9df2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9de6:	4620      	mov	r0, r4
   b9de8:	f7fa fe7d 	bl	b4ae6 <__cxa_guard_release>
   b9dec:	4803      	ldr	r0, [pc, #12]	; (b9dfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9dee:	f002 f8ed 	bl	bbfcc <atexit>
}
   b9df2:	4803      	ldr	r0, [pc, #12]	; (b9e00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9df4:	bd10      	pop	{r4, pc}
   b9df6:	bf00      	nop
   b9df8:	2003e6b0 	.word	0x2003e6b0
   b9dfc:	000b9b6f 	.word	0x000b9b6f
   b9e00:	2003e2ec 	.word	0x2003e2ec

000b9e04 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9e04:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9e06:	4c09      	ldr	r4, [pc, #36]	; (b9e2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9e08:	7823      	ldrb	r3, [r4, #0]
   b9e0a:	f3bf 8f5b 	dmb	ish
   b9e0e:	07db      	lsls	r3, r3, #31
   b9e10:	d409      	bmi.n	b9e26 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e12:	4620      	mov	r0, r4
   b9e14:	f7fa fe62 	bl	b4adc <__cxa_guard_acquire>
   b9e18:	b128      	cbz	r0, b9e26 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e1a:	4620      	mov	r0, r4
   b9e1c:	f7fa fe63 	bl	b4ae6 <__cxa_guard_release>
   b9e20:	4803      	ldr	r0, [pc, #12]	; (b9e30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9e22:	f002 f8d3 	bl	bbfcc <atexit>
    return &factory;
}
   b9e26:	4803      	ldr	r0, [pc, #12]	; (b9e34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9e28:	bd10      	pop	{r4, pc}
   b9e2a:	bf00      	nop
   b9e2c:	2003e6b4 	.word	0x2003e6b4
   b9e30:	000b9bd7 	.word	0x000b9bd7
   b9e34:	2003e2f0 	.word	0x2003e2f0

000b9e38 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9e38:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9e3a:	2500      	movs	r5, #0
   b9e3c:	4604      	mov	r4, r0
   b9e3e:	e9c0 5500 	strd	r5, r5, [r0]
   b9e42:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9e46:	6085      	str	r5, [r0, #8]
   b9e48:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9e4a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9e4e:	f7fd fcdf 	bl	b7810 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9e52:	f7ff ffbd 	bl	b9dd0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9e56:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9e58:	f7ff ffd4 	bl	b9e04 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9e5c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9e5e:	6220      	str	r0, [r4, #32]
}
   b9e60:	4620      	mov	r0, r4
   b9e62:	bd38      	pop	{r3, r4, r5, pc}

000b9e64 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9e64:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9e66:	4c0a      	ldr	r4, [pc, #40]	; (b9e90 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9e68:	7823      	ldrb	r3, [r4, #0]
   b9e6a:	f3bf 8f5b 	dmb	ish
   b9e6e:	07db      	lsls	r3, r3, #31
   b9e70:	d40c      	bmi.n	b9e8c <_ZN5spark10LogManager8instanceEv+0x28>
   b9e72:	4620      	mov	r0, r4
   b9e74:	f7fa fe32 	bl	b4adc <__cxa_guard_acquire>
   b9e78:	b140      	cbz	r0, b9e8c <_ZN5spark10LogManager8instanceEv+0x28>
   b9e7a:	4806      	ldr	r0, [pc, #24]	; (b9e94 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9e7c:	f7ff ffdc 	bl	b9e38 <_ZN5spark10LogManagerC1Ev>
   b9e80:	4620      	mov	r0, r4
   b9e82:	f7fa fe30 	bl	b4ae6 <__cxa_guard_release>
   b9e86:	4804      	ldr	r0, [pc, #16]	; (b9e98 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9e88:	f002 f8a0 	bl	bbfcc <atexit>
    return &mgr;
}
   b9e8c:	4801      	ldr	r0, [pc, #4]	; (b9e94 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9e8e:	bd10      	pop	{r4, pc}
   b9e90:	2003e6ac 	.word	0x2003e6ac
   b9e94:	2003e6bc 	.word	0x2003e6bc
   b9e98:	000ba3b9 	.word	0x000ba3b9

000b9e9c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9e9c:	4a02      	ldr	r2, [pc, #8]	; (b9ea8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9e9e:	4903      	ldr	r1, [pc, #12]	; (b9eac <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9ea0:	4803      	ldr	r0, [pc, #12]	; (b9eb0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9ea2:	2300      	movs	r3, #0
   b9ea4:	f7fd be6c 	b.w	b7b80 <log_set_callbacks>
   b9ea8:	000ba19d 	.word	0x000ba19d
   b9eac:	000ba129 	.word	0x000ba129
   b9eb0:	000ba0a9 	.word	0x000ba0a9

000b9eb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9eb4:	2300      	movs	r3, #0
   b9eb6:	461a      	mov	r2, r3
   b9eb8:	4619      	mov	r1, r3
   b9eba:	4618      	mov	r0, r3
   b9ebc:	f7fd be60 	b.w	b7b80 <log_set_callbacks>

000b9ec0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9ec2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9ec4:	4604      	mov	r4, r0
   b9ec6:	4668      	mov	r0, sp
   b9ec8:	f7ff fe9e 	bl	b9c08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9ecc:	466a      	mov	r2, sp
   b9ece:	4629      	mov	r1, r5
   b9ed0:	4620      	mov	r0, r4
   b9ed2:	f001 fd39 	bl	bb948 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9ed6:	a801      	add	r0, sp, #4
   b9ed8:	f7fe fd2c 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9edc:	4620      	mov	r0, r4
   b9ede:	b003      	add	sp, #12
   b9ee0:	bd30      	pop	{r4, r5, pc}

000b9ee2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9ee4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9ee6:	4604      	mov	r4, r0
   b9ee8:	4668      	mov	r0, sp
   b9eea:	f7ff fe8d 	bl	b9c08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9eee:	466a      	mov	r2, sp
   b9ef0:	4629      	mov	r1, r5
   b9ef2:	4620      	mov	r0, r4
   b9ef4:	f001 fd04 	bl	bb900 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9ef8:	a801      	add	r0, sp, #4
   b9efa:	f7fe fd1b 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9efe:	4620      	mov	r0, r4
   b9f00:	b003      	add	sp, #12
   b9f02:	bd30      	pop	{r4, r5, pc}

000b9f04 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9f06:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f08:	4604      	mov	r4, r0
   b9f0a:	4668      	mov	r0, sp
   b9f0c:	f7ff fe7c 	bl	b9c08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9f10:	466a      	mov	r2, sp
   b9f12:	4629      	mov	r1, r5
   b9f14:	4620      	mov	r0, r4
   b9f16:	f001 fc9c 	bl	bb852 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f1a:	a801      	add	r0, sp, #4
   b9f1c:	f7fe fd0a 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f20:	4620      	mov	r0, r4
   b9f22:	b003      	add	sp, #12
   b9f24:	bd30      	pop	{r4, r5, pc}
	...

000b9f28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9f28:	b570      	push	{r4, r5, r6, lr}
   b9f2a:	b08a      	sub	sp, #40	; 0x28
   b9f2c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9f2e:	4601      	mov	r1, r0
   b9f30:	a804      	add	r0, sp, #16
   b9f32:	f7ff ffc5 	bl	b9ec0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9f36:	4e14      	ldr	r6, [pc, #80]	; (b9f88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9f38:	a804      	add	r0, sp, #16
   b9f3a:	f001 fd1d 	bl	bb978 <_ZN5spark18JSONObjectIterator4nextEv>
   b9f3e:	b1e8      	cbz	r0, b9f7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9f40:	a904      	add	r1, sp, #16
   b9f42:	4668      	mov	r0, sp
   b9f44:	f7ff ffcd 	bl	b9ee2 <_ZNK5spark18JSONObjectIterator4nameEv>
   b9f48:	9802      	ldr	r0, [sp, #8]
   b9f4a:	4631      	mov	r1, r6
   b9f4c:	f7ff fe3c 	bl	b9bc8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9f50:	4604      	mov	r4, r0
   b9f52:	b110      	cbz	r0, b9f5a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9f54:	1e2c      	subs	r4, r5, #0
   b9f56:	bf18      	it	ne
   b9f58:	2401      	movne	r4, #1
   b9f5a:	a801      	add	r0, sp, #4
   b9f5c:	f7fe fcea 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f60:	2c00      	cmp	r4, #0
   b9f62:	d0e9      	beq.n	b9f38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9f64:	a904      	add	r1, sp, #16
   b9f66:	4668      	mov	r0, sp
   b9f68:	f7ff ffcc 	bl	b9f04 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9f6c:	4668      	mov	r0, sp
   b9f6e:	f001 fca6 	bl	bb8be <_ZNK5spark9JSONValue5toIntEv>
   b9f72:	6028      	str	r0, [r5, #0]
   b9f74:	a801      	add	r0, sp, #4
   b9f76:	f7fe fcdd 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f7a:	e7dd      	b.n	b9f38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9f7c:	a805      	add	r0, sp, #20
   b9f7e:	f7fe fcd9 	bl	b8934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f82:	b00a      	add	sp, #40	; 0x28
   b9f84:	bd70      	pop	{r4, r5, r6, pc}
   b9f86:	bf00      	nop
   b9f88:	000bf334 	.word	0x000bf334

000b9f8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9f8e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9f90:	4620      	mov	r0, r4
   b9f92:	4913      	ldr	r1, [pc, #76]	; (b9fe0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9f94:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9f96:	f7fa fd27 	bl	b49e8 <strcmp>
   b9f9a:	b950      	cbnz	r0, b9fb2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9f9c:	f000 ff4c 	bl	bae38 <_Z16_fetch_usbserialv>
   b9fa0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9fa4:	f000 ff38 	bl	bae18 <_ZN9USBSerial5beginEl>
}
   b9fa8:	b003      	add	sp, #12
   b9faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9fae:	f000 bf43 	b.w	bae38 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9fb2:	490c      	ldr	r1, [pc, #48]	; (b9fe4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9fb4:	4620      	mov	r0, r4
   b9fb6:	f7fa fd17 	bl	b49e8 <strcmp>
   b9fba:	b978      	cbnz	r0, b9fdc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9fbc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9fc0:	a901      	add	r1, sp, #4
   b9fc2:	4628      	mov	r0, r5
        int baud = 9600;
   b9fc4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9fc6:	f7ff ffaf 	bl	b9f28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9fca:	f001 fe81 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
   b9fce:	9901      	ldr	r1, [sp, #4]
   b9fd0:	f000 ffae 	bl	baf30 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9fd4:	f001 fe7c 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
}
   b9fd8:	b003      	add	sp, #12
   b9fda:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9fdc:	2000      	movs	r0, #0
   b9fde:	e7fb      	b.n	b9fd8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9fe0:	000bf339 	.word	0x000bf339
   b9fe4:	000bf340 	.word	0x000bf340

000b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9fe8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9fea:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9fee:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9ff0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9ff2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9ff6:	42ae      	cmp	r6, r5
   b9ff8:	d005      	beq.n	ba006 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9ffa:	f105 0008 	add.w	r0, r5, #8
   b9ffe:	f7ff fff3 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba002:	3514      	adds	r5, #20
   ba004:	e7f7      	b.n	b9ff6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ba006:	6820      	ldr	r0, [r4, #0]
   ba008:	f7fd fe6e 	bl	b7ce8 <free>
}
   ba00c:	4620      	mov	r0, r4
   ba00e:	bd70      	pop	{r4, r5, r6, pc}

000ba010 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ba010:	b510      	push	{r4, lr}
   ba012:	4604      	mov	r4, r0
   ba014:	300c      	adds	r0, #12
   ba016:	f7ff ffe7 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba01a:	4620      	mov	r0, r4
   ba01c:	f7fe fc22 	bl	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba020:	4620      	mov	r0, r4
   ba022:	bd10      	pop	{r4, pc}

000ba024 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ba024:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ba026:	4b04      	ldr	r3, [pc, #16]	; (ba038 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ba028:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ba02a:	f840 3b04 	str.w	r3, [r0], #4
   ba02e:	f7ff ffef 	bl	ba010 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ba032:	4620      	mov	r0, r4
   ba034:	bd10      	pop	{r4, pc}
   ba036:	bf00      	nop
   ba038:	000be228 	.word	0x000be228

000ba03c <_ZN5spark16StreamLogHandlerD0Ev>:
   ba03c:	b510      	push	{r4, lr}
   ba03e:	4604      	mov	r4, r0
   ba040:	f7ff fff0 	bl	ba024 <_ZN5spark16StreamLogHandlerD1Ev>
   ba044:	4620      	mov	r0, r4
   ba046:	2124      	movs	r1, #36	; 0x24
   ba048:	f7fa fd39 	bl	b4abe <_ZdlPvj>
   ba04c:	4620      	mov	r0, r4
   ba04e:	bd10      	pop	{r4, pc}

000ba050 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ba050:	b510      	push	{r4, lr}
   ba052:	4b03      	ldr	r3, [pc, #12]	; (ba060 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ba054:	6003      	str	r3, [r0, #0]
   ba056:	4604      	mov	r4, r0
   ba058:	f7ff ffe4 	bl	ba024 <_ZN5spark16StreamLogHandlerD1Ev>
   ba05c:	4620      	mov	r0, r4
   ba05e:	bd10      	pop	{r4, pc}
   ba060:	000bf3d8 	.word	0x000bf3d8

000ba064 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ba064:	b510      	push	{r4, lr}
   ba066:	4604      	mov	r4, r0
   ba068:	f7ff fff2 	bl	ba050 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ba06c:	4620      	mov	r0, r4
   ba06e:	2124      	movs	r1, #36	; 0x24
   ba070:	f7fa fd25 	bl	b4abe <_ZdlPvj>
   ba074:	4620      	mov	r0, r4
   ba076:	bd10      	pop	{r4, pc}

000ba078 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ba078:	2200      	movs	r2, #0
   ba07a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ba07e:	b510      	push	{r4, lr}
        capacity_(0) {
   ba080:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba082:	680c      	ldr	r4, [r1, #0]
   ba084:	6004      	str	r4, [r0, #0]
   ba086:	684c      	ldr	r4, [r1, #4]
   ba088:	6044      	str	r4, [r0, #4]
   ba08a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba08c:	600a      	str	r2, [r1, #0]
   ba08e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba090:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba092:	608a      	str	r2, [r1, #8]
}
   ba094:	bd10      	pop	{r4, pc}

000ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   ba096:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba098:	6803      	ldr	r3, [r0, #0]
   ba09a:	4604      	mov	r4, r0
   ba09c:	6818      	ldr	r0, [r3, #0]
   ba09e:	f7fd fbcf 	bl	b7840 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ba0a2:	4620      	mov	r0, r4
   ba0a4:	bd10      	pop	{r4, pc}
	...

000ba0a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ba0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0ac:	b087      	sub	sp, #28
   ba0ae:	4680      	mov	r8, r0
   ba0b0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ba0b2:	4b1c      	ldr	r3, [pc, #112]	; (ba124 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ba0b4:	685b      	ldr	r3, [r3, #4]
   ba0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba0ba:	4689      	mov	r9, r1
   ba0bc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   ba0be:	b96b      	cbnz	r3, ba0dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ba0c0:	f7ff fed0 	bl	b9e64 <_ZN5spark10LogManager8instanceEv>
   ba0c4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba0c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   ba0ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba0cc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   ba0ce:	f7ff fd79 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   ba0d2:	7b23      	ldrb	r3, [r4, #12]
   ba0d4:	b12b      	cbz	r3, ba0e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ba0d6:	a805      	add	r0, sp, #20
   ba0d8:	f7ff ffdd 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ba0dc:	b007      	add	sp, #28
   ba0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ba0e2:	2301      	movs	r3, #1
   ba0e4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ba0e6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ba0ea:	fa5f f989 	uxtb.w	r9, r9
   ba0ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba0f2:	45aa      	cmp	sl, r5
   ba0f4:	d012      	beq.n	ba11c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ba0f6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ba0fa:	4631      	mov	r1, r6
   ba0fc:	1d38      	adds	r0, r7, #4
   ba0fe:	f7ff fe05 	bl	b9d0c <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba102:	4581      	cmp	r9, r0
   ba104:	d3f5      	bcc.n	ba0f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ba106:	683b      	ldr	r3, [r7, #0]
   ba108:	9a03      	ldr	r2, [sp, #12]
   ba10a:	9200      	str	r2, [sp, #0]
   ba10c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ba110:	464a      	mov	r2, r9
   ba112:	4633      	mov	r3, r6
   ba114:	4641      	mov	r1, r8
   ba116:	4638      	mov	r0, r7
   ba118:	47d8      	blx	fp
   ba11a:	e7ea      	b.n	ba0f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ba11c:	2300      	movs	r3, #0
   ba11e:	7323      	strb	r3, [r4, #12]
   ba120:	e7d9      	b.n	ba0d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ba122:	bf00      	nop
   ba124:	e000ed00 	.word	0xe000ed00

000ba128 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ba128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba12c:	469b      	mov	fp, r3
   ba12e:	4b1a      	ldr	r3, [pc, #104]	; (ba198 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ba130:	685b      	ldr	r3, [r3, #4]
   ba132:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba136:	4680      	mov	r8, r0
   ba138:	4689      	mov	r9, r1
   ba13a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   ba13c:	b96b      	cbnz	r3, ba15a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ba13e:	f7ff fe91 	bl	b9e64 <_ZN5spark10LogManager8instanceEv>
   ba142:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba144:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ba148:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba14a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba14c:	f7ff fd3a 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   ba150:	7b23      	ldrb	r3, [r4, #12]
   ba152:	b12b      	cbz	r3, ba160 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ba154:	a801      	add	r0, sp, #4
   ba156:	f7ff ff9e 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba15a:	b003      	add	sp, #12
   ba15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ba160:	2301      	movs	r3, #1
   ba162:	7323      	strb	r3, [r4, #12]
   ba164:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ba168:	b2f6      	uxtb	r6, r6
   ba16a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba16e:	4555      	cmp	r5, sl
   ba170:	d00e      	beq.n	ba190 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ba172:	f855 7b04 	ldr.w	r7, [r5], #4
   ba176:	4659      	mov	r1, fp
   ba178:	1d38      	adds	r0, r7, #4
   ba17a:	f7ff fdc7 	bl	b9d0c <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba17e:	4286      	cmp	r6, r0
   ba180:	d3f5      	bcc.n	ba16e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba182:	683b      	ldr	r3, [r7, #0]
   ba184:	464a      	mov	r2, r9
   ba186:	68db      	ldr	r3, [r3, #12]
   ba188:	4641      	mov	r1, r8
   ba18a:	4638      	mov	r0, r7
   ba18c:	4798      	blx	r3
   ba18e:	e7ee      	b.n	ba16e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba190:	2300      	movs	r3, #0
   ba192:	7323      	strb	r3, [r4, #12]
   ba194:	e7de      	b.n	ba154 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba196:	bf00      	nop
   ba198:	e000ed00 	.word	0xe000ed00

000ba19c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba19c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba1a0:	4b16      	ldr	r3, [pc, #88]	; (ba1fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba1a2:	685b      	ldr	r3, [r3, #4]
   ba1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba1a8:	4605      	mov	r5, r0
   ba1aa:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   ba1ac:	bb1b      	cbnz	r3, ba1f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba1ae:	f7ff fe59 	bl	b9e64 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba1b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba1b6:	4604      	mov	r4, r0
   ba1b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba1ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba1bc:	f7ff fd02 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba1c0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba1c4:	2446      	movs	r4, #70	; 0x46
   ba1c6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba1ca:	45b0      	cmp	r8, r6
   ba1cc:	d109      	bne.n	ba1e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba1ce:	a801      	add	r0, sp, #4
   ba1d0:	f7ff ff61 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba1d4:	42a5      	cmp	r5, r4
   ba1d6:	bfb4      	ite	lt
   ba1d8:	2000      	movlt	r0, #0
   ba1da:	2001      	movge	r0, #1
}
   ba1dc:	b002      	add	sp, #8
   ba1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba1e2:	f856 0b04 	ldr.w	r0, [r6], #4
   ba1e6:	4639      	mov	r1, r7
   ba1e8:	3004      	adds	r0, #4
   ba1ea:	f7ff fd8f 	bl	b9d0c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba1ee:	4284      	cmp	r4, r0
   ba1f0:	bfa8      	it	ge
   ba1f2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba1f4:	e7e9      	b.n	ba1ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba1f6:	2000      	movs	r0, #0
   ba1f8:	e7f0      	b.n	ba1dc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba1fa:	bf00      	nop
   ba1fc:	e000ed00 	.word	0xe000ed00

000ba200 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba202:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba206:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba208:	4604      	mov	r4, r0
   ba20a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba20c:	db0d      	blt.n	ba22a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba20e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba210:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba212:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba214:	dd04      	ble.n	ba220 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba216:	00b9      	lsls	r1, r7, #2
   ba218:	f7fd fd6e 	bl	b7cf8 <realloc>
            if (!d) {
   ba21c:	b918      	cbnz	r0, ba226 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba220:	f7fd fd62 	bl	b7ce8 <free>
        T* d = nullptr;
   ba224:	2000      	movs	r0, #0
        data_ = d;
   ba226:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba228:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba22a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba22c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba22e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba232:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba234:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba238:	1d08      	adds	r0, r1, #4
   ba23a:	f001 feff 	bl	bc03c <memmove>
    new(p) T(std::move(value));
   ba23e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba242:	6863      	ldr	r3, [r4, #4]
   ba244:	3301      	adds	r3, #1
   ba246:	6063      	str	r3, [r4, #4]
    return true;
   ba248:	2001      	movs	r0, #1
   ba24a:	e7e8      	b.n	ba21e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba24c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba24e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba252:	4604      	mov	r4, r0
   ba254:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba256:	9301      	str	r3, [sp, #4]
   ba258:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba25a:	f7ff fcb3 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba25e:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba262:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba266:	4293      	cmp	r3, r2
   ba268:	4619      	mov	r1, r3
   ba26a:	d00b      	beq.n	ba284 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba26c:	6809      	ldr	r1, [r1, #0]
   ba26e:	42a9      	cmp	r1, r5
   ba270:	f103 0304 	add.w	r3, r3, #4
   ba274:	d1f7      	bne.n	ba266 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba276:	a801      	add	r0, sp, #4
   ba278:	f7ff ff0d 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba27c:	2500      	movs	r5, #0
}
   ba27e:	4628      	mov	r0, r5
   ba280:	b003      	add	sp, #12
   ba282:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba284:	4629      	mov	r1, r5
   ba286:	4620      	mov	r0, r4
   ba288:	f7ff ffba 	bl	ba200 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba28c:	4605      	mov	r5, r0
   ba28e:	2800      	cmp	r0, #0
   ba290:	d0f1      	beq.n	ba276 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba292:	6863      	ldr	r3, [r4, #4]
   ba294:	2b01      	cmp	r3, #1
   ba296:	d101      	bne.n	ba29c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba298:	f7ff fe00 	bl	b9e9c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba29c:	a801      	add	r0, sp, #4
   ba29e:	f7ff fefa 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba2a2:	e7ec      	b.n	ba27e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba2a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba2a4:	b570      	push	{r4, r5, r6, lr}
   ba2a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba2a8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba2ac:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba2ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba2b2:	4282      	cmp	r2, r0
   ba2b4:	d00f      	beq.n	ba2d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba2b6:	4601      	mov	r1, r0
            if (*p == value) {
   ba2b8:	681d      	ldr	r5, [r3, #0]
   ba2ba:	f851 6b04 	ldr.w	r6, [r1], #4
   ba2be:	42ae      	cmp	r6, r5
   ba2c0:	d107      	bne.n	ba2d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba2c2:	1a52      	subs	r2, r2, r1
   ba2c4:	f001 feba 	bl	bc03c <memmove>
    --size_;
   ba2c8:	6863      	ldr	r3, [r4, #4]
   ba2ca:	3b01      	subs	r3, #1
   ba2cc:	6063      	str	r3, [r4, #4]
    return true;
   ba2ce:	2001      	movs	r0, #1
}
   ba2d0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba2d2:	4608      	mov	r0, r1
   ba2d4:	e7ed      	b.n	ba2b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba2d6:	2000      	movs	r0, #0
   ba2d8:	e7fa      	b.n	ba2d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba2da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba2da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba2dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba2e0:	4604      	mov	r4, r0
   ba2e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba2e4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba2e6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba2e8:	f7ff fc6c 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba2ec:	a901      	add	r1, sp, #4
   ba2ee:	4620      	mov	r0, r4
   ba2f0:	f7ff ffd8 	bl	ba2a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba2f4:	b118      	cbz	r0, ba2fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba2f6:	6863      	ldr	r3, [r4, #4]
   ba2f8:	b90b      	cbnz	r3, ba2fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba2fa:	f7ff fddb 	bl	b9eb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba2fe:	a803      	add	r0, sp, #12
   ba300:	f7ff fec9 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba304:	b004      	add	sp, #16
   ba306:	bd10      	pop	{r4, pc}

000ba308 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba308:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba30a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba30e:	2318      	movs	r3, #24
   ba310:	4604      	mov	r4, r0
   ba312:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba316:	42ae      	cmp	r6, r5
   ba318:	d015      	beq.n	ba346 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba31a:	f105 0110 	add.w	r1, r5, #16
   ba31e:	4620      	mov	r0, r4
   ba320:	f7ff ffc0 	bl	ba2a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba324:	6863      	ldr	r3, [r4, #4]
   ba326:	b90b      	cbnz	r3, ba32c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba328:	f7ff fdc4 	bl	b9eb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba32c:	69e0      	ldr	r0, [r4, #28]
   ba32e:	6929      	ldr	r1, [r5, #16]
   ba330:	6803      	ldr	r3, [r0, #0]
   ba332:	68db      	ldr	r3, [r3, #12]
   ba334:	4798      	blx	r3
        if (h.stream) {
   ba336:	6969      	ldr	r1, [r5, #20]
   ba338:	b119      	cbz	r1, ba342 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba33a:	6a20      	ldr	r0, [r4, #32]
   ba33c:	6803      	ldr	r3, [r0, #0]
   ba33e:	68db      	ldr	r3, [r3, #12]
   ba340:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba342:	3518      	adds	r5, #24
   ba344:	e7e7      	b.n	ba316 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba346:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba34a:	2618      	movs	r6, #24
   ba34c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba350:	42ae      	cmp	r6, r5
   ba352:	d004      	beq.n	ba35e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba354:	4628      	mov	r0, r5
   ba356:	f7fd fe5d 	bl	b8014 <_ZN6StringD1Ev>
   ba35a:	3518      	adds	r5, #24
   ba35c:	e7f8      	b.n	ba350 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba35e:	2300      	movs	r3, #0
   ba360:	6163      	str	r3, [r4, #20]
}
   ba362:	bd70      	pop	{r4, r5, r6, pc}

000ba364 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba364:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba366:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba368:	f7ff fda4 	bl	b9eb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba36c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba370:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba372:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba374:	f7ff fc26 	bl	b9bc4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba378:	4620      	mov	r0, r4
   ba37a:	f7ff ffc5 	bl	ba308 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba37e:	a801      	add	r0, sp, #4
   ba380:	f7ff fe89 	bl	ba096 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba384:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba386:	b108      	cbz	r0, ba38c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba388:	f7fd fa4a 	bl	b7820 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba38c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba390:	2618      	movs	r6, #24
   ba392:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba396:	42ae      	cmp	r6, r5
   ba398:	d004      	beq.n	ba3a4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba39a:	4628      	mov	r0, r5
   ba39c:	f7fd fe3a 	bl	b8014 <_ZN6StringD1Ev>
   ba3a0:	3518      	adds	r5, #24
   ba3a2:	e7f8      	b.n	ba396 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba3a4:	6920      	ldr	r0, [r4, #16]
   ba3a6:	f7fd fc9f 	bl	b7ce8 <free>
   ba3aa:	6820      	ldr	r0, [r4, #0]
   ba3ac:	f7fd fc9c 	bl	b7ce8 <free>
}
   ba3b0:	4620      	mov	r0, r4
   ba3b2:	b002      	add	sp, #8
   ba3b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba3b8 <__tcf_2>:
    static LogManager mgr;
   ba3b8:	4801      	ldr	r0, [pc, #4]	; (ba3c0 <__tcf_2+0x8>)
   ba3ba:	f7ff bfd3 	b.w	ba364 <_ZN5spark10LogManagerD1Ev>
   ba3be:	bf00      	nop
   ba3c0:	2003e6bc 	.word	0x2003e6bc

000ba3c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba3c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba3c8:	4604      	mov	r4, r0
   ba3ca:	460d      	mov	r5, r1
   ba3cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba3ce:	d915      	bls.n	ba3fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba3d0:	4290      	cmp	r0, r2
   ba3d2:	d214      	bcs.n	ba3fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba3d4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba3d8:	1a75      	subs	r5, r6, r1
   ba3da:	f1a1 0714 	sub.w	r7, r1, #20
   ba3de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba3e0:	42b7      	cmp	r7, r6
   ba3e2:	d01a      	beq.n	ba41a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba3e4:	b11c      	cbz	r4, ba3ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba3e6:	4631      	mov	r1, r6
   ba3e8:	4620      	mov	r0, r4
   ba3ea:	f7ff fc3f 	bl	b9c6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba3ee:	f106 0008 	add.w	r0, r6, #8
   ba3f2:	f7ff fdf9 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba3f6:	3e14      	subs	r6, #20
   ba3f8:	3c14      	subs	r4, #20
   ba3fa:	e7f1      	b.n	ba3e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba3fc:	d00d      	beq.n	ba41a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba3fe:	42b5      	cmp	r5, r6
   ba400:	d00b      	beq.n	ba41a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba402:	b11c      	cbz	r4, ba40c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba404:	4629      	mov	r1, r5
   ba406:	4620      	mov	r0, r4
   ba408:	f7ff fc30 	bl	b9c6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba40c:	f105 0008 	add.w	r0, r5, #8
   ba410:	f7ff fdea 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba414:	3514      	adds	r5, #20
   ba416:	3414      	adds	r4, #20
   ba418:	e7f1      	b.n	ba3fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba41c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba41c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba420:	4604      	mov	r4, r0
   ba422:	460d      	mov	r5, r1
   ba424:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba426:	d914      	bls.n	ba452 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba428:	4290      	cmp	r0, r2
   ba42a:	d213      	bcs.n	ba454 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba42c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba430:	1a75      	subs	r5, r6, r1
   ba432:	f1a1 0710 	sub.w	r7, r1, #16
   ba436:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba438:	42b7      	cmp	r7, r6
   ba43a:	d018      	beq.n	ba46e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba43c:	b11c      	cbz	r4, ba446 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba43e:	4631      	mov	r1, r6
   ba440:	4620      	mov	r0, r4
   ba442:	f7fd fe63 	bl	b810c <_ZN6StringC1EOS_>
                end->~T();
   ba446:	4630      	mov	r0, r6
   ba448:	f7fd fde4 	bl	b8014 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba44c:	3e10      	subs	r6, #16
   ba44e:	3c10      	subs	r4, #16
   ba450:	e7f2      	b.n	ba438 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba452:	d00c      	beq.n	ba46e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba454:	42b5      	cmp	r5, r6
   ba456:	d00a      	beq.n	ba46e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba458:	b11c      	cbz	r4, ba462 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba45a:	4629      	mov	r1, r5
   ba45c:	4620      	mov	r0, r4
   ba45e:	f7fd fe55 	bl	b810c <_ZN6StringC1EOS_>
                p->~T();
   ba462:	4628      	mov	r0, r5
   ba464:	f7fd fdd6 	bl	b8014 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba468:	3510      	adds	r5, #16
   ba46a:	3410      	adds	r4, #16
   ba46c:	e7f2      	b.n	ba454 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba470:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba472:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba474:	4605      	mov	r5, r0
        if (n > 0) {
   ba476:	dd11      	ble.n	ba49c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba478:	0130      	lsls	r0, r6, #4
   ba47a:	f7fd fc2d 	bl	b7cd8 <malloc>
            if (!d) {
   ba47e:	4604      	mov	r4, r0
   ba480:	b158      	cbz	r0, ba49a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba482:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba486:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba48a:	f7ff ffc7 	bl	ba41c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba48e:	6828      	ldr	r0, [r5, #0]
   ba490:	f7fd fc2a 	bl	b7ce8 <free>
        data_ = d;
   ba494:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba496:	60ae      	str	r6, [r5, #8]
        return true;
   ba498:	2001      	movs	r0, #1
    }
   ba49a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba49c:	2400      	movs	r4, #0
   ba49e:	e7f6      	b.n	ba48e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba4a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4a4:	4690      	mov	r8, r2
   ba4a6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba4a8:	2300      	movs	r3, #0
   ba4aa:	9103      	str	r1, [sp, #12]
    return size_;
   ba4ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba4b0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba4b2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba4b4:	4299      	cmp	r1, r3
        capacity_(0) {
   ba4b6:	e9c0 3300 	strd	r3, r3, [r0]
   ba4ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba4be:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba4c2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba4c6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba4c8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba4ca:	dc23      	bgt.n	ba514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba4cc:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba4d0:	2314      	movs	r3, #20
   ba4d2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba4d6:	42af      	cmp	r7, r5
   ba4d8:	d03b      	beq.n	ba552 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba4da:	4629      	mov	r1, r5
   ba4dc:	a80b      	add	r0, sp, #44	; 0x2c
   ba4de:	f7fd fe15 	bl	b810c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba4e2:	a90b      	add	r1, sp, #44	; 0x2c
   ba4e4:	a80f      	add	r0, sp, #60	; 0x3c
   ba4e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba4e8:	f7fd fe10 	bl	b810c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba4ec:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba4f0:	4299      	cmp	r1, r3
   ba4f2:	da1b      	bge.n	ba52c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba4f4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba4f8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba4fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba500:	4631      	mov	r1, r6
   ba502:	f106 0010 	add.w	r0, r6, #16
   ba506:	f7ff ff89 	bl	ba41c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba50a:	b9ee      	cbnz	r6, ba548 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba50e:	3301      	adds	r3, #1
   ba510:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba512:	e011      	b.n	ba538 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba514:	a808      	add	r0, sp, #32
   ba516:	f7ff ffab 	bl	ba470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba51a:	2800      	cmp	r0, #0
   ba51c:	d1d6      	bne.n	ba4cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba51e:	a808      	add	r0, sp, #32
   ba520:	f7fe f9a0 	bl	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba524:	4620      	mov	r0, r4
   ba526:	b015      	add	sp, #84	; 0x54
   ba528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba52c:	3101      	adds	r1, #1
   ba52e:	a808      	add	r0, sp, #32
   ba530:	f7ff ff9e 	bl	ba470 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba534:	2800      	cmp	r0, #0
   ba536:	d1dd      	bne.n	ba4f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba538:	a80f      	add	r0, sp, #60	; 0x3c
   ba53a:	f7fd fd6b 	bl	b8014 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba53e:	a80b      	add	r0, sp, #44	; 0x2c
   ba540:	f7fd fd68 	bl	b8014 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba544:	3514      	adds	r5, #20
   ba546:	e7c6      	b.n	ba4d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba548:	a90f      	add	r1, sp, #60	; 0x3c
   ba54a:	4630      	mov	r0, r6
   ba54c:	f7fd fdde 	bl	b810c <_ZN6StringC1EOS_>
   ba550:	e7dc      	b.n	ba50c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba552:	2600      	movs	r6, #0
   ba554:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba558:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba55a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba55e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba562:	429e      	cmp	r6, r3
   ba564:	da7c      	bge.n	ba660 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba566:	0133      	lsls	r3, r6, #4
   ba568:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba56a:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba56c:	b90b      	cbnz	r3, ba572 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba56e:	3601      	adds	r6, #1
   ba570:	e7f5      	b.n	ba55e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba572:	2300      	movs	r3, #0
   ba574:	9307      	str	r3, [sp, #28]
   ba576:	fb09 f306 	mul.w	r3, r9, r6
   ba57a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba57c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba57e:	a907      	add	r1, sp, #28
   ba580:	a806      	add	r0, sp, #24
   ba582:	f7ff faf8 	bl	b9b76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba586:	4682      	mov	sl, r0
   ba588:	2800      	cmp	r0, #0
   ba58a:	d0f0      	beq.n	ba56e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba58c:	f04f 0300 	mov.w	r3, #0
   ba590:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba594:	4601      	mov	r1, r0
   ba596:	9a07      	ldr	r2, [sp, #28]
   ba598:	f10d 0317 	add.w	r3, sp, #23
   ba59c:	4628      	mov	r0, r5
   ba59e:	f7ff fb79 	bl	b9c94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba5a2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba5a6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba5a8:	2f00      	cmp	r7, #0
   ba5aa:	d14a      	bne.n	ba642 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba5ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba5b0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba5b4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba5b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba5bc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba5c0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba5c4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba5c6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba5ca:	4293      	cmp	r3, r2
   ba5cc:	db17      	blt.n	ba5fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba5ce:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba5d2:	f1ba 0f00 	cmp.w	sl, #0
   ba5d6:	dd30      	ble.n	ba63a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba5d8:	fb09 f00a 	mul.w	r0, r9, sl
   ba5dc:	f7fd fb7c 	bl	b7cd8 <malloc>
            if (!d) {
   ba5e0:	4683      	mov	fp, r0
   ba5e2:	b360      	cbz	r0, ba63e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba5e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba5e8:	fb09 1202 	mla	r2, r9, r2, r1
   ba5ec:	f7ff feea 	bl	ba3c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba5f0:	6828      	ldr	r0, [r5, #0]
   ba5f2:	f7fd fb79 	bl	b7ce8 <free>
        data_ = d;
   ba5f6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba5fa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba5fe:	682b      	ldr	r3, [r5, #0]
   ba600:	9a01      	ldr	r2, [sp, #4]
   ba602:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba606:	686a      	ldr	r2, [r5, #4]
   ba608:	4651      	mov	r1, sl
   ba60a:	fb09 3202 	mla	r2, r9, r2, r3
   ba60e:	f10a 0014 	add.w	r0, sl, #20
   ba612:	f7ff fed7 	bl	ba3c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba616:	f1ba 0f00 	cmp.w	sl, #0
   ba61a:	d003      	beq.n	ba624 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba61c:	a90f      	add	r1, sp, #60	; 0x3c
   ba61e:	4650      	mov	r0, sl
   ba620:	f7ff fb24 	bl	b9c6c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba624:	686b      	ldr	r3, [r5, #4]
   ba626:	3301      	adds	r3, #1
   ba628:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba62a:	a811      	add	r0, sp, #68	; 0x44
   ba62c:	f7ff fcdc 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba630:	b13f      	cbz	r7, ba642 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba632:	a80b      	add	r0, sp, #44	; 0x2c
   ba634:	f7ff fcd8 	bl	b9fe8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba638:	e771      	b.n	ba51e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba63a:	46bb      	mov	fp, r7
   ba63c:	e7d8      	b.n	ba5f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba63e:	2701      	movs	r7, #1
   ba640:	e7f3      	b.n	ba62a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba642:	9b01      	ldr	r3, [sp, #4]
   ba644:	682d      	ldr	r5, [r5, #0]
   ba646:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba64a:	9b06      	ldr	r3, [sp, #24]
   ba64c:	781b      	ldrb	r3, [r3, #0]
   ba64e:	b92b      	cbnz	r3, ba65c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba650:	f8d8 3000 	ldr.w	r3, [r8]
   ba654:	9a02      	ldr	r2, [sp, #8]
   ba656:	4413      	add	r3, r2
   ba658:	7c1b      	ldrb	r3, [r3, #16]
   ba65a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba65c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba65e:	e78e      	b.n	ba57e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba660:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba662:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba664:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba666:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba668:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba66a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba66e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba670:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba672:	60a2      	str	r2, [r4, #8]
   ba674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba676:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba678:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba67a:	60e2      	str	r2, [r4, #12]
   ba67c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba67e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba680:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba682:	6122      	str	r2, [r4, #16]
   ba684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba686:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba688:	9b03      	ldr	r3, [sp, #12]
   ba68a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba68c:	6162      	str	r2, [r4, #20]
   ba68e:	7623      	strb	r3, [r4, #24]
   ba690:	e7cf      	b.n	ba632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba694 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba694:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba696:	4604      	mov	r4, r0
   ba698:	b087      	sub	sp, #28
   ba69a:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba69c:	4626      	mov	r6, r4
        stream_(&stream) {
   ba69e:	4619      	mov	r1, r3
   ba6a0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba6a2:	4617      	mov	r7, r2
        stream_(&stream) {
   ba6a4:	f7fa fbe1 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba6a8:	4b0b      	ldr	r3, [pc, #44]	; (ba6d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba6aa:	f846 3b04 	str.w	r3, [r6], #4
   ba6ae:	4669      	mov	r1, sp
   ba6b0:	a803      	add	r0, sp, #12
   ba6b2:	f7fa fbda 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba6b6:	aa03      	add	r2, sp, #12
   ba6b8:	4639      	mov	r1, r7
   ba6ba:	4630      	mov	r0, r6
   ba6bc:	f7ff fef0 	bl	ba4a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba6c0:	a803      	add	r0, sp, #12
   ba6c2:	f7fa fb87 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba6c6:	4668      	mov	r0, sp
   ba6c8:	f7fa fb84 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba6cc:	4b03      	ldr	r3, [pc, #12]	; (ba6dc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba6ce:	6023      	str	r3, [r4, #0]
}
   ba6d0:	4620      	mov	r0, r4
        stream_(&stream) {
   ba6d2:	6225      	str	r5, [r4, #32]
}
   ba6d4:	b007      	add	sp, #28
   ba6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba6d8:	000be228 	.word	0x000be228
   ba6dc:	000bf3c0 	.word	0x000bf3c0

000ba6e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba6e2:	460f      	mov	r7, r1
   ba6e4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba6e6:	491d      	ldr	r1, [pc, #116]	; (ba75c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba6e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba6ea:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba6ec:	4616      	mov	r6, r2
   ba6ee:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba6f0:	f7fa f97a 	bl	b49e8 <strcmp>
   ba6f4:	b9c0      	cbnz	r0, ba728 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba6f6:	b1a4      	cbz	r4, ba722 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba6f8:	4629      	mov	r1, r5
   ba6fa:	a801      	add	r0, sp, #4
   ba6fc:	f7ff fcbc 	bl	ba078 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba700:	4917      	ldr	r1, [pc, #92]	; (ba760 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba702:	2024      	movs	r0, #36	; 0x24
   ba704:	f001 fb48 	bl	bbd98 <_ZnwjRKSt9nothrow_t>
   ba708:	4605      	mov	r5, r0
   ba70a:	b130      	cbz	r0, ba71a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba70c:	ab01      	add	r3, sp, #4
   ba70e:	4632      	mov	r2, r6
   ba710:	4621      	mov	r1, r4
   ba712:	f7ff ffbf 	bl	ba694 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba716:	4b13      	ldr	r3, [pc, #76]	; (ba764 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba718:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba71a:	a801      	add	r0, sp, #4
   ba71c:	f7fa fb5a 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba720:	462c      	mov	r4, r5
}
   ba722:	4620      	mov	r0, r4
   ba724:	b005      	add	sp, #20
   ba726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba728:	490f      	ldr	r1, [pc, #60]	; (ba768 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba72a:	4638      	mov	r0, r7
   ba72c:	f7fa f95c 	bl	b49e8 <strcmp>
   ba730:	b990      	cbnz	r0, ba758 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba732:	2c00      	cmp	r4, #0
   ba734:	d0f5      	beq.n	ba722 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba736:	4629      	mov	r1, r5
   ba738:	a801      	add	r0, sp, #4
   ba73a:	f7ff fc9d 	bl	ba078 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba73e:	4908      	ldr	r1, [pc, #32]	; (ba760 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba740:	2024      	movs	r0, #36	; 0x24
   ba742:	f001 fb29 	bl	bbd98 <_ZnwjRKSt9nothrow_t>
   ba746:	4605      	mov	r5, r0
   ba748:	2800      	cmp	r0, #0
   ba74a:	d0e6      	beq.n	ba71a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba74c:	ab01      	add	r3, sp, #4
   ba74e:	4632      	mov	r2, r6
   ba750:	4621      	mov	r1, r4
   ba752:	f7ff ff9f 	bl	ba694 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba756:	e7e0      	b.n	ba71a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba758:	2400      	movs	r4, #0
   ba75a:	e7e2      	b.n	ba722 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba75c:	000bf348 	.word	0x000bf348
   ba760:	000bf5d1 	.word	0x000bf5d1
   ba764:	000bf3d8 	.word	0x000bf3d8
   ba768:	000bf34c 	.word	0x000bf34c

000ba76c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba76c:	4b01      	ldr	r3, [pc, #4]	; (ba774 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba76e:	4a02      	ldr	r2, [pc, #8]	; (ba778 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba770:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba772:	4770      	bx	lr
   ba774:	2003e6b8 	.word	0x2003e6b8
   ba778:	000bf35d 	.word	0x000bf35d

000ba77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba780:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba782:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba786:	4604      	mov	r4, r0
   ba788:	460e      	mov	r6, r1
   ba78a:	4617      	mov	r7, r2
   ba78c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba78e:	f000 fb53 	bl	bae38 <_Z16_fetch_usbserialv>
   ba792:	4581      	cmp	r9, r0
   ba794:	d04c      	beq.n	ba830 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba796:	792b      	ldrb	r3, [r5, #4]
   ba798:	0719      	lsls	r1, r3, #28
   ba79a:	d504      	bpl.n	ba7a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba79c:	696a      	ldr	r2, [r5, #20]
   ba79e:	4954      	ldr	r1, [pc, #336]	; (ba8f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba7a0:	4620      	mov	r0, r4
   ba7a2:	f7ff fadc 	bl	b9d5e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba7a6:	f1b8 0f00 	cmp.w	r8, #0
   ba7aa:	d00d      	beq.n	ba7c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba7ac:	215b      	movs	r1, #91	; 0x5b
   ba7ae:	4620      	mov	r0, r4
   ba7b0:	f7ff fa50 	bl	b9c54 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba7b4:	4641      	mov	r1, r8
   ba7b6:	4620      	mov	r0, r4
   ba7b8:	f7ff fa3d 	bl	b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba7bc:	6823      	ldr	r3, [r4, #0]
   ba7be:	494d      	ldr	r1, [pc, #308]	; (ba8f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba7c0:	68db      	ldr	r3, [r3, #12]
   ba7c2:	2202      	movs	r2, #2
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	4798      	blx	r3
    if (attr.has_file) {
   ba7c8:	792b      	ldrb	r3, [r5, #4]
   ba7ca:	07da      	lsls	r2, r3, #31
   ba7cc:	d523      	bpl.n	ba816 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba7ce:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba7d2:	212f      	movs	r1, #47	; 0x2f
   ba7d4:	4640      	mov	r0, r8
   ba7d6:	f001 fcd3 	bl	bc180 <strrchr>
    if (s1) {
   ba7da:	b108      	cbz	r0, ba7e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba7dc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba7e0:	4641      	mov	r1, r8
   ba7e2:	4620      	mov	r0, r4
   ba7e4:	f7ff fa27 	bl	b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba7e8:	792b      	ldrb	r3, [r5, #4]
   ba7ea:	079b      	lsls	r3, r3, #30
   ba7ec:	d508      	bpl.n	ba800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba7ee:	213a      	movs	r1, #58	; 0x3a
   ba7f0:	4620      	mov	r0, r4
   ba7f2:	f7ff fa2f 	bl	b9c54 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba7f6:	68ea      	ldr	r2, [r5, #12]
   ba7f8:	493f      	ldr	r1, [pc, #252]	; (ba8f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba7fa:	4620      	mov	r0, r4
   ba7fc:	f7ff faaf 	bl	b9d5e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba800:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba802:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba804:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba808:	68db      	ldr	r3, [r3, #12]
   ba80a:	bf14      	ite	ne
   ba80c:	493b      	ldrne	r1, [pc, #236]	; (ba8fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba80e:	493c      	ldreq	r1, [pc, #240]	; (ba900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba810:	2202      	movs	r2, #2
            write(": ", 2);
   ba812:	4620      	mov	r0, r4
   ba814:	4798      	blx	r3
    if (attr.has_function) {
   ba816:	792b      	ldrb	r3, [r5, #4]
   ba818:	0758      	lsls	r0, r3, #29
   ba81a:	d51d      	bpl.n	ba858 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba81c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba81e:	460b      	mov	r3, r1
   ba820:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba822:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba826:	b160      	cbz	r0, ba842 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba828:	2820      	cmp	r0, #32
   ba82a:	d108      	bne.n	ba83e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba82c:	4619      	mov	r1, r3
   ba82e:	e7f7      	b.n	ba820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba830:	4834      	ldr	r0, [pc, #208]	; (ba904 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba832:	f000 ff26 	bl	bb682 <_ZN5spark12NetworkClass9listeningEv>
   ba836:	2800      	cmp	r0, #0
   ba838:	d0ad      	beq.n	ba796 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba83e:	2828      	cmp	r0, #40	; 0x28
   ba840:	d1ee      	bne.n	ba820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba842:	6823      	ldr	r3, [r4, #0]
   ba844:	1a52      	subs	r2, r2, r1
   ba846:	68db      	ldr	r3, [r3, #12]
   ba848:	4620      	mov	r0, r4
   ba84a:	4798      	blx	r3
        write("(): ", 4);
   ba84c:	6823      	ldr	r3, [r4, #0]
   ba84e:	492e      	ldr	r1, [pc, #184]	; (ba908 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba850:	68db      	ldr	r3, [r3, #12]
   ba852:	2204      	movs	r2, #4
   ba854:	4620      	mov	r0, r4
   ba856:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba858:	2100      	movs	r1, #0
   ba85a:	4638      	mov	r0, r7
   ba85c:	f7fd f988 	bl	b7b70 <log_level_name>
   ba860:	4601      	mov	r1, r0
    write(s);
   ba862:	4620      	mov	r0, r4
   ba864:	f7ff f9e7 	bl	b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba868:	6823      	ldr	r3, [r4, #0]
   ba86a:	4925      	ldr	r1, [pc, #148]	; (ba900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba86c:	68db      	ldr	r3, [r3, #12]
   ba86e:	2202      	movs	r2, #2
   ba870:	4620      	mov	r0, r4
   ba872:	4798      	blx	r3
    if (msg) {
   ba874:	b11e      	cbz	r6, ba87e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba876:	4631      	mov	r1, r6
   ba878:	4620      	mov	r0, r4
   ba87a:	f7ff f9dc 	bl	b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba87e:	792b      	ldrb	r3, [r5, #4]
   ba880:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba884:	d02c      	beq.n	ba8e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba886:	6823      	ldr	r3, [r4, #0]
   ba888:	4920      	ldr	r1, [pc, #128]	; (ba90c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba88a:	68db      	ldr	r3, [r3, #12]
   ba88c:	2202      	movs	r2, #2
   ba88e:	4620      	mov	r0, r4
   ba890:	4798      	blx	r3
        if (attr.has_code) {
   ba892:	792b      	ldrb	r3, [r5, #4]
   ba894:	06d9      	lsls	r1, r3, #27
   ba896:	d50a      	bpl.n	ba8ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba898:	6823      	ldr	r3, [r4, #0]
   ba89a:	491d      	ldr	r1, [pc, #116]	; (ba910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba89c:	68db      	ldr	r3, [r3, #12]
   ba89e:	2207      	movs	r2, #7
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba8a4:	69aa      	ldr	r2, [r5, #24]
   ba8a6:	491b      	ldr	r1, [pc, #108]	; (ba914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba8a8:	4620      	mov	r0, r4
   ba8aa:	f7ff fa58 	bl	b9d5e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba8ae:	792b      	ldrb	r3, [r5, #4]
   ba8b0:	069a      	lsls	r2, r3, #26
   ba8b2:	d511      	bpl.n	ba8d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba8b4:	06db      	lsls	r3, r3, #27
   ba8b6:	d505      	bpl.n	ba8c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba8b8:	6823      	ldr	r3, [r4, #0]
   ba8ba:	4910      	ldr	r1, [pc, #64]	; (ba8fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba8bc:	68db      	ldr	r3, [r3, #12]
   ba8be:	2202      	movs	r2, #2
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	4798      	blx	r3
            write("details = ", 10);
   ba8c4:	6823      	ldr	r3, [r4, #0]
   ba8c6:	4914      	ldr	r1, [pc, #80]	; (ba918 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba8c8:	68db      	ldr	r3, [r3, #12]
   ba8ca:	4620      	mov	r0, r4
   ba8cc:	220a      	movs	r2, #10
   ba8ce:	4798      	blx	r3
            write(attr.details);
   ba8d0:	69e9      	ldr	r1, [r5, #28]
   ba8d2:	4620      	mov	r0, r4
   ba8d4:	f7ff f9af 	bl	b9c36 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba8d8:	215d      	movs	r1, #93	; 0x5d
   ba8da:	4620      	mov	r0, r4
   ba8dc:	f7ff f9ba 	bl	b9c54 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba8e0:	6823      	ldr	r3, [r4, #0]
   ba8e2:	490e      	ldr	r1, [pc, #56]	; (ba91c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba8e4:	68db      	ldr	r3, [r3, #12]
   ba8e6:	4620      	mov	r0, r4
   ba8e8:	2202      	movs	r2, #2
}
   ba8ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba8ee:	4718      	bx	r3
   ba8f0:	000bf361 	.word	0x000bf361
   ba8f4:	000bf368 	.word	0x000bf368
   ba8f8:	000bf4e4 	.word	0x000bf4e4
   ba8fc:	000bf36b 	.word	0x000bf36b
   ba900:	000be178 	.word	0x000be178
   ba904:	2003e720 	.word	0x2003e720
   ba908:	000bf36e 	.word	0x000bf36e
   ba90c:	000bf373 	.word	0x000bf373
   ba910:	000bf376 	.word	0x000bf376
   ba914:	000be147 	.word	0x000be147
   ba918:	000bf37e 	.word	0x000bf37e
   ba91c:	000bf389 	.word	0x000bf389

000ba920 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   ba920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba924:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   ba926:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   ba928:	460d      	mov	r5, r1
   ba92a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   ba92c:	f000 fa84 	bl	bae38 <_Z16_fetch_usbserialv>
   ba930:	4287      	cmp	r7, r0
   ba932:	d007      	beq.n	ba944 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   ba934:	6a20      	ldr	r0, [r4, #32]
   ba936:	6803      	ldr	r3, [r0, #0]
   ba938:	4632      	mov	r2, r6
   ba93a:	4629      	mov	r1, r5
   ba93c:	68db      	ldr	r3, [r3, #12]
}
   ba93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   ba942:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   ba944:	4803      	ldr	r0, [pc, #12]	; (ba954 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   ba946:	f000 fe9c 	bl	bb682 <_ZN5spark12NetworkClass9listeningEv>
   ba94a:	2800      	cmp	r0, #0
   ba94c:	d0f2      	beq.n	ba934 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   ba94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba952:	bf00      	nop
   ba954:	2003e720 	.word	0x2003e720

000ba958 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba95c:	b085      	sub	sp, #20
    return stream_;
   ba95e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba962:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba964:	4605      	mov	r5, r0
   ba966:	460f      	mov	r7, r1
   ba968:	4690      	mov	r8, r2
   ba96a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba96c:	f000 fa64 	bl	bae38 <_Z16_fetch_usbserialv>
   ba970:	4581      	cmp	r9, r0
   ba972:	d105      	bne.n	ba980 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba974:	4849      	ldr	r0, [pc, #292]	; (baa9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba976:	f000 fe84 	bl	bb682 <_ZN5spark12NetworkClass9listeningEv>
   ba97a:	2800      	cmp	r0, #0
   ba97c:	f040 808a 	bne.w	baa94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba980:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba982:	4a47      	ldr	r2, [pc, #284]	; (baaa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba984:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba986:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba98a:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba98c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba98e:	f88d 9008 	strb.w	r9, [sp, #8]
   ba992:	f001 f81a 	bl	bb9ca <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba996:	4649      	mov	r1, r9
   ba998:	4640      	mov	r0, r8
   ba99a:	f7fd f8e9 	bl	b7b70 <log_level_name>
    json.name("l", 1).value(s);
   ba99e:	4941      	ldr	r1, [pc, #260]	; (baaa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba9a0:	4680      	mov	r8, r0
   ba9a2:	2201      	movs	r2, #1
   ba9a4:	a801      	add	r0, sp, #4
   ba9a6:	f001 f89f 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9aa:	4641      	mov	r1, r8
   ba9ac:	f7ff f935 	bl	b9c1a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba9b0:	b13f      	cbz	r7, ba9c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba9b2:	493d      	ldr	r1, [pc, #244]	; (baaa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba9b4:	2201      	movs	r2, #1
   ba9b6:	a801      	add	r0, sp, #4
   ba9b8:	f001 f896 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9bc:	4639      	mov	r1, r7
   ba9be:	f7ff f92c 	bl	b9c1a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba9c2:	b13e      	cbz	r6, ba9d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba9c4:	4939      	ldr	r1, [pc, #228]	; (baaac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba9c6:	2201      	movs	r2, #1
   ba9c8:	a801      	add	r0, sp, #4
   ba9ca:	f001 f88d 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9ce:	4631      	mov	r1, r6
   ba9d0:	f7ff f923 	bl	b9c1a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba9d4:	7923      	ldrb	r3, [r4, #4]
   ba9d6:	07df      	lsls	r7, r3, #31
   ba9d8:	d50e      	bpl.n	ba9f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba9da:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba9dc:	212f      	movs	r1, #47	; 0x2f
   ba9de:	4630      	mov	r0, r6
   ba9e0:	f001 fbce 	bl	bc180 <strrchr>
    if (s1) {
   ba9e4:	b100      	cbz	r0, ba9e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba9e6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba9e8:	4931      	ldr	r1, [pc, #196]	; (baab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba9ea:	2201      	movs	r2, #1
   ba9ec:	a801      	add	r0, sp, #4
   ba9ee:	f001 f87b 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9f2:	4631      	mov	r1, r6
   ba9f4:	f7ff f911 	bl	b9c1a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba9f8:	7923      	ldrb	r3, [r4, #4]
   ba9fa:	079e      	lsls	r6, r3, #30
   ba9fc:	d507      	bpl.n	baa0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba9fe:	492d      	ldr	r1, [pc, #180]	; (baab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   baa00:	2202      	movs	r2, #2
   baa02:	a801      	add	r0, sp, #4
   baa04:	f001 f870 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   baa08:	68e1      	ldr	r1, [r4, #12]
   baa0a:	f000 ffeb 	bl	bb9e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   baa0e:	7923      	ldrb	r3, [r4, #4]
   baa10:	0758      	lsls	r0, r3, #29
   baa12:	d514      	bpl.n	baa3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   baa14:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   baa16:	4633      	mov	r3, r6
   baa18:	461f      	mov	r7, r3
    for (; *s; ++s) {
   baa1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa1e:	b12a      	cbz	r2, baa2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   baa20:	2a20      	cmp	r2, #32
   baa22:	d101      	bne.n	baa28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   baa24:	461e      	mov	r6, r3
   baa26:	e7f7      	b.n	baa18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   baa28:	2a28      	cmp	r2, #40	; 0x28
   baa2a:	d1f5      	bne.n	baa18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   baa2c:	4922      	ldr	r1, [pc, #136]	; (baab8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   baa2e:	2202      	movs	r2, #2
   baa30:	a801      	add	r0, sp, #4
   baa32:	f001 f859 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   baa36:	1bba      	subs	r2, r7, r6
   baa38:	4631      	mov	r1, r6
   baa3a:	f001 f865 	bl	bbb08 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   baa3e:	7923      	ldrb	r3, [r4, #4]
   baa40:	0719      	lsls	r1, r3, #28
   baa42:	d507      	bpl.n	baa54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   baa44:	491d      	ldr	r1, [pc, #116]	; (baabc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   baa46:	2201      	movs	r2, #1
   baa48:	a801      	add	r0, sp, #4
   baa4a:	f001 f84d 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   baa4e:	6961      	ldr	r1, [r4, #20]
   baa50:	f000 ffda 	bl	bba08 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   baa54:	7923      	ldrb	r3, [r4, #4]
   baa56:	06da      	lsls	r2, r3, #27
   baa58:	d508      	bpl.n	baa6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   baa5a:	2204      	movs	r2, #4
   baa5c:	4918      	ldr	r1, [pc, #96]	; (baac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   baa5e:	eb0d 0002 	add.w	r0, sp, r2
   baa62:	f001 f841 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   baa66:	69a1      	ldr	r1, [r4, #24]
   baa68:	f000 ffbc 	bl	bb9e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   baa6c:	7923      	ldrb	r3, [r4, #4]
   baa6e:	069b      	lsls	r3, r3, #26
   baa70:	d507      	bpl.n	baa82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   baa72:	4914      	ldr	r1, [pc, #80]	; (baac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   baa74:	2206      	movs	r2, #6
   baa76:	a801      	add	r0, sp, #4
   baa78:	f001 f836 	bl	bbae8 <_ZN5spark10JSONWriter4nameEPKcj>
   baa7c:	69e1      	ldr	r1, [r4, #28]
   baa7e:	f7ff f8cc 	bl	b9c1a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   baa82:	a801      	add	r0, sp, #4
   baa84:	f000 ff8b 	bl	bb99e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   baa88:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   baa8a:	490f      	ldr	r1, [pc, #60]	; (baac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   baa8c:	6803      	ldr	r3, [r0, #0]
   baa8e:	2202      	movs	r2, #2
   baa90:	68db      	ldr	r3, [r3, #12]
   baa92:	4798      	blx	r3
}
   baa94:	b005      	add	sp, #20
   baa96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baa9a:	bf00      	nop
   baa9c:	2003e720 	.word	0x2003e720
   baaa0:	000bf3a8 	.word	0x000bf3a8
   baaa4:	000bf33e 	.word	0x000bf33e
   baaa8:	000be1d9 	.word	0x000be1d9
   baaac:	000bf9e0 	.word	0x000bf9e0
   baab0:	000bf75a 	.word	0x000bf75a
   baab4:	000bf38c 	.word	0x000bf38c
   baab8:	000bf38f 	.word	0x000bf38f
   baabc:	000be153 	.word	0x000be153
   baac0:	000bf392 	.word	0x000bf392
   baac4:	000bf397 	.word	0x000bf397
   baac8:	000bf389 	.word	0x000bf389

000baacc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baacc:	4b02      	ldr	r3, [pc, #8]	; (baad8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baace:	681a      	ldr	r2, [r3, #0]
   baad0:	4b02      	ldr	r3, [pc, #8]	; (baadc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baad2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baad4:	4770      	bx	lr
   baad6:	bf00      	nop
   baad8:	2003e2f4 	.word	0x2003e2f4
   baadc:	2003e6e4 	.word	0x2003e6e4

000baae0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   baae0:	2100      	movs	r1, #0
   baae2:	f7fd b85d 	b.w	b7ba0 <system_delay_ms>
	...

000baae8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   baae8:	b510      	push	{r4, lr}
   baaea:	4b04      	ldr	r3, [pc, #16]	; (baafc <_ZN9TCPClientD1Ev+0x14>)
   baaec:	6003      	str	r3, [r0, #0]
   baaee:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   baaf0:	6980      	ldr	r0, [r0, #24]
   baaf2:	b108      	cbz	r0, baaf8 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   baaf4:	f7fd fc19 	bl	b832a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   baaf8:	4620      	mov	r0, r4
   baafa:	bd10      	pop	{r4, pc}
   baafc:	000bf50c 	.word	0x000bf50c

000bab00 <_ZN9TCPClientD0Ev>:
   bab00:	b510      	push	{r4, lr}
   bab02:	4604      	mov	r4, r0
   bab04:	f7ff fff0 	bl	baae8 <_ZN9TCPClientD1Ev>
   bab08:	4620      	mov	r0, r4
   bab0a:	211c      	movs	r1, #28
   bab0c:	f7f9 ffd7 	bl	b4abe <_ZdlPvj>
   bab10:	4620      	mov	r0, r4
   bab12:	bd10      	pop	{r4, pc}

000bab14 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bab14:	4b01      	ldr	r3, [pc, #4]	; (bab1c <_GLOBAL__sub_I_RGB+0x8>)
   bab16:	2200      	movs	r2, #0
   bab18:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bab1a:	4770      	bx	lr
   bab1c:	2003e6e8 	.word	0x2003e6e8

000bab20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bab20:	4b01      	ldr	r3, [pc, #4]	; (bab28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bab22:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bab24:	4770      	bx	lr
   bab26:	bf00      	nop
   bab28:	2003e2f8 	.word	0x2003e2f8

000bab2c <serialEventRun>:
{
   bab2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bab2e:	4b0b      	ldr	r3, [pc, #44]	; (bab5c <serialEventRun+0x30>)
   bab30:	b143      	cbz	r3, bab44 <serialEventRun+0x18>
   bab32:	f000 f981 	bl	bae38 <_Z16_fetch_usbserialv>
   bab36:	6803      	ldr	r3, [r0, #0]
   bab38:	691b      	ldr	r3, [r3, #16]
   bab3a:	4798      	blx	r3
   bab3c:	2800      	cmp	r0, #0
   bab3e:	dd01      	ble.n	bab44 <serialEventRun+0x18>
        serialEvent();
   bab40:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bab44:	4b06      	ldr	r3, [pc, #24]	; (bab60 <serialEventRun+0x34>)
   bab46:	b143      	cbz	r3, bab5a <serialEventRun+0x2e>
   bab48:	f001 f8c2 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
   bab4c:	6803      	ldr	r3, [r0, #0]
   bab4e:	691b      	ldr	r3, [r3, #16]
   bab50:	4798      	blx	r3
   bab52:	2800      	cmp	r0, #0
   bab54:	dd01      	ble.n	bab5a <serialEventRun+0x2e>
        serialEvent1();
   bab56:	f3af 8000 	nop.w
}
   bab5a:	bd08      	pop	{r3, pc}
	...

000bab64 <_post_loop>:
{
   bab64:	b508      	push	{r3, lr}
	serialEventRun();
   bab66:	f7ff ffe1 	bl	bab2c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bab6a:	f7fc fdeb 	bl	b7744 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bab6e:	4b01      	ldr	r3, [pc, #4]	; (bab74 <_post_loop+0x10>)
   bab70:	6018      	str	r0, [r3, #0]
}
   bab72:	bd08      	pop	{r3, pc}
   bab74:	2003e740 	.word	0x2003e740

000bab78 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab78:	4805      	ldr	r0, [pc, #20]	; (bab90 <_Z33system_initialize_user_backup_ramv+0x18>)
   bab7a:	4a06      	ldr	r2, [pc, #24]	; (bab94 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bab7c:	4906      	ldr	r1, [pc, #24]	; (bab98 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bab7e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab80:	1a12      	subs	r2, r2, r0
   bab82:	f001 fa4d 	bl	bc020 <memcpy>
    __backup_sram_signature = signature;
   bab86:	4b05      	ldr	r3, [pc, #20]	; (bab9c <_Z33system_initialize_user_backup_ramv+0x24>)
   bab88:	4a05      	ldr	r2, [pc, #20]	; (baba0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bab8a:	601a      	str	r2, [r3, #0]
}
   bab8c:	bd08      	pop	{r3, pc}
   bab8e:	bf00      	nop
   bab90:	2003f400 	.word	0x2003f400
   bab94:	2003f404 	.word	0x2003f404
   bab98:	000bfd10 	.word	0x000bfd10
   bab9c:	2003f400 	.word	0x2003f400
   baba0:	9a271c1e 	.word	0x9a271c1e

000baba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   baba4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   baba6:	2300      	movs	r3, #0
   baba8:	9300      	str	r3, [sp, #0]
   babaa:	461a      	mov	r2, r3
   babac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   babb0:	f7fd f810 	bl	b7bd4 <system_ctrl_set_result>
}
   babb4:	b003      	add	sp, #12
   babb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000babbc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   babbc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   babbe:	8843      	ldrh	r3, [r0, #2]
   babc0:	2b0a      	cmp	r3, #10
   babc2:	d008      	beq.n	babd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   babc4:	2b50      	cmp	r3, #80	; 0x50
   babc6:	d10b      	bne.n	babe0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   babc8:	4b09      	ldr	r3, [pc, #36]	; (babf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   babca:	681b      	ldr	r3, [r3, #0]
   babcc:	b14b      	cbz	r3, babe2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   babce:	b003      	add	sp, #12
   babd0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   babd4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   babd6:	f7ff ffe5 	bl	baba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   babda:	b003      	add	sp, #12
   babdc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   babe0:	2300      	movs	r3, #0
   babe2:	9300      	str	r3, [sp, #0]
   babe4:	461a      	mov	r2, r3
   babe6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   babea:	f7fc fff3 	bl	b7bd4 <system_ctrl_set_result>
}
   babee:	e7f4      	b.n	babda <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   babf0:	2003e6fc 	.word	0x2003e6fc

000babf4 <module_user_init_hook>:
{
   babf4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   babf6:	4812      	ldr	r0, [pc, #72]	; (bac40 <module_user_init_hook+0x4c>)
   babf8:	2100      	movs	r1, #0
   babfa:	f7fd f8b5 	bl	b7d68 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   babfe:	4b11      	ldr	r3, [pc, #68]	; (bac44 <module_user_init_hook+0x50>)
   bac00:	681a      	ldr	r2, [r3, #0]
   bac02:	4b11      	ldr	r3, [pc, #68]	; (bac48 <module_user_init_hook+0x54>)
   bac04:	429a      	cmp	r2, r3
   bac06:	4b11      	ldr	r3, [pc, #68]	; (bac4c <module_user_init_hook+0x58>)
   bac08:	bf0c      	ite	eq
   bac0a:	2201      	moveq	r2, #1
   bac0c:	2200      	movne	r2, #0
   bac0e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bac10:	d001      	beq.n	bac16 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bac12:	f7ff ffb1 	bl	bab78 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bac16:	f7fc fd85 	bl	b7724 <HAL_RNG_GetRandomNumber>
   bac1a:	4604      	mov	r4, r0
    srand(seed);
   bac1c:	f001 fa30 	bl	bc080 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bac20:	4b0b      	ldr	r3, [pc, #44]	; (bac50 <module_user_init_hook+0x5c>)
   bac22:	b113      	cbz	r3, bac2a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bac24:	4620      	mov	r0, r4
   bac26:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bac2a:	2100      	movs	r1, #0
   bac2c:	4808      	ldr	r0, [pc, #32]	; (bac50 <module_user_init_hook+0x5c>)
   bac2e:	f7fd f84b 	bl	b7cc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bac32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bac36:	4807      	ldr	r0, [pc, #28]	; (bac54 <module_user_init_hook+0x60>)
   bac38:	2100      	movs	r1, #0
   bac3a:	f7fc bfc1 	b.w	b7bc0 <system_ctrl_set_app_request_handler>
   bac3e:	bf00      	nop
   bac40:	000bab21 	.word	0x000bab21
   bac44:	2003f400 	.word	0x2003f400
   bac48:	9a271c1e 	.word	0x9a271c1e
   bac4c:	2003e6f8 	.word	0x2003e6f8
   bac50:	00000000 	.word	0x00000000
   bac54:	000babbd 	.word	0x000babbd

000bac58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bac58:	4770      	bx	lr

000bac5a <_ZN9IPAddressD0Ev>:
   bac5a:	b510      	push	{r4, lr}
   bac5c:	2118      	movs	r1, #24
   bac5e:	4604      	mov	r4, r0
   bac60:	f7f9 ff2d 	bl	b4abe <_ZdlPvj>
   bac64:	4620      	mov	r0, r4
   bac66:	bd10      	pop	{r4, pc}

000bac68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bac68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bac6a:	7d03      	ldrb	r3, [r0, #20]
   bac6c:	2b06      	cmp	r3, #6
{
   bac6e:	b08d      	sub	sp, #52	; 0x34
   bac70:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac72:	f100 0704 	add.w	r7, r0, #4
   bac76:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bac7a:	d012      	beq.n	baca2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bac7c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bac80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bac84:	220a      	movs	r2, #10
   bac86:	4630      	mov	r0, r6
   bac88:	f7fe feed 	bl	b9a66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bac8c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bac8e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bac90:	d019      	beq.n	bacc6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bac92:	2c00      	cmp	r4, #0
   bac94:	d0f4      	beq.n	bac80 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bac96:	212e      	movs	r1, #46	; 0x2e
   bac98:	4630      	mov	r0, r6
   bac9a:	f7fe fecb 	bl	b9a34 <_ZN5Print5printEc>
   bac9e:	4404      	add	r4, r0
   baca0:	e7ee      	b.n	bac80 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baca2:	232f      	movs	r3, #47	; 0x2f
   baca4:	466a      	mov	r2, sp
   baca6:	4639      	mov	r1, r7
   baca8:	200a      	movs	r0, #10
		buf[0] = 0;
   bacaa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bacae:	f7fc fdcf 	bl	b7850 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bacb2:	4668      	mov	r0, sp
   bacb4:	f7f9 fea2 	bl	b49fc <strlen>
   bacb8:	6833      	ldr	r3, [r6, #0]
   bacba:	4602      	mov	r2, r0
   bacbc:	68db      	ldr	r3, [r3, #12]
   bacbe:	4669      	mov	r1, sp
   bacc0:	4630      	mov	r0, r6
   bacc2:	4798      	blx	r3
   bacc4:	4604      	mov	r4, r0
    }
    return n;
}
   bacc6:	4620      	mov	r0, r4
   bacc8:	b00d      	add	sp, #52	; 0x34
   bacca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baccc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   baccc:	b510      	push	{r4, lr}
   bacce:	4b05      	ldr	r3, [pc, #20]	; (bace4 <_ZN9IPAddressC1Ev+0x18>)
   bacd0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bacd2:	2211      	movs	r2, #17
   bacd4:	f840 3b04 	str.w	r3, [r0], #4
   bacd8:	2100      	movs	r1, #0
   bacda:	f001 f9c9 	bl	bc070 <memset>
}
   bacde:	4620      	mov	r0, r4
   bace0:	bd10      	pop	{r4, pc}
   bace2:	bf00      	nop
   bace4:	000bf43c 	.word	0x000bf43c

000bace8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bace8:	4603      	mov	r3, r0
   bacea:	4a07      	ldr	r2, [pc, #28]	; (bad08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bacec:	b510      	push	{r4, lr}
   bacee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bacf2:	f101 0210 	add.w	r2, r1, #16
   bacf6:	f851 4b04 	ldr.w	r4, [r1], #4
   bacfa:	f843 4b04 	str.w	r4, [r3], #4
   bacfe:	4291      	cmp	r1, r2
   bad00:	d1f9      	bne.n	bacf6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bad02:	780a      	ldrb	r2, [r1, #0]
   bad04:	701a      	strb	r2, [r3, #0]
}
   bad06:	bd10      	pop	{r4, pc}
   bad08:	000bf43c 	.word	0x000bf43c

000bad0c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   bad0c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   bad0e:	2b04      	cmp	r3, #4
   bad10:	d104      	bne.n	bad1c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   bad12:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad14:	3800      	subs	r0, #0
   bad16:	bf18      	it	ne
   bad18:	2001      	movne	r0, #1
   bad1a:	4770      	bx	lr
    } else if (version() == 6) {
   bad1c:	2b06      	cmp	r3, #6
   bad1e:	d107      	bne.n	bad30 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad20:	6843      	ldr	r3, [r0, #4]
   bad22:	b93b      	cbnz	r3, bad34 <_ZNK9IPAddresscvbEv+0x28>
   bad24:	6883      	ldr	r3, [r0, #8]
   bad26:	b92b      	cbnz	r3, bad34 <_ZNK9IPAddresscvbEv+0x28>
   bad28:	68c3      	ldr	r3, [r0, #12]
   bad2a:	b91b      	cbnz	r3, bad34 <_ZNK9IPAddresscvbEv+0x28>
   bad2c:	6900      	ldr	r0, [r0, #16]
   bad2e:	e7f1      	b.n	bad14 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   bad30:	2000      	movs	r0, #0
   bad32:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad34:	2001      	movs	r0, #1
}
   bad36:	4770      	bx	lr

000bad38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bad38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bad3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bad3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bad42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bad46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bad4a:	2304      	movs	r3, #4
   bad4c:	6041      	str	r1, [r0, #4]
   bad4e:	7503      	strb	r3, [r0, #20]
}
   bad50:	bd10      	pop	{r4, pc}
	...

000bad54 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bad54:	b507      	push	{r0, r1, r2, lr}
   bad56:	4b06      	ldr	r3, [pc, #24]	; (bad70 <_ZN9IPAddressC1EPKh+0x1c>)
   bad58:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bad5a:	78cb      	ldrb	r3, [r1, #3]
   bad5c:	9300      	str	r3, [sp, #0]
   bad5e:	788b      	ldrb	r3, [r1, #2]
   bad60:	784a      	ldrb	r2, [r1, #1]
   bad62:	7809      	ldrb	r1, [r1, #0]
   bad64:	f7ff ffe8 	bl	bad38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bad68:	b003      	add	sp, #12
   bad6a:	f85d fb04 	ldr.w	pc, [sp], #4
   bad6e:	bf00      	nop
   bad70:	000bf43c 	.word	0x000bf43c

000bad74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad74:	7441      	strb	r1, [r0, #17]
}
   bad76:	4770      	bx	lr

000bad78 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bad78:	4770      	bx	lr

000bad7a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bad7a:	4770      	bx	lr

000bad7c <_ZN9USBSerial4readEv>:
{
   bad7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bad7e:	2100      	movs	r1, #0
   bad80:	7c00      	ldrb	r0, [r0, #16]
   bad82:	f7fc fec5 	bl	b7b10 <HAL_USB_USART_Receive_Data>
}
   bad86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad8a:	bd08      	pop	{r3, pc}

000bad8c <_ZN9USBSerial4peekEv>:
{
   bad8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bad8e:	2101      	movs	r1, #1
   bad90:	7c00      	ldrb	r0, [r0, #16]
   bad92:	f7fc febd 	bl	b7b10 <HAL_USB_USART_Receive_Data>
}
   bad96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad9a:	bd08      	pop	{r3, pc}

000bad9c <_ZN9USBSerial17availableForWriteEv>:
{
   bad9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bad9e:	7c00      	ldrb	r0, [r0, #16]
   bada0:	f7fc feae 	bl	b7b00 <HAL_USB_USART_Available_Data_For_Write>
}
   bada4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bada8:	bd08      	pop	{r3, pc}

000badaa <_ZN9USBSerial9availableEv>:
{
   badaa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   badac:	7c00      	ldrb	r0, [r0, #16]
   badae:	f7fc fe9f 	bl	b7af0 <HAL_USB_USART_Available_Data>
}
   badb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   badb6:	bd08      	pop	{r3, pc}

000badb8 <_ZN9USBSerial5writeEh>:
{
   badb8:	b513      	push	{r0, r1, r4, lr}
   badba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   badbc:	7c00      	ldrb	r0, [r0, #16]
{
   badbe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   badc0:	f7fc fe9e 	bl	b7b00 <HAL_USB_USART_Available_Data_For_Write>
   badc4:	2800      	cmp	r0, #0
   badc6:	9901      	ldr	r1, [sp, #4]
   badc8:	dc01      	bgt.n	badce <_ZN9USBSerial5writeEh+0x16>
   badca:	7c60      	ldrb	r0, [r4, #17]
   badcc:	b120      	cbz	r0, badd8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   badce:	7c20      	ldrb	r0, [r4, #16]
   badd0:	f7fc fea6 	bl	b7b20 <HAL_USB_USART_Send_Data>
   badd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   badd8:	b002      	add	sp, #8
   badda:	bd10      	pop	{r4, pc}

000baddc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baddc:	7c00      	ldrb	r0, [r0, #16]
   badde:	f7fc bea7 	b.w	b7b30 <HAL_USB_USART_Flush_Data>

000bade2 <_ZN9USBSerialD0Ev>:
   bade2:	b510      	push	{r4, lr}
   bade4:	2114      	movs	r1, #20
   bade6:	4604      	mov	r4, r0
   bade8:	f7f9 fe69 	bl	b4abe <_ZdlPvj>
   badec:	4620      	mov	r0, r4
   badee:	bd10      	pop	{r4, pc}

000badf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   badf0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   badf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   badf6:	4604      	mov	r4, r0
   badf8:	4608      	mov	r0, r1
   badfa:	2100      	movs	r1, #0
   badfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bae00:	4b04      	ldr	r3, [pc, #16]	; (bae14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bae02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bae04:	2301      	movs	r3, #1
  _serial = serial;
   bae06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bae08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bae0a:	4611      	mov	r1, r2
   bae0c:	f7fc fe58 	bl	b7ac0 <HAL_USB_USART_Init>
}
   bae10:	4620      	mov	r0, r4
   bae12:	bd10      	pop	{r4, pc}
   bae14:	000bf450 	.word	0x000bf450

000bae18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bae18:	7c00      	ldrb	r0, [r0, #16]
   bae1a:	2200      	movs	r2, #0
   bae1c:	f7fc be58 	b.w	b7ad0 <HAL_USB_USART_Begin>

000bae20 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bae20:	7c00      	ldrb	r0, [r0, #16]
   bae22:	f7fc be5d 	b.w	b7ae0 <HAL_USB_USART_End>

000bae26 <_Z19acquireSerialBufferv>:
{
   bae26:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bae28:	2214      	movs	r2, #20
{
   bae2a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bae2c:	2100      	movs	r1, #0
   bae2e:	f001 f91f 	bl	bc070 <memset>
}
   bae32:	4620      	mov	r0, r4
   bae34:	bd10      	pop	{r4, pc}
	...

000bae38 <_Z16_fetch_usbserialv>:
{
   bae38:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae3a:	4c0f      	ldr	r4, [pc, #60]	; (bae78 <_Z16_fetch_usbserialv+0x40>)
{
   bae3c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bae3e:	a803      	add	r0, sp, #12
   bae40:	f7ff fff1 	bl	bae26 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae44:	7821      	ldrb	r1, [r4, #0]
   bae46:	f3bf 8f5b 	dmb	ish
   bae4a:	f011 0101 	ands.w	r1, r1, #1
   bae4e:	d10f      	bne.n	bae70 <_Z16_fetch_usbserialv+0x38>
   bae50:	4620      	mov	r0, r4
   bae52:	9101      	str	r1, [sp, #4]
   bae54:	f7f9 fe42 	bl	b4adc <__cxa_guard_acquire>
   bae58:	9901      	ldr	r1, [sp, #4]
   bae5a:	b148      	cbz	r0, bae70 <_Z16_fetch_usbserialv+0x38>
   bae5c:	aa03      	add	r2, sp, #12
   bae5e:	4807      	ldr	r0, [pc, #28]	; (bae7c <_Z16_fetch_usbserialv+0x44>)
   bae60:	f7ff ffc6 	bl	badf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae64:	4620      	mov	r0, r4
   bae66:	f7f9 fe3e 	bl	b4ae6 <__cxa_guard_release>
   bae6a:	4805      	ldr	r0, [pc, #20]	; (bae80 <_Z16_fetch_usbserialv+0x48>)
   bae6c:	f001 f8ae 	bl	bbfcc <atexit>
	return _usbserial;
}
   bae70:	4802      	ldr	r0, [pc, #8]	; (bae7c <_Z16_fetch_usbserialv+0x44>)
   bae72:	b008      	add	sp, #32
   bae74:	bd10      	pop	{r4, pc}
   bae76:	bf00      	nop
   bae78:	2003e700 	.word	0x2003e700
   bae7c:	2003e704 	.word	0x2003e704
   bae80:	000bad79 	.word	0x000bad79

000bae84 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bae84:	4770      	bx	lr

000bae86 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bae86:	7441      	strb	r1, [r0, #17]
}
   bae88:	4770      	bx	lr

000bae8a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bae8a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bae8c:	7c00      	ldrb	r0, [r0, #16]
   bae8e:	f7fc fd37 	bl	b7900 <hal_usart_available_data_for_write>
}
   bae92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bae96:	bd08      	pop	{r3, pc}

000bae98 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bae98:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bae9a:	7c00      	ldrb	r0, [r0, #16]
   bae9c:	f7fc fd08 	bl	b78b0 <hal_usart_available>
}
   baea0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baea4:	bd08      	pop	{r3, pc}

000baea6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   baea6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baea8:	7c00      	ldrb	r0, [r0, #16]
   baeaa:	f7fc fd11 	bl	b78d0 <hal_usart_peek>
}
   baeae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baeb2:	bd08      	pop	{r3, pc}

000baeb4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baeb4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baeb6:	7c00      	ldrb	r0, [r0, #16]
   baeb8:	f7fc fd02 	bl	b78c0 <hal_usart_read>
}
   baebc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baec0:	bd08      	pop	{r3, pc}

000baec2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baec2:	7c00      	ldrb	r0, [r0, #16]
   baec4:	f7fc bd0c 	b.w	b78e0 <hal_usart_flush>

000baec8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baeca:	7c45      	ldrb	r5, [r0, #17]
{
   baecc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baece:	b12d      	cbz	r5, baedc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baed0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baed2:	b003      	add	sp, #12
   baed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baed8:	f7fc bce2 	b.w	b78a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baedc:	7c00      	ldrb	r0, [r0, #16]
   baede:	9101      	str	r1, [sp, #4]
   baee0:	f7fc fd0e 	bl	b7900 <hal_usart_available_data_for_write>
   baee4:	2800      	cmp	r0, #0
   baee6:	9901      	ldr	r1, [sp, #4]
   baee8:	dcf2      	bgt.n	baed0 <_ZN11USARTSerial5writeEh+0x8>
}
   baeea:	4628      	mov	r0, r5
   baeec:	b003      	add	sp, #12
   baeee:	bd30      	pop	{r4, r5, pc}

000baef0 <_ZN11USARTSerialD0Ev>:
   baef0:	b510      	push	{r4, lr}
   baef2:	2114      	movs	r1, #20
   baef4:	4604      	mov	r4, r0
   baef6:	f7f9 fde2 	bl	b4abe <_ZdlPvj>
   baefa:	4620      	mov	r0, r4
   baefc:	bd10      	pop	{r4, pc}
	...

000baf00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baf00:	b510      	push	{r4, lr}
   baf02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf06:	4604      	mov	r4, r0
   baf08:	4608      	mov	r0, r1
   baf0a:	4611      	mov	r1, r2
   baf0c:	2200      	movs	r2, #0
   baf0e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baf12:	4b04      	ldr	r3, [pc, #16]	; (baf24 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baf14:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf16:	2301      	movs	r3, #1
  _serial = serial;
   baf18:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf1a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baf1c:	f7fc fd00 	bl	b7920 <hal_usart_init_ex>
}
   baf20:	4620      	mov	r0, r4
   baf22:	bd10      	pop	{r4, pc}
   baf24:	000bf480 	.word	0x000bf480

000baf28 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   baf28:	7c00      	ldrb	r0, [r0, #16]
   baf2a:	2300      	movs	r3, #0
   baf2c:	f7fc bcf0 	b.w	b7910 <hal_usart_begin_config>

000baf30 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   baf30:	2200      	movs	r2, #0
   baf32:	f7ff bff9 	b.w	baf28 <_ZN11USARTSerial5beginEmm>

000baf36 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   baf36:	7c00      	ldrb	r0, [r0, #16]
   baf38:	f7fc bcaa 	b.w	b7890 <hal_usart_end>

000baf3c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   baf3c:	4770      	bx	lr

000baf3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   baf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf40:	4606      	mov	r6, r0
   baf42:	4615      	mov	r5, r2
   baf44:	460c      	mov	r4, r1
   baf46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   baf48:	42bc      	cmp	r4, r7
   baf4a:	d006      	beq.n	baf5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   baf4c:	6833      	ldr	r3, [r6, #0]
   baf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   baf52:	689b      	ldr	r3, [r3, #8]
   baf54:	4630      	mov	r0, r6
   baf56:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   baf58:	e7f6      	b.n	baf48 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   baf5a:	4628      	mov	r0, r5
   baf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf5e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   baf5e:	7c00      	ldrb	r0, [r0, #16]
   baf60:	2200      	movs	r2, #0
   baf62:	f7fc bd05 	b.w	b7970 <hal_i2c_write>

000baf66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   baf66:	7c00      	ldrb	r0, [r0, #16]
   baf68:	2100      	movs	r1, #0
   baf6a:	f7fc bd09 	b.w	b7980 <hal_i2c_available>

000baf6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   baf6e:	7c00      	ldrb	r0, [r0, #16]
   baf70:	2100      	movs	r1, #0
   baf72:	f7fc bd0d 	b.w	b7990 <hal_i2c_read>

000baf76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   baf76:	7c00      	ldrb	r0, [r0, #16]
   baf78:	2100      	movs	r1, #0
   baf7a:	f7fc bd11 	b.w	b79a0 <hal_i2c_peek>

000baf7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baf7e:	7c00      	ldrb	r0, [r0, #16]
   baf80:	2100      	movs	r1, #0
   baf82:	f7fc bd15 	b.w	b79b0 <hal_i2c_flush>

000baf86 <_ZN7TwoWireD0Ev>:
   baf86:	b510      	push	{r4, lr}
   baf88:	2114      	movs	r1, #20
   baf8a:	4604      	mov	r4, r0
   baf8c:	f7f9 fd97 	bl	b4abe <_ZdlPvj>
   baf90:	4620      	mov	r0, r4
   baf92:	bd10      	pop	{r4, pc}

000baf94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   baf94:	b538      	push	{r3, r4, r5, lr}
   baf96:	4604      	mov	r4, r0
   baf98:	4615      	mov	r5, r2
   baf9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf9e:	2200      	movs	r2, #0
   bafa0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bafa4:	4b09      	ldr	r3, [pc, #36]	; (bafcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bafa6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafa8:	4608      	mov	r0, r1
   bafaa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bafac:	4629      	mov	r1, r5
   bafae:	f7fc fd0f 	bl	b79d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafb2:	30bf      	adds	r0, #191	; 0xbf
   bafb4:	d108      	bne.n	bafc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bafb6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafb8:	07db      	lsls	r3, r3, #31
   bafba:	d505      	bpl.n	bafc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bafbc:	6868      	ldr	r0, [r5, #4]
   bafbe:	f7fc fe93 	bl	b7ce8 <free>
    free(conf.tx_buffer);
   bafc2:	68e8      	ldr	r0, [r5, #12]
   bafc4:	f7fc fe90 	bl	b7ce8 <free>
}
   bafc8:	4620      	mov	r0, r4
   bafca:	bd38      	pop	{r3, r4, r5, pc}
   bafcc:	000bf4b0 	.word	0x000bf4b0

000bafd0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bafd0:	7c00      	ldrb	r0, [r0, #16]
   bafd2:	2200      	movs	r2, #0
   bafd4:	f7fc bcac 	b.w	b7930 <hal_i2c_set_speed>

000bafd8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bafd8:	2300      	movs	r3, #0
   bafda:	7c00      	ldrb	r0, [r0, #16]
   bafdc:	461a      	mov	r2, r3
   bafde:	4619      	mov	r1, r3
   bafe0:	f7fc bcae 	b.w	b7940 <hal_i2c_begin>

000bafe4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bafe4:	7c00      	ldrb	r0, [r0, #16]
   bafe6:	2200      	movs	r2, #0
   bafe8:	f7fc bcb2 	b.w	b7950 <hal_i2c_begin_transmission>

000bafec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bafec:	b2c9      	uxtb	r1, r1
   bafee:	f7ff bff9 	b.w	bafe4 <_ZN7TwoWire17beginTransmissionEh>

000baff2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   baff2:	7c00      	ldrb	r0, [r0, #16]
   baff4:	2200      	movs	r2, #0
   baff6:	f7fc bcb3 	b.w	b7960 <hal_i2c_end_transmission>

000baffa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   baffa:	2101      	movs	r1, #1
   baffc:	f7ff bff9 	b.w	baff2 <_ZN7TwoWire15endTransmissionEh>

000bb000 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   bb000:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb002:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   bb004:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb008:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb00a:	2201      	movs	r2, #1
   bb00c:	f04f 33ff 	mov.w	r3, #4294967295
   bb010:	f10d 0107 	add.w	r1, sp, #7
   bb014:	47a0      	blx	r4
}
   bb016:	b002      	add	sp, #8
   bb018:	bd10      	pop	{r4, pc}

000bb01a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bb01a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb01c:	6803      	ldr	r3, [r0, #0]
   bb01e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb020:	f04f 33ff 	mov.w	r3, #4294967295
   bb024:	46a4      	mov	ip, r4
}
   bb026:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb02a:	4760      	bx	ip

000bb02c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb02c:	b513      	push	{r0, r1, r4, lr}
   bb02e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bb030:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb032:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bb036:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bb038:	f10d 0107 	add.w	r1, sp, #7
   bb03c:	2201      	movs	r2, #1
   bb03e:	47a0      	blx	r4
}
   bb040:	b002      	add	sp, #8
   bb042:	bd10      	pop	{r4, pc}

000bb044 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bb044:	b510      	push	{r4, lr}
      { return _M_ptr; }
   bb046:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb048:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb04c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb050:	429a      	cmp	r2, r3
int TCPClient::read() {
   bb052:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb054:	d008      	beq.n	bb068 <_ZN9TCPClient4readEv+0x24>
   bb056:	6963      	ldr	r3, [r4, #20]
   bb058:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb05c:	1c51      	adds	r1, r2, #1
   bb05e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bb062:	4413      	add	r3, r2
   bb064:	7918      	ldrb	r0, [r3, #4]
}
   bb066:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb068:	6803      	ldr	r3, [r0, #0]
   bb06a:	691b      	ldr	r3, [r3, #16]
   bb06c:	4798      	blx	r3
   bb06e:	2800      	cmp	r0, #0
   bb070:	d1f1      	bne.n	bb056 <_ZN9TCPClient4readEv+0x12>
   bb072:	f04f 30ff 	mov.w	r0, #4294967295
   bb076:	e7f6      	b.n	bb066 <_ZN9TCPClient4readEv+0x22>

000bb078 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bb078:	4770      	bx	lr

000bb07a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bb07a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bb07c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bb07e:	43c0      	mvns	r0, r0
   bb080:	0fc0      	lsrs	r0, r0, #31
   bb082:	4770      	bx	lr

000bb084 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb084:	4770      	bx	lr
	...

000bb088 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bb088:	4b06      	ldr	r3, [pc, #24]	; (bb0a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bb08a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bb08c:	b510      	push	{r4, lr}
   bb08e:	f100 040c 	add.w	r4, r0, #12
	    ||
   bb092:	d005      	beq.n	bb0a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bb094:	4608      	mov	r0, r1
   bb096:	f000 fe87 	bl	bbda8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bb09a:	2800      	cmp	r0, #0
   bb09c:	bf08      	it	eq
   bb09e:	2400      	moveq	r4, #0
      }
   bb0a0:	4620      	mov	r0, r4
   bb0a2:	bd10      	pop	{r4, pc}
   bb0a4:	000bf32c 	.word	0x000bf32c

000bb0a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb0a8:	b510      	push	{r4, lr}
   bb0aa:	21ac      	movs	r1, #172	; 0xac
   bb0ac:	4604      	mov	r4, r0
   bb0ae:	f7f9 fd06 	bl	b4abe <_ZdlPvj>
   bb0b2:	4620      	mov	r0, r4
   bb0b4:	bd10      	pop	{r4, pc}

000bb0b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   bb0b6:	21ac      	movs	r1, #172	; 0xac
   bb0b8:	f7f9 bd01 	b.w	b4abe <_ZdlPvj>

000bb0bc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   bb0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   bb0c0:	f04f 0800 	mov.w	r8, #0
   bb0c4:	b086      	sub	sp, #24
   bb0c6:	461c      	mov	r4, r3
   bb0c8:	f8c0 8004 	str.w	r8, [r0, #4]
   bb0cc:	4605      	mov	r5, r0
   bb0ce:	460e      	mov	r6, r1
   bb0d0:	4617      	mov	r7, r2
    struct timeval tv = {};
   bb0d2:	4641      	mov	r1, r8
   bb0d4:	2210      	movs	r2, #16
   bb0d6:	a802      	add	r0, sp, #8
   bb0d8:	f000 ffca 	bl	bc070 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   bb0dc:	1c63      	adds	r3, r4, #1
   bb0de:	d009      	beq.n	bb0f4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   bb0e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb0e4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   bb0e8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   bb0ec:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   bb0f0:	435c      	muls	r4, r3
   bb0f2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   bb0f4:	6968      	ldr	r0, [r5, #20]
   bb0f6:	2310      	movs	r3, #16
   bb0f8:	9300      	str	r3, [sp, #0]
   bb0fa:	6800      	ldr	r0, [r0, #0]
   bb0fc:	ab02      	add	r3, sp, #8
   bb0fe:	f241 0205 	movw	r2, #4101	; 0x1005
   bb102:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb106:	f7fc fc6b 	bl	b79e0 <sock_setsockopt>
    if (ret < 0) {
   bb10a:	2800      	cmp	r0, #0
   bb10c:	da07      	bge.n	bb11e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   bb10e:	f7fc fe1b 	bl	b7d48 <__errno>
   bb112:	6803      	ldr	r3, [r0, #0]
   bb114:	606b      	str	r3, [r5, #4]
        return 0;
   bb116:	2000      	movs	r0, #0
}
   bb118:	b006      	add	sp, #24
   bb11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bb11e:	6968      	ldr	r0, [r5, #20]
   bb120:	2300      	movs	r3, #0
   bb122:	6800      	ldr	r0, [r0, #0]
   bb124:	463a      	mov	r2, r7
   bb126:	4631      	mov	r1, r6
   bb128:	f7fc fc7a 	bl	b7a20 <sock_send>
    if (ret < 0) {
   bb12c:	1e03      	subs	r3, r0, #0
   bb12e:	dbee      	blt.n	bb10e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bb130:	4618      	mov	r0, r3
   bb132:	e7f1      	b.n	bb118 <_ZN9TCPClient5writeEPKhjm+0x5c>

000bb134 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bb134:	b530      	push	{r4, r5, lr}
   bb136:	b087      	sub	sp, #28
   bb138:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bb13a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bb13c:	4668      	mov	r0, sp
   bb13e:	f7ff fe09 	bl	bad54 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb144:	3404      	adds	r4, #4
   bb146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb148:	682b      	ldr	r3, [r5, #0]
   bb14a:	7023      	strb	r3, [r4, #0]
    }
   bb14c:	b007      	add	sp, #28
   bb14e:	bd30      	pop	{r4, r5, pc}

000bb150 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bb150:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bb152:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bb154:	4b05      	ldr	r3, [pc, #20]	; (bb16c <_ZN9TCPClient8remoteIPEv+0x1c>)
   bb156:	4604      	mov	r4, r0
   bb158:	358c      	adds	r5, #140	; 0x8c
   bb15a:	f844 3b04 	str.w	r3, [r4], #4
   bb15e:	4606      	mov	r6, r0
   bb160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb164:	682b      	ldr	r3, [r5, #0]
   bb166:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bb168:	4630      	mov	r0, r6
   bb16a:	bd70      	pop	{r4, r5, r6, pc}
   bb16c:	000bf43c 	.word	0x000bf43c

000bb170 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb174:	4698      	mov	r8, r3
    stop();
   bb176:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb178:	b093      	sub	sp, #76	; 0x4c
   bb17a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bb17c:	2400      	movs	r4, #0
    stop();
   bb17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb180:	4606      	mov	r6, r0
   bb182:	4617      	mov	r7, r2
    stop();
   bb184:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb186:	4628      	mov	r0, r5
   bb188:	466b      	mov	r3, sp
   bb18a:	4622      	mov	r2, r4
   bb18c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bb18e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb190:	f7fc fa78 	bl	b7684 <netdb_getaddrinfo>
   bb194:	4605      	mov	r5, r0
   bb196:	2800      	cmp	r0, #0
   bb198:	d163      	bne.n	bb262 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bb19a:	9b00      	ldr	r3, [sp, #0]
   bb19c:	2b00      	cmp	r3, #0
   bb19e:	d04b      	beq.n	bb238 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb1a0:	695b      	ldr	r3, [r3, #20]
   bb1a2:	2b00      	cmp	r3, #0
   bb1a4:	d048      	beq.n	bb238 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bb1a6:	a806      	add	r0, sp, #24
   bb1a8:	f7ff fd90 	bl	baccc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bb1ac:	9b00      	ldr	r3, [sp, #0]
   bb1ae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   bb1b0:	7863      	ldrb	r3, [r4, #1]
   bb1b2:	2b02      	cmp	r3, #2
   bb1b4:	d104      	bne.n	bb1c0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bb1b6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   bb1b8:	a806      	add	r0, sp, #24
   bb1ba:	f7ff ffbb 	bl	bb134 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   bb1be:	e026      	b.n	bb20e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bb1c0:	2b0a      	cmp	r3, #10
   bb1c2:	d124      	bne.n	bb20e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bb1c4:	2211      	movs	r2, #17
   bb1c6:	4629      	mov	r1, r5
   bb1c8:	a801      	add	r0, sp, #4
   bb1ca:	f000 ff51 	bl	bc070 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb1ce:	68a3      	ldr	r3, [r4, #8]
   bb1d0:	2b00      	cmp	r3, #0
   bb1d2:	d038      	beq.n	bb246 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb1d4:	f104 0308 	add.w	r3, r4, #8
   bb1d8:	f10d 0c04 	add.w	ip, sp, #4
   bb1dc:	3418      	adds	r4, #24
   bb1de:	6818      	ldr	r0, [r3, #0]
   bb1e0:	6859      	ldr	r1, [r3, #4]
   bb1e2:	4662      	mov	r2, ip
   bb1e4:	c203      	stmia	r2!, {r0, r1}
   bb1e6:	3308      	adds	r3, #8
   bb1e8:	42a3      	cmp	r3, r4
   bb1ea:	4694      	mov	ip, r2
   bb1ec:	d1f7      	bne.n	bb1de <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bb1ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bb1f0:	a901      	add	r1, sp, #4
   bb1f2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bb1f4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bb1f8:	f7ff fd76 	bl	bace8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb1fc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb200:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb204:	ac07      	add	r4, sp, #28
   bb206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb208:	f8dc 3000 	ldr.w	r3, [ip]
   bb20c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bb20e:	a806      	add	r0, sp, #24
   bb210:	f7ff fd7c 	bl	bad0c <_ZNK9IPAddresscvbEv>
        if (addr) {
   bb214:	b180      	cbz	r0, bb238 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bb216:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bb218:	ad07      	add	r5, sp, #28
   bb21a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bb21e:	4b12      	ldr	r3, [pc, #72]	; (bb268 <_ZN9TCPClient7connectEPKctm+0xf8>)
   bb220:	930c      	str	r3, [sp, #48]	; 0x30
   bb222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb224:	ac0d      	add	r4, sp, #52	; 0x34
   bb226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb228:	682b      	ldr	r3, [r5, #0]
   bb22a:	7023      	strb	r3, [r4, #0]
   bb22c:	463a      	mov	r2, r7
   bb22e:	4643      	mov	r3, r8
   bb230:	a90c      	add	r1, sp, #48	; 0x30
   bb232:	4630      	mov	r0, r6
   bb234:	47c8      	blx	r9
   bb236:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bb238:	9800      	ldr	r0, [sp, #0]
   bb23a:	f7fc fa1b 	bl	b7674 <netdb_freeaddrinfo>
}
   bb23e:	4628      	mov	r0, r5
   bb240:	b013      	add	sp, #76	; 0x4c
   bb242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb246:	68e3      	ldr	r3, [r4, #12]
   bb248:	2b00      	cmp	r3, #0
   bb24a:	d1c3      	bne.n	bb1d4 <_ZN9TCPClient7connectEPKctm+0x64>
   bb24c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bb250:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bb254:	f7fc fb04 	bl	b7860 <inet_htonl>
   bb258:	4581      	cmp	r9, r0
   bb25a:	d1bb      	bne.n	bb1d4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bb25c:	f104 0114 	add.w	r1, r4, #20
   bb260:	e7aa      	b.n	bb1b8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb262:	4625      	mov	r5, r4
   bb264:	e7e8      	b.n	bb238 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb266:	bf00      	nop
   bb268:	000bf43c 	.word	0x000bf43c

000bb26c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bb26c:	b538      	push	{r3, r4, r5, lr}
   bb26e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bb270:	681a      	ldr	r2, [r3, #0]
   bb272:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bb274:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bb276:	da10      	bge.n	bb29a <_ZN9TCPClient9connectedEv+0x2e>
   bb278:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb27c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb280:	429a      	cmp	r2, r3
   bb282:	d10a      	bne.n	bb29a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bb284:	6803      	ldr	r3, [r0, #0]
   bb286:	691b      	ldr	r3, [r3, #16]
   bb288:	4798      	blx	r3
        if (!rv) {
   bb28a:	4604      	mov	r4, r0
   bb28c:	b928      	cbnz	r0, bb29a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bb28e:	682b      	ldr	r3, [r5, #0]
   bb290:	4628      	mov	r0, r5
   bb292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb294:	4798      	blx	r3
        rv = available();
   bb296:	4620      	mov	r0, r4
}
   bb298:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bb29a:	2001      	movs	r0, #1
   bb29c:	e7fc      	b.n	bb298 <_ZN9TCPClient9connectedEv+0x2c>

000bb29e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bb29e:	b510      	push	{r4, lr}
   bb2a0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb2a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb2aa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bb2ac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2ae:	d005      	beq.n	bb2bc <_ZN9TCPClient4peekEv+0x1e>
   bb2b0:	6963      	ldr	r3, [r4, #20]
   bb2b2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb2b6:	4413      	add	r3, r2
   bb2b8:	7918      	ldrb	r0, [r3, #4]
}
   bb2ba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2bc:	6803      	ldr	r3, [r0, #0]
   bb2be:	691b      	ldr	r3, [r3, #16]
   bb2c0:	4798      	blx	r3
   bb2c2:	2800      	cmp	r0, #0
   bb2c4:	d1f4      	bne.n	bb2b0 <_ZN9TCPClient4peekEv+0x12>
   bb2c6:	f04f 30ff 	mov.w	r0, #4294967295
   bb2ca:	e7f6      	b.n	bb2ba <_ZN9TCPClient4peekEv+0x1c>

000bb2cc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2ce:	6943      	ldr	r3, [r0, #20]
   bb2d0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bb2d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb2d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb2da:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb2dc:	4605      	mov	r5, r0
   bb2de:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bb2e0:	d016      	beq.n	bb310 <_ZN9TCPClient4readEPhj+0x44>
   bb2e2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bb2e4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bb2e8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bb2ec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bb2ee:	42bc      	cmp	r4, r7
   bb2f0:	bf28      	it	cs
   bb2f2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bb2f4:	3304      	adds	r3, #4
   bb2f6:	4622      	mov	r2, r4
   bb2f8:	4419      	add	r1, r3
   bb2fa:	4630      	mov	r0, r6
   bb2fc:	f000 fe90 	bl	bc020 <memcpy>
   bb300:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bb302:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bb306:	4423      	add	r3, r4
   bb308:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bb30c:	4620      	mov	r0, r4
   bb30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bb310:	6803      	ldr	r3, [r0, #0]
   bb312:	691b      	ldr	r3, [r3, #16]
   bb314:	4798      	blx	r3
   bb316:	2800      	cmp	r0, #0
   bb318:	d1e3      	bne.n	bb2e2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bb31a:	f04f 34ff 	mov.w	r4, #4294967295
   bb31e:	e7f5      	b.n	bb30c <_ZN9TCPClient4readEPhj+0x40>

000bb320 <_ZN9TCPClient12flush_bufferEv>:
   bb320:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bb322:	2300      	movs	r3, #0
   bb324:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bb328:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bb32a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bb32e:	4770      	bx	lr

000bb330 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb334:	461f      	mov	r7, r3
    stop();
   bb336:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb338:	460c      	mov	r4, r1
    stop();
   bb33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb33c:	b08a      	sub	sp, #40	; 0x28
   bb33e:	4605      	mov	r5, r0
   bb340:	4616      	mov	r6, r2
    stop();
   bb342:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bb344:	7d23      	ldrb	r3, [r4, #20]
   bb346:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bb34a:	2b04      	cmp	r3, #4
   bb34c:	bf0c      	ite	eq
   bb34e:	2002      	moveq	r0, #2
   bb350:	200a      	movne	r0, #10
   bb352:	2206      	movs	r2, #6
   bb354:	2101      	movs	r1, #1
   bb356:	f7fc fb6b 	bl	b7a30 <sock_socket>
   bb35a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bb35e:	696b      	ldr	r3, [r5, #20]
   bb360:	681b      	ldr	r3, [r3, #0]
   bb362:	2b00      	cmp	r3, #0
   bb364:	da08      	bge.n	bb378 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bb366:	682b      	ldr	r3, [r5, #0]
   bb368:	4628      	mov	r0, r5
   bb36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb36c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bb36e:	4798      	blx	r3
}
   bb370:	4620      	mov	r0, r4
   bb372:	b00a      	add	sp, #40	; 0x28
   bb374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bb378:	4628      	mov	r0, r5
   bb37a:	f7ff ffd1 	bl	bb320 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bb37e:	b1b7      	cbz	r7, bb3ae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bb380:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb382:	a903      	add	r1, sp, #12
   bb384:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bb386:	9303      	str	r3, [sp, #12]
   bb388:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb38c:	f7fc f9c2 	bl	b7714 <if_index_to_name>
   bb390:	2800      	cmp	r0, #0
   bb392:	d1e8      	bne.n	bb366 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bb394:	6968      	ldr	r0, [r5, #20]
   bb396:	2306      	movs	r3, #6
   bb398:	9300      	str	r3, [sp, #0]
   bb39a:	6800      	ldr	r0, [r0, #0]
   bb39c:	ab03      	add	r3, sp, #12
   bb39e:	f241 020b 	movw	r2, #4107	; 0x100b
   bb3a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb3a6:	f7fc fb1b 	bl	b79e0 <sock_setsockopt>
   bb3aa:	2800      	cmp	r0, #0
   bb3ac:	d1db      	bne.n	bb366 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bb3ae:	221c      	movs	r2, #28
   bb3b0:	2100      	movs	r1, #0
   bb3b2:	a803      	add	r0, sp, #12
   bb3b4:	f000 fe5c 	bl	bc070 <memset>
    if (ip.version() == 4) {
   bb3b8:	7d23      	ldrb	r3, [r4, #20]
   bb3ba:	2b04      	cmp	r3, #4
   bb3bc:	d11d      	bne.n	bb3fa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bb3be:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bb3c2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bb3c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bb3c8:	f7fc fa5a 	bl	b7880 <inet_htons>
   bb3cc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bb3d0:	6860      	ldr	r0, [r4, #4]
   bb3d2:	f7fc fa45 	bl	b7860 <inet_htonl>
   bb3d6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bb3d8:	696b      	ldr	r3, [r5, #20]
   bb3da:	221c      	movs	r2, #28
   bb3dc:	6818      	ldr	r0, [r3, #0]
   bb3de:	a903      	add	r1, sp, #12
   bb3e0:	f7fc fb0e 	bl	b7a00 <sock_connect>
   bb3e4:	2800      	cmp	r0, #0
   bb3e6:	d1be      	bne.n	bb366 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bb3e8:	3404      	adds	r4, #4
   bb3ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb3ec:	696d      	ldr	r5, [r5, #20]
   bb3ee:	358c      	adds	r5, #140	; 0x8c
   bb3f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb3f2:	6823      	ldr	r3, [r4, #0]
   bb3f4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bb3f6:	2401      	movs	r4, #1
   bb3f8:	e7ba      	b.n	bb370 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bb3fa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bb3fe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bb400:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bb404:	f7fc fa3c 	bl	b7880 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb408:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bb40a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb40e:	1d23      	adds	r3, r4, #4
   bb410:	f104 0714 	add.w	r7, r4, #20
   bb414:	6818      	ldr	r0, [r3, #0]
   bb416:	6859      	ldr	r1, [r3, #4]
   bb418:	4632      	mov	r2, r6
   bb41a:	c203      	stmia	r2!, {r0, r1}
   bb41c:	3308      	adds	r3, #8
   bb41e:	42bb      	cmp	r3, r7
   bb420:	4616      	mov	r6, r2
   bb422:	d1f7      	bne.n	bb414 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bb424:	e7d8      	b.n	bb3d8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bb428 <_ZN9TCPClient9availableEv>:
{
   bb428:	b530      	push	{r4, r5, lr}
   bb42a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bb42c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bb430:	b08b      	sub	sp, #44	; 0x2c
   bb432:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bb434:	b12b      	cbz	r3, bb442 <_ZN9TCPClient9availableEv+0x1a>
   bb436:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bb43a:	429a      	cmp	r2, r3
   bb43c:	d101      	bne.n	bb442 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bb43e:	f7ff ff6f 	bl	bb320 <_ZN9TCPClient12flush_bufferEv>
   bb442:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bb444:	6808      	ldr	r0, [r1, #0]
   bb446:	2800      	cmp	r0, #0
   bb448:	db18      	blt.n	bb47c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bb44a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bb44e:	2d7f      	cmp	r5, #127	; 0x7f
   bb450:	d814      	bhi.n	bb47c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bb452:	3104      	adds	r1, #4
   bb454:	2308      	movs	r3, #8
   bb456:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bb45a:	4429      	add	r1, r5
   bb45c:	f7fc fad8 	bl	b7a10 <sock_recv>
            if (ret > 0) {
   bb460:	2800      	cmp	r0, #0
   bb462:	dd13      	ble.n	bb48c <_ZN9TCPClient9availableEv+0x64>
   bb464:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bb466:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb46a:	b90a      	cbnz	r2, bb470 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bb46c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bb470:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bb472:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb476:	4410      	add	r0, r2
   bb478:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bb47c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bb47e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bb482:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bb486:	1ac0      	subs	r0, r0, r3
   bb488:	b00b      	add	sp, #44	; 0x2c
   bb48a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bb48c:	f7fc fc5c 	bl	b7d48 <__errno>
   bb490:	6803      	ldr	r3, [r0, #0]
   bb492:	2b0b      	cmp	r3, #11
   bb494:	d0f2      	beq.n	bb47c <_ZN9TCPClient9availableEv+0x54>
   bb496:	f7fc fc57 	bl	b7d48 <__errno>
   bb49a:	6803      	ldr	r3, [r0, #0]
   bb49c:	2b0b      	cmp	r3, #11
   bb49e:	d0ed      	beq.n	bb47c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bb4a0:	2320      	movs	r3, #32
   bb4a2:	2500      	movs	r5, #0
   bb4a4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bb4a8:	f7fc fc4e 	bl	b7d48 <__errno>
   bb4ac:	6803      	ldr	r3, [r0, #0]
   bb4ae:	9301      	str	r3, [sp, #4]
   bb4b0:	4b08      	ldr	r3, [pc, #32]	; (bb4d4 <_ZN9TCPClient9availableEv+0xac>)
   bb4b2:	4909      	ldr	r1, [pc, #36]	; (bb4d8 <_ZN9TCPClient9availableEv+0xb0>)
   bb4b4:	9300      	str	r3, [sp, #0]
   bb4b6:	aa02      	add	r2, sp, #8
   bb4b8:	462b      	mov	r3, r5
   bb4ba:	2032      	movs	r0, #50	; 0x32
   bb4bc:	f7fc fb48 	bl	b7b50 <log_message>
                    sock_close(d_->sock);
   bb4c0:	6963      	ldr	r3, [r4, #20]
   bb4c2:	6818      	ldr	r0, [r3, #0]
   bb4c4:	f7fc fa94 	bl	b79f0 <sock_close>
   bb4c8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bb4ca:	f04f 32ff 	mov.w	r2, #4294967295
   bb4ce:	601a      	str	r2, [r3, #0]
   bb4d0:	e7d4      	b.n	bb47c <_ZN9TCPClient9availableEv+0x54>
   bb4d2:	bf00      	nop
   bb4d4:	000bf4d7 	.word	0x000bf4d7
   bb4d8:	000bf4d0 	.word	0x000bf4d0

000bb4dc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bb4dc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bb4de:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bb4e0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bb4e2:	6818      	ldr	r0, [r3, #0]
   bb4e4:	2800      	cmp	r0, #0
   bb4e6:	db01      	blt.n	bb4ec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bb4e8:	f7fc fa82 	bl	b79f0 <sock_close>
   bb4ec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bb4ee:	f04f 32ff 	mov.w	r2, #4294967295
   bb4f2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bb4f4:	6960      	ldr	r0, [r4, #20]
   bb4f6:	2211      	movs	r2, #17
   bb4f8:	2100      	movs	r1, #0
   bb4fa:	308c      	adds	r0, #140	; 0x8c
   bb4fc:	f000 fdb8 	bl	bc070 <memset>
    flush_buffer();
   bb500:	4620      	mov	r0, r4
}
   bb502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bb506:	f7ff bf0b 	b.w	bb320 <_ZN9TCPClient12flush_bufferEv>

000bb50a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bb50a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bb50c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bb50e:	4604      	mov	r4, r0
          total(0) {
   bb510:	6001      	str	r1, [r0, #0]
   bb512:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bb516:	3088      	adds	r0, #136	; 0x88
   bb518:	f7ff fbd8 	bl	baccc <_ZN9IPAddressC1Ev>
}
   bb51c:	4620      	mov	r0, r4
   bb51e:	bd10      	pop	{r4, pc}

000bb520 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bb520:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb522:	2300      	movs	r3, #0
   bb524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bb528:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bb52c:	4a0e      	ldr	r2, [pc, #56]	; (bb568 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bb52e:	6103      	str	r3, [r0, #16]
   bb530:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb532:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bb534:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb536:	20ac      	movs	r0, #172	; 0xac
   bb538:	9101      	str	r1, [sp, #4]
   bb53a:	f7f9 faba 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   bb53e:	1e05      	subs	r5, r0, #0
   bb540:	f105 060c 	add.w	r6, r5, #12
   bb544:	d008      	beq.n	bb558 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bb546:	2301      	movs	r3, #1
   bb548:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bb54c:	4b07      	ldr	r3, [pc, #28]	; (bb56c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb54e:	9901      	ldr	r1, [sp, #4]
   bb550:	602b      	str	r3, [r5, #0]
   bb552:	4630      	mov	r0, r6
   bb554:	f7ff ffd9 	bl	bb50a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bb558:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bb55a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bb55e:	f7ff fedf 	bl	bb320 <_ZN9TCPClient12flush_bufferEv>
}
   bb562:	b002      	add	sp, #8
   bb564:	bd70      	pop	{r4, r5, r6, pc}
   bb566:	bf00      	nop
   bb568:	000bf50c 	.word	0x000bf50c
   bb56c:	000bf4f0 	.word	0x000bf4f0

000bb570 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bb570:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bb572:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   bb576:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bb578:	f7ff ffd2 	bl	bb520 <_ZN9TCPClientC1Ei>
}
   bb57c:	4620      	mov	r0, r4
   bb57e:	bd10      	pop	{r4, pc}

000bb580 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bb580:	b510      	push	{r4, lr}
   bb582:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bb584:	6800      	ldr	r0, [r0, #0]
   bb586:	2800      	cmp	r0, #0
   bb588:	db01      	blt.n	bb58e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bb58a:	f7fc fa31 	bl	b79f0 <sock_close>
    }
}
   bb58e:	4620      	mov	r0, r4
   bb590:	bd10      	pop	{r4, pc}

000bb592 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bb592:	300c      	adds	r0, #12
   bb594:	f7ff bff4 	b.w	bb580 <_ZN9TCPClient4DataD1Ev>

000bb598 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb598:	2200      	movs	r2, #0
   bb59a:	6840      	ldr	r0, [r0, #4]
   bb59c:	4611      	mov	r1, r2
   bb59e:	f7fc bb3b 	b.w	b7c18 <network_ready>

000bb5a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb5a2:	2200      	movs	r2, #0
   bb5a4:	6840      	ldr	r0, [r0, #4]
   bb5a6:	4611      	mov	r1, r2
   bb5a8:	f7fc bb56 	b.w	b7c58 <network_listening>

000bb5ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb5ac:	2200      	movs	r2, #0
   bb5ae:	6840      	ldr	r0, [r0, #4]
   bb5b0:	4611      	mov	r1, r2
   bb5b2:	f7fc bb61 	b.w	b7c78 <network_get_listen_timeout>

000bb5b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb5b6:	6840      	ldr	r0, [r0, #4]
   bb5b8:	2200      	movs	r2, #0
   bb5ba:	f7fc bb55 	b.w	b7c68 <network_set_listen_timeout>

000bb5be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb5be:	6840      	ldr	r0, [r0, #4]
   bb5c0:	2200      	movs	r2, #0
   bb5c2:	f081 0101 	eor.w	r1, r1, #1
   bb5c6:	f7fc bb3f 	b.w	b7c48 <network_listen>

000bb5ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb5ca:	2300      	movs	r3, #0
   bb5cc:	6840      	ldr	r0, [r0, #4]
   bb5ce:	461a      	mov	r2, r3
   bb5d0:	4619      	mov	r1, r3
   bb5d2:	f7fc bb31 	b.w	b7c38 <network_off>

000bb5d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb5d6:	2300      	movs	r3, #0
   bb5d8:	6840      	ldr	r0, [r0, #4]
   bb5da:	461a      	mov	r2, r3
   bb5dc:	4619      	mov	r1, r3
   bb5de:	f7fc bb23 	b.w	b7c28 <network_on>

000bb5e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb5e2:	2200      	movs	r2, #0
   bb5e4:	6840      	ldr	r0, [r0, #4]
   bb5e6:	4611      	mov	r1, r2
   bb5e8:	f7fc bb06 	b.w	b7bf8 <network_connecting>

000bb5ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb5ec:	6840      	ldr	r0, [r0, #4]
   bb5ee:	2200      	movs	r2, #0
   bb5f0:	2102      	movs	r1, #2
   bb5f2:	f7fc bb09 	b.w	b7c08 <network_disconnect>

000bb5f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb5f6:	2300      	movs	r3, #0
   bb5f8:	6840      	ldr	r0, [r0, #4]
   bb5fa:	461a      	mov	r2, r3
   bb5fc:	f7fc baf4 	b.w	b7be8 <network_connect>

000bb600 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb600:	4b02      	ldr	r3, [pc, #8]	; (bb60c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb602:	2204      	movs	r2, #4
   bb604:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb606:	4a02      	ldr	r2, [pc, #8]	; (bb610 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb608:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb60a:	4770      	bx	lr
   bb60c:	2003e718 	.word	0x2003e718
   bb610:	000bf558 	.word	0x000bf558

000bb614 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb614:	2300      	movs	r3, #0
   bb616:	6840      	ldr	r0, [r0, #4]
   bb618:	461a      	mov	r2, r3
   bb61a:	f7fc bae5 	b.w	b7be8 <network_connect>

000bb61e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb61e:	6840      	ldr	r0, [r0, #4]
   bb620:	2200      	movs	r2, #0
   bb622:	2102      	movs	r1, #2
   bb624:	f7fc baf0 	b.w	b7c08 <network_disconnect>

000bb628 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb628:	2200      	movs	r2, #0
   bb62a:	6840      	ldr	r0, [r0, #4]
   bb62c:	4611      	mov	r1, r2
   bb62e:	f7fc bae3 	b.w	b7bf8 <network_connecting>

000bb632 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb632:	2200      	movs	r2, #0
   bb634:	6840      	ldr	r0, [r0, #4]
   bb636:	4611      	mov	r1, r2
   bb638:	f7fc baee 	b.w	b7c18 <network_ready>

000bb63c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb63c:	2300      	movs	r3, #0
   bb63e:	6840      	ldr	r0, [r0, #4]
   bb640:	461a      	mov	r2, r3
   bb642:	4619      	mov	r1, r3
   bb644:	f7fc baf0 	b.w	b7c28 <network_on>

000bb648 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb648:	2300      	movs	r3, #0
   bb64a:	6840      	ldr	r0, [r0, #4]
   bb64c:	461a      	mov	r2, r3
   bb64e:	4619      	mov	r1, r3
   bb650:	f7fc baf2 	b.w	b7c38 <network_off>

000bb654 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb654:	6840      	ldr	r0, [r0, #4]
   bb656:	2100      	movs	r1, #0
   bb658:	f7fc bb16 	b.w	b7c88 <network_is_on>

000bb65c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb65c:	6840      	ldr	r0, [r0, #4]
   bb65e:	2100      	movs	r1, #0
   bb660:	f7fc bb1a 	b.w	b7c98 <network_is_off>

000bb664 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb664:	6840      	ldr	r0, [r0, #4]
   bb666:	2200      	movs	r2, #0
   bb668:	f081 0101 	eor.w	r1, r1, #1
   bb66c:	f7fc baec 	b.w	b7c48 <network_listen>

000bb670 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb670:	6840      	ldr	r0, [r0, #4]
   bb672:	2200      	movs	r2, #0
   bb674:	f7fc baf8 	b.w	b7c68 <network_set_listen_timeout>

000bb678 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb678:	2200      	movs	r2, #0
   bb67a:	6840      	ldr	r0, [r0, #4]
   bb67c:	4611      	mov	r1, r2
   bb67e:	f7fc bafb 	b.w	b7c78 <network_get_listen_timeout>

000bb682 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb682:	2200      	movs	r2, #0
   bb684:	6840      	ldr	r0, [r0, #4]
   bb686:	4611      	mov	r1, r2
   bb688:	f7fc bae6 	b.w	b7c58 <network_listening>

000bb68c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb690:	b095      	sub	sp, #84	; 0x54
   bb692:	4614      	mov	r4, r2
   bb694:	460d      	mov	r5, r1
   bb696:	4607      	mov	r7, r0
    IPAddress addr;
   bb698:	f7ff fb18 	bl	baccc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb69c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb69e:	221c      	movs	r2, #28
   bb6a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb6a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb6a4:	f000 fce4 	bl	bc070 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb6a8:	2340      	movs	r3, #64	; 0x40
   bb6aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb6ac:	4620      	mov	r0, r4
   bb6ae:	466b      	mov	r3, sp
   bb6b0:	aa0c      	add	r2, sp, #48	; 0x30
   bb6b2:	2100      	movs	r1, #0
   bb6b4:	f7fb ffe6 	bl	b7684 <netdb_getaddrinfo>
    if (!r) {
   bb6b8:	4604      	mov	r4, r0
   bb6ba:	2800      	cmp	r0, #0
   bb6bc:	d14b      	bne.n	bb756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb6be:	4602      	mov	r2, r0
   bb6c0:	2101      	movs	r1, #1
   bb6c2:	6868      	ldr	r0, [r5, #4]
   bb6c4:	f7fc faa8 	bl	b7c18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb6ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6cc:	4622      	mov	r2, r4
   bb6ce:	6868      	ldr	r0, [r5, #4]
   bb6d0:	f7fc faa2 	bl	b7c18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb6d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6d6:	4681      	mov	r9, r0
        bool ok = false;
   bb6d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb6da:	2e00      	cmp	r6, #0
   bb6dc:	d03b      	beq.n	bb756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb6de:	2900      	cmp	r1, #0
   bb6e0:	d139      	bne.n	bb756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb6e2:	6873      	ldr	r3, [r6, #4]
   bb6e4:	2b02      	cmp	r3, #2
   bb6e6:	d003      	beq.n	bb6f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb6e8:	2b0a      	cmp	r3, #10
   bb6ea:	d011      	beq.n	bb710 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb6ec:	69f6      	ldr	r6, [r6, #28]
   bb6ee:	e7f4      	b.n	bb6da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb6f0:	f1b8 0f00 	cmp.w	r8, #0
   bb6f4:	d0fa      	beq.n	bb6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb6f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb6f8:	a806      	add	r0, sp, #24
   bb6fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb6fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb6fe:	f7ff fb29 	bl	bad54 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb704:	1d3c      	adds	r4, r7, #4
   bb706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb708:	682b      	ldr	r3, [r5, #0]
   bb70a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb70c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb70e:	e7ed      	b.n	bb6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb710:	f1b9 0f00 	cmp.w	r9, #0
   bb714:	d0ea      	beq.n	bb6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb716:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb718:	2210      	movs	r2, #16
   bb71a:	a801      	add	r0, sp, #4
   bb71c:	f000 fca8 	bl	bc070 <memset>
                    a.v = 6;
   bb720:	2306      	movs	r3, #6
   bb722:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb726:	ad01      	add	r5, sp, #4
   bb728:	f104 0308 	add.w	r3, r4, #8
   bb72c:	3418      	adds	r4, #24
   bb72e:	6818      	ldr	r0, [r3, #0]
   bb730:	6859      	ldr	r1, [r3, #4]
   bb732:	462a      	mov	r2, r5
   bb734:	c203      	stmia	r2!, {r0, r1}
   bb736:	3308      	adds	r3, #8
   bb738:	42a3      	cmp	r3, r4
   bb73a:	4615      	mov	r5, r2
   bb73c:	d1f7      	bne.n	bb72e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb73e:	a901      	add	r1, sp, #4
   bb740:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb742:	ad07      	add	r5, sp, #28
   bb744:	f7ff fad0 	bl	bace8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb74a:	1d3c      	adds	r4, r7, #4
   bb74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb74e:	682b      	ldr	r3, [r5, #0]
   bb750:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb752:	4649      	mov	r1, r9
   bb754:	e7ca      	b.n	bb6ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb756:	9800      	ldr	r0, [sp, #0]
   bb758:	f7fb ff8c 	bl	b7674 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb75c:	4638      	mov	r0, r7
   bb75e:	b015      	add	sp, #84	; 0x54
   bb760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb764:	4b02      	ldr	r3, [pc, #8]	; (bb770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb766:	4a03      	ldr	r2, [pc, #12]	; (bb774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb768:	601a      	str	r2, [r3, #0]
   bb76a:	2200      	movs	r2, #0
   bb76c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb76e:	4770      	bx	lr
   bb770:	2003e720 	.word	0x2003e720
   bb774:	000bf594 	.word	0x000bf594

000bb778 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bb778:	f100 0310 	add.w	r3, r0, #16
   bb77c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bb77e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bb782:	2901      	cmp	r1, #1
   bb784:	4618      	mov	r0, r3
   bb786:	d108      	bne.n	bb79a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bb788:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bb78c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bb790:	3a01      	subs	r2, #1
   bb792:	f103 0310 	add.w	r3, r3, #16
   bb796:	d1f2      	bne.n	bb77e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bb798:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bb79a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bb79c:	bf04      	itt	eq
   bb79e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bb7a2:	1852      	addeq	r2, r2, r1
   bb7a4:	e7f4      	b.n	bb790 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bb7a6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7a6:	b40e      	push	{r1, r2, r3}
   bb7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb7aa:	b088      	sub	sp, #32
   bb7ac:	af00      	add	r7, sp, #0
   bb7ae:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7b2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7b4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7b8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7ba:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7bc:	462b      	mov	r3, r5
   bb7be:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bb7c0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7c2:	f7fc faa9 	bl	b7d18 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bb7c6:	280f      	cmp	r0, #15
   bb7c8:	687a      	ldr	r2, [r7, #4]
   bb7ca:	d91a      	bls.n	bb802 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bb7cc:	f100 0308 	add.w	r3, r0, #8
   bb7d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bb7d4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bb7d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7da:	1c41      	adds	r1, r0, #1
   bb7dc:	462b      	mov	r3, r5
   bb7de:	4668      	mov	r0, sp
        va_start(args, fmt);
   bb7e0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7e2:	f7fc fa99 	bl	b7d18 <vsnprintf>
        if (n > 0) {
   bb7e6:	1e02      	subs	r2, r0, #0
   bb7e8:	dd04      	ble.n	bb7f4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bb7ea:	6823      	ldr	r3, [r4, #0]
   bb7ec:	4669      	mov	r1, sp
   bb7ee:	689b      	ldr	r3, [r3, #8]
   bb7f0:	4620      	mov	r0, r4
   bb7f2:	4798      	blx	r3
   bb7f4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bb7f6:	3720      	adds	r7, #32
   bb7f8:	46bd      	mov	sp, r7
   bb7fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb7fe:	b003      	add	sp, #12
   bb800:	4770      	bx	lr
    } else if (n > 0) {
   bb802:	2800      	cmp	r0, #0
   bb804:	d0f7      	beq.n	bb7f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bb806:	6823      	ldr	r3, [r4, #0]
   bb808:	4602      	mov	r2, r0
   bb80a:	689b      	ldr	r3, [r3, #8]
   bb80c:	f107 0110 	add.w	r1, r7, #16
   bb810:	4620      	mov	r0, r4
   bb812:	4798      	blx	r3
}
   bb814:	e7ef      	b.n	bb7f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bb816 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb816:	b538      	push	{r3, r4, r5, lr}
   bb818:	680b      	ldr	r3, [r1, #0]
   bb81a:	6003      	str	r3, [r0, #0]
   bb81c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bb81e:	6843      	ldr	r3, [r0, #4]
   bb820:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb822:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bb824:	d008      	beq.n	bb838 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bb826:	b115      	cbz	r5, bb82e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bb828:	686b      	ldr	r3, [r5, #4]
   bb82a:	3301      	adds	r3, #1
   bb82c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bb82e:	6860      	ldr	r0, [r4, #4]
   bb830:	b108      	cbz	r0, bb836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bb832:	f7fc fd7a 	bl	b832a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bb836:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb838:	bd38      	pop	{r3, r4, r5, pc}

000bb83a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   bb83a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bb83c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bb83e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bb842:	689b      	ldr	r3, [r3, #8]
   bb844:	2201      	movs	r2, #1
   bb846:	f10d 0107 	add.w	r1, sp, #7
   bb84a:	4798      	blx	r3
}
   bb84c:	b003      	add	sp, #12
   bb84e:	f85d fb04 	ldr.w	pc, [sp], #4

000bb852 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb852:	460b      	mov	r3, r1
   bb854:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bb856:	2200      	movs	r2, #0
   bb858:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bb85a:	e9c0 2200 	strd	r2, r2, [r0]
   bb85e:	4604      	mov	r4, r0
        t_ = t;
   bb860:	6083      	str	r3, [r0, #8]
    if (t) {
   bb862:	b90b      	cbnz	r3, bb868 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bb864:	4620      	mov	r0, r4
   bb866:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bb868:	f7ff ffd5 	bl	bb816 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bb86c:	e7fa      	b.n	bb864 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bb86e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bb86e:	6883      	ldr	r3, [r0, #8]
   bb870:	b1eb      	cbz	r3, bb8ae <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bb872:	781a      	ldrb	r2, [r3, #0]
   bb874:	2a03      	cmp	r2, #3
   bb876:	d81a      	bhi.n	bb8ae <_ZNK5spark9JSONValue4typeEv+0x40>
   bb878:	e8df f002 	tbb	[pc, r2]
   bb87c:	1b021704 	.word	0x1b021704
   bb880:	2005      	movs	r0, #5
   bb882:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bb884:	6802      	ldr	r2, [r0, #0]
   bb886:	685b      	ldr	r3, [r3, #4]
   bb888:	6852      	ldr	r2, [r2, #4]
   bb88a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bb88c:	282d      	cmp	r0, #45	; 0x2d
   bb88e:	d012      	beq.n	bb8b6 <_ZNK5spark9JSONValue4typeEv+0x48>
   bb890:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb894:	2b09      	cmp	r3, #9
   bb896:	d90e      	bls.n	bb8b6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bb898:	2874      	cmp	r0, #116	; 0x74
   bb89a:	d00e      	beq.n	bb8ba <_ZNK5spark9JSONValue4typeEv+0x4c>
   bb89c:	2866      	cmp	r0, #102	; 0x66
   bb89e:	d00c      	beq.n	bb8ba <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bb8a0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bb8a4:	4258      	negs	r0, r3
   bb8a6:	4158      	adcs	r0, r3
   bb8a8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bb8aa:	2006      	movs	r0, #6
   bb8ac:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bb8ae:	2000      	movs	r0, #0
   bb8b0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bb8b2:	2004      	movs	r0, #4
   bb8b4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bb8b6:	2003      	movs	r0, #3
   bb8b8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bb8ba:	2002      	movs	r0, #2
}
   bb8bc:	4770      	bx	lr

000bb8be <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bb8be:	b510      	push	{r4, lr}
   bb8c0:	4604      	mov	r4, r0
    switch (type()) {
   bb8c2:	f7ff ffd4 	bl	bb86e <_ZNK5spark9JSONValue4typeEv>
   bb8c6:	2802      	cmp	r0, #2
   bb8c8:	d00e      	beq.n	bb8e8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bb8ca:	1ec3      	subs	r3, r0, #3
   bb8cc:	b2db      	uxtb	r3, r3
   bb8ce:	2b01      	cmp	r3, #1
   bb8d0:	d814      	bhi.n	bb8fc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bb8d2:	6822      	ldr	r2, [r4, #0]
   bb8d4:	68a3      	ldr	r3, [r4, #8]
   bb8d6:	6850      	ldr	r0, [r2, #4]
   bb8d8:	685b      	ldr	r3, [r3, #4]
}
   bb8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bb8de:	220a      	movs	r2, #10
   bb8e0:	2100      	movs	r1, #0
   bb8e2:	4418      	add	r0, r3
   bb8e4:	f001 bb10 	b.w	bcf08 <strtol>
        const char* const s = d_->json + t_->start;
   bb8e8:	6822      	ldr	r2, [r4, #0]
   bb8ea:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bb8ec:	6852      	ldr	r2, [r2, #4]
   bb8ee:	685b      	ldr	r3, [r3, #4]
   bb8f0:	5cd0      	ldrb	r0, [r2, r3]
   bb8f2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bb8f6:	4258      	negs	r0, r3
   bb8f8:	4158      	adcs	r0, r3
}
   bb8fa:	bd10      	pop	{r4, pc}
    switch (type()) {
   bb8fc:	2000      	movs	r0, #0
   bb8fe:	e7fc      	b.n	bb8fa <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bb900 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb900:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb902:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb904:	e9c0 3300 	strd	r3, r3, [r0]
   bb908:	4604      	mov	r4, r0
        n_(0) {
   bb90a:	480e      	ldr	r0, [pc, #56]	; (bb944 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bb90c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bb910:	b1a9      	cbz	r1, bb93e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bb912:	780b      	ldrb	r3, [r1, #0]
   bb914:	2b03      	cmp	r3, #3
   bb916:	d006      	beq.n	bb926 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bb918:	b98b      	cbnz	r3, bb93e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bb91a:	6813      	ldr	r3, [r2, #0]
   bb91c:	6858      	ldr	r0, [r3, #4]
   bb91e:	684b      	ldr	r3, [r1, #4]
   bb920:	5cc3      	ldrb	r3, [r0, r3]
   bb922:	2b6e      	cmp	r3, #110	; 0x6e
   bb924:	d007      	beq.n	bb936 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bb926:	6813      	ldr	r3, [r2, #0]
   bb928:	684d      	ldr	r5, [r1, #4]
   bb92a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bb92c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bb92e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bb930:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bb932:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bb934:	60e3      	str	r3, [r4, #12]
   bb936:	4611      	mov	r1, r2
   bb938:	4620      	mov	r0, r4
   bb93a:	f7ff ff6c 	bl	bb816 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb93e:	4620      	mov	r0, r4
   bb940:	bd38      	pop	{r3, r4, r5, pc}
   bb942:	bf00      	nop
   bb944:	000bf38b 	.word	0x000bf38b

000bb948 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb948:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb94a:	2500      	movs	r5, #0
   bb94c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bb94e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bb952:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bb956:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb95a:	4604      	mov	r4, r0
   bb95c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bb95e:	b14b      	cbz	r3, bb974 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bb960:	781a      	ldrb	r2, [r3, #0]
   bb962:	2a01      	cmp	r2, #1
   bb964:	d106      	bne.n	bb974 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bb966:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bb96a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bb96c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bb96e:	6143      	str	r3, [r0, #20]
   bb970:	f7ff ff51 	bl	bb816 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb974:	4620      	mov	r0, r4
   bb976:	bd38      	pop	{r3, r4, r5, pc}

000bb978 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bb978:	b510      	push	{r4, lr}
    if (!n_) {
   bb97a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bb97c:	4604      	mov	r4, r0
    if (!n_) {
   bb97e:	b163      	cbz	r3, bb99a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bb980:	6880      	ldr	r0, [r0, #8]
   bb982:	60e0      	str	r0, [r4, #12]
    --n_;
   bb984:	3b01      	subs	r3, #1
    ++t_;
   bb986:	3010      	adds	r0, #16
   bb988:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bb98a:	6120      	str	r0, [r4, #16]
    --n_;
   bb98c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bb98e:	b113      	cbz	r3, bb996 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bb990:	f7ff fef2 	bl	bb778 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bb994:	60a0      	str	r0, [r4, #8]
    return true;
   bb996:	2001      	movs	r0, #1
   bb998:	e000      	b.n	bb99c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bb99a:	4618      	mov	r0, r3
}
   bb99c:	bd10      	pop	{r4, pc}

000bb99e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb99e:	b510      	push	{r4, lr}
    write('}');
   bb9a0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb9a2:	4604      	mov	r4, r0
    write('}');
   bb9a4:	f7ff ff49 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bb9a8:	2301      	movs	r3, #1
   bb9aa:	7123      	strb	r3, [r4, #4]
}
   bb9ac:	4620      	mov	r0, r4
   bb9ae:	bd10      	pop	{r4, pc}

000bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bb9b0:	b508      	push	{r3, lr}
    switch (state_) {
   bb9b2:	7903      	ldrb	r3, [r0, #4]
   bb9b4:	2b01      	cmp	r3, #1
   bb9b6:	d002      	beq.n	bb9be <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bb9b8:	2b02      	cmp	r3, #2
   bb9ba:	d004      	beq.n	bb9c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bb9bc:	bd08      	pop	{r3, pc}
        write(',');
   bb9be:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bb9c0:	f7ff ff3b 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
}
   bb9c4:	e7fa      	b.n	bb9bc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bb9c6:	213a      	movs	r1, #58	; 0x3a
   bb9c8:	e7fa      	b.n	bb9c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bb9ca <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bb9ca:	b510      	push	{r4, lr}
   bb9cc:	4604      	mov	r4, r0
    writeSeparator();
   bb9ce:	f7ff ffef 	bl	bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bb9d2:	4620      	mov	r0, r4
   bb9d4:	217b      	movs	r1, #123	; 0x7b
   bb9d6:	f7ff ff30 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bb9da:	2300      	movs	r3, #0
   bb9dc:	7123      	strb	r3, [r4, #4]
}
   bb9de:	4620      	mov	r0, r4
   bb9e0:	bd10      	pop	{r4, pc}
	...

000bb9e4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bb9e4:	b513      	push	{r0, r1, r4, lr}
   bb9e6:	4604      	mov	r4, r0
   bb9e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb9ea:	f7ff ffe1 	bl	bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bb9ee:	6823      	ldr	r3, [r4, #0]
   bb9f0:	9a01      	ldr	r2, [sp, #4]
   bb9f2:	68db      	ldr	r3, [r3, #12]
   bb9f4:	4903      	ldr	r1, [pc, #12]	; (bba04 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bb9f6:	4620      	mov	r0, r4
   bb9f8:	4798      	blx	r3
    state_ = NEXT;
   bb9fa:	2301      	movs	r3, #1
}
   bb9fc:	4620      	mov	r0, r4
    state_ = NEXT;
   bb9fe:	7123      	strb	r3, [r4, #4]
}
   bba00:	b002      	add	sp, #8
   bba02:	bd10      	pop	{r4, pc}
   bba04:	000bf4e4 	.word	0x000bf4e4

000bba08 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bba08:	b513      	push	{r0, r1, r4, lr}
   bba0a:	4604      	mov	r4, r0
   bba0c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bba0e:	f7ff ffcf 	bl	bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bba12:	6823      	ldr	r3, [r4, #0]
   bba14:	9a01      	ldr	r2, [sp, #4]
   bba16:	68db      	ldr	r3, [r3, #12]
   bba18:	4903      	ldr	r1, [pc, #12]	; (bba28 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bba1a:	4620      	mov	r0, r4
   bba1c:	4798      	blx	r3
    state_ = NEXT;
   bba1e:	2301      	movs	r3, #1
}
   bba20:	4620      	mov	r0, r4
    state_ = NEXT;
   bba22:	7123      	strb	r3, [r4, #4]
}
   bba24:	b002      	add	sp, #8
   bba26:	bd10      	pop	{r4, pc}
   bba28:	000bf5c8 	.word	0x000bf5c8

000bba2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bba30:	460d      	mov	r5, r1
    write('"');
   bba32:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bba34:	4690      	mov	r8, r2
   bba36:	4604      	mov	r4, r0
    write('"');
   bba38:	f7ff feff 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bba3c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbae4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bba40:	44a8      	add	r8, r5
    const char *s = str;
   bba42:	462f      	mov	r7, r5
    while (s != end) {
   bba44:	4547      	cmp	r7, r8
   bba46:	46ba      	mov	sl, r7
   bba48:	d03d      	beq.n	bbac6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bba4a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bba4e:	2e22      	cmp	r6, #34	; 0x22
   bba50:	d006      	beq.n	bba60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bba52:	2e5c      	cmp	r6, #92	; 0x5c
   bba54:	d004      	beq.n	bba60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bba56:	4630      	mov	r0, r6
   bba58:	f000 faca 	bl	bbff0 <isprint>
   bba5c:	2800      	cmp	r0, #0
   bba5e:	d1f1      	bne.n	bba44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bba60:	6823      	ldr	r3, [r4, #0]
   bba62:	ebaa 0205 	sub.w	r2, sl, r5
   bba66:	689b      	ldr	r3, [r3, #8]
   bba68:	4629      	mov	r1, r5
   bba6a:	4620      	mov	r0, r4
   bba6c:	4798      	blx	r3
            write('\\');
   bba6e:	215c      	movs	r1, #92	; 0x5c
   bba70:	4620      	mov	r0, r4
   bba72:	f7ff fee2 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bba76:	2e0d      	cmp	r6, #13
   bba78:	d80a      	bhi.n	bba90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bba7a:	2e07      	cmp	r6, #7
   bba7c:	d91c      	bls.n	bbab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bba7e:	f1a6 0308 	sub.w	r3, r6, #8
   bba82:	2b05      	cmp	r3, #5
   bba84:	d818      	bhi.n	bbab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bba86:	e8df f003 	tbb	[pc, r3]
   bba8a:	0f0d      	.short	0x0f0d
   bba8c:	15131711 	.word	0x15131711
   bba90:	2e22      	cmp	r6, #34	; 0x22
   bba92:	d001      	beq.n	bba98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bba94:	2e5c      	cmp	r6, #92	; 0x5c
   bba96:	d10f      	bne.n	bbab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bba98:	4631      	mov	r1, r6
                write('b');
   bba9a:	4620      	mov	r0, r4
   bba9c:	f7ff fecd 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bbaa0:	463d      	mov	r5, r7
    while (s != end) {
   bbaa2:	e7cf      	b.n	bba44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bbaa4:	2162      	movs	r1, #98	; 0x62
   bbaa6:	e7f8      	b.n	bba9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bbaa8:	2174      	movs	r1, #116	; 0x74
   bbaaa:	e7f6      	b.n	bba9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bbaac:	216e      	movs	r1, #110	; 0x6e
   bbaae:	e7f4      	b.n	bba9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bbab0:	2166      	movs	r1, #102	; 0x66
   bbab2:	e7f2      	b.n	bba9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bbab4:	2172      	movs	r1, #114	; 0x72
   bbab6:	e7f0      	b.n	bba9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bbab8:	6823      	ldr	r3, [r4, #0]
   bbaba:	4632      	mov	r2, r6
   bbabc:	68db      	ldr	r3, [r3, #12]
   bbabe:	4649      	mov	r1, r9
   bbac0:	4620      	mov	r0, r4
   bbac2:	4798      	blx	r3
                break;
   bbac4:	e7ec      	b.n	bbaa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bbac6:	42bd      	cmp	r5, r7
   bbac8:	d005      	beq.n	bbad6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bbaca:	6823      	ldr	r3, [r4, #0]
   bbacc:	1b7a      	subs	r2, r7, r5
   bbace:	689b      	ldr	r3, [r3, #8]
   bbad0:	4629      	mov	r1, r5
   bbad2:	4620      	mov	r0, r4
   bbad4:	4798      	blx	r3
    }
    write('"');
   bbad6:	2122      	movs	r1, #34	; 0x22
   bbad8:	4620      	mov	r0, r4
   bbada:	f7ff feae 	bl	bb83a <_ZN5spark10JSONWriter5writeEc>
}
   bbade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbae2:	bf00      	nop
   bbae4:	000bf5cb 	.word	0x000bf5cb

000bbae8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bbae8:	b513      	push	{r0, r1, r4, lr}
   bbaea:	4604      	mov	r4, r0
   bbaec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbaf0:	f7ff ff5e 	bl	bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bbaf4:	4620      	mov	r0, r4
   bbaf6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbafa:	f7ff ff97 	bl	bba2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bbafe:	2302      	movs	r3, #2
}
   bbb00:	4620      	mov	r0, r4
    state_ = VALUE;
   bbb02:	7123      	strb	r3, [r4, #4]
}
   bbb04:	b002      	add	sp, #8
   bbb06:	bd10      	pop	{r4, pc}

000bbb08 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bbb08:	b513      	push	{r0, r1, r4, lr}
   bbb0a:	4604      	mov	r4, r0
   bbb0c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbb10:	f7ff ff4e 	bl	bb9b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bbb14:	4620      	mov	r0, r4
   bbb16:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbb1a:	f7ff ff87 	bl	bba2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bbb1e:	2301      	movs	r3, #1
}
   bbb20:	4620      	mov	r0, r4
    state_ = NEXT;
   bbb22:	7123      	strb	r3, [r4, #4]
}
   bbb24:	b002      	add	sp, #8
   bbb26:	bd10      	pop	{r4, pc}

000bbb28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bbb28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bbb2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bbb2c:	d902      	bls.n	bbb34 <pinAvailable+0xc>
    return false;
   bbb2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bbb30:	b002      	add	sp, #8
   bbb32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bbb34:	f1a0 030b 	sub.w	r3, r0, #11
   bbb38:	2b02      	cmp	r3, #2
   bbb3a:	d81a      	bhi.n	bbb72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bbb3c:	4c17      	ldr	r4, [pc, #92]	; (bbb9c <pinAvailable+0x74>)
   bbb3e:	7821      	ldrb	r1, [r4, #0]
   bbb40:	f3bf 8f5b 	dmb	ish
   bbb44:	f011 0101 	ands.w	r1, r1, #1
   bbb48:	d10b      	bne.n	bbb62 <pinAvailable+0x3a>
   bbb4a:	4620      	mov	r0, r4
   bbb4c:	9101      	str	r1, [sp, #4]
   bbb4e:	f7f8 ffc5 	bl	b4adc <__cxa_guard_acquire>
   bbb52:	9901      	ldr	r1, [sp, #4]
   bbb54:	b128      	cbz	r0, bbb62 <pinAvailable+0x3a>
   bbb56:	4812      	ldr	r0, [pc, #72]	; (bbba0 <pinAvailable+0x78>)
   bbb58:	f7fc f952 	bl	b7e00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bbb5c:	4620      	mov	r0, r4
   bbb5e:	f7f8 ffc2 	bl	b4ae6 <__cxa_guard_release>
   bbb62:	4b0f      	ldr	r3, [pc, #60]	; (bbba0 <pinAvailable+0x78>)
   bbb64:	7818      	ldrb	r0, [r3, #0]
   bbb66:	f7fb ff83 	bl	b7a70 <hal_spi_is_enabled>
   bbb6a:	2800      	cmp	r0, #0
   bbb6c:	d1df      	bne.n	bbb2e <pinAvailable+0x6>
  return true; // 'pin' is available
   bbb6e:	2001      	movs	r0, #1
   bbb70:	e7de      	b.n	bbb30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bbb72:	2801      	cmp	r0, #1
   bbb74:	d809      	bhi.n	bbb8a <pinAvailable+0x62>
   bbb76:	f000 f8eb 	bl	bbd50 <_Z19__fetch_global_Wirev>
   bbb7a:	2100      	movs	r1, #0
   bbb7c:	7c00      	ldrb	r0, [r0, #16]
   bbb7e:	f7fb ff1f 	bl	b79c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bbb82:	f080 0001 	eor.w	r0, r0, #1
   bbb86:	b2c0      	uxtb	r0, r0
   bbb88:	e7d2      	b.n	bbb30 <pinAvailable+0x8>
   bbb8a:	3809      	subs	r0, #9
   bbb8c:	2801      	cmp	r0, #1
   bbb8e:	d8ee      	bhi.n	bbb6e <pinAvailable+0x46>
   bbb90:	f000 f89e 	bl	bbcd0 <_Z22__fetch_global_Serial1v>
   bbb94:	7c00      	ldrb	r0, [r0, #16]
   bbb96:	f7fb feab 	bl	b78f0 <hal_usart_is_enabled>
   bbb9a:	e7f2      	b.n	bbb82 <pinAvailable+0x5a>
   bbb9c:	2003e67c 	.word	0x2003e67c
   bbba0:	2003e680 	.word	0x2003e680

000bbba4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbba4:	2823      	cmp	r0, #35	; 0x23
{
   bbba6:	b538      	push	{r3, r4, r5, lr}
   bbba8:	4604      	mov	r4, r0
   bbbaa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbbac:	d80a      	bhi.n	bbbc4 <pinMode+0x20>
   bbbae:	29ff      	cmp	r1, #255	; 0xff
   bbbb0:	d008      	beq.n	bbbc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bbbb2:	f7ff ffb9 	bl	bbb28 <pinAvailable>
   bbbb6:	b128      	cbz	r0, bbbc4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bbbb8:	4629      	mov	r1, r5
   bbbba:	4620      	mov	r0, r4
}
   bbbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bbbc0:	f7fb bd70 	b.w	b76a4 <hal_gpio_mode>
}
   bbbc4:	bd38      	pop	{r3, r4, r5, pc}

000bbbc6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bbbc6:	b538      	push	{r3, r4, r5, lr}
   bbbc8:	4604      	mov	r4, r0
   bbbca:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bbbcc:	f7fb fd72 	bl	b76b4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bbbd0:	28ff      	cmp	r0, #255	; 0xff
   bbbd2:	d010      	beq.n	bbbf6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bbbd4:	2806      	cmp	r0, #6
   bbbd6:	d804      	bhi.n	bbbe2 <digitalWrite+0x1c>
   bbbd8:	234d      	movs	r3, #77	; 0x4d
   bbbda:	fa23 f000 	lsr.w	r0, r3, r0
   bbbde:	07c3      	lsls	r3, r0, #31
   bbbe0:	d409      	bmi.n	bbbf6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bbbe2:	4620      	mov	r0, r4
   bbbe4:	f7ff ffa0 	bl	bbb28 <pinAvailable>
   bbbe8:	b128      	cbz	r0, bbbf6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bbbea:	4629      	mov	r1, r5
   bbbec:	4620      	mov	r0, r4
}
   bbbee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bbbf2:	f7fb bd67 	b.w	b76c4 <hal_gpio_write>
}
   bbbf6:	bd38      	pop	{r3, r4, r5, pc}

000bbbf8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bbbf8:	b510      	push	{r4, lr}
   bbbfa:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bbbfc:	f7fb fd5a 	bl	b76b4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bbc00:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bbc02:	b2db      	uxtb	r3, r3
   bbc04:	2b01      	cmp	r3, #1
   bbc06:	d908      	bls.n	bbc1a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bbc08:	4620      	mov	r0, r4
   bbc0a:	f7ff ff8d 	bl	bbb28 <pinAvailable>
   bbc0e:	b120      	cbz	r0, bbc1a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bbc10:	4620      	mov	r0, r4
}
   bbc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bbc16:	f7fb bd5d 	b.w	b76d4 <hal_gpio_read>
}
   bbc1a:	2000      	movs	r0, #0
   bbc1c:	bd10      	pop	{r4, pc}

000bbc1e <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bbc1e:	280d      	cmp	r0, #13
{
   bbc20:	b510      	push	{r4, lr}
   bbc22:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bbc24:	bf9c      	itt	ls
   bbc26:	340e      	addls	r4, #14
   bbc28:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bbc2a:	4620      	mov	r0, r4
   bbc2c:	f7ff ff7c 	bl	bbb28 <pinAvailable>
   bbc30:	b150      	cbz	r0, bbc48 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bbc32:	2103      	movs	r1, #3
   bbc34:	4620      	mov	r0, r4
   bbc36:	f7fb fd2d 	bl	b7694 <hal_pin_validate_function>
   bbc3a:	2803      	cmp	r0, #3
   bbc3c:	d104      	bne.n	bbc48 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bbc3e:	4620      	mov	r0, r4
}
   bbc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bbc44:	f7fb bd56 	b.w	b76f4 <hal_adc_read>
}
   bbc48:	2000      	movs	r0, #0
   bbc4a:	bd10      	pop	{r4, pc}

000bbc4c <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   bbc4c:	b538      	push	{r3, r4, r5, lr}
   bbc4e:	4604      	mov	r4, r0
   bbc50:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   bbc52:	f7ff ff69 	bl	bbb28 <pinAvailable>
   bbc56:	b1f0      	cbz	r0, bbc96 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   bbc58:	2104      	movs	r1, #4
   bbc5a:	4620      	mov	r0, r4
   bbc5c:	f7fb fd1a 	bl	b7694 <hal_pin_validate_function>
   bbc60:	2804      	cmp	r0, #4
   bbc62:	d105      	bne.n	bbc70 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   bbc64:	b2a9      	uxth	r1, r5
   bbc66:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   bbc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   bbc6c:	f7fb bd3a 	b.w	b76e4 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bbc70:	2102      	movs	r1, #2
   bbc72:	4620      	mov	r0, r4
   bbc74:	f7fb fd0e 	bl	b7694 <hal_pin_validate_function>
   bbc78:	2802      	cmp	r0, #2
   bbc7a:	d10c      	bne.n	bbc96 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   bbc7c:	4620      	mov	r0, r4
   bbc7e:	f7fb fd19 	bl	b76b4 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bbc82:	2801      	cmp	r0, #1
   bbc84:	d001      	beq.n	bbc8a <_Z11analogWritetm+0x3e>
   bbc86:	2804      	cmp	r0, #4
   bbc88:	d105      	bne.n	bbc96 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   bbc8a:	4629      	mov	r1, r5
   bbc8c:	4620      	mov	r0, r4
}
   bbc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   bbc92:	f7fb bd37 	b.w	b7704 <hal_pwm_write_ext>
}
   bbc96:	bd38      	pop	{r3, r4, r5, pc}

000bbc98 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbc98:	4770      	bx	lr
	...

000bbc9c <_Z20acquireSerial1Bufferv>:
{
   bbc9c:	b538      	push	{r3, r4, r5, lr}
   bbc9e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbca0:	2514      	movs	r5, #20
   bbca2:	462a      	mov	r2, r5
   bbca4:	2100      	movs	r1, #0
   bbca6:	f000 f9e3 	bl	bc070 <memset>
   bbcaa:	8025      	strh	r5, [r4, #0]
   bbcac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcae:	4907      	ldr	r1, [pc, #28]	; (bbccc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbcb0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcb2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbcb4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcb6:	f000 f871 	bl	bbd9c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcba:	4904      	ldr	r1, [pc, #16]	; (bbccc <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbcbc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcbe:	4628      	mov	r0, r5
   bbcc0:	f000 f86c 	bl	bbd9c <_ZnajRKSt9nothrow_t>
    };
   bbcc4:	60e0      	str	r0, [r4, #12]
}
   bbcc6:	4620      	mov	r0, r4
   bbcc8:	bd38      	pop	{r3, r4, r5, pc}
   bbcca:	bf00      	nop
   bbccc:	000bf5d1 	.word	0x000bf5d1

000bbcd0 <_Z22__fetch_global_Serial1v>:
{
   bbcd0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbcd2:	4d0e      	ldr	r5, [pc, #56]	; (bbd0c <_Z22__fetch_global_Serial1v+0x3c>)
   bbcd4:	7829      	ldrb	r1, [r5, #0]
   bbcd6:	f3bf 8f5b 	dmb	ish
   bbcda:	f011 0401 	ands.w	r4, r1, #1
{
   bbcde:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbce0:	d111      	bne.n	bbd06 <_Z22__fetch_global_Serial1v+0x36>
   bbce2:	4628      	mov	r0, r5
   bbce4:	f7f8 fefa 	bl	b4adc <__cxa_guard_acquire>
   bbce8:	b168      	cbz	r0, bbd06 <_Z22__fetch_global_Serial1v+0x36>
   bbcea:	a801      	add	r0, sp, #4
   bbcec:	f7ff ffd6 	bl	bbc9c <_Z20acquireSerial1Bufferv>
   bbcf0:	aa01      	add	r2, sp, #4
   bbcf2:	4621      	mov	r1, r4
   bbcf4:	4806      	ldr	r0, [pc, #24]	; (bbd10 <_Z22__fetch_global_Serial1v+0x40>)
   bbcf6:	f7ff f903 	bl	baf00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbcfa:	4628      	mov	r0, r5
   bbcfc:	f7f8 fef3 	bl	b4ae6 <__cxa_guard_release>
   bbd00:	4804      	ldr	r0, [pc, #16]	; (bbd14 <_Z22__fetch_global_Serial1v+0x44>)
   bbd02:	f000 f963 	bl	bbfcc <atexit>
    return serial1;
}
   bbd06:	4802      	ldr	r0, [pc, #8]	; (bbd10 <_Z22__fetch_global_Serial1v+0x40>)
   bbd08:	b007      	add	sp, #28
   bbd0a:	bd30      	pop	{r4, r5, pc}
   bbd0c:	2003e728 	.word	0x2003e728
   bbd10:	2003e72c 	.word	0x2003e72c
   bbd14:	000bbc99 	.word	0x000bbc99

000bbd18 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd18:	4770      	bx	lr
	...

000bbd1c <_Z17acquireWireBufferv>:
{
   bbd1c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbd1e:	4b0a      	ldr	r3, [pc, #40]	; (bbd48 <_Z17acquireWireBufferv+0x2c>)
   bbd20:	6003      	str	r3, [r0, #0]
   bbd22:	2301      	movs	r3, #1
{
   bbd24:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbd26:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd28:	4908      	ldr	r1, [pc, #32]	; (bbd4c <_Z17acquireWireBufferv+0x30>)
   bbd2a:	2020      	movs	r0, #32
   bbd2c:	f000 f836 	bl	bbd9c <_ZnajRKSt9nothrow_t>
	};
   bbd30:	2520      	movs	r5, #32
   bbd32:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd34:	4905      	ldr	r1, [pc, #20]	; (bbd4c <_Z17acquireWireBufferv+0x30>)
	};
   bbd36:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd38:	4628      	mov	r0, r5
   bbd3a:	f000 f82f 	bl	bbd9c <_ZnajRKSt9nothrow_t>
	};
   bbd3e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbd42:	4620      	mov	r0, r4
   bbd44:	bd38      	pop	{r3, r4, r5, pc}
   bbd46:	bf00      	nop
   bbd48:	00010018 	.word	0x00010018
   bbd4c:	000bf5d1 	.word	0x000bf5d1

000bbd50 <_Z19__fetch_global_Wirev>:
{
   bbd50:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd52:	4d0e      	ldr	r5, [pc, #56]	; (bbd8c <_Z19__fetch_global_Wirev+0x3c>)
   bbd54:	7829      	ldrb	r1, [r5, #0]
   bbd56:	f3bf 8f5b 	dmb	ish
   bbd5a:	f011 0401 	ands.w	r4, r1, #1
{
   bbd5e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd60:	d111      	bne.n	bbd86 <_Z19__fetch_global_Wirev+0x36>
   bbd62:	4628      	mov	r0, r5
   bbd64:	f7f8 feba 	bl	b4adc <__cxa_guard_acquire>
   bbd68:	b168      	cbz	r0, bbd86 <_Z19__fetch_global_Wirev+0x36>
   bbd6a:	4668      	mov	r0, sp
   bbd6c:	f7ff ffd6 	bl	bbd1c <_Z17acquireWireBufferv>
   bbd70:	466a      	mov	r2, sp
   bbd72:	4621      	mov	r1, r4
   bbd74:	4806      	ldr	r0, [pc, #24]	; (bbd90 <_Z19__fetch_global_Wirev+0x40>)
   bbd76:	f7ff f90d 	bl	baf94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbd7a:	4628      	mov	r0, r5
   bbd7c:	f7f8 feb3 	bl	b4ae6 <__cxa_guard_release>
   bbd80:	4804      	ldr	r0, [pc, #16]	; (bbd94 <_Z19__fetch_global_Wirev+0x44>)
   bbd82:	f000 f923 	bl	bbfcc <atexit>
	return wire;
}
   bbd86:	4802      	ldr	r0, [pc, #8]	; (bbd90 <_Z19__fetch_global_Wirev+0x40>)
   bbd88:	b007      	add	sp, #28
   bbd8a:	bd30      	pop	{r4, r5, pc}
   bbd8c:	2003e744 	.word	0x2003e744
   bbd90:	2003e748 	.word	0x2003e748
   bbd94:	000bbd19 	.word	0x000bbd19

000bbd98 <_ZnwjRKSt9nothrow_t>:
   bbd98:	f7f8 be8b 	b.w	b4ab2 <_Znwj>

000bbd9c <_ZnajRKSt9nothrow_t>:
   bbd9c:	f7f8 be8b 	b.w	b4ab6 <_Znaj>

000bbda0 <_ZSt25__throw_bad_function_callv>:
   bbda0:	b508      	push	{r3, lr}
   bbda2:	f7fb ffc1 	bl	b7d28 <abort>
	...

000bbda8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bbda8:	4901      	ldr	r1, [pc, #4]	; (bbdb0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bbdaa:	f000 b8f9 	b.w	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbdae:	bf00      	nop
   bbdb0:	000bf5ec 	.word	0x000bf5ec

000bbdb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bbdb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bbdb6:	2400      	movs	r4, #0
   bbdb8:	2310      	movs	r3, #16
   bbdba:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bbdbe:	6803      	ldr	r3, [r0, #0]
   bbdc0:	4615      	mov	r5, r2
   bbdc2:	699e      	ldr	r6, [r3, #24]
   bbdc4:	6812      	ldr	r2, [r2, #0]
   bbdc6:	466b      	mov	r3, sp
   bbdc8:	e9cd 4400 	strd	r4, r4, [sp]
   bbdcc:	47b0      	blx	r6
   bbdce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bbdd2:	f003 0306 	and.w	r3, r3, #6
   bbdd6:	2b06      	cmp	r3, #6
   bbdd8:	bf03      	ittte	eq
   bbdda:	9b00      	ldreq	r3, [sp, #0]
   bbddc:	602b      	streq	r3, [r5, #0]
   bbdde:	2001      	moveq	r0, #1
   bbde0:	4620      	movne	r0, r4
   bbde2:	b004      	add	sp, #16
   bbde4:	bd70      	pop	{r4, r5, r6, pc}

000bbde6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bbde6:	9800      	ldr	r0, [sp, #0]
   bbde8:	4290      	cmp	r0, r2
   bbdea:	bf14      	ite	ne
   bbdec:	2001      	movne	r0, #1
   bbdee:	2006      	moveq	r0, #6
   bbdf0:	4770      	bx	lr
	...

000bbdf4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bbdf4:	b510      	push	{r4, lr}
   bbdf6:	4b03      	ldr	r3, [pc, #12]	; (bbe04 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bbdf8:	6003      	str	r3, [r0, #0]
   bbdfa:	4604      	mov	r4, r0
   bbdfc:	f000 f8cd 	bl	bbf9a <_ZNSt9type_infoD1Ev>
   bbe00:	4620      	mov	r0, r4
   bbe02:	bd10      	pop	{r4, pc}
   bbe04:	000bf62c 	.word	0x000bf62c

000bbe08 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bbe08:	b510      	push	{r4, lr}
   bbe0a:	4604      	mov	r4, r0
   bbe0c:	f7ff fff2 	bl	bbdf4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbe10:	4620      	mov	r0, r4
   bbe12:	2108      	movs	r1, #8
   bbe14:	f7f8 fe53 	bl	b4abe <_ZdlPvj>
   bbe18:	4620      	mov	r0, r4
   bbe1a:	bd10      	pop	{r4, pc}

000bbe1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bbe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbe20:	461f      	mov	r7, r3
   bbe22:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bbe26:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bbe2a:	4598      	cmp	r8, r3
   bbe2c:	4606      	mov	r6, r0
   bbe2e:	4615      	mov	r5, r2
   bbe30:	d107      	bne.n	bbe42 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbe32:	9907      	ldr	r1, [sp, #28]
   bbe34:	f000 f8b4 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbe38:	b118      	cbz	r0, bbe42 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbe3a:	7165      	strb	r5, [r4, #5]
   bbe3c:	2000      	movs	r0, #0
   bbe3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbe42:	4639      	mov	r1, r7
   bbe44:	4630      	mov	r0, r6
   bbe46:	f000 f8ab 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbe4a:	2800      	cmp	r0, #0
   bbe4c:	d0f6      	beq.n	bbe3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bbe4e:	2301      	movs	r3, #1
   bbe50:	f8c4 8000 	str.w	r8, [r4]
   bbe54:	7125      	strb	r5, [r4, #4]
   bbe56:	71a3      	strb	r3, [r4, #6]
   bbe58:	e7f0      	b.n	bbe3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bbe5a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bbe5a:	b538      	push	{r3, r4, r5, lr}
   bbe5c:	4615      	mov	r5, r2
   bbe5e:	461c      	mov	r4, r3
   bbe60:	f000 f89e 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbe64:	b120      	cbz	r0, bbe70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bbe66:	2308      	movs	r3, #8
   bbe68:	60e3      	str	r3, [r4, #12]
   bbe6a:	2306      	movs	r3, #6
   bbe6c:	6025      	str	r5, [r4, #0]
   bbe6e:	7123      	strb	r3, [r4, #4]
   bbe70:	bd38      	pop	{r3, r4, r5, pc}

000bbe72 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bbe72:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbe74:	4605      	mov	r5, r0
   bbe76:	460c      	mov	r4, r1
   bbe78:	9201      	str	r2, [sp, #4]
   bbe7a:	461e      	mov	r6, r3
   bbe7c:	f000 f890 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbe80:	b950      	cbnz	r0, bbe98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbe82:	2e03      	cmp	r6, #3
   bbe84:	d808      	bhi.n	bbe98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbe86:	6823      	ldr	r3, [r4, #0]
   bbe88:	9a01      	ldr	r2, [sp, #4]
   bbe8a:	695b      	ldr	r3, [r3, #20]
   bbe8c:	4629      	mov	r1, r5
   bbe8e:	4620      	mov	r0, r4
   bbe90:	b002      	add	sp, #8
   bbe92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbe96:	4718      	bx	r3
   bbe98:	b002      	add	sp, #8
   bbe9a:	bd70      	pop	{r4, r5, r6, pc}

000bbe9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bbe9c:	b510      	push	{r4, lr}
   bbe9e:	4b03      	ldr	r3, [pc, #12]	; (bbeac <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bbea0:	6003      	str	r3, [r0, #0]
   bbea2:	4604      	mov	r4, r0
   bbea4:	f7ff ffa6 	bl	bbdf4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbea8:	4620      	mov	r0, r4
   bbeaa:	bd10      	pop	{r4, pc}
   bbeac:	000bf68c 	.word	0x000bf68c

000bbeb0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bbeb0:	b510      	push	{r4, lr}
   bbeb2:	4604      	mov	r4, r0
   bbeb4:	f7ff fff2 	bl	bbe9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bbeb8:	4620      	mov	r0, r4
   bbeba:	210c      	movs	r1, #12
   bbebc:	f7f8 fdff 	bl	b4abe <_ZdlPvj>
   bbec0:	4620      	mov	r0, r4
   bbec2:	bd10      	pop	{r4, pc}

000bbec4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bbec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbec6:	9f08      	ldr	r7, [sp, #32]
   bbec8:	4297      	cmp	r7, r2
   bbeca:	4605      	mov	r5, r0
   bbecc:	460e      	mov	r6, r1
   bbece:	4614      	mov	r4, r2
   bbed0:	d00a      	beq.n	bbee8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bbed2:	68a8      	ldr	r0, [r5, #8]
   bbed4:	6802      	ldr	r2, [r0, #0]
   bbed6:	9708      	str	r7, [sp, #32]
   bbed8:	6a15      	ldr	r5, [r2, #32]
   bbeda:	4631      	mov	r1, r6
   bbedc:	4622      	mov	r2, r4
   bbede:	46ac      	mov	ip, r5
   bbee0:	b003      	add	sp, #12
   bbee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbee6:	4760      	bx	ip
   bbee8:	4619      	mov	r1, r3
   bbeea:	9301      	str	r3, [sp, #4]
   bbeec:	f000 f858 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbef0:	9b01      	ldr	r3, [sp, #4]
   bbef2:	2800      	cmp	r0, #0
   bbef4:	d0ed      	beq.n	bbed2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bbef6:	2006      	movs	r0, #6
   bbef8:	b003      	add	sp, #12
   bbefa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbefc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbefc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf00:	460d      	mov	r5, r1
   bbf02:	4619      	mov	r1, r3
   bbf04:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbf08:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbf0c:	4681      	mov	r9, r0
   bbf0e:	4617      	mov	r7, r2
   bbf10:	4698      	mov	r8, r3
   bbf12:	f000 f845 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbf16:	b190      	cbz	r0, bbf3e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbf18:	2d00      	cmp	r5, #0
   bbf1a:	6034      	str	r4, [r6, #0]
   bbf1c:	7137      	strb	r7, [r6, #4]
   bbf1e:	db09      	blt.n	bbf34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbf20:	1961      	adds	r1, r4, r5
   bbf22:	458a      	cmp	sl, r1
   bbf24:	bf0c      	ite	eq
   bbf26:	2106      	moveq	r1, #6
   bbf28:	2101      	movne	r1, #1
   bbf2a:	71b1      	strb	r1, [r6, #6]
   bbf2c:	2000      	movs	r0, #0
   bbf2e:	b001      	add	sp, #4
   bbf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf34:	3502      	adds	r5, #2
   bbf36:	d1f9      	bne.n	bbf2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf38:	2301      	movs	r3, #1
   bbf3a:	71b3      	strb	r3, [r6, #6]
   bbf3c:	e7f6      	b.n	bbf2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf3e:	4554      	cmp	r4, sl
   bbf40:	d106      	bne.n	bbf50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbf42:	4659      	mov	r1, fp
   bbf44:	4648      	mov	r0, r9
   bbf46:	f000 f82b 	bl	bbfa0 <_ZNKSt9type_infoeqERKS_>
   bbf4a:	b108      	cbz	r0, bbf50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbf4c:	7177      	strb	r7, [r6, #5]
   bbf4e:	e7ed      	b.n	bbf2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf50:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbf54:	6803      	ldr	r3, [r0, #0]
   bbf56:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbf5a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbf5e:	69dc      	ldr	r4, [r3, #28]
   bbf60:	463a      	mov	r2, r7
   bbf62:	4643      	mov	r3, r8
   bbf64:	4629      	mov	r1, r5
   bbf66:	46a4      	mov	ip, r4
   bbf68:	b001      	add	sp, #4
   bbf6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf6e:	4760      	bx	ip

000bbf70 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf74:	4607      	mov	r7, r0
   bbf76:	460c      	mov	r4, r1
   bbf78:	4615      	mov	r5, r2
   bbf7a:	461e      	mov	r6, r3
   bbf7c:	f7ff ff6d 	bl	bbe5a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbf80:	b948      	cbnz	r0, bbf96 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbf82:	68b8      	ldr	r0, [r7, #8]
   bbf84:	6803      	ldr	r3, [r0, #0]
   bbf86:	699f      	ldr	r7, [r3, #24]
   bbf88:	462a      	mov	r2, r5
   bbf8a:	4633      	mov	r3, r6
   bbf8c:	4621      	mov	r1, r4
   bbf8e:	46bc      	mov	ip, r7
   bbf90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbf94:	4760      	bx	ip
   bbf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbf9a <_ZNSt9type_infoD1Ev>:
   bbf9a:	4770      	bx	lr

000bbf9c <_ZNKSt9type_info14__is_pointer_pEv>:
   bbf9c:	2000      	movs	r0, #0
   bbf9e:	4770      	bx	lr

000bbfa0 <_ZNKSt9type_infoeqERKS_>:
   bbfa0:	4281      	cmp	r1, r0
   bbfa2:	b508      	push	{r3, lr}
   bbfa4:	d00e      	beq.n	bbfc4 <_ZNKSt9type_infoeqERKS_+0x24>
   bbfa6:	6840      	ldr	r0, [r0, #4]
   bbfa8:	7803      	ldrb	r3, [r0, #0]
   bbfaa:	2b2a      	cmp	r3, #42	; 0x2a
   bbfac:	d00c      	beq.n	bbfc8 <_ZNKSt9type_infoeqERKS_+0x28>
   bbfae:	6849      	ldr	r1, [r1, #4]
   bbfb0:	780b      	ldrb	r3, [r1, #0]
   bbfb2:	2b2a      	cmp	r3, #42	; 0x2a
   bbfb4:	bf08      	it	eq
   bbfb6:	3101      	addeq	r1, #1
   bbfb8:	f7f8 fd16 	bl	b49e8 <strcmp>
   bbfbc:	fab0 f080 	clz	r0, r0
   bbfc0:	0940      	lsrs	r0, r0, #5
   bbfc2:	bd08      	pop	{r3, pc}
   bbfc4:	2001      	movs	r0, #1
   bbfc6:	e7fc      	b.n	bbfc2 <_ZNKSt9type_infoeqERKS_+0x22>
   bbfc8:	2000      	movs	r0, #0
   bbfca:	e7fa      	b.n	bbfc2 <_ZNKSt9type_infoeqERKS_+0x22>

000bbfcc <atexit>:
   bbfcc:	2300      	movs	r3, #0
   bbfce:	4601      	mov	r1, r0
   bbfd0:	461a      	mov	r2, r3
   bbfd2:	4618      	mov	r0, r3
   bbfd4:	f000 bfa2 	b.w	bcf1c <__register_exitproc>

000bbfd8 <atof>:
   bbfd8:	2100      	movs	r1, #0
   bbfda:	f000 bf07 	b.w	bcdec <strtod>

000bbfde <atoi>:
   bbfde:	220a      	movs	r2, #10
   bbfe0:	2100      	movs	r1, #0
   bbfe2:	f000 bf91 	b.w	bcf08 <strtol>

000bbfe6 <atol>:
   bbfe6:	220a      	movs	r2, #10
   bbfe8:	2100      	movs	r1, #0
   bbfea:	f000 bf8d 	b.w	bcf08 <strtol>
	...

000bbff0 <isprint>:
   bbff0:	4b02      	ldr	r3, [pc, #8]	; (bbffc <isprint+0xc>)
   bbff2:	4418      	add	r0, r3
   bbff4:	7840      	ldrb	r0, [r0, #1]
   bbff6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbffa:	4770      	bx	lr
   bbffc:	000bf7b8 	.word	0x000bf7b8

000bc000 <memcmp>:
   bc000:	b510      	push	{r4, lr}
   bc002:	3901      	subs	r1, #1
   bc004:	4402      	add	r2, r0
   bc006:	4290      	cmp	r0, r2
   bc008:	d101      	bne.n	bc00e <memcmp+0xe>
   bc00a:	2000      	movs	r0, #0
   bc00c:	e005      	b.n	bc01a <memcmp+0x1a>
   bc00e:	7803      	ldrb	r3, [r0, #0]
   bc010:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc014:	42a3      	cmp	r3, r4
   bc016:	d001      	beq.n	bc01c <memcmp+0x1c>
   bc018:	1b18      	subs	r0, r3, r4
   bc01a:	bd10      	pop	{r4, pc}
   bc01c:	3001      	adds	r0, #1
   bc01e:	e7f2      	b.n	bc006 <memcmp+0x6>

000bc020 <memcpy>:
   bc020:	440a      	add	r2, r1
   bc022:	4291      	cmp	r1, r2
   bc024:	f100 33ff 	add.w	r3, r0, #4294967295
   bc028:	d100      	bne.n	bc02c <memcpy+0xc>
   bc02a:	4770      	bx	lr
   bc02c:	b510      	push	{r4, lr}
   bc02e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc032:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc036:	4291      	cmp	r1, r2
   bc038:	d1f9      	bne.n	bc02e <memcpy+0xe>
   bc03a:	bd10      	pop	{r4, pc}

000bc03c <memmove>:
   bc03c:	4288      	cmp	r0, r1
   bc03e:	b510      	push	{r4, lr}
   bc040:	eb01 0402 	add.w	r4, r1, r2
   bc044:	d902      	bls.n	bc04c <memmove+0x10>
   bc046:	4284      	cmp	r4, r0
   bc048:	4623      	mov	r3, r4
   bc04a:	d807      	bhi.n	bc05c <memmove+0x20>
   bc04c:	1e43      	subs	r3, r0, #1
   bc04e:	42a1      	cmp	r1, r4
   bc050:	d008      	beq.n	bc064 <memmove+0x28>
   bc052:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc056:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc05a:	e7f8      	b.n	bc04e <memmove+0x12>
   bc05c:	4402      	add	r2, r0
   bc05e:	4601      	mov	r1, r0
   bc060:	428a      	cmp	r2, r1
   bc062:	d100      	bne.n	bc066 <memmove+0x2a>
   bc064:	bd10      	pop	{r4, pc}
   bc066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc06a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc06e:	e7f7      	b.n	bc060 <memmove+0x24>

000bc070 <memset>:
   bc070:	4402      	add	r2, r0
   bc072:	4603      	mov	r3, r0
   bc074:	4293      	cmp	r3, r2
   bc076:	d100      	bne.n	bc07a <memset+0xa>
   bc078:	4770      	bx	lr
   bc07a:	f803 1b01 	strb.w	r1, [r3], #1
   bc07e:	e7f9      	b.n	bc074 <memset+0x4>

000bc080 <srand>:
   bc080:	b538      	push	{r3, r4, r5, lr}
   bc082:	4b10      	ldr	r3, [pc, #64]	; (bc0c4 <srand+0x44>)
   bc084:	681d      	ldr	r5, [r3, #0]
   bc086:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc088:	4604      	mov	r4, r0
   bc08a:	b9b3      	cbnz	r3, bc0ba <srand+0x3a>
   bc08c:	2018      	movs	r0, #24
   bc08e:	f7fb fe23 	bl	b7cd8 <malloc>
   bc092:	4602      	mov	r2, r0
   bc094:	63a8      	str	r0, [r5, #56]	; 0x38
   bc096:	b920      	cbnz	r0, bc0a2 <srand+0x22>
   bc098:	4b0b      	ldr	r3, [pc, #44]	; (bc0c8 <srand+0x48>)
   bc09a:	480c      	ldr	r0, [pc, #48]	; (bc0cc <srand+0x4c>)
   bc09c:	2142      	movs	r1, #66	; 0x42
   bc09e:	f7fb fe5b 	bl	b7d58 <__assert_func>
   bc0a2:	490b      	ldr	r1, [pc, #44]	; (bc0d0 <srand+0x50>)
   bc0a4:	4b0b      	ldr	r3, [pc, #44]	; (bc0d4 <srand+0x54>)
   bc0a6:	e9c0 1300 	strd	r1, r3, [r0]
   bc0aa:	4b0b      	ldr	r3, [pc, #44]	; (bc0d8 <srand+0x58>)
   bc0ac:	6083      	str	r3, [r0, #8]
   bc0ae:	230b      	movs	r3, #11
   bc0b0:	8183      	strh	r3, [r0, #12]
   bc0b2:	2100      	movs	r1, #0
   bc0b4:	2001      	movs	r0, #1
   bc0b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc0ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc0bc:	2200      	movs	r2, #0
   bc0be:	611c      	str	r4, [r3, #16]
   bc0c0:	615a      	str	r2, [r3, #20]
   bc0c2:	bd38      	pop	{r3, r4, r5, pc}
   bc0c4:	2003e2f8 	.word	0x2003e2f8
   bc0c8:	000bf6c5 	.word	0x000bf6c5
   bc0cc:	000bf6dc 	.word	0x000bf6dc
   bc0d0:	abcd330e 	.word	0xabcd330e
   bc0d4:	e66d1234 	.word	0xe66d1234
   bc0d8:	0005deec 	.word	0x0005deec

000bc0dc <strchr>:
   bc0dc:	b2c9      	uxtb	r1, r1
   bc0de:	4603      	mov	r3, r0
   bc0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc0e4:	b11a      	cbz	r2, bc0ee <strchr+0x12>
   bc0e6:	428a      	cmp	r2, r1
   bc0e8:	d1f9      	bne.n	bc0de <strchr+0x2>
   bc0ea:	4618      	mov	r0, r3
   bc0ec:	4770      	bx	lr
   bc0ee:	2900      	cmp	r1, #0
   bc0f0:	bf18      	it	ne
   bc0f2:	2300      	movne	r3, #0
   bc0f4:	e7f9      	b.n	bc0ea <strchr+0xe>

000bc0f6 <strchrnul>:
   bc0f6:	b510      	push	{r4, lr}
   bc0f8:	4604      	mov	r4, r0
   bc0fa:	f7ff ffef 	bl	bc0dc <strchr>
   bc0fe:	b918      	cbnz	r0, bc108 <strchrnul+0x12>
   bc100:	4620      	mov	r0, r4
   bc102:	f7f8 fc7b 	bl	b49fc <strlen>
   bc106:	4420      	add	r0, r4
   bc108:	bd10      	pop	{r4, pc}

000bc10a <strcpy>:
   bc10a:	4603      	mov	r3, r0
   bc10c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc110:	f803 2b01 	strb.w	r2, [r3], #1
   bc114:	2a00      	cmp	r2, #0
   bc116:	d1f9      	bne.n	bc10c <strcpy+0x2>
   bc118:	4770      	bx	lr

000bc11a <strncmp>:
   bc11a:	b510      	push	{r4, lr}
   bc11c:	b17a      	cbz	r2, bc13e <strncmp+0x24>
   bc11e:	4603      	mov	r3, r0
   bc120:	3901      	subs	r1, #1
   bc122:	1884      	adds	r4, r0, r2
   bc124:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc128:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc12c:	4290      	cmp	r0, r2
   bc12e:	d101      	bne.n	bc134 <strncmp+0x1a>
   bc130:	42a3      	cmp	r3, r4
   bc132:	d101      	bne.n	bc138 <strncmp+0x1e>
   bc134:	1a80      	subs	r0, r0, r2
   bc136:	bd10      	pop	{r4, pc}
   bc138:	2800      	cmp	r0, #0
   bc13a:	d1f3      	bne.n	bc124 <strncmp+0xa>
   bc13c:	e7fa      	b.n	bc134 <strncmp+0x1a>
   bc13e:	4610      	mov	r0, r2
   bc140:	e7f9      	b.n	bc136 <strncmp+0x1c>

000bc142 <strncpy>:
   bc142:	b510      	push	{r4, lr}
   bc144:	3901      	subs	r1, #1
   bc146:	4603      	mov	r3, r0
   bc148:	b132      	cbz	r2, bc158 <strncpy+0x16>
   bc14a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc14e:	f803 4b01 	strb.w	r4, [r3], #1
   bc152:	3a01      	subs	r2, #1
   bc154:	2c00      	cmp	r4, #0
   bc156:	d1f7      	bne.n	bc148 <strncpy+0x6>
   bc158:	441a      	add	r2, r3
   bc15a:	2100      	movs	r1, #0
   bc15c:	4293      	cmp	r3, r2
   bc15e:	d100      	bne.n	bc162 <strncpy+0x20>
   bc160:	bd10      	pop	{r4, pc}
   bc162:	f803 1b01 	strb.w	r1, [r3], #1
   bc166:	e7f9      	b.n	bc15c <strncpy+0x1a>

000bc168 <strnlen>:
   bc168:	b510      	push	{r4, lr}
   bc16a:	4602      	mov	r2, r0
   bc16c:	4401      	add	r1, r0
   bc16e:	428a      	cmp	r2, r1
   bc170:	4613      	mov	r3, r2
   bc172:	d003      	beq.n	bc17c <strnlen+0x14>
   bc174:	781c      	ldrb	r4, [r3, #0]
   bc176:	3201      	adds	r2, #1
   bc178:	2c00      	cmp	r4, #0
   bc17a:	d1f8      	bne.n	bc16e <strnlen+0x6>
   bc17c:	1a18      	subs	r0, r3, r0
   bc17e:	bd10      	pop	{r4, pc}

000bc180 <strrchr>:
   bc180:	b538      	push	{r3, r4, r5, lr}
   bc182:	4603      	mov	r3, r0
   bc184:	460c      	mov	r4, r1
   bc186:	b969      	cbnz	r1, bc1a4 <strrchr+0x24>
   bc188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc18c:	f7ff bfa6 	b.w	bc0dc <strchr>
   bc190:	1c43      	adds	r3, r0, #1
   bc192:	4605      	mov	r5, r0
   bc194:	4621      	mov	r1, r4
   bc196:	4618      	mov	r0, r3
   bc198:	f7ff ffa0 	bl	bc0dc <strchr>
   bc19c:	2800      	cmp	r0, #0
   bc19e:	d1f7      	bne.n	bc190 <strrchr+0x10>
   bc1a0:	4628      	mov	r0, r5
   bc1a2:	bd38      	pop	{r3, r4, r5, pc}
   bc1a4:	2500      	movs	r5, #0
   bc1a6:	e7f5      	b.n	bc194 <strrchr+0x14>

000bc1a8 <sulp>:
   bc1a8:	b570      	push	{r4, r5, r6, lr}
   bc1aa:	4604      	mov	r4, r0
   bc1ac:	460d      	mov	r5, r1
   bc1ae:	ec45 4b10 	vmov	d0, r4, r5
   bc1b2:	4616      	mov	r6, r2
   bc1b4:	f001 fe0c 	bl	bddd0 <__ulp>
   bc1b8:	ec51 0b10 	vmov	r0, r1, d0
   bc1bc:	b17e      	cbz	r6, bc1de <sulp+0x36>
   bc1be:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc1c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc1c6:	2b00      	cmp	r3, #0
   bc1c8:	dd09      	ble.n	bc1de <sulp+0x36>
   bc1ca:	051b      	lsls	r3, r3, #20
   bc1cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc1d0:	2400      	movs	r4, #0
   bc1d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc1d6:	4622      	mov	r2, r4
   bc1d8:	462b      	mov	r3, r5
   bc1da:	f7f8 f8dd 	bl	b4398 <__aeabi_dmul>
   bc1de:	bd70      	pop	{r4, r5, r6, pc}

000bc1e0 <_strtod_l>:
   bc1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1e4:	ed2d 8b02 	vpush	{d8}
   bc1e8:	b09d      	sub	sp, #116	; 0x74
   bc1ea:	461f      	mov	r7, r3
   bc1ec:	2300      	movs	r3, #0
   bc1ee:	9318      	str	r3, [sp, #96]	; 0x60
   bc1f0:	4ba2      	ldr	r3, [pc, #648]	; (bc47c <_strtod_l+0x29c>)
   bc1f2:	9213      	str	r2, [sp, #76]	; 0x4c
   bc1f4:	681b      	ldr	r3, [r3, #0]
   bc1f6:	9305      	str	r3, [sp, #20]
   bc1f8:	4604      	mov	r4, r0
   bc1fa:	4618      	mov	r0, r3
   bc1fc:	4688      	mov	r8, r1
   bc1fe:	f7f8 fbfd 	bl	b49fc <strlen>
   bc202:	f04f 0a00 	mov.w	sl, #0
   bc206:	4605      	mov	r5, r0
   bc208:	f04f 0b00 	mov.w	fp, #0
   bc20c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc212:	781a      	ldrb	r2, [r3, #0]
   bc214:	2a2b      	cmp	r2, #43	; 0x2b
   bc216:	d04e      	beq.n	bc2b6 <_strtod_l+0xd6>
   bc218:	d83b      	bhi.n	bc292 <_strtod_l+0xb2>
   bc21a:	2a0d      	cmp	r2, #13
   bc21c:	d834      	bhi.n	bc288 <_strtod_l+0xa8>
   bc21e:	2a08      	cmp	r2, #8
   bc220:	d834      	bhi.n	bc28c <_strtod_l+0xac>
   bc222:	2a00      	cmp	r2, #0
   bc224:	d03e      	beq.n	bc2a4 <_strtod_l+0xc4>
   bc226:	2300      	movs	r3, #0
   bc228:	930a      	str	r3, [sp, #40]	; 0x28
   bc22a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc22c:	7833      	ldrb	r3, [r6, #0]
   bc22e:	2b30      	cmp	r3, #48	; 0x30
   bc230:	f040 80b0 	bne.w	bc394 <_strtod_l+0x1b4>
   bc234:	7873      	ldrb	r3, [r6, #1]
   bc236:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc23a:	2b58      	cmp	r3, #88	; 0x58
   bc23c:	d168      	bne.n	bc310 <_strtod_l+0x130>
   bc23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc240:	9301      	str	r3, [sp, #4]
   bc242:	ab18      	add	r3, sp, #96	; 0x60
   bc244:	9702      	str	r7, [sp, #8]
   bc246:	9300      	str	r3, [sp, #0]
   bc248:	4a8d      	ldr	r2, [pc, #564]	; (bc480 <_strtod_l+0x2a0>)
   bc24a:	ab19      	add	r3, sp, #100	; 0x64
   bc24c:	a917      	add	r1, sp, #92	; 0x5c
   bc24e:	4620      	mov	r0, r4
   bc250:	f000 ff2e 	bl	bd0b0 <__gethex>
   bc254:	f010 0707 	ands.w	r7, r0, #7
   bc258:	4605      	mov	r5, r0
   bc25a:	d005      	beq.n	bc268 <_strtod_l+0x88>
   bc25c:	2f06      	cmp	r7, #6
   bc25e:	d12c      	bne.n	bc2ba <_strtod_l+0xda>
   bc260:	3601      	adds	r6, #1
   bc262:	2300      	movs	r3, #0
   bc264:	9617      	str	r6, [sp, #92]	; 0x5c
   bc266:	930a      	str	r3, [sp, #40]	; 0x28
   bc268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc26a:	2b00      	cmp	r3, #0
   bc26c:	f040 8590 	bne.w	bcd90 <_strtod_l+0xbb0>
   bc270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc272:	b1eb      	cbz	r3, bc2b0 <_strtod_l+0xd0>
   bc274:	4652      	mov	r2, sl
   bc276:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc27a:	ec43 2b10 	vmov	d0, r2, r3
   bc27e:	b01d      	add	sp, #116	; 0x74
   bc280:	ecbd 8b02 	vpop	{d8}
   bc284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc288:	2a20      	cmp	r2, #32
   bc28a:	d1cc      	bne.n	bc226 <_strtod_l+0x46>
   bc28c:	3301      	adds	r3, #1
   bc28e:	9317      	str	r3, [sp, #92]	; 0x5c
   bc290:	e7be      	b.n	bc210 <_strtod_l+0x30>
   bc292:	2a2d      	cmp	r2, #45	; 0x2d
   bc294:	d1c7      	bne.n	bc226 <_strtod_l+0x46>
   bc296:	2201      	movs	r2, #1
   bc298:	920a      	str	r2, [sp, #40]	; 0x28
   bc29a:	1c5a      	adds	r2, r3, #1
   bc29c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc29e:	785b      	ldrb	r3, [r3, #1]
   bc2a0:	2b00      	cmp	r3, #0
   bc2a2:	d1c2      	bne.n	bc22a <_strtod_l+0x4a>
   bc2a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc2a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc2aa:	2b00      	cmp	r3, #0
   bc2ac:	f040 856e 	bne.w	bcd8c <_strtod_l+0xbac>
   bc2b0:	4652      	mov	r2, sl
   bc2b2:	465b      	mov	r3, fp
   bc2b4:	e7e1      	b.n	bc27a <_strtod_l+0x9a>
   bc2b6:	2200      	movs	r2, #0
   bc2b8:	e7ee      	b.n	bc298 <_strtod_l+0xb8>
   bc2ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc2bc:	b13a      	cbz	r2, bc2ce <_strtod_l+0xee>
   bc2be:	2135      	movs	r1, #53	; 0x35
   bc2c0:	a81a      	add	r0, sp, #104	; 0x68
   bc2c2:	f001 fe90 	bl	bdfe6 <__copybits>
   bc2c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc2c8:	4620      	mov	r0, r4
   bc2ca:	f001 fa4f 	bl	bd76c <_Bfree>
   bc2ce:	3f01      	subs	r7, #1
   bc2d0:	2f04      	cmp	r7, #4
   bc2d2:	d806      	bhi.n	bc2e2 <_strtod_l+0x102>
   bc2d4:	e8df f007 	tbb	[pc, r7]
   bc2d8:	1714030a 	.word	0x1714030a
   bc2dc:	0a          	.byte	0x0a
   bc2dd:	00          	.byte	0x00
   bc2de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc2e2:	0728      	lsls	r0, r5, #28
   bc2e4:	d5c0      	bpl.n	bc268 <_strtod_l+0x88>
   bc2e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc2ea:	e7bd      	b.n	bc268 <_strtod_l+0x88>
   bc2ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc2f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc2f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc2f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc2fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc2fe:	e7f0      	b.n	bc2e2 <_strtod_l+0x102>
   bc300:	f8df b180 	ldr.w	fp, [pc, #384]	; bc484 <_strtod_l+0x2a4>
   bc304:	e7ed      	b.n	bc2e2 <_strtod_l+0x102>
   bc306:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc30a:	f04f 3aff 	mov.w	sl, #4294967295
   bc30e:	e7e8      	b.n	bc2e2 <_strtod_l+0x102>
   bc310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc312:	1c5a      	adds	r2, r3, #1
   bc314:	9217      	str	r2, [sp, #92]	; 0x5c
   bc316:	785b      	ldrb	r3, [r3, #1]
   bc318:	2b30      	cmp	r3, #48	; 0x30
   bc31a:	d0f9      	beq.n	bc310 <_strtod_l+0x130>
   bc31c:	2b00      	cmp	r3, #0
   bc31e:	d0a3      	beq.n	bc268 <_strtod_l+0x88>
   bc320:	2301      	movs	r3, #1
   bc322:	f04f 0900 	mov.w	r9, #0
   bc326:	9304      	str	r3, [sp, #16]
   bc328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc32a:	9308      	str	r3, [sp, #32]
   bc32c:	f8cd 901c 	str.w	r9, [sp, #28]
   bc330:	464f      	mov	r7, r9
   bc332:	220a      	movs	r2, #10
   bc334:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc336:	7806      	ldrb	r6, [r0, #0]
   bc338:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc33c:	b2d9      	uxtb	r1, r3
   bc33e:	2909      	cmp	r1, #9
   bc340:	d92a      	bls.n	bc398 <_strtod_l+0x1b8>
   bc342:	9905      	ldr	r1, [sp, #20]
   bc344:	462a      	mov	r2, r5
   bc346:	f7ff fee8 	bl	bc11a <strncmp>
   bc34a:	b398      	cbz	r0, bc3b4 <_strtod_l+0x1d4>
   bc34c:	2000      	movs	r0, #0
   bc34e:	4632      	mov	r2, r6
   bc350:	463d      	mov	r5, r7
   bc352:	9005      	str	r0, [sp, #20]
   bc354:	4603      	mov	r3, r0
   bc356:	2a65      	cmp	r2, #101	; 0x65
   bc358:	d001      	beq.n	bc35e <_strtod_l+0x17e>
   bc35a:	2a45      	cmp	r2, #69	; 0x45
   bc35c:	d118      	bne.n	bc390 <_strtod_l+0x1b0>
   bc35e:	b91d      	cbnz	r5, bc368 <_strtod_l+0x188>
   bc360:	9a04      	ldr	r2, [sp, #16]
   bc362:	4302      	orrs	r2, r0
   bc364:	d09e      	beq.n	bc2a4 <_strtod_l+0xc4>
   bc366:	2500      	movs	r5, #0
   bc368:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc36c:	f108 0201 	add.w	r2, r8, #1
   bc370:	9217      	str	r2, [sp, #92]	; 0x5c
   bc372:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc376:	2a2b      	cmp	r2, #43	; 0x2b
   bc378:	d075      	beq.n	bc466 <_strtod_l+0x286>
   bc37a:	2a2d      	cmp	r2, #45	; 0x2d
   bc37c:	d07b      	beq.n	bc476 <_strtod_l+0x296>
   bc37e:	f04f 0c00 	mov.w	ip, #0
   bc382:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc386:	2909      	cmp	r1, #9
   bc388:	f240 8082 	bls.w	bc490 <_strtod_l+0x2b0>
   bc38c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc390:	2600      	movs	r6, #0
   bc392:	e09d      	b.n	bc4d0 <_strtod_l+0x2f0>
   bc394:	2300      	movs	r3, #0
   bc396:	e7c4      	b.n	bc322 <_strtod_l+0x142>
   bc398:	2f08      	cmp	r7, #8
   bc39a:	bfd8      	it	le
   bc39c:	9907      	ldrle	r1, [sp, #28]
   bc39e:	f100 0001 	add.w	r0, r0, #1
   bc3a2:	bfda      	itte	le
   bc3a4:	fb02 3301 	mlale	r3, r2, r1, r3
   bc3a8:	9307      	strle	r3, [sp, #28]
   bc3aa:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc3ae:	3701      	adds	r7, #1
   bc3b0:	9017      	str	r0, [sp, #92]	; 0x5c
   bc3b2:	e7bf      	b.n	bc334 <_strtod_l+0x154>
   bc3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3b6:	195a      	adds	r2, r3, r5
   bc3b8:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3ba:	5d5a      	ldrb	r2, [r3, r5]
   bc3bc:	2f00      	cmp	r7, #0
   bc3be:	d037      	beq.n	bc430 <_strtod_l+0x250>
   bc3c0:	9005      	str	r0, [sp, #20]
   bc3c2:	463d      	mov	r5, r7
   bc3c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc3c8:	2b09      	cmp	r3, #9
   bc3ca:	d912      	bls.n	bc3f2 <_strtod_l+0x212>
   bc3cc:	2301      	movs	r3, #1
   bc3ce:	e7c2      	b.n	bc356 <_strtod_l+0x176>
   bc3d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3d2:	1c5a      	adds	r2, r3, #1
   bc3d4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3d6:	785a      	ldrb	r2, [r3, #1]
   bc3d8:	3001      	adds	r0, #1
   bc3da:	2a30      	cmp	r2, #48	; 0x30
   bc3dc:	d0f8      	beq.n	bc3d0 <_strtod_l+0x1f0>
   bc3de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc3e2:	2b08      	cmp	r3, #8
   bc3e4:	f200 84d9 	bhi.w	bcd9a <_strtod_l+0xbba>
   bc3e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3ea:	9005      	str	r0, [sp, #20]
   bc3ec:	2000      	movs	r0, #0
   bc3ee:	9308      	str	r3, [sp, #32]
   bc3f0:	4605      	mov	r5, r0
   bc3f2:	3a30      	subs	r2, #48	; 0x30
   bc3f4:	f100 0301 	add.w	r3, r0, #1
   bc3f8:	d014      	beq.n	bc424 <_strtod_l+0x244>
   bc3fa:	9905      	ldr	r1, [sp, #20]
   bc3fc:	4419      	add	r1, r3
   bc3fe:	9105      	str	r1, [sp, #20]
   bc400:	462b      	mov	r3, r5
   bc402:	eb00 0e05 	add.w	lr, r0, r5
   bc406:	210a      	movs	r1, #10
   bc408:	4573      	cmp	r3, lr
   bc40a:	d113      	bne.n	bc434 <_strtod_l+0x254>
   bc40c:	182b      	adds	r3, r5, r0
   bc40e:	2b08      	cmp	r3, #8
   bc410:	f105 0501 	add.w	r5, r5, #1
   bc414:	4405      	add	r5, r0
   bc416:	dc1c      	bgt.n	bc452 <_strtod_l+0x272>
   bc418:	9907      	ldr	r1, [sp, #28]
   bc41a:	230a      	movs	r3, #10
   bc41c:	fb03 2301 	mla	r3, r3, r1, r2
   bc420:	9307      	str	r3, [sp, #28]
   bc422:	2300      	movs	r3, #0
   bc424:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc426:	1c51      	adds	r1, r2, #1
   bc428:	9117      	str	r1, [sp, #92]	; 0x5c
   bc42a:	7852      	ldrb	r2, [r2, #1]
   bc42c:	4618      	mov	r0, r3
   bc42e:	e7c9      	b.n	bc3c4 <_strtod_l+0x1e4>
   bc430:	4638      	mov	r0, r7
   bc432:	e7d2      	b.n	bc3da <_strtod_l+0x1fa>
   bc434:	2b08      	cmp	r3, #8
   bc436:	dc04      	bgt.n	bc442 <_strtod_l+0x262>
   bc438:	9e07      	ldr	r6, [sp, #28]
   bc43a:	434e      	muls	r6, r1
   bc43c:	9607      	str	r6, [sp, #28]
   bc43e:	3301      	adds	r3, #1
   bc440:	e7e2      	b.n	bc408 <_strtod_l+0x228>
   bc442:	f103 0c01 	add.w	ip, r3, #1
   bc446:	f1bc 0f10 	cmp.w	ip, #16
   bc44a:	bfd8      	it	le
   bc44c:	fb01 f909 	mulle.w	r9, r1, r9
   bc450:	e7f5      	b.n	bc43e <_strtod_l+0x25e>
   bc452:	2d10      	cmp	r5, #16
   bc454:	bfdc      	itt	le
   bc456:	230a      	movle	r3, #10
   bc458:	fb03 2909 	mlale	r9, r3, r9, r2
   bc45c:	e7e1      	b.n	bc422 <_strtod_l+0x242>
   bc45e:	2300      	movs	r3, #0
   bc460:	9305      	str	r3, [sp, #20]
   bc462:	2301      	movs	r3, #1
   bc464:	e77c      	b.n	bc360 <_strtod_l+0x180>
   bc466:	f04f 0c00 	mov.w	ip, #0
   bc46a:	f108 0202 	add.w	r2, r8, #2
   bc46e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc470:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc474:	e785      	b.n	bc382 <_strtod_l+0x1a2>
   bc476:	f04f 0c01 	mov.w	ip, #1
   bc47a:	e7f6      	b.n	bc46a <_strtod_l+0x28a>
   bc47c:	000bf950 	.word	0x000bf950
   bc480:	000bf768 	.word	0x000bf768
   bc484:	7ff00000 	.word	0x7ff00000
   bc488:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc48a:	1c51      	adds	r1, r2, #1
   bc48c:	9117      	str	r1, [sp, #92]	; 0x5c
   bc48e:	7852      	ldrb	r2, [r2, #1]
   bc490:	2a30      	cmp	r2, #48	; 0x30
   bc492:	d0f9      	beq.n	bc488 <_strtod_l+0x2a8>
   bc494:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc498:	2908      	cmp	r1, #8
   bc49a:	f63f af79 	bhi.w	bc390 <_strtod_l+0x1b0>
   bc49e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc4a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4a4:	9206      	str	r2, [sp, #24]
   bc4a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4a8:	1c51      	adds	r1, r2, #1
   bc4aa:	9117      	str	r1, [sp, #92]	; 0x5c
   bc4ac:	7852      	ldrb	r2, [r2, #1]
   bc4ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc4b2:	2e09      	cmp	r6, #9
   bc4b4:	d937      	bls.n	bc526 <_strtod_l+0x346>
   bc4b6:	9e06      	ldr	r6, [sp, #24]
   bc4b8:	1b89      	subs	r1, r1, r6
   bc4ba:	2908      	cmp	r1, #8
   bc4bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc4c0:	dc02      	bgt.n	bc4c8 <_strtod_l+0x2e8>
   bc4c2:	4576      	cmp	r6, lr
   bc4c4:	bfa8      	it	ge
   bc4c6:	4676      	movge	r6, lr
   bc4c8:	f1bc 0f00 	cmp.w	ip, #0
   bc4cc:	d000      	beq.n	bc4d0 <_strtod_l+0x2f0>
   bc4ce:	4276      	negs	r6, r6
   bc4d0:	2d00      	cmp	r5, #0
   bc4d2:	d14d      	bne.n	bc570 <_strtod_l+0x390>
   bc4d4:	9904      	ldr	r1, [sp, #16]
   bc4d6:	4301      	orrs	r1, r0
   bc4d8:	f47f aec6 	bne.w	bc268 <_strtod_l+0x88>
   bc4dc:	2b00      	cmp	r3, #0
   bc4de:	f47f aee1 	bne.w	bc2a4 <_strtod_l+0xc4>
   bc4e2:	2a69      	cmp	r2, #105	; 0x69
   bc4e4:	d027      	beq.n	bc536 <_strtod_l+0x356>
   bc4e6:	dc24      	bgt.n	bc532 <_strtod_l+0x352>
   bc4e8:	2a49      	cmp	r2, #73	; 0x49
   bc4ea:	d024      	beq.n	bc536 <_strtod_l+0x356>
   bc4ec:	2a4e      	cmp	r2, #78	; 0x4e
   bc4ee:	f47f aed9 	bne.w	bc2a4 <_strtod_l+0xc4>
   bc4f2:	499f      	ldr	r1, [pc, #636]	; (bc770 <_strtod_l+0x590>)
   bc4f4:	a817      	add	r0, sp, #92	; 0x5c
   bc4f6:	f001 f833 	bl	bd560 <__match>
   bc4fa:	2800      	cmp	r0, #0
   bc4fc:	f43f aed2 	beq.w	bc2a4 <_strtod_l+0xc4>
   bc500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc502:	781b      	ldrb	r3, [r3, #0]
   bc504:	2b28      	cmp	r3, #40	; 0x28
   bc506:	d12d      	bne.n	bc564 <_strtod_l+0x384>
   bc508:	499a      	ldr	r1, [pc, #616]	; (bc774 <_strtod_l+0x594>)
   bc50a:	aa1a      	add	r2, sp, #104	; 0x68
   bc50c:	a817      	add	r0, sp, #92	; 0x5c
   bc50e:	f001 f83b 	bl	bd588 <__hexnan>
   bc512:	2805      	cmp	r0, #5
   bc514:	d126      	bne.n	bc564 <_strtod_l+0x384>
   bc516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc518:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc51c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc520:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc524:	e6a0      	b.n	bc268 <_strtod_l+0x88>
   bc526:	210a      	movs	r1, #10
   bc528:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc52c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc530:	e7b9      	b.n	bc4a6 <_strtod_l+0x2c6>
   bc532:	2a6e      	cmp	r2, #110	; 0x6e
   bc534:	e7db      	b.n	bc4ee <_strtod_l+0x30e>
   bc536:	4990      	ldr	r1, [pc, #576]	; (bc778 <_strtod_l+0x598>)
   bc538:	a817      	add	r0, sp, #92	; 0x5c
   bc53a:	f001 f811 	bl	bd560 <__match>
   bc53e:	2800      	cmp	r0, #0
   bc540:	f43f aeb0 	beq.w	bc2a4 <_strtod_l+0xc4>
   bc544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc546:	498d      	ldr	r1, [pc, #564]	; (bc77c <_strtod_l+0x59c>)
   bc548:	3b01      	subs	r3, #1
   bc54a:	a817      	add	r0, sp, #92	; 0x5c
   bc54c:	9317      	str	r3, [sp, #92]	; 0x5c
   bc54e:	f001 f807 	bl	bd560 <__match>
   bc552:	b910      	cbnz	r0, bc55a <_strtod_l+0x37a>
   bc554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc556:	3301      	adds	r3, #1
   bc558:	9317      	str	r3, [sp, #92]	; 0x5c
   bc55a:	f8df b230 	ldr.w	fp, [pc, #560]	; bc78c <_strtod_l+0x5ac>
   bc55e:	f04f 0a00 	mov.w	sl, #0
   bc562:	e681      	b.n	bc268 <_strtod_l+0x88>
   bc564:	4886      	ldr	r0, [pc, #536]	; (bc780 <_strtod_l+0x5a0>)
   bc566:	f001 fd93 	bl	be090 <nan>
   bc56a:	ec5b ab10 	vmov	sl, fp, d0
   bc56e:	e67b      	b.n	bc268 <_strtod_l+0x88>
   bc570:	9b05      	ldr	r3, [sp, #20]
   bc572:	9807      	ldr	r0, [sp, #28]
   bc574:	1af3      	subs	r3, r6, r3
   bc576:	2f00      	cmp	r7, #0
   bc578:	bf08      	it	eq
   bc57a:	462f      	moveq	r7, r5
   bc57c:	2d10      	cmp	r5, #16
   bc57e:	9306      	str	r3, [sp, #24]
   bc580:	46a8      	mov	r8, r5
   bc582:	bfa8      	it	ge
   bc584:	f04f 0810 	movge.w	r8, #16
   bc588:	f7f7 fe8c 	bl	b42a4 <__aeabi_ui2d>
   bc58c:	2d09      	cmp	r5, #9
   bc58e:	4682      	mov	sl, r0
   bc590:	468b      	mov	fp, r1
   bc592:	dd13      	ble.n	bc5bc <_strtod_l+0x3dc>
   bc594:	4b7b      	ldr	r3, [pc, #492]	; (bc784 <_strtod_l+0x5a4>)
   bc596:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc59a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc59e:	f7f7 fefb 	bl	b4398 <__aeabi_dmul>
   bc5a2:	4682      	mov	sl, r0
   bc5a4:	4648      	mov	r0, r9
   bc5a6:	468b      	mov	fp, r1
   bc5a8:	f7f7 fe7c 	bl	b42a4 <__aeabi_ui2d>
   bc5ac:	4602      	mov	r2, r0
   bc5ae:	460b      	mov	r3, r1
   bc5b0:	4650      	mov	r0, sl
   bc5b2:	4659      	mov	r1, fp
   bc5b4:	f7f7 fd3a 	bl	b402c <__adddf3>
   bc5b8:	4682      	mov	sl, r0
   bc5ba:	468b      	mov	fp, r1
   bc5bc:	2d0f      	cmp	r5, #15
   bc5be:	dc38      	bgt.n	bc632 <_strtod_l+0x452>
   bc5c0:	9b06      	ldr	r3, [sp, #24]
   bc5c2:	2b00      	cmp	r3, #0
   bc5c4:	f43f ae50 	beq.w	bc268 <_strtod_l+0x88>
   bc5c8:	dd24      	ble.n	bc614 <_strtod_l+0x434>
   bc5ca:	2b16      	cmp	r3, #22
   bc5cc:	dc0b      	bgt.n	bc5e6 <_strtod_l+0x406>
   bc5ce:	496d      	ldr	r1, [pc, #436]	; (bc784 <_strtod_l+0x5a4>)
   bc5d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc5d8:	4652      	mov	r2, sl
   bc5da:	465b      	mov	r3, fp
   bc5dc:	f7f7 fedc 	bl	b4398 <__aeabi_dmul>
   bc5e0:	4682      	mov	sl, r0
   bc5e2:	468b      	mov	fp, r1
   bc5e4:	e640      	b.n	bc268 <_strtod_l+0x88>
   bc5e6:	9a06      	ldr	r2, [sp, #24]
   bc5e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc5ec:	4293      	cmp	r3, r2
   bc5ee:	db20      	blt.n	bc632 <_strtod_l+0x452>
   bc5f0:	4c64      	ldr	r4, [pc, #400]	; (bc784 <_strtod_l+0x5a4>)
   bc5f2:	f1c5 050f 	rsb	r5, r5, #15
   bc5f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc5fa:	4652      	mov	r2, sl
   bc5fc:	465b      	mov	r3, fp
   bc5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc602:	f7f7 fec9 	bl	b4398 <__aeabi_dmul>
   bc606:	9b06      	ldr	r3, [sp, #24]
   bc608:	1b5d      	subs	r5, r3, r5
   bc60a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc60e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc612:	e7e3      	b.n	bc5dc <_strtod_l+0x3fc>
   bc614:	9b06      	ldr	r3, [sp, #24]
   bc616:	3316      	adds	r3, #22
   bc618:	db0b      	blt.n	bc632 <_strtod_l+0x452>
   bc61a:	9b05      	ldr	r3, [sp, #20]
   bc61c:	1b9e      	subs	r6, r3, r6
   bc61e:	4b59      	ldr	r3, [pc, #356]	; (bc784 <_strtod_l+0x5a4>)
   bc620:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc624:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc628:	4650      	mov	r0, sl
   bc62a:	4659      	mov	r1, fp
   bc62c:	f7f7 ffde 	bl	b45ec <__aeabi_ddiv>
   bc630:	e7d6      	b.n	bc5e0 <_strtod_l+0x400>
   bc632:	9b06      	ldr	r3, [sp, #24]
   bc634:	eba5 0808 	sub.w	r8, r5, r8
   bc638:	4498      	add	r8, r3
   bc63a:	f1b8 0f00 	cmp.w	r8, #0
   bc63e:	dd74      	ble.n	bc72a <_strtod_l+0x54a>
   bc640:	f018 030f 	ands.w	r3, r8, #15
   bc644:	d00a      	beq.n	bc65c <_strtod_l+0x47c>
   bc646:	494f      	ldr	r1, [pc, #316]	; (bc784 <_strtod_l+0x5a4>)
   bc648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc64c:	4652      	mov	r2, sl
   bc64e:	465b      	mov	r3, fp
   bc650:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc654:	f7f7 fea0 	bl	b4398 <__aeabi_dmul>
   bc658:	4682      	mov	sl, r0
   bc65a:	468b      	mov	fp, r1
   bc65c:	f038 080f 	bics.w	r8, r8, #15
   bc660:	d04f      	beq.n	bc702 <_strtod_l+0x522>
   bc662:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc666:	dd22      	ble.n	bc6ae <_strtod_l+0x4ce>
   bc668:	2500      	movs	r5, #0
   bc66a:	462e      	mov	r6, r5
   bc66c:	9507      	str	r5, [sp, #28]
   bc66e:	9505      	str	r5, [sp, #20]
   bc670:	2322      	movs	r3, #34	; 0x22
   bc672:	f8df b118 	ldr.w	fp, [pc, #280]	; bc78c <_strtod_l+0x5ac>
   bc676:	6023      	str	r3, [r4, #0]
   bc678:	f04f 0a00 	mov.w	sl, #0
   bc67c:	9b07      	ldr	r3, [sp, #28]
   bc67e:	2b00      	cmp	r3, #0
   bc680:	f43f adf2 	beq.w	bc268 <_strtod_l+0x88>
   bc684:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc686:	4620      	mov	r0, r4
   bc688:	f001 f870 	bl	bd76c <_Bfree>
   bc68c:	9905      	ldr	r1, [sp, #20]
   bc68e:	4620      	mov	r0, r4
   bc690:	f001 f86c 	bl	bd76c <_Bfree>
   bc694:	4631      	mov	r1, r6
   bc696:	4620      	mov	r0, r4
   bc698:	f001 f868 	bl	bd76c <_Bfree>
   bc69c:	9907      	ldr	r1, [sp, #28]
   bc69e:	4620      	mov	r0, r4
   bc6a0:	f001 f864 	bl	bd76c <_Bfree>
   bc6a4:	4629      	mov	r1, r5
   bc6a6:	4620      	mov	r0, r4
   bc6a8:	f001 f860 	bl	bd76c <_Bfree>
   bc6ac:	e5dc      	b.n	bc268 <_strtod_l+0x88>
   bc6ae:	4b36      	ldr	r3, [pc, #216]	; (bc788 <_strtod_l+0x5a8>)
   bc6b0:	9304      	str	r3, [sp, #16]
   bc6b2:	2300      	movs	r3, #0
   bc6b4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc6b8:	4650      	mov	r0, sl
   bc6ba:	4659      	mov	r1, fp
   bc6bc:	4699      	mov	r9, r3
   bc6be:	f1b8 0f01 	cmp.w	r8, #1
   bc6c2:	dc21      	bgt.n	bc708 <_strtod_l+0x528>
   bc6c4:	b10b      	cbz	r3, bc6ca <_strtod_l+0x4ea>
   bc6c6:	4682      	mov	sl, r0
   bc6c8:	468b      	mov	fp, r1
   bc6ca:	4b2f      	ldr	r3, [pc, #188]	; (bc788 <_strtod_l+0x5a8>)
   bc6cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc6d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc6d4:	4652      	mov	r2, sl
   bc6d6:	465b      	mov	r3, fp
   bc6d8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc6dc:	f7f7 fe5c 	bl	b4398 <__aeabi_dmul>
   bc6e0:	4b2a      	ldr	r3, [pc, #168]	; (bc78c <_strtod_l+0x5ac>)
   bc6e2:	460a      	mov	r2, r1
   bc6e4:	400b      	ands	r3, r1
   bc6e6:	492a      	ldr	r1, [pc, #168]	; (bc790 <_strtod_l+0x5b0>)
   bc6e8:	428b      	cmp	r3, r1
   bc6ea:	4682      	mov	sl, r0
   bc6ec:	d8bc      	bhi.n	bc668 <_strtod_l+0x488>
   bc6ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc6f2:	428b      	cmp	r3, r1
   bc6f4:	bf86      	itte	hi
   bc6f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc794 <_strtod_l+0x5b4>
   bc6fa:	f04f 3aff 	movhi.w	sl, #4294967295
   bc6fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc702:	2300      	movs	r3, #0
   bc704:	9304      	str	r3, [sp, #16]
   bc706:	e084      	b.n	bc812 <_strtod_l+0x632>
   bc708:	f018 0f01 	tst.w	r8, #1
   bc70c:	d005      	beq.n	bc71a <_strtod_l+0x53a>
   bc70e:	9b04      	ldr	r3, [sp, #16]
   bc710:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc714:	f7f7 fe40 	bl	b4398 <__aeabi_dmul>
   bc718:	2301      	movs	r3, #1
   bc71a:	9a04      	ldr	r2, [sp, #16]
   bc71c:	3208      	adds	r2, #8
   bc71e:	f109 0901 	add.w	r9, r9, #1
   bc722:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc726:	9204      	str	r2, [sp, #16]
   bc728:	e7c9      	b.n	bc6be <_strtod_l+0x4de>
   bc72a:	d0ea      	beq.n	bc702 <_strtod_l+0x522>
   bc72c:	f1c8 0800 	rsb	r8, r8, #0
   bc730:	f018 020f 	ands.w	r2, r8, #15
   bc734:	d00a      	beq.n	bc74c <_strtod_l+0x56c>
   bc736:	4b13      	ldr	r3, [pc, #76]	; (bc784 <_strtod_l+0x5a4>)
   bc738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc73c:	4650      	mov	r0, sl
   bc73e:	4659      	mov	r1, fp
   bc740:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc744:	f7f7 ff52 	bl	b45ec <__aeabi_ddiv>
   bc748:	4682      	mov	sl, r0
   bc74a:	468b      	mov	fp, r1
   bc74c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc750:	d0d7      	beq.n	bc702 <_strtod_l+0x522>
   bc752:	f1b8 0f1f 	cmp.w	r8, #31
   bc756:	dd1f      	ble.n	bc798 <_strtod_l+0x5b8>
   bc758:	2500      	movs	r5, #0
   bc75a:	462e      	mov	r6, r5
   bc75c:	9507      	str	r5, [sp, #28]
   bc75e:	9505      	str	r5, [sp, #20]
   bc760:	2322      	movs	r3, #34	; 0x22
   bc762:	f04f 0a00 	mov.w	sl, #0
   bc766:	f04f 0b00 	mov.w	fp, #0
   bc76a:	6023      	str	r3, [r4, #0]
   bc76c:	e786      	b.n	bc67c <_strtod_l+0x49c>
   bc76e:	bf00      	nop
   bc770:	000bf762 	.word	0x000bf762
   bc774:	000bf77c 	.word	0x000bf77c
   bc778:	000bf759 	.word	0x000bf759
   bc77c:	000bf75c 	.word	0x000bf75c
   bc780:	000bf38b 	.word	0x000bf38b
   bc784:	000bfa10 	.word	0x000bfa10
   bc788:	000bf9e8 	.word	0x000bf9e8
   bc78c:	7ff00000 	.word	0x7ff00000
   bc790:	7ca00000 	.word	0x7ca00000
   bc794:	7fefffff 	.word	0x7fefffff
   bc798:	f018 0310 	ands.w	r3, r8, #16
   bc79c:	bf18      	it	ne
   bc79e:	236a      	movne	r3, #106	; 0x6a
   bc7a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bcb50 <_strtod_l+0x970>
   bc7a4:	9304      	str	r3, [sp, #16]
   bc7a6:	4650      	mov	r0, sl
   bc7a8:	4659      	mov	r1, fp
   bc7aa:	2300      	movs	r3, #0
   bc7ac:	f018 0f01 	tst.w	r8, #1
   bc7b0:	d004      	beq.n	bc7bc <_strtod_l+0x5dc>
   bc7b2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc7b6:	f7f7 fdef 	bl	b4398 <__aeabi_dmul>
   bc7ba:	2301      	movs	r3, #1
   bc7bc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc7c0:	f109 0908 	add.w	r9, r9, #8
   bc7c4:	d1f2      	bne.n	bc7ac <_strtod_l+0x5cc>
   bc7c6:	b10b      	cbz	r3, bc7cc <_strtod_l+0x5ec>
   bc7c8:	4682      	mov	sl, r0
   bc7ca:	468b      	mov	fp, r1
   bc7cc:	9b04      	ldr	r3, [sp, #16]
   bc7ce:	b1c3      	cbz	r3, bc802 <_strtod_l+0x622>
   bc7d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc7d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc7d8:	2b00      	cmp	r3, #0
   bc7da:	4659      	mov	r1, fp
   bc7dc:	dd11      	ble.n	bc802 <_strtod_l+0x622>
   bc7de:	2b1f      	cmp	r3, #31
   bc7e0:	f340 8124 	ble.w	bca2c <_strtod_l+0x84c>
   bc7e4:	2b34      	cmp	r3, #52	; 0x34
   bc7e6:	bfde      	ittt	le
   bc7e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc7ec:	f04f 33ff 	movle.w	r3, #4294967295
   bc7f0:	fa03 f202 	lslle.w	r2, r3, r2
   bc7f4:	f04f 0a00 	mov.w	sl, #0
   bc7f8:	bfcc      	ite	gt
   bc7fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc7fe:	ea02 0b01 	andle.w	fp, r2, r1
   bc802:	2200      	movs	r2, #0
   bc804:	2300      	movs	r3, #0
   bc806:	4650      	mov	r0, sl
   bc808:	4659      	mov	r1, fp
   bc80a:	f7f8 f82d 	bl	b4868 <__aeabi_dcmpeq>
   bc80e:	2800      	cmp	r0, #0
   bc810:	d1a2      	bne.n	bc758 <_strtod_l+0x578>
   bc812:	9b07      	ldr	r3, [sp, #28]
   bc814:	9300      	str	r3, [sp, #0]
   bc816:	9908      	ldr	r1, [sp, #32]
   bc818:	462b      	mov	r3, r5
   bc81a:	463a      	mov	r2, r7
   bc81c:	4620      	mov	r0, r4
   bc81e:	f001 f80d 	bl	bd83c <__s2b>
   bc822:	9007      	str	r0, [sp, #28]
   bc824:	2800      	cmp	r0, #0
   bc826:	f43f af1f 	beq.w	bc668 <_strtod_l+0x488>
   bc82a:	9b05      	ldr	r3, [sp, #20]
   bc82c:	1b9e      	subs	r6, r3, r6
   bc82e:	9b06      	ldr	r3, [sp, #24]
   bc830:	2b00      	cmp	r3, #0
   bc832:	bfb4      	ite	lt
   bc834:	4633      	movlt	r3, r6
   bc836:	2300      	movge	r3, #0
   bc838:	930c      	str	r3, [sp, #48]	; 0x30
   bc83a:	9b06      	ldr	r3, [sp, #24]
   bc83c:	2500      	movs	r5, #0
   bc83e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc842:	9312      	str	r3, [sp, #72]	; 0x48
   bc844:	462e      	mov	r6, r5
   bc846:	9b07      	ldr	r3, [sp, #28]
   bc848:	4620      	mov	r0, r4
   bc84a:	6859      	ldr	r1, [r3, #4]
   bc84c:	f000 ff4e 	bl	bd6ec <_Balloc>
   bc850:	9005      	str	r0, [sp, #20]
   bc852:	2800      	cmp	r0, #0
   bc854:	f43f af0c 	beq.w	bc670 <_strtod_l+0x490>
   bc858:	9b07      	ldr	r3, [sp, #28]
   bc85a:	691a      	ldr	r2, [r3, #16]
   bc85c:	3202      	adds	r2, #2
   bc85e:	f103 010c 	add.w	r1, r3, #12
   bc862:	0092      	lsls	r2, r2, #2
   bc864:	300c      	adds	r0, #12
   bc866:	f7ff fbdb 	bl	bc020 <memcpy>
   bc86a:	ec4b ab10 	vmov	d0, sl, fp
   bc86e:	aa1a      	add	r2, sp, #104	; 0x68
   bc870:	a919      	add	r1, sp, #100	; 0x64
   bc872:	4620      	mov	r0, r4
   bc874:	f001 fb28 	bl	bdec8 <__d2b>
   bc878:	ec4b ab18 	vmov	d8, sl, fp
   bc87c:	9018      	str	r0, [sp, #96]	; 0x60
   bc87e:	2800      	cmp	r0, #0
   bc880:	f43f aef6 	beq.w	bc670 <_strtod_l+0x490>
   bc884:	2101      	movs	r1, #1
   bc886:	4620      	mov	r0, r4
   bc888:	f001 f872 	bl	bd970 <__i2b>
   bc88c:	4606      	mov	r6, r0
   bc88e:	2800      	cmp	r0, #0
   bc890:	f43f aeee 	beq.w	bc670 <_strtod_l+0x490>
   bc894:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc896:	9904      	ldr	r1, [sp, #16]
   bc898:	2b00      	cmp	r3, #0
   bc89a:	bfab      	itete	ge
   bc89c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc89e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc8a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc8a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc8a6:	bfac      	ite	ge
   bc8a8:	eb03 0902 	addge.w	r9, r3, r2
   bc8ac:	1ad7      	sublt	r7, r2, r3
   bc8ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc8b0:	eba3 0801 	sub.w	r8, r3, r1
   bc8b4:	4490      	add	r8, r2
   bc8b6:	4ba1      	ldr	r3, [pc, #644]	; (bcb3c <_strtod_l+0x95c>)
   bc8b8:	f108 38ff 	add.w	r8, r8, #4294967295
   bc8bc:	4598      	cmp	r8, r3
   bc8be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc8c2:	f280 80c7 	bge.w	bca54 <_strtod_l+0x874>
   bc8c6:	eba3 0308 	sub.w	r3, r3, r8
   bc8ca:	2b1f      	cmp	r3, #31
   bc8cc:	eba2 0203 	sub.w	r2, r2, r3
   bc8d0:	f04f 0101 	mov.w	r1, #1
   bc8d4:	f300 80b1 	bgt.w	bca3a <_strtod_l+0x85a>
   bc8d8:	fa01 f303 	lsl.w	r3, r1, r3
   bc8dc:	930d      	str	r3, [sp, #52]	; 0x34
   bc8de:	2300      	movs	r3, #0
   bc8e0:	9308      	str	r3, [sp, #32]
   bc8e2:	eb09 0802 	add.w	r8, r9, r2
   bc8e6:	9b04      	ldr	r3, [sp, #16]
   bc8e8:	45c1      	cmp	r9, r8
   bc8ea:	4417      	add	r7, r2
   bc8ec:	441f      	add	r7, r3
   bc8ee:	464b      	mov	r3, r9
   bc8f0:	bfa8      	it	ge
   bc8f2:	4643      	movge	r3, r8
   bc8f4:	42bb      	cmp	r3, r7
   bc8f6:	bfa8      	it	ge
   bc8f8:	463b      	movge	r3, r7
   bc8fa:	2b00      	cmp	r3, #0
   bc8fc:	bfc2      	ittt	gt
   bc8fe:	eba8 0803 	subgt.w	r8, r8, r3
   bc902:	1aff      	subgt	r7, r7, r3
   bc904:	eba9 0903 	subgt.w	r9, r9, r3
   bc908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc90a:	2b00      	cmp	r3, #0
   bc90c:	dd17      	ble.n	bc93e <_strtod_l+0x75e>
   bc90e:	4631      	mov	r1, r6
   bc910:	461a      	mov	r2, r3
   bc912:	4620      	mov	r0, r4
   bc914:	f001 f8ec 	bl	bdaf0 <__pow5mult>
   bc918:	4606      	mov	r6, r0
   bc91a:	2800      	cmp	r0, #0
   bc91c:	f43f aea8 	beq.w	bc670 <_strtod_l+0x490>
   bc920:	4601      	mov	r1, r0
   bc922:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc924:	4620      	mov	r0, r4
   bc926:	f001 f839 	bl	bd99c <__multiply>
   bc92a:	900b      	str	r0, [sp, #44]	; 0x2c
   bc92c:	2800      	cmp	r0, #0
   bc92e:	f43f ae9f 	beq.w	bc670 <_strtod_l+0x490>
   bc932:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc934:	4620      	mov	r0, r4
   bc936:	f000 ff19 	bl	bd76c <_Bfree>
   bc93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc93c:	9318      	str	r3, [sp, #96]	; 0x60
   bc93e:	f1b8 0f00 	cmp.w	r8, #0
   bc942:	f300 808c 	bgt.w	bca5e <_strtod_l+0x87e>
   bc946:	9b06      	ldr	r3, [sp, #24]
   bc948:	2b00      	cmp	r3, #0
   bc94a:	dd08      	ble.n	bc95e <_strtod_l+0x77e>
   bc94c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc94e:	9905      	ldr	r1, [sp, #20]
   bc950:	4620      	mov	r0, r4
   bc952:	f001 f8cd 	bl	bdaf0 <__pow5mult>
   bc956:	9005      	str	r0, [sp, #20]
   bc958:	2800      	cmp	r0, #0
   bc95a:	f43f ae89 	beq.w	bc670 <_strtod_l+0x490>
   bc95e:	2f00      	cmp	r7, #0
   bc960:	dd08      	ble.n	bc974 <_strtod_l+0x794>
   bc962:	9905      	ldr	r1, [sp, #20]
   bc964:	463a      	mov	r2, r7
   bc966:	4620      	mov	r0, r4
   bc968:	f001 f91c 	bl	bdba4 <__lshift>
   bc96c:	9005      	str	r0, [sp, #20]
   bc96e:	2800      	cmp	r0, #0
   bc970:	f43f ae7e 	beq.w	bc670 <_strtod_l+0x490>
   bc974:	f1b9 0f00 	cmp.w	r9, #0
   bc978:	dd08      	ble.n	bc98c <_strtod_l+0x7ac>
   bc97a:	4631      	mov	r1, r6
   bc97c:	464a      	mov	r2, r9
   bc97e:	4620      	mov	r0, r4
   bc980:	f001 f910 	bl	bdba4 <__lshift>
   bc984:	4606      	mov	r6, r0
   bc986:	2800      	cmp	r0, #0
   bc988:	f43f ae72 	beq.w	bc670 <_strtod_l+0x490>
   bc98c:	9a05      	ldr	r2, [sp, #20]
   bc98e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc990:	4620      	mov	r0, r4
   bc992:	f001 f993 	bl	bdcbc <__mdiff>
   bc996:	4605      	mov	r5, r0
   bc998:	2800      	cmp	r0, #0
   bc99a:	f43f ae69 	beq.w	bc670 <_strtod_l+0x490>
   bc99e:	68c3      	ldr	r3, [r0, #12]
   bc9a0:	930b      	str	r3, [sp, #44]	; 0x2c
   bc9a2:	2300      	movs	r3, #0
   bc9a4:	60c3      	str	r3, [r0, #12]
   bc9a6:	4631      	mov	r1, r6
   bc9a8:	f001 f96c 	bl	bdc84 <__mcmp>
   bc9ac:	2800      	cmp	r0, #0
   bc9ae:	da60      	bge.n	bca72 <_strtod_l+0x892>
   bc9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc9b2:	ea53 030a 	orrs.w	r3, r3, sl
   bc9b6:	f040 8082 	bne.w	bcabe <_strtod_l+0x8de>
   bc9ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc9be:	2b00      	cmp	r3, #0
   bc9c0:	d17d      	bne.n	bcabe <_strtod_l+0x8de>
   bc9c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc9c6:	0d1b      	lsrs	r3, r3, #20
   bc9c8:	051b      	lsls	r3, r3, #20
   bc9ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc9ce:	d976      	bls.n	bcabe <_strtod_l+0x8de>
   bc9d0:	696b      	ldr	r3, [r5, #20]
   bc9d2:	b913      	cbnz	r3, bc9da <_strtod_l+0x7fa>
   bc9d4:	692b      	ldr	r3, [r5, #16]
   bc9d6:	2b01      	cmp	r3, #1
   bc9d8:	dd71      	ble.n	bcabe <_strtod_l+0x8de>
   bc9da:	4629      	mov	r1, r5
   bc9dc:	2201      	movs	r2, #1
   bc9de:	4620      	mov	r0, r4
   bc9e0:	f001 f8e0 	bl	bdba4 <__lshift>
   bc9e4:	4631      	mov	r1, r6
   bc9e6:	4605      	mov	r5, r0
   bc9e8:	f001 f94c 	bl	bdc84 <__mcmp>
   bc9ec:	2800      	cmp	r0, #0
   bc9ee:	dd66      	ble.n	bcabe <_strtod_l+0x8de>
   bc9f0:	9904      	ldr	r1, [sp, #16]
   bc9f2:	4a53      	ldr	r2, [pc, #332]	; (bcb40 <_strtod_l+0x960>)
   bc9f4:	465b      	mov	r3, fp
   bc9f6:	2900      	cmp	r1, #0
   bc9f8:	f000 8081 	beq.w	bcafe <_strtod_l+0x91e>
   bc9fc:	ea02 010b 	and.w	r1, r2, fp
   bca00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bca04:	dc7b      	bgt.n	bcafe <_strtod_l+0x91e>
   bca06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bca0a:	f77f aea9 	ble.w	bc760 <_strtod_l+0x580>
   bca0e:	4b4d      	ldr	r3, [pc, #308]	; (bcb44 <_strtod_l+0x964>)
   bca10:	4650      	mov	r0, sl
   bca12:	4659      	mov	r1, fp
   bca14:	2200      	movs	r2, #0
   bca16:	f7f7 fcbf 	bl	b4398 <__aeabi_dmul>
   bca1a:	460b      	mov	r3, r1
   bca1c:	4303      	orrs	r3, r0
   bca1e:	bf08      	it	eq
   bca20:	2322      	moveq	r3, #34	; 0x22
   bca22:	4682      	mov	sl, r0
   bca24:	468b      	mov	fp, r1
   bca26:	bf08      	it	eq
   bca28:	6023      	streq	r3, [r4, #0]
   bca2a:	e62b      	b.n	bc684 <_strtod_l+0x4a4>
   bca2c:	f04f 32ff 	mov.w	r2, #4294967295
   bca30:	fa02 f303 	lsl.w	r3, r2, r3
   bca34:	ea03 0a0a 	and.w	sl, r3, sl
   bca38:	e6e3      	b.n	bc802 <_strtod_l+0x622>
   bca3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bca3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bca42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bca46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bca4a:	fa01 f308 	lsl.w	r3, r1, r8
   bca4e:	9308      	str	r3, [sp, #32]
   bca50:	910d      	str	r1, [sp, #52]	; 0x34
   bca52:	e746      	b.n	bc8e2 <_strtod_l+0x702>
   bca54:	2300      	movs	r3, #0
   bca56:	9308      	str	r3, [sp, #32]
   bca58:	2301      	movs	r3, #1
   bca5a:	930d      	str	r3, [sp, #52]	; 0x34
   bca5c:	e741      	b.n	bc8e2 <_strtod_l+0x702>
   bca5e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bca60:	4642      	mov	r2, r8
   bca62:	4620      	mov	r0, r4
   bca64:	f001 f89e 	bl	bdba4 <__lshift>
   bca68:	9018      	str	r0, [sp, #96]	; 0x60
   bca6a:	2800      	cmp	r0, #0
   bca6c:	f47f af6b 	bne.w	bc946 <_strtod_l+0x766>
   bca70:	e5fe      	b.n	bc670 <_strtod_l+0x490>
   bca72:	465f      	mov	r7, fp
   bca74:	d16e      	bne.n	bcb54 <_strtod_l+0x974>
   bca76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bca78:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bca7c:	b342      	cbz	r2, bcad0 <_strtod_l+0x8f0>
   bca7e:	4a32      	ldr	r2, [pc, #200]	; (bcb48 <_strtod_l+0x968>)
   bca80:	4293      	cmp	r3, r2
   bca82:	d128      	bne.n	bcad6 <_strtod_l+0x8f6>
   bca84:	9b04      	ldr	r3, [sp, #16]
   bca86:	4651      	mov	r1, sl
   bca88:	b1eb      	cbz	r3, bcac6 <_strtod_l+0x8e6>
   bca8a:	4b2d      	ldr	r3, [pc, #180]	; (bcb40 <_strtod_l+0x960>)
   bca8c:	403b      	ands	r3, r7
   bca8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bca92:	f04f 32ff 	mov.w	r2, #4294967295
   bca96:	d819      	bhi.n	bcacc <_strtod_l+0x8ec>
   bca98:	0d1b      	lsrs	r3, r3, #20
   bca9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bca9e:	fa02 f303 	lsl.w	r3, r2, r3
   bcaa2:	4299      	cmp	r1, r3
   bcaa4:	d117      	bne.n	bcad6 <_strtod_l+0x8f6>
   bcaa6:	4b29      	ldr	r3, [pc, #164]	; (bcb4c <_strtod_l+0x96c>)
   bcaa8:	429f      	cmp	r7, r3
   bcaaa:	d102      	bne.n	bcab2 <_strtod_l+0x8d2>
   bcaac:	3101      	adds	r1, #1
   bcaae:	f43f addf 	beq.w	bc670 <_strtod_l+0x490>
   bcab2:	4b23      	ldr	r3, [pc, #140]	; (bcb40 <_strtod_l+0x960>)
   bcab4:	403b      	ands	r3, r7
   bcab6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcaba:	f04f 0a00 	mov.w	sl, #0
   bcabe:	9b04      	ldr	r3, [sp, #16]
   bcac0:	2b00      	cmp	r3, #0
   bcac2:	d1a4      	bne.n	bca0e <_strtod_l+0x82e>
   bcac4:	e5de      	b.n	bc684 <_strtod_l+0x4a4>
   bcac6:	f04f 33ff 	mov.w	r3, #4294967295
   bcaca:	e7ea      	b.n	bcaa2 <_strtod_l+0x8c2>
   bcacc:	4613      	mov	r3, r2
   bcace:	e7e8      	b.n	bcaa2 <_strtod_l+0x8c2>
   bcad0:	ea53 030a 	orrs.w	r3, r3, sl
   bcad4:	d08c      	beq.n	bc9f0 <_strtod_l+0x810>
   bcad6:	9b08      	ldr	r3, [sp, #32]
   bcad8:	b1db      	cbz	r3, bcb12 <_strtod_l+0x932>
   bcada:	423b      	tst	r3, r7
   bcadc:	d0ef      	beq.n	bcabe <_strtod_l+0x8de>
   bcade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcae0:	9a04      	ldr	r2, [sp, #16]
   bcae2:	4650      	mov	r0, sl
   bcae4:	4659      	mov	r1, fp
   bcae6:	b1c3      	cbz	r3, bcb1a <_strtod_l+0x93a>
   bcae8:	f7ff fb5e 	bl	bc1a8 <sulp>
   bcaec:	4602      	mov	r2, r0
   bcaee:	460b      	mov	r3, r1
   bcaf0:	ec51 0b18 	vmov	r0, r1, d8
   bcaf4:	f7f7 fa9a 	bl	b402c <__adddf3>
   bcaf8:	4682      	mov	sl, r0
   bcafa:	468b      	mov	fp, r1
   bcafc:	e7df      	b.n	bcabe <_strtod_l+0x8de>
   bcafe:	4013      	ands	r3, r2
   bcb00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bcb04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bcb08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bcb0c:	f04f 3aff 	mov.w	sl, #4294967295
   bcb10:	e7d5      	b.n	bcabe <_strtod_l+0x8de>
   bcb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcb14:	ea13 0f0a 	tst.w	r3, sl
   bcb18:	e7e0      	b.n	bcadc <_strtod_l+0x8fc>
   bcb1a:	f7ff fb45 	bl	bc1a8 <sulp>
   bcb1e:	4602      	mov	r2, r0
   bcb20:	460b      	mov	r3, r1
   bcb22:	ec51 0b18 	vmov	r0, r1, d8
   bcb26:	f7f7 fa7f 	bl	b4028 <__aeabi_dsub>
   bcb2a:	2200      	movs	r2, #0
   bcb2c:	2300      	movs	r3, #0
   bcb2e:	4682      	mov	sl, r0
   bcb30:	468b      	mov	fp, r1
   bcb32:	f7f7 fe99 	bl	b4868 <__aeabi_dcmpeq>
   bcb36:	2800      	cmp	r0, #0
   bcb38:	d0c1      	beq.n	bcabe <_strtod_l+0x8de>
   bcb3a:	e611      	b.n	bc760 <_strtod_l+0x580>
   bcb3c:	fffffc02 	.word	0xfffffc02
   bcb40:	7ff00000 	.word	0x7ff00000
   bcb44:	39500000 	.word	0x39500000
   bcb48:	000fffff 	.word	0x000fffff
   bcb4c:	7fefffff 	.word	0x7fefffff
   bcb50:	000bf790 	.word	0x000bf790
   bcb54:	4631      	mov	r1, r6
   bcb56:	4628      	mov	r0, r5
   bcb58:	f001 fa12 	bl	bdf80 <__ratio>
   bcb5c:	ec59 8b10 	vmov	r8, r9, d0
   bcb60:	ee10 0a10 	vmov	r0, s0
   bcb64:	2200      	movs	r2, #0
   bcb66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcb6a:	4649      	mov	r1, r9
   bcb6c:	f7f7 fe90 	bl	b4890 <__aeabi_dcmple>
   bcb70:	2800      	cmp	r0, #0
   bcb72:	d07a      	beq.n	bcc6a <_strtod_l+0xa8a>
   bcb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcb76:	2b00      	cmp	r3, #0
   bcb78:	d04a      	beq.n	bcc10 <_strtod_l+0xa30>
   bcb7a:	4b95      	ldr	r3, [pc, #596]	; (bcdd0 <_strtod_l+0xbf0>)
   bcb7c:	2200      	movs	r2, #0
   bcb7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcb82:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcdd0 <_strtod_l+0xbf0>
   bcb86:	f04f 0800 	mov.w	r8, #0
   bcb8a:	4b92      	ldr	r3, [pc, #584]	; (bcdd4 <_strtod_l+0xbf4>)
   bcb8c:	403b      	ands	r3, r7
   bcb8e:	930d      	str	r3, [sp, #52]	; 0x34
   bcb90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcb92:	4b91      	ldr	r3, [pc, #580]	; (bcdd8 <_strtod_l+0xbf8>)
   bcb94:	429a      	cmp	r2, r3
   bcb96:	f040 80b0 	bne.w	bccfa <_strtod_l+0xb1a>
   bcb9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcb9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bcba2:	ec4b ab10 	vmov	d0, sl, fp
   bcba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcbaa:	f001 f911 	bl	bddd0 <__ulp>
   bcbae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcbb2:	ec53 2b10 	vmov	r2, r3, d0
   bcbb6:	f7f7 fbef 	bl	b4398 <__aeabi_dmul>
   bcbba:	4652      	mov	r2, sl
   bcbbc:	465b      	mov	r3, fp
   bcbbe:	f7f7 fa35 	bl	b402c <__adddf3>
   bcbc2:	460b      	mov	r3, r1
   bcbc4:	4983      	ldr	r1, [pc, #524]	; (bcdd4 <_strtod_l+0xbf4>)
   bcbc6:	4a85      	ldr	r2, [pc, #532]	; (bcddc <_strtod_l+0xbfc>)
   bcbc8:	4019      	ands	r1, r3
   bcbca:	4291      	cmp	r1, r2
   bcbcc:	4682      	mov	sl, r0
   bcbce:	d960      	bls.n	bcc92 <_strtod_l+0xab2>
   bcbd0:	ee18 3a90 	vmov	r3, s17
   bcbd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bcbd8:	4293      	cmp	r3, r2
   bcbda:	d104      	bne.n	bcbe6 <_strtod_l+0xa06>
   bcbdc:	ee18 3a10 	vmov	r3, s16
   bcbe0:	3301      	adds	r3, #1
   bcbe2:	f43f ad45 	beq.w	bc670 <_strtod_l+0x490>
   bcbe6:	f8df b200 	ldr.w	fp, [pc, #512]	; bcde8 <_strtod_l+0xc08>
   bcbea:	f04f 3aff 	mov.w	sl, #4294967295
   bcbee:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcbf0:	4620      	mov	r0, r4
   bcbf2:	f000 fdbb 	bl	bd76c <_Bfree>
   bcbf6:	9905      	ldr	r1, [sp, #20]
   bcbf8:	4620      	mov	r0, r4
   bcbfa:	f000 fdb7 	bl	bd76c <_Bfree>
   bcbfe:	4631      	mov	r1, r6
   bcc00:	4620      	mov	r0, r4
   bcc02:	f000 fdb3 	bl	bd76c <_Bfree>
   bcc06:	4629      	mov	r1, r5
   bcc08:	4620      	mov	r0, r4
   bcc0a:	f000 fdaf 	bl	bd76c <_Bfree>
   bcc0e:	e61a      	b.n	bc846 <_strtod_l+0x666>
   bcc10:	f1ba 0f00 	cmp.w	sl, #0
   bcc14:	d11b      	bne.n	bcc4e <_strtod_l+0xa6e>
   bcc16:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcc1a:	b9f3      	cbnz	r3, bcc5a <_strtod_l+0xa7a>
   bcc1c:	4b6c      	ldr	r3, [pc, #432]	; (bcdd0 <_strtod_l+0xbf0>)
   bcc1e:	2200      	movs	r2, #0
   bcc20:	4640      	mov	r0, r8
   bcc22:	4649      	mov	r1, r9
   bcc24:	f7f7 fe2a 	bl	b487c <__aeabi_dcmplt>
   bcc28:	b9d0      	cbnz	r0, bcc60 <_strtod_l+0xa80>
   bcc2a:	4640      	mov	r0, r8
   bcc2c:	4649      	mov	r1, r9
   bcc2e:	4b6c      	ldr	r3, [pc, #432]	; (bcde0 <_strtod_l+0xc00>)
   bcc30:	2200      	movs	r2, #0
   bcc32:	f7f7 fbb1 	bl	b4398 <__aeabi_dmul>
   bcc36:	4680      	mov	r8, r0
   bcc38:	4689      	mov	r9, r1
   bcc3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bcc3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bcc42:	9315      	str	r3, [sp, #84]	; 0x54
   bcc44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bcc48:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcc4c:	e79d      	b.n	bcb8a <_strtod_l+0x9aa>
   bcc4e:	f1ba 0f01 	cmp.w	sl, #1
   bcc52:	d102      	bne.n	bcc5a <_strtod_l+0xa7a>
   bcc54:	2f00      	cmp	r7, #0
   bcc56:	f43f ad83 	beq.w	bc760 <_strtod_l+0x580>
   bcc5a:	4b62      	ldr	r3, [pc, #392]	; (bcde4 <_strtod_l+0xc04>)
   bcc5c:	2200      	movs	r2, #0
   bcc5e:	e78e      	b.n	bcb7e <_strtod_l+0x99e>
   bcc60:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcde0 <_strtod_l+0xc00>
   bcc64:	f04f 0800 	mov.w	r8, #0
   bcc68:	e7e7      	b.n	bcc3a <_strtod_l+0xa5a>
   bcc6a:	4b5d      	ldr	r3, [pc, #372]	; (bcde0 <_strtod_l+0xc00>)
   bcc6c:	4640      	mov	r0, r8
   bcc6e:	4649      	mov	r1, r9
   bcc70:	2200      	movs	r2, #0
   bcc72:	f7f7 fb91 	bl	b4398 <__aeabi_dmul>
   bcc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcc78:	4680      	mov	r8, r0
   bcc7a:	4689      	mov	r9, r1
   bcc7c:	b933      	cbnz	r3, bcc8c <_strtod_l+0xaac>
   bcc7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcc82:	900e      	str	r0, [sp, #56]	; 0x38
   bcc84:	930f      	str	r3, [sp, #60]	; 0x3c
   bcc86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bcc8a:	e7dd      	b.n	bcc48 <_strtod_l+0xa68>
   bcc8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bcc90:	e7f9      	b.n	bcc86 <_strtod_l+0xaa6>
   bcc92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bcc96:	9b04      	ldr	r3, [sp, #16]
   bcc98:	2b00      	cmp	r3, #0
   bcc9a:	d1a8      	bne.n	bcbee <_strtod_l+0xa0e>
   bcc9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcca2:	0d1b      	lsrs	r3, r3, #20
   bcca4:	051b      	lsls	r3, r3, #20
   bcca6:	429a      	cmp	r2, r3
   bcca8:	d1a1      	bne.n	bcbee <_strtod_l+0xa0e>
   bccaa:	4640      	mov	r0, r8
   bccac:	4649      	mov	r1, r9
   bccae:	f7f7 fead 	bl	b4a0c <__aeabi_d2lz>
   bccb2:	f7f7 fb43 	bl	b433c <__aeabi_l2d>
   bccb6:	4602      	mov	r2, r0
   bccb8:	460b      	mov	r3, r1
   bccba:	4640      	mov	r0, r8
   bccbc:	4649      	mov	r1, r9
   bccbe:	f7f7 f9b3 	bl	b4028 <__aeabi_dsub>
   bccc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bccc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bccc8:	ea43 030a 	orr.w	r3, r3, sl
   bcccc:	4313      	orrs	r3, r2
   bccce:	4680      	mov	r8, r0
   bccd0:	4689      	mov	r9, r1
   bccd2:	d055      	beq.n	bcd80 <_strtod_l+0xba0>
   bccd4:	a336      	add	r3, pc, #216	; (adr r3, bcdb0 <_strtod_l+0xbd0>)
   bccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccda:	f7f7 fdcf 	bl	b487c <__aeabi_dcmplt>
   bccde:	2800      	cmp	r0, #0
   bcce0:	f47f acd0 	bne.w	bc684 <_strtod_l+0x4a4>
   bcce4:	a334      	add	r3, pc, #208	; (adr r3, bcdb8 <_strtod_l+0xbd8>)
   bcce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccea:	4640      	mov	r0, r8
   bccec:	4649      	mov	r1, r9
   bccee:	f7f7 fde3 	bl	b48b8 <__aeabi_dcmpgt>
   bccf2:	2800      	cmp	r0, #0
   bccf4:	f43f af7b 	beq.w	bcbee <_strtod_l+0xa0e>
   bccf8:	e4c4      	b.n	bc684 <_strtod_l+0x4a4>
   bccfa:	9b04      	ldr	r3, [sp, #16]
   bccfc:	b333      	cbz	r3, bcd4c <_strtod_l+0xb6c>
   bccfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcd00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcd04:	d822      	bhi.n	bcd4c <_strtod_l+0xb6c>
   bcd06:	a32e      	add	r3, pc, #184	; (adr r3, bcdc0 <_strtod_l+0xbe0>)
   bcd08:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd0c:	4640      	mov	r0, r8
   bcd0e:	4649      	mov	r1, r9
   bcd10:	f7f7 fdbe 	bl	b4890 <__aeabi_dcmple>
   bcd14:	b1a0      	cbz	r0, bcd40 <_strtod_l+0xb60>
   bcd16:	4649      	mov	r1, r9
   bcd18:	4640      	mov	r0, r8
   bcd1a:	f7f7 fdd7 	bl	b48cc <__aeabi_d2uiz>
   bcd1e:	2801      	cmp	r0, #1
   bcd20:	bf38      	it	cc
   bcd22:	2001      	movcc	r0, #1
   bcd24:	f7f7 fabe 	bl	b42a4 <__aeabi_ui2d>
   bcd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcd2a:	4680      	mov	r8, r0
   bcd2c:	4689      	mov	r9, r1
   bcd2e:	bb23      	cbnz	r3, bcd7a <_strtod_l+0xb9a>
   bcd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcd34:	9010      	str	r0, [sp, #64]	; 0x40
   bcd36:	9311      	str	r3, [sp, #68]	; 0x44
   bcd38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bcd3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcd42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcd44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bcd48:	1a9b      	subs	r3, r3, r2
   bcd4a:	9309      	str	r3, [sp, #36]	; 0x24
   bcd4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd50:	eeb0 0a48 	vmov.f32	s0, s16
   bcd54:	eef0 0a68 	vmov.f32	s1, s17
   bcd58:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcd5c:	f001 f838 	bl	bddd0 <__ulp>
   bcd60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd64:	ec53 2b10 	vmov	r2, r3, d0
   bcd68:	f7f7 fb16 	bl	b4398 <__aeabi_dmul>
   bcd6c:	ec53 2b18 	vmov	r2, r3, d8
   bcd70:	f7f7 f95c 	bl	b402c <__adddf3>
   bcd74:	4682      	mov	sl, r0
   bcd76:	468b      	mov	fp, r1
   bcd78:	e78d      	b.n	bcc96 <_strtod_l+0xab6>
   bcd7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bcd7e:	e7db      	b.n	bcd38 <_strtod_l+0xb58>
   bcd80:	a311      	add	r3, pc, #68	; (adr r3, bcdc8 <_strtod_l+0xbe8>)
   bcd82:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd86:	f7f7 fd79 	bl	b487c <__aeabi_dcmplt>
   bcd8a:	e7b2      	b.n	bccf2 <_strtod_l+0xb12>
   bcd8c:	2300      	movs	r3, #0
   bcd8e:	930a      	str	r3, [sp, #40]	; 0x28
   bcd90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bcd92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcd94:	6013      	str	r3, [r2, #0]
   bcd96:	f7ff ba6b 	b.w	bc270 <_strtod_l+0x90>
   bcd9a:	2a65      	cmp	r2, #101	; 0x65
   bcd9c:	f43f ab5f 	beq.w	bc45e <_strtod_l+0x27e>
   bcda0:	2a45      	cmp	r2, #69	; 0x45
   bcda2:	f43f ab5c 	beq.w	bc45e <_strtod_l+0x27e>
   bcda6:	2301      	movs	r3, #1
   bcda8:	f7ff bb94 	b.w	bc4d4 <_strtod_l+0x2f4>
   bcdac:	f3af 8000 	nop.w
   bcdb0:	94a03595 	.word	0x94a03595
   bcdb4:	3fdfffff 	.word	0x3fdfffff
   bcdb8:	35afe535 	.word	0x35afe535
   bcdbc:	3fe00000 	.word	0x3fe00000
   bcdc0:	ffc00000 	.word	0xffc00000
   bcdc4:	41dfffff 	.word	0x41dfffff
   bcdc8:	94a03595 	.word	0x94a03595
   bcdcc:	3fcfffff 	.word	0x3fcfffff
   bcdd0:	3ff00000 	.word	0x3ff00000
   bcdd4:	7ff00000 	.word	0x7ff00000
   bcdd8:	7fe00000 	.word	0x7fe00000
   bcddc:	7c9fffff 	.word	0x7c9fffff
   bcde0:	3fe00000 	.word	0x3fe00000
   bcde4:	bff00000 	.word	0xbff00000
   bcde8:	7fefffff 	.word	0x7fefffff

000bcdec <strtod>:
   bcdec:	460a      	mov	r2, r1
   bcdee:	4601      	mov	r1, r0
   bcdf0:	4802      	ldr	r0, [pc, #8]	; (bcdfc <strtod+0x10>)
   bcdf2:	4b03      	ldr	r3, [pc, #12]	; (bce00 <strtod+0x14>)
   bcdf4:	6800      	ldr	r0, [r0, #0]
   bcdf6:	f7ff b9f3 	b.w	bc1e0 <_strtod_l>
   bcdfa:	bf00      	nop
   bcdfc:	2003e2f8 	.word	0x2003e2f8
   bce00:	2003e364 	.word	0x2003e364

000bce04 <_strtol_l.constprop.0>:
   bce04:	2b01      	cmp	r3, #1
   bce06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bce0a:	d001      	beq.n	bce10 <_strtol_l.constprop.0+0xc>
   bce0c:	2b24      	cmp	r3, #36	; 0x24
   bce0e:	d906      	bls.n	bce1e <_strtol_l.constprop.0+0x1a>
   bce10:	f7fa ff9a 	bl	b7d48 <__errno>
   bce14:	2316      	movs	r3, #22
   bce16:	6003      	str	r3, [r0, #0]
   bce18:	2000      	movs	r0, #0
   bce1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bce1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcf04 <_strtol_l.constprop.0+0x100>
   bce22:	460d      	mov	r5, r1
   bce24:	462e      	mov	r6, r5
   bce26:	f815 4b01 	ldrb.w	r4, [r5], #1
   bce2a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bce2e:	f017 0708 	ands.w	r7, r7, #8
   bce32:	d1f7      	bne.n	bce24 <_strtol_l.constprop.0+0x20>
   bce34:	2c2d      	cmp	r4, #45	; 0x2d
   bce36:	d132      	bne.n	bce9e <_strtol_l.constprop.0+0x9a>
   bce38:	782c      	ldrb	r4, [r5, #0]
   bce3a:	2701      	movs	r7, #1
   bce3c:	1cb5      	adds	r5, r6, #2
   bce3e:	2b00      	cmp	r3, #0
   bce40:	d05b      	beq.n	bcefa <_strtol_l.constprop.0+0xf6>
   bce42:	2b10      	cmp	r3, #16
   bce44:	d109      	bne.n	bce5a <_strtol_l.constprop.0+0x56>
   bce46:	2c30      	cmp	r4, #48	; 0x30
   bce48:	d107      	bne.n	bce5a <_strtol_l.constprop.0+0x56>
   bce4a:	782c      	ldrb	r4, [r5, #0]
   bce4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bce50:	2c58      	cmp	r4, #88	; 0x58
   bce52:	d14d      	bne.n	bcef0 <_strtol_l.constprop.0+0xec>
   bce54:	786c      	ldrb	r4, [r5, #1]
   bce56:	2310      	movs	r3, #16
   bce58:	3502      	adds	r5, #2
   bce5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bce5e:	f108 38ff 	add.w	r8, r8, #4294967295
   bce62:	f04f 0c00 	mov.w	ip, #0
   bce66:	fbb8 f9f3 	udiv	r9, r8, r3
   bce6a:	4666      	mov	r6, ip
   bce6c:	fb03 8a19 	mls	sl, r3, r9, r8
   bce70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bce74:	f1be 0f09 	cmp.w	lr, #9
   bce78:	d816      	bhi.n	bcea8 <_strtol_l.constprop.0+0xa4>
   bce7a:	4674      	mov	r4, lr
   bce7c:	42a3      	cmp	r3, r4
   bce7e:	dd24      	ble.n	bceca <_strtol_l.constprop.0+0xc6>
   bce80:	f1bc 0f00 	cmp.w	ip, #0
   bce84:	db1e      	blt.n	bcec4 <_strtol_l.constprop.0+0xc0>
   bce86:	45b1      	cmp	r9, r6
   bce88:	d31c      	bcc.n	bcec4 <_strtol_l.constprop.0+0xc0>
   bce8a:	d101      	bne.n	bce90 <_strtol_l.constprop.0+0x8c>
   bce8c:	45a2      	cmp	sl, r4
   bce8e:	db19      	blt.n	bcec4 <_strtol_l.constprop.0+0xc0>
   bce90:	fb06 4603 	mla	r6, r6, r3, r4
   bce94:	f04f 0c01 	mov.w	ip, #1
   bce98:	f815 4b01 	ldrb.w	r4, [r5], #1
   bce9c:	e7e8      	b.n	bce70 <_strtol_l.constprop.0+0x6c>
   bce9e:	2c2b      	cmp	r4, #43	; 0x2b
   bcea0:	bf04      	itt	eq
   bcea2:	782c      	ldrbeq	r4, [r5, #0]
   bcea4:	1cb5      	addeq	r5, r6, #2
   bcea6:	e7ca      	b.n	bce3e <_strtol_l.constprop.0+0x3a>
   bcea8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bceac:	f1be 0f19 	cmp.w	lr, #25
   bceb0:	d801      	bhi.n	bceb6 <_strtol_l.constprop.0+0xb2>
   bceb2:	3c37      	subs	r4, #55	; 0x37
   bceb4:	e7e2      	b.n	bce7c <_strtol_l.constprop.0+0x78>
   bceb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bceba:	f1be 0f19 	cmp.w	lr, #25
   bcebe:	d804      	bhi.n	bceca <_strtol_l.constprop.0+0xc6>
   bcec0:	3c57      	subs	r4, #87	; 0x57
   bcec2:	e7db      	b.n	bce7c <_strtol_l.constprop.0+0x78>
   bcec4:	f04f 3cff 	mov.w	ip, #4294967295
   bcec8:	e7e6      	b.n	bce98 <_strtol_l.constprop.0+0x94>
   bceca:	f1bc 0f00 	cmp.w	ip, #0
   bcece:	da05      	bge.n	bcedc <_strtol_l.constprop.0+0xd8>
   bced0:	2322      	movs	r3, #34	; 0x22
   bced2:	6003      	str	r3, [r0, #0]
   bced4:	4646      	mov	r6, r8
   bced6:	b942      	cbnz	r2, bceea <_strtol_l.constprop.0+0xe6>
   bced8:	4630      	mov	r0, r6
   bceda:	e79e      	b.n	bce1a <_strtol_l.constprop.0+0x16>
   bcedc:	b107      	cbz	r7, bcee0 <_strtol_l.constprop.0+0xdc>
   bcede:	4276      	negs	r6, r6
   bcee0:	2a00      	cmp	r2, #0
   bcee2:	d0f9      	beq.n	bced8 <_strtol_l.constprop.0+0xd4>
   bcee4:	f1bc 0f00 	cmp.w	ip, #0
   bcee8:	d000      	beq.n	bceec <_strtol_l.constprop.0+0xe8>
   bceea:	1e69      	subs	r1, r5, #1
   bceec:	6011      	str	r1, [r2, #0]
   bceee:	e7f3      	b.n	bced8 <_strtol_l.constprop.0+0xd4>
   bcef0:	2430      	movs	r4, #48	; 0x30
   bcef2:	2b00      	cmp	r3, #0
   bcef4:	d1b1      	bne.n	bce5a <_strtol_l.constprop.0+0x56>
   bcef6:	2308      	movs	r3, #8
   bcef8:	e7af      	b.n	bce5a <_strtol_l.constprop.0+0x56>
   bcefa:	2c30      	cmp	r4, #48	; 0x30
   bcefc:	d0a5      	beq.n	bce4a <_strtol_l.constprop.0+0x46>
   bcefe:	230a      	movs	r3, #10
   bcf00:	e7ab      	b.n	bce5a <_strtol_l.constprop.0+0x56>
   bcf02:	bf00      	nop
   bcf04:	000bf7b9 	.word	0x000bf7b9

000bcf08 <strtol>:
   bcf08:	4613      	mov	r3, r2
   bcf0a:	460a      	mov	r2, r1
   bcf0c:	4601      	mov	r1, r0
   bcf0e:	4802      	ldr	r0, [pc, #8]	; (bcf18 <strtol+0x10>)
   bcf10:	6800      	ldr	r0, [r0, #0]
   bcf12:	f7ff bf77 	b.w	bce04 <_strtol_l.constprop.0>
   bcf16:	bf00      	nop
   bcf18:	2003e2f8 	.word	0x2003e2f8

000bcf1c <__register_exitproc>:
   bcf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcf20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcfdc <__register_exitproc+0xc0>
   bcf24:	4606      	mov	r6, r0
   bcf26:	f8d8 0000 	ldr.w	r0, [r8]
   bcf2a:	461f      	mov	r7, r3
   bcf2c:	460d      	mov	r5, r1
   bcf2e:	4691      	mov	r9, r2
   bcf30:	f000 fbc6 	bl	bd6c0 <__retarget_lock_acquire_recursive>
   bcf34:	4b25      	ldr	r3, [pc, #148]	; (bcfcc <__register_exitproc+0xb0>)
   bcf36:	681c      	ldr	r4, [r3, #0]
   bcf38:	b934      	cbnz	r4, bcf48 <__register_exitproc+0x2c>
   bcf3a:	4c25      	ldr	r4, [pc, #148]	; (bcfd0 <__register_exitproc+0xb4>)
   bcf3c:	601c      	str	r4, [r3, #0]
   bcf3e:	4b25      	ldr	r3, [pc, #148]	; (bcfd4 <__register_exitproc+0xb8>)
   bcf40:	b113      	cbz	r3, bcf48 <__register_exitproc+0x2c>
   bcf42:	681b      	ldr	r3, [r3, #0]
   bcf44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcf48:	6863      	ldr	r3, [r4, #4]
   bcf4a:	2b1f      	cmp	r3, #31
   bcf4c:	dd07      	ble.n	bcf5e <__register_exitproc+0x42>
   bcf4e:	f8d8 0000 	ldr.w	r0, [r8]
   bcf52:	f000 fbb7 	bl	bd6c4 <__retarget_lock_release_recursive>
   bcf56:	f04f 30ff 	mov.w	r0, #4294967295
   bcf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcf5e:	b34e      	cbz	r6, bcfb4 <__register_exitproc+0x98>
   bcf60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcf64:	b988      	cbnz	r0, bcf8a <__register_exitproc+0x6e>
   bcf66:	4b1c      	ldr	r3, [pc, #112]	; (bcfd8 <__register_exitproc+0xbc>)
   bcf68:	b923      	cbnz	r3, bcf74 <__register_exitproc+0x58>
   bcf6a:	f8d8 0000 	ldr.w	r0, [r8]
   bcf6e:	f000 fba8 	bl	bd6c2 <__retarget_lock_release>
   bcf72:	e7f0      	b.n	bcf56 <__register_exitproc+0x3a>
   bcf74:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcf78:	f7fa feae 	bl	b7cd8 <malloc>
   bcf7c:	2800      	cmp	r0, #0
   bcf7e:	d0f4      	beq.n	bcf6a <__register_exitproc+0x4e>
   bcf80:	2300      	movs	r3, #0
   bcf82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcf86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcf8a:	6863      	ldr	r3, [r4, #4]
   bcf8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcf90:	2201      	movs	r2, #1
   bcf92:	409a      	lsls	r2, r3
   bcf94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcf98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcf9c:	4313      	orrs	r3, r2
   bcf9e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcfa2:	2e02      	cmp	r6, #2
   bcfa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcfa8:	bf02      	ittt	eq
   bcfaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcfae:	4313      	orreq	r3, r2
   bcfb0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcfb4:	6863      	ldr	r3, [r4, #4]
   bcfb6:	f8d8 0000 	ldr.w	r0, [r8]
   bcfba:	1c5a      	adds	r2, r3, #1
   bcfbc:	3302      	adds	r3, #2
   bcfbe:	6062      	str	r2, [r4, #4]
   bcfc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcfc4:	f000 fb7e 	bl	bd6c4 <__retarget_lock_release_recursive>
   bcfc8:	2000      	movs	r0, #0
   bcfca:	e7c6      	b.n	bcf5a <__register_exitproc+0x3e>
   bcfcc:	2003e7e8 	.word	0x2003e7e8
   bcfd0:	2003e75c 	.word	0x2003e75c
   bcfd4:	00000000 	.word	0x00000000
   bcfd8:	000b7cd9 	.word	0x000b7cd9
   bcfdc:	2003e35c 	.word	0x2003e35c

000bcfe0 <rshift>:
   bcfe0:	6903      	ldr	r3, [r0, #16]
   bcfe2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bcfe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcfea:	ea4f 1261 	mov.w	r2, r1, asr #5
   bcfee:	f100 0414 	add.w	r4, r0, #20
   bcff2:	dd45      	ble.n	bd080 <rshift+0xa0>
   bcff4:	f011 011f 	ands.w	r1, r1, #31
   bcff8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcffc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd000:	d10c      	bne.n	bd01c <rshift+0x3c>
   bd002:	f100 0710 	add.w	r7, r0, #16
   bd006:	4629      	mov	r1, r5
   bd008:	42b1      	cmp	r1, r6
   bd00a:	d334      	bcc.n	bd076 <rshift+0x96>
   bd00c:	1a9b      	subs	r3, r3, r2
   bd00e:	009b      	lsls	r3, r3, #2
   bd010:	1eea      	subs	r2, r5, #3
   bd012:	4296      	cmp	r6, r2
   bd014:	bf38      	it	cc
   bd016:	2300      	movcc	r3, #0
   bd018:	4423      	add	r3, r4
   bd01a:	e015      	b.n	bd048 <rshift+0x68>
   bd01c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd020:	f1c1 0820 	rsb	r8, r1, #32
   bd024:	40cf      	lsrs	r7, r1
   bd026:	f105 0e04 	add.w	lr, r5, #4
   bd02a:	46a1      	mov	r9, r4
   bd02c:	4576      	cmp	r6, lr
   bd02e:	46f4      	mov	ip, lr
   bd030:	d815      	bhi.n	bd05e <rshift+0x7e>
   bd032:	1a9a      	subs	r2, r3, r2
   bd034:	0092      	lsls	r2, r2, #2
   bd036:	3a04      	subs	r2, #4
   bd038:	3501      	adds	r5, #1
   bd03a:	42ae      	cmp	r6, r5
   bd03c:	bf38      	it	cc
   bd03e:	2200      	movcc	r2, #0
   bd040:	18a3      	adds	r3, r4, r2
   bd042:	50a7      	str	r7, [r4, r2]
   bd044:	b107      	cbz	r7, bd048 <rshift+0x68>
   bd046:	3304      	adds	r3, #4
   bd048:	1b1a      	subs	r2, r3, r4
   bd04a:	42a3      	cmp	r3, r4
   bd04c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd050:	bf08      	it	eq
   bd052:	2300      	moveq	r3, #0
   bd054:	6102      	str	r2, [r0, #16]
   bd056:	bf08      	it	eq
   bd058:	6143      	streq	r3, [r0, #20]
   bd05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd05e:	f8dc c000 	ldr.w	ip, [ip]
   bd062:	fa0c fc08 	lsl.w	ip, ip, r8
   bd066:	ea4c 0707 	orr.w	r7, ip, r7
   bd06a:	f849 7b04 	str.w	r7, [r9], #4
   bd06e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd072:	40cf      	lsrs	r7, r1
   bd074:	e7da      	b.n	bd02c <rshift+0x4c>
   bd076:	f851 cb04 	ldr.w	ip, [r1], #4
   bd07a:	f847 cf04 	str.w	ip, [r7, #4]!
   bd07e:	e7c3      	b.n	bd008 <rshift+0x28>
   bd080:	4623      	mov	r3, r4
   bd082:	e7e1      	b.n	bd048 <rshift+0x68>

000bd084 <__hexdig_fun>:
   bd084:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd088:	2b09      	cmp	r3, #9
   bd08a:	d802      	bhi.n	bd092 <__hexdig_fun+0xe>
   bd08c:	3820      	subs	r0, #32
   bd08e:	b2c0      	uxtb	r0, r0
   bd090:	4770      	bx	lr
   bd092:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd096:	2b05      	cmp	r3, #5
   bd098:	d801      	bhi.n	bd09e <__hexdig_fun+0x1a>
   bd09a:	3847      	subs	r0, #71	; 0x47
   bd09c:	e7f7      	b.n	bd08e <__hexdig_fun+0xa>
   bd09e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd0a2:	2b05      	cmp	r3, #5
   bd0a4:	d801      	bhi.n	bd0aa <__hexdig_fun+0x26>
   bd0a6:	3827      	subs	r0, #39	; 0x27
   bd0a8:	e7f1      	b.n	bd08e <__hexdig_fun+0xa>
   bd0aa:	2000      	movs	r0, #0
   bd0ac:	4770      	bx	lr
	...

000bd0b0 <__gethex>:
   bd0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd0b4:	ed2d 8b02 	vpush	{d8}
   bd0b8:	b089      	sub	sp, #36	; 0x24
   bd0ba:	ee08 0a10 	vmov	s16, r0
   bd0be:	9304      	str	r3, [sp, #16]
   bd0c0:	4bb4      	ldr	r3, [pc, #720]	; (bd394 <__gethex+0x2e4>)
   bd0c2:	681b      	ldr	r3, [r3, #0]
   bd0c4:	9301      	str	r3, [sp, #4]
   bd0c6:	4618      	mov	r0, r3
   bd0c8:	468b      	mov	fp, r1
   bd0ca:	4690      	mov	r8, r2
   bd0cc:	f7f7 fc96 	bl	b49fc <strlen>
   bd0d0:	9b01      	ldr	r3, [sp, #4]
   bd0d2:	f8db 2000 	ldr.w	r2, [fp]
   bd0d6:	4403      	add	r3, r0
   bd0d8:	4682      	mov	sl, r0
   bd0da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd0de:	9305      	str	r3, [sp, #20]
   bd0e0:	1c93      	adds	r3, r2, #2
   bd0e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd0e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd0ea:	32fe      	adds	r2, #254	; 0xfe
   bd0ec:	18d1      	adds	r1, r2, r3
   bd0ee:	461f      	mov	r7, r3
   bd0f0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd0f4:	9100      	str	r1, [sp, #0]
   bd0f6:	2830      	cmp	r0, #48	; 0x30
   bd0f8:	d0f8      	beq.n	bd0ec <__gethex+0x3c>
   bd0fa:	f7ff ffc3 	bl	bd084 <__hexdig_fun>
   bd0fe:	4604      	mov	r4, r0
   bd100:	2800      	cmp	r0, #0
   bd102:	d13a      	bne.n	bd17a <__gethex+0xca>
   bd104:	9901      	ldr	r1, [sp, #4]
   bd106:	4652      	mov	r2, sl
   bd108:	4638      	mov	r0, r7
   bd10a:	f7ff f806 	bl	bc11a <strncmp>
   bd10e:	4605      	mov	r5, r0
   bd110:	2800      	cmp	r0, #0
   bd112:	d168      	bne.n	bd1e6 <__gethex+0x136>
   bd114:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd118:	eb07 060a 	add.w	r6, r7, sl
   bd11c:	f7ff ffb2 	bl	bd084 <__hexdig_fun>
   bd120:	2800      	cmp	r0, #0
   bd122:	d062      	beq.n	bd1ea <__gethex+0x13a>
   bd124:	4633      	mov	r3, r6
   bd126:	7818      	ldrb	r0, [r3, #0]
   bd128:	2830      	cmp	r0, #48	; 0x30
   bd12a:	461f      	mov	r7, r3
   bd12c:	f103 0301 	add.w	r3, r3, #1
   bd130:	d0f9      	beq.n	bd126 <__gethex+0x76>
   bd132:	f7ff ffa7 	bl	bd084 <__hexdig_fun>
   bd136:	2301      	movs	r3, #1
   bd138:	fab0 f480 	clz	r4, r0
   bd13c:	0964      	lsrs	r4, r4, #5
   bd13e:	4635      	mov	r5, r6
   bd140:	9300      	str	r3, [sp, #0]
   bd142:	463a      	mov	r2, r7
   bd144:	4616      	mov	r6, r2
   bd146:	3201      	adds	r2, #1
   bd148:	7830      	ldrb	r0, [r6, #0]
   bd14a:	f7ff ff9b 	bl	bd084 <__hexdig_fun>
   bd14e:	2800      	cmp	r0, #0
   bd150:	d1f8      	bne.n	bd144 <__gethex+0x94>
   bd152:	9901      	ldr	r1, [sp, #4]
   bd154:	4652      	mov	r2, sl
   bd156:	4630      	mov	r0, r6
   bd158:	f7fe ffdf 	bl	bc11a <strncmp>
   bd15c:	b980      	cbnz	r0, bd180 <__gethex+0xd0>
   bd15e:	b94d      	cbnz	r5, bd174 <__gethex+0xc4>
   bd160:	eb06 050a 	add.w	r5, r6, sl
   bd164:	462a      	mov	r2, r5
   bd166:	4616      	mov	r6, r2
   bd168:	3201      	adds	r2, #1
   bd16a:	7830      	ldrb	r0, [r6, #0]
   bd16c:	f7ff ff8a 	bl	bd084 <__hexdig_fun>
   bd170:	2800      	cmp	r0, #0
   bd172:	d1f8      	bne.n	bd166 <__gethex+0xb6>
   bd174:	1bad      	subs	r5, r5, r6
   bd176:	00ad      	lsls	r5, r5, #2
   bd178:	e004      	b.n	bd184 <__gethex+0xd4>
   bd17a:	2400      	movs	r4, #0
   bd17c:	4625      	mov	r5, r4
   bd17e:	e7e0      	b.n	bd142 <__gethex+0x92>
   bd180:	2d00      	cmp	r5, #0
   bd182:	d1f7      	bne.n	bd174 <__gethex+0xc4>
   bd184:	7833      	ldrb	r3, [r6, #0]
   bd186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd18a:	2b50      	cmp	r3, #80	; 0x50
   bd18c:	d13b      	bne.n	bd206 <__gethex+0x156>
   bd18e:	7873      	ldrb	r3, [r6, #1]
   bd190:	2b2b      	cmp	r3, #43	; 0x2b
   bd192:	d02c      	beq.n	bd1ee <__gethex+0x13e>
   bd194:	2b2d      	cmp	r3, #45	; 0x2d
   bd196:	d02e      	beq.n	bd1f6 <__gethex+0x146>
   bd198:	1c71      	adds	r1, r6, #1
   bd19a:	f04f 0900 	mov.w	r9, #0
   bd19e:	7808      	ldrb	r0, [r1, #0]
   bd1a0:	f7ff ff70 	bl	bd084 <__hexdig_fun>
   bd1a4:	1e43      	subs	r3, r0, #1
   bd1a6:	b2db      	uxtb	r3, r3
   bd1a8:	2b18      	cmp	r3, #24
   bd1aa:	d82c      	bhi.n	bd206 <__gethex+0x156>
   bd1ac:	f1a0 0210 	sub.w	r2, r0, #16
   bd1b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd1b4:	f7ff ff66 	bl	bd084 <__hexdig_fun>
   bd1b8:	1e43      	subs	r3, r0, #1
   bd1ba:	b2db      	uxtb	r3, r3
   bd1bc:	2b18      	cmp	r3, #24
   bd1be:	d91d      	bls.n	bd1fc <__gethex+0x14c>
   bd1c0:	f1b9 0f00 	cmp.w	r9, #0
   bd1c4:	d000      	beq.n	bd1c8 <__gethex+0x118>
   bd1c6:	4252      	negs	r2, r2
   bd1c8:	4415      	add	r5, r2
   bd1ca:	f8cb 1000 	str.w	r1, [fp]
   bd1ce:	b1e4      	cbz	r4, bd20a <__gethex+0x15a>
   bd1d0:	9b00      	ldr	r3, [sp, #0]
   bd1d2:	2b00      	cmp	r3, #0
   bd1d4:	bf14      	ite	ne
   bd1d6:	2700      	movne	r7, #0
   bd1d8:	2706      	moveq	r7, #6
   bd1da:	4638      	mov	r0, r7
   bd1dc:	b009      	add	sp, #36	; 0x24
   bd1de:	ecbd 8b02 	vpop	{d8}
   bd1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd1e6:	463e      	mov	r6, r7
   bd1e8:	4625      	mov	r5, r4
   bd1ea:	2401      	movs	r4, #1
   bd1ec:	e7ca      	b.n	bd184 <__gethex+0xd4>
   bd1ee:	f04f 0900 	mov.w	r9, #0
   bd1f2:	1cb1      	adds	r1, r6, #2
   bd1f4:	e7d3      	b.n	bd19e <__gethex+0xee>
   bd1f6:	f04f 0901 	mov.w	r9, #1
   bd1fa:	e7fa      	b.n	bd1f2 <__gethex+0x142>
   bd1fc:	230a      	movs	r3, #10
   bd1fe:	fb03 0202 	mla	r2, r3, r2, r0
   bd202:	3a10      	subs	r2, #16
   bd204:	e7d4      	b.n	bd1b0 <__gethex+0x100>
   bd206:	4631      	mov	r1, r6
   bd208:	e7df      	b.n	bd1ca <__gethex+0x11a>
   bd20a:	1bf3      	subs	r3, r6, r7
   bd20c:	3b01      	subs	r3, #1
   bd20e:	4621      	mov	r1, r4
   bd210:	2b07      	cmp	r3, #7
   bd212:	dc0b      	bgt.n	bd22c <__gethex+0x17c>
   bd214:	ee18 0a10 	vmov	r0, s16
   bd218:	f000 fa68 	bl	bd6ec <_Balloc>
   bd21c:	4604      	mov	r4, r0
   bd21e:	b940      	cbnz	r0, bd232 <__gethex+0x182>
   bd220:	4b5d      	ldr	r3, [pc, #372]	; (bd398 <__gethex+0x2e8>)
   bd222:	4602      	mov	r2, r0
   bd224:	21de      	movs	r1, #222	; 0xde
   bd226:	485d      	ldr	r0, [pc, #372]	; (bd39c <__gethex+0x2ec>)
   bd228:	f7fa fd96 	bl	b7d58 <__assert_func>
   bd22c:	3101      	adds	r1, #1
   bd22e:	105b      	asrs	r3, r3, #1
   bd230:	e7ee      	b.n	bd210 <__gethex+0x160>
   bd232:	f100 0914 	add.w	r9, r0, #20
   bd236:	f04f 0b00 	mov.w	fp, #0
   bd23a:	f1ca 0301 	rsb	r3, sl, #1
   bd23e:	f8cd 9008 	str.w	r9, [sp, #8]
   bd242:	f8cd b000 	str.w	fp, [sp]
   bd246:	9306      	str	r3, [sp, #24]
   bd248:	42b7      	cmp	r7, r6
   bd24a:	d340      	bcc.n	bd2ce <__gethex+0x21e>
   bd24c:	9802      	ldr	r0, [sp, #8]
   bd24e:	9b00      	ldr	r3, [sp, #0]
   bd250:	f840 3b04 	str.w	r3, [r0], #4
   bd254:	eba0 0009 	sub.w	r0, r0, r9
   bd258:	1080      	asrs	r0, r0, #2
   bd25a:	0146      	lsls	r6, r0, #5
   bd25c:	6120      	str	r0, [r4, #16]
   bd25e:	4618      	mov	r0, r3
   bd260:	f000 fb36 	bl	bd8d0 <__hi0bits>
   bd264:	1a30      	subs	r0, r6, r0
   bd266:	f8d8 6000 	ldr.w	r6, [r8]
   bd26a:	42b0      	cmp	r0, r6
   bd26c:	dd63      	ble.n	bd336 <__gethex+0x286>
   bd26e:	1b87      	subs	r7, r0, r6
   bd270:	4639      	mov	r1, r7
   bd272:	4620      	mov	r0, r4
   bd274:	f000 feda 	bl	be02c <__any_on>
   bd278:	4682      	mov	sl, r0
   bd27a:	b1a8      	cbz	r0, bd2a8 <__gethex+0x1f8>
   bd27c:	1e7b      	subs	r3, r7, #1
   bd27e:	1159      	asrs	r1, r3, #5
   bd280:	f003 021f 	and.w	r2, r3, #31
   bd284:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd288:	f04f 0a01 	mov.w	sl, #1
   bd28c:	fa0a f202 	lsl.w	r2, sl, r2
   bd290:	420a      	tst	r2, r1
   bd292:	d009      	beq.n	bd2a8 <__gethex+0x1f8>
   bd294:	4553      	cmp	r3, sl
   bd296:	dd05      	ble.n	bd2a4 <__gethex+0x1f4>
   bd298:	1eb9      	subs	r1, r7, #2
   bd29a:	4620      	mov	r0, r4
   bd29c:	f000 fec6 	bl	be02c <__any_on>
   bd2a0:	2800      	cmp	r0, #0
   bd2a2:	d145      	bne.n	bd330 <__gethex+0x280>
   bd2a4:	f04f 0a02 	mov.w	sl, #2
   bd2a8:	4639      	mov	r1, r7
   bd2aa:	4620      	mov	r0, r4
   bd2ac:	f7ff fe98 	bl	bcfe0 <rshift>
   bd2b0:	443d      	add	r5, r7
   bd2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd2b6:	42ab      	cmp	r3, r5
   bd2b8:	da4c      	bge.n	bd354 <__gethex+0x2a4>
   bd2ba:	ee18 0a10 	vmov	r0, s16
   bd2be:	4621      	mov	r1, r4
   bd2c0:	f000 fa54 	bl	bd76c <_Bfree>
   bd2c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd2c6:	2300      	movs	r3, #0
   bd2c8:	6013      	str	r3, [r2, #0]
   bd2ca:	27a3      	movs	r7, #163	; 0xa3
   bd2cc:	e785      	b.n	bd1da <__gethex+0x12a>
   bd2ce:	1e73      	subs	r3, r6, #1
   bd2d0:	9a05      	ldr	r2, [sp, #20]
   bd2d2:	9303      	str	r3, [sp, #12]
   bd2d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd2d8:	4293      	cmp	r3, r2
   bd2da:	d019      	beq.n	bd310 <__gethex+0x260>
   bd2dc:	f1bb 0f20 	cmp.w	fp, #32
   bd2e0:	d107      	bne.n	bd2f2 <__gethex+0x242>
   bd2e2:	9b02      	ldr	r3, [sp, #8]
   bd2e4:	9a00      	ldr	r2, [sp, #0]
   bd2e6:	f843 2b04 	str.w	r2, [r3], #4
   bd2ea:	9302      	str	r3, [sp, #8]
   bd2ec:	2300      	movs	r3, #0
   bd2ee:	9300      	str	r3, [sp, #0]
   bd2f0:	469b      	mov	fp, r3
   bd2f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd2f6:	f7ff fec5 	bl	bd084 <__hexdig_fun>
   bd2fa:	9b00      	ldr	r3, [sp, #0]
   bd2fc:	f000 000f 	and.w	r0, r0, #15
   bd300:	fa00 f00b 	lsl.w	r0, r0, fp
   bd304:	4303      	orrs	r3, r0
   bd306:	9300      	str	r3, [sp, #0]
   bd308:	f10b 0b04 	add.w	fp, fp, #4
   bd30c:	9b03      	ldr	r3, [sp, #12]
   bd30e:	e00d      	b.n	bd32c <__gethex+0x27c>
   bd310:	9b03      	ldr	r3, [sp, #12]
   bd312:	9a06      	ldr	r2, [sp, #24]
   bd314:	4413      	add	r3, r2
   bd316:	42bb      	cmp	r3, r7
   bd318:	d3e0      	bcc.n	bd2dc <__gethex+0x22c>
   bd31a:	4618      	mov	r0, r3
   bd31c:	9901      	ldr	r1, [sp, #4]
   bd31e:	9307      	str	r3, [sp, #28]
   bd320:	4652      	mov	r2, sl
   bd322:	f7fe fefa 	bl	bc11a <strncmp>
   bd326:	9b07      	ldr	r3, [sp, #28]
   bd328:	2800      	cmp	r0, #0
   bd32a:	d1d7      	bne.n	bd2dc <__gethex+0x22c>
   bd32c:	461e      	mov	r6, r3
   bd32e:	e78b      	b.n	bd248 <__gethex+0x198>
   bd330:	f04f 0a03 	mov.w	sl, #3
   bd334:	e7b8      	b.n	bd2a8 <__gethex+0x1f8>
   bd336:	da0a      	bge.n	bd34e <__gethex+0x29e>
   bd338:	1a37      	subs	r7, r6, r0
   bd33a:	4621      	mov	r1, r4
   bd33c:	ee18 0a10 	vmov	r0, s16
   bd340:	463a      	mov	r2, r7
   bd342:	f000 fc2f 	bl	bdba4 <__lshift>
   bd346:	1bed      	subs	r5, r5, r7
   bd348:	4604      	mov	r4, r0
   bd34a:	f100 0914 	add.w	r9, r0, #20
   bd34e:	f04f 0a00 	mov.w	sl, #0
   bd352:	e7ae      	b.n	bd2b2 <__gethex+0x202>
   bd354:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd358:	42a8      	cmp	r0, r5
   bd35a:	dd72      	ble.n	bd442 <__gethex+0x392>
   bd35c:	1b45      	subs	r5, r0, r5
   bd35e:	42ae      	cmp	r6, r5
   bd360:	dc36      	bgt.n	bd3d0 <__gethex+0x320>
   bd362:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd366:	2b02      	cmp	r3, #2
   bd368:	d02a      	beq.n	bd3c0 <__gethex+0x310>
   bd36a:	2b03      	cmp	r3, #3
   bd36c:	d02c      	beq.n	bd3c8 <__gethex+0x318>
   bd36e:	2b01      	cmp	r3, #1
   bd370:	d11c      	bne.n	bd3ac <__gethex+0x2fc>
   bd372:	42ae      	cmp	r6, r5
   bd374:	d11a      	bne.n	bd3ac <__gethex+0x2fc>
   bd376:	2e01      	cmp	r6, #1
   bd378:	d112      	bne.n	bd3a0 <__gethex+0x2f0>
   bd37a:	9a04      	ldr	r2, [sp, #16]
   bd37c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd380:	6013      	str	r3, [r2, #0]
   bd382:	2301      	movs	r3, #1
   bd384:	6123      	str	r3, [r4, #16]
   bd386:	f8c9 3000 	str.w	r3, [r9]
   bd38a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd38c:	2762      	movs	r7, #98	; 0x62
   bd38e:	601c      	str	r4, [r3, #0]
   bd390:	e723      	b.n	bd1da <__gethex+0x12a>
   bd392:	bf00      	nop
   bd394:	000bf950 	.word	0x000bf950
   bd398:	000bf8b9 	.word	0x000bf8b9
   bd39c:	000bf8ca 	.word	0x000bf8ca
   bd3a0:	1e71      	subs	r1, r6, #1
   bd3a2:	4620      	mov	r0, r4
   bd3a4:	f000 fe42 	bl	be02c <__any_on>
   bd3a8:	2800      	cmp	r0, #0
   bd3aa:	d1e6      	bne.n	bd37a <__gethex+0x2ca>
   bd3ac:	ee18 0a10 	vmov	r0, s16
   bd3b0:	4621      	mov	r1, r4
   bd3b2:	f000 f9db 	bl	bd76c <_Bfree>
   bd3b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd3b8:	2300      	movs	r3, #0
   bd3ba:	6013      	str	r3, [r2, #0]
   bd3bc:	2750      	movs	r7, #80	; 0x50
   bd3be:	e70c      	b.n	bd1da <__gethex+0x12a>
   bd3c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd3c2:	2b00      	cmp	r3, #0
   bd3c4:	d1f2      	bne.n	bd3ac <__gethex+0x2fc>
   bd3c6:	e7d8      	b.n	bd37a <__gethex+0x2ca>
   bd3c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd3ca:	2b00      	cmp	r3, #0
   bd3cc:	d1d5      	bne.n	bd37a <__gethex+0x2ca>
   bd3ce:	e7ed      	b.n	bd3ac <__gethex+0x2fc>
   bd3d0:	1e6f      	subs	r7, r5, #1
   bd3d2:	f1ba 0f00 	cmp.w	sl, #0
   bd3d6:	d131      	bne.n	bd43c <__gethex+0x38c>
   bd3d8:	b127      	cbz	r7, bd3e4 <__gethex+0x334>
   bd3da:	4639      	mov	r1, r7
   bd3dc:	4620      	mov	r0, r4
   bd3de:	f000 fe25 	bl	be02c <__any_on>
   bd3e2:	4682      	mov	sl, r0
   bd3e4:	117b      	asrs	r3, r7, #5
   bd3e6:	2101      	movs	r1, #1
   bd3e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd3ec:	f007 071f 	and.w	r7, r7, #31
   bd3f0:	fa01 f707 	lsl.w	r7, r1, r7
   bd3f4:	421f      	tst	r7, r3
   bd3f6:	4629      	mov	r1, r5
   bd3f8:	4620      	mov	r0, r4
   bd3fa:	bf18      	it	ne
   bd3fc:	f04a 0a02 	orrne.w	sl, sl, #2
   bd400:	1b76      	subs	r6, r6, r5
   bd402:	f7ff fded 	bl	bcfe0 <rshift>
   bd406:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd40a:	2702      	movs	r7, #2
   bd40c:	f1ba 0f00 	cmp.w	sl, #0
   bd410:	d048      	beq.n	bd4a4 <__gethex+0x3f4>
   bd412:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd416:	2b02      	cmp	r3, #2
   bd418:	d015      	beq.n	bd446 <__gethex+0x396>
   bd41a:	2b03      	cmp	r3, #3
   bd41c:	d017      	beq.n	bd44e <__gethex+0x39e>
   bd41e:	2b01      	cmp	r3, #1
   bd420:	d109      	bne.n	bd436 <__gethex+0x386>
   bd422:	f01a 0f02 	tst.w	sl, #2
   bd426:	d006      	beq.n	bd436 <__gethex+0x386>
   bd428:	f8d9 0000 	ldr.w	r0, [r9]
   bd42c:	ea4a 0a00 	orr.w	sl, sl, r0
   bd430:	f01a 0f01 	tst.w	sl, #1
   bd434:	d10e      	bne.n	bd454 <__gethex+0x3a4>
   bd436:	f047 0710 	orr.w	r7, r7, #16
   bd43a:	e033      	b.n	bd4a4 <__gethex+0x3f4>
   bd43c:	f04f 0a01 	mov.w	sl, #1
   bd440:	e7d0      	b.n	bd3e4 <__gethex+0x334>
   bd442:	2701      	movs	r7, #1
   bd444:	e7e2      	b.n	bd40c <__gethex+0x35c>
   bd446:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd448:	f1c3 0301 	rsb	r3, r3, #1
   bd44c:	9315      	str	r3, [sp, #84]	; 0x54
   bd44e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd450:	2b00      	cmp	r3, #0
   bd452:	d0f0      	beq.n	bd436 <__gethex+0x386>
   bd454:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd458:	f104 0314 	add.w	r3, r4, #20
   bd45c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd460:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd464:	f04f 0c00 	mov.w	ip, #0
   bd468:	4618      	mov	r0, r3
   bd46a:	f853 2b04 	ldr.w	r2, [r3], #4
   bd46e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bd472:	d01c      	beq.n	bd4ae <__gethex+0x3fe>
   bd474:	3201      	adds	r2, #1
   bd476:	6002      	str	r2, [r0, #0]
   bd478:	2f02      	cmp	r7, #2
   bd47a:	f104 0314 	add.w	r3, r4, #20
   bd47e:	d13f      	bne.n	bd500 <__gethex+0x450>
   bd480:	f8d8 2000 	ldr.w	r2, [r8]
   bd484:	3a01      	subs	r2, #1
   bd486:	42b2      	cmp	r2, r6
   bd488:	d10a      	bne.n	bd4a0 <__gethex+0x3f0>
   bd48a:	1171      	asrs	r1, r6, #5
   bd48c:	2201      	movs	r2, #1
   bd48e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd492:	f006 061f 	and.w	r6, r6, #31
   bd496:	fa02 f606 	lsl.w	r6, r2, r6
   bd49a:	421e      	tst	r6, r3
   bd49c:	bf18      	it	ne
   bd49e:	4617      	movne	r7, r2
   bd4a0:	f047 0720 	orr.w	r7, r7, #32
   bd4a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd4a6:	601c      	str	r4, [r3, #0]
   bd4a8:	9b04      	ldr	r3, [sp, #16]
   bd4aa:	601d      	str	r5, [r3, #0]
   bd4ac:	e695      	b.n	bd1da <__gethex+0x12a>
   bd4ae:	4299      	cmp	r1, r3
   bd4b0:	f843 cc04 	str.w	ip, [r3, #-4]
   bd4b4:	d8d8      	bhi.n	bd468 <__gethex+0x3b8>
   bd4b6:	68a3      	ldr	r3, [r4, #8]
   bd4b8:	459b      	cmp	fp, r3
   bd4ba:	db19      	blt.n	bd4f0 <__gethex+0x440>
   bd4bc:	6861      	ldr	r1, [r4, #4]
   bd4be:	ee18 0a10 	vmov	r0, s16
   bd4c2:	3101      	adds	r1, #1
   bd4c4:	f000 f912 	bl	bd6ec <_Balloc>
   bd4c8:	4681      	mov	r9, r0
   bd4ca:	b918      	cbnz	r0, bd4d4 <__gethex+0x424>
   bd4cc:	4b1a      	ldr	r3, [pc, #104]	; (bd538 <__gethex+0x488>)
   bd4ce:	4602      	mov	r2, r0
   bd4d0:	2184      	movs	r1, #132	; 0x84
   bd4d2:	e6a8      	b.n	bd226 <__gethex+0x176>
   bd4d4:	6922      	ldr	r2, [r4, #16]
   bd4d6:	3202      	adds	r2, #2
   bd4d8:	f104 010c 	add.w	r1, r4, #12
   bd4dc:	0092      	lsls	r2, r2, #2
   bd4de:	300c      	adds	r0, #12
   bd4e0:	f7fe fd9e 	bl	bc020 <memcpy>
   bd4e4:	4621      	mov	r1, r4
   bd4e6:	ee18 0a10 	vmov	r0, s16
   bd4ea:	f000 f93f 	bl	bd76c <_Bfree>
   bd4ee:	464c      	mov	r4, r9
   bd4f0:	6923      	ldr	r3, [r4, #16]
   bd4f2:	1c5a      	adds	r2, r3, #1
   bd4f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd4f8:	6122      	str	r2, [r4, #16]
   bd4fa:	2201      	movs	r2, #1
   bd4fc:	615a      	str	r2, [r3, #20]
   bd4fe:	e7bb      	b.n	bd478 <__gethex+0x3c8>
   bd500:	6922      	ldr	r2, [r4, #16]
   bd502:	455a      	cmp	r2, fp
   bd504:	dd0b      	ble.n	bd51e <__gethex+0x46e>
   bd506:	2101      	movs	r1, #1
   bd508:	4620      	mov	r0, r4
   bd50a:	f7ff fd69 	bl	bcfe0 <rshift>
   bd50e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd512:	3501      	adds	r5, #1
   bd514:	42ab      	cmp	r3, r5
   bd516:	f6ff aed0 	blt.w	bd2ba <__gethex+0x20a>
   bd51a:	2701      	movs	r7, #1
   bd51c:	e7c0      	b.n	bd4a0 <__gethex+0x3f0>
   bd51e:	f016 061f 	ands.w	r6, r6, #31
   bd522:	d0fa      	beq.n	bd51a <__gethex+0x46a>
   bd524:	4453      	add	r3, sl
   bd526:	f1c6 0620 	rsb	r6, r6, #32
   bd52a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd52e:	f000 f9cf 	bl	bd8d0 <__hi0bits>
   bd532:	42b0      	cmp	r0, r6
   bd534:	dbe7      	blt.n	bd506 <__gethex+0x456>
   bd536:	e7f0      	b.n	bd51a <__gethex+0x46a>
   bd538:	000bf8b9 	.word	0x000bf8b9

000bd53c <L_shift>:
   bd53c:	f1c2 0208 	rsb	r2, r2, #8
   bd540:	0092      	lsls	r2, r2, #2
   bd542:	b570      	push	{r4, r5, r6, lr}
   bd544:	f1c2 0620 	rsb	r6, r2, #32
   bd548:	6843      	ldr	r3, [r0, #4]
   bd54a:	6804      	ldr	r4, [r0, #0]
   bd54c:	fa03 f506 	lsl.w	r5, r3, r6
   bd550:	432c      	orrs	r4, r5
   bd552:	40d3      	lsrs	r3, r2
   bd554:	6004      	str	r4, [r0, #0]
   bd556:	f840 3f04 	str.w	r3, [r0, #4]!
   bd55a:	4288      	cmp	r0, r1
   bd55c:	d3f4      	bcc.n	bd548 <L_shift+0xc>
   bd55e:	bd70      	pop	{r4, r5, r6, pc}

000bd560 <__match>:
   bd560:	b530      	push	{r4, r5, lr}
   bd562:	6803      	ldr	r3, [r0, #0]
   bd564:	3301      	adds	r3, #1
   bd566:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd56a:	b914      	cbnz	r4, bd572 <__match+0x12>
   bd56c:	6003      	str	r3, [r0, #0]
   bd56e:	2001      	movs	r0, #1
   bd570:	bd30      	pop	{r4, r5, pc}
   bd572:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd576:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd57a:	2d19      	cmp	r5, #25
   bd57c:	bf98      	it	ls
   bd57e:	3220      	addls	r2, #32
   bd580:	42a2      	cmp	r2, r4
   bd582:	d0f0      	beq.n	bd566 <__match+0x6>
   bd584:	2000      	movs	r0, #0
   bd586:	e7f3      	b.n	bd570 <__match+0x10>

000bd588 <__hexnan>:
   bd588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd58c:	680b      	ldr	r3, [r1, #0]
   bd58e:	115e      	asrs	r6, r3, #5
   bd590:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd594:	f013 031f 	ands.w	r3, r3, #31
   bd598:	b087      	sub	sp, #28
   bd59a:	bf18      	it	ne
   bd59c:	3604      	addne	r6, #4
   bd59e:	2500      	movs	r5, #0
   bd5a0:	1f37      	subs	r7, r6, #4
   bd5a2:	4690      	mov	r8, r2
   bd5a4:	6802      	ldr	r2, [r0, #0]
   bd5a6:	9301      	str	r3, [sp, #4]
   bd5a8:	4682      	mov	sl, r0
   bd5aa:	f846 5c04 	str.w	r5, [r6, #-4]
   bd5ae:	46b9      	mov	r9, r7
   bd5b0:	463c      	mov	r4, r7
   bd5b2:	9502      	str	r5, [sp, #8]
   bd5b4:	46ab      	mov	fp, r5
   bd5b6:	7851      	ldrb	r1, [r2, #1]
   bd5b8:	1c53      	adds	r3, r2, #1
   bd5ba:	9303      	str	r3, [sp, #12]
   bd5bc:	b341      	cbz	r1, bd610 <__hexnan+0x88>
   bd5be:	4608      	mov	r0, r1
   bd5c0:	9205      	str	r2, [sp, #20]
   bd5c2:	9104      	str	r1, [sp, #16]
   bd5c4:	f7ff fd5e 	bl	bd084 <__hexdig_fun>
   bd5c8:	2800      	cmp	r0, #0
   bd5ca:	d14f      	bne.n	bd66c <__hexnan+0xe4>
   bd5cc:	9904      	ldr	r1, [sp, #16]
   bd5ce:	9a05      	ldr	r2, [sp, #20]
   bd5d0:	2920      	cmp	r1, #32
   bd5d2:	d818      	bhi.n	bd606 <__hexnan+0x7e>
   bd5d4:	9b02      	ldr	r3, [sp, #8]
   bd5d6:	459b      	cmp	fp, r3
   bd5d8:	dd13      	ble.n	bd602 <__hexnan+0x7a>
   bd5da:	454c      	cmp	r4, r9
   bd5dc:	d206      	bcs.n	bd5ec <__hexnan+0x64>
   bd5de:	2d07      	cmp	r5, #7
   bd5e0:	dc04      	bgt.n	bd5ec <__hexnan+0x64>
   bd5e2:	462a      	mov	r2, r5
   bd5e4:	4649      	mov	r1, r9
   bd5e6:	4620      	mov	r0, r4
   bd5e8:	f7ff ffa8 	bl	bd53c <L_shift>
   bd5ec:	4544      	cmp	r4, r8
   bd5ee:	d950      	bls.n	bd692 <__hexnan+0x10a>
   bd5f0:	2300      	movs	r3, #0
   bd5f2:	f1a4 0904 	sub.w	r9, r4, #4
   bd5f6:	f844 3c04 	str.w	r3, [r4, #-4]
   bd5fa:	f8cd b008 	str.w	fp, [sp, #8]
   bd5fe:	464c      	mov	r4, r9
   bd600:	461d      	mov	r5, r3
   bd602:	9a03      	ldr	r2, [sp, #12]
   bd604:	e7d7      	b.n	bd5b6 <__hexnan+0x2e>
   bd606:	2929      	cmp	r1, #41	; 0x29
   bd608:	d156      	bne.n	bd6b8 <__hexnan+0x130>
   bd60a:	3202      	adds	r2, #2
   bd60c:	f8ca 2000 	str.w	r2, [sl]
   bd610:	f1bb 0f00 	cmp.w	fp, #0
   bd614:	d050      	beq.n	bd6b8 <__hexnan+0x130>
   bd616:	454c      	cmp	r4, r9
   bd618:	d206      	bcs.n	bd628 <__hexnan+0xa0>
   bd61a:	2d07      	cmp	r5, #7
   bd61c:	dc04      	bgt.n	bd628 <__hexnan+0xa0>
   bd61e:	462a      	mov	r2, r5
   bd620:	4649      	mov	r1, r9
   bd622:	4620      	mov	r0, r4
   bd624:	f7ff ff8a 	bl	bd53c <L_shift>
   bd628:	4544      	cmp	r4, r8
   bd62a:	d934      	bls.n	bd696 <__hexnan+0x10e>
   bd62c:	f1a8 0204 	sub.w	r2, r8, #4
   bd630:	4623      	mov	r3, r4
   bd632:	f853 1b04 	ldr.w	r1, [r3], #4
   bd636:	f842 1f04 	str.w	r1, [r2, #4]!
   bd63a:	429f      	cmp	r7, r3
   bd63c:	d2f9      	bcs.n	bd632 <__hexnan+0xaa>
   bd63e:	1b3b      	subs	r3, r7, r4
   bd640:	f023 0303 	bic.w	r3, r3, #3
   bd644:	3304      	adds	r3, #4
   bd646:	3401      	adds	r4, #1
   bd648:	3e03      	subs	r6, #3
   bd64a:	42b4      	cmp	r4, r6
   bd64c:	bf88      	it	hi
   bd64e:	2304      	movhi	r3, #4
   bd650:	4443      	add	r3, r8
   bd652:	2200      	movs	r2, #0
   bd654:	f843 2b04 	str.w	r2, [r3], #4
   bd658:	429f      	cmp	r7, r3
   bd65a:	d2fb      	bcs.n	bd654 <__hexnan+0xcc>
   bd65c:	683b      	ldr	r3, [r7, #0]
   bd65e:	b91b      	cbnz	r3, bd668 <__hexnan+0xe0>
   bd660:	4547      	cmp	r7, r8
   bd662:	d127      	bne.n	bd6b4 <__hexnan+0x12c>
   bd664:	2301      	movs	r3, #1
   bd666:	603b      	str	r3, [r7, #0]
   bd668:	2005      	movs	r0, #5
   bd66a:	e026      	b.n	bd6ba <__hexnan+0x132>
   bd66c:	3501      	adds	r5, #1
   bd66e:	2d08      	cmp	r5, #8
   bd670:	f10b 0b01 	add.w	fp, fp, #1
   bd674:	dd06      	ble.n	bd684 <__hexnan+0xfc>
   bd676:	4544      	cmp	r4, r8
   bd678:	d9c3      	bls.n	bd602 <__hexnan+0x7a>
   bd67a:	2300      	movs	r3, #0
   bd67c:	f844 3c04 	str.w	r3, [r4, #-4]
   bd680:	2501      	movs	r5, #1
   bd682:	3c04      	subs	r4, #4
   bd684:	6822      	ldr	r2, [r4, #0]
   bd686:	f000 000f 	and.w	r0, r0, #15
   bd68a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd68e:	6022      	str	r2, [r4, #0]
   bd690:	e7b7      	b.n	bd602 <__hexnan+0x7a>
   bd692:	2508      	movs	r5, #8
   bd694:	e7b5      	b.n	bd602 <__hexnan+0x7a>
   bd696:	9b01      	ldr	r3, [sp, #4]
   bd698:	2b00      	cmp	r3, #0
   bd69a:	d0df      	beq.n	bd65c <__hexnan+0xd4>
   bd69c:	f04f 32ff 	mov.w	r2, #4294967295
   bd6a0:	f1c3 0320 	rsb	r3, r3, #32
   bd6a4:	fa22 f303 	lsr.w	r3, r2, r3
   bd6a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd6ac:	401a      	ands	r2, r3
   bd6ae:	f846 2c04 	str.w	r2, [r6, #-4]
   bd6b2:	e7d3      	b.n	bd65c <__hexnan+0xd4>
   bd6b4:	3f04      	subs	r7, #4
   bd6b6:	e7d1      	b.n	bd65c <__hexnan+0xd4>
   bd6b8:	2004      	movs	r0, #4
   bd6ba:	b007      	add	sp, #28
   bd6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd6c0 <__retarget_lock_acquire_recursive>:
   bd6c0:	4770      	bx	lr

000bd6c2 <__retarget_lock_release>:
   bd6c2:	4770      	bx	lr

000bd6c4 <__retarget_lock_release_recursive>:
   bd6c4:	4770      	bx	lr

000bd6c6 <__ascii_mbtowc>:
   bd6c6:	b082      	sub	sp, #8
   bd6c8:	b901      	cbnz	r1, bd6cc <__ascii_mbtowc+0x6>
   bd6ca:	a901      	add	r1, sp, #4
   bd6cc:	b142      	cbz	r2, bd6e0 <__ascii_mbtowc+0x1a>
   bd6ce:	b14b      	cbz	r3, bd6e4 <__ascii_mbtowc+0x1e>
   bd6d0:	7813      	ldrb	r3, [r2, #0]
   bd6d2:	600b      	str	r3, [r1, #0]
   bd6d4:	7812      	ldrb	r2, [r2, #0]
   bd6d6:	1e10      	subs	r0, r2, #0
   bd6d8:	bf18      	it	ne
   bd6da:	2001      	movne	r0, #1
   bd6dc:	b002      	add	sp, #8
   bd6de:	4770      	bx	lr
   bd6e0:	4610      	mov	r0, r2
   bd6e2:	e7fb      	b.n	bd6dc <__ascii_mbtowc+0x16>
   bd6e4:	f06f 0001 	mvn.w	r0, #1
   bd6e8:	e7f8      	b.n	bd6dc <__ascii_mbtowc+0x16>
	...

000bd6ec <_Balloc>:
   bd6ec:	b570      	push	{r4, r5, r6, lr}
   bd6ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd6f0:	4604      	mov	r4, r0
   bd6f2:	460d      	mov	r5, r1
   bd6f4:	b976      	cbnz	r6, bd714 <_Balloc+0x28>
   bd6f6:	2010      	movs	r0, #16
   bd6f8:	f7fa faee 	bl	b7cd8 <malloc>
   bd6fc:	4602      	mov	r2, r0
   bd6fe:	6260      	str	r0, [r4, #36]	; 0x24
   bd700:	b920      	cbnz	r0, bd70c <_Balloc+0x20>
   bd702:	4b18      	ldr	r3, [pc, #96]	; (bd764 <_Balloc+0x78>)
   bd704:	4818      	ldr	r0, [pc, #96]	; (bd768 <_Balloc+0x7c>)
   bd706:	2166      	movs	r1, #102	; 0x66
   bd708:	f7fa fb26 	bl	b7d58 <__assert_func>
   bd70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd710:	6006      	str	r6, [r0, #0]
   bd712:	60c6      	str	r6, [r0, #12]
   bd714:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd716:	68f3      	ldr	r3, [r6, #12]
   bd718:	b183      	cbz	r3, bd73c <_Balloc+0x50>
   bd71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd71c:	68db      	ldr	r3, [r3, #12]
   bd71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd722:	b9b8      	cbnz	r0, bd754 <_Balloc+0x68>
   bd724:	2101      	movs	r1, #1
   bd726:	fa01 f605 	lsl.w	r6, r1, r5
   bd72a:	1d72      	adds	r2, r6, #5
   bd72c:	0092      	lsls	r2, r2, #2
   bd72e:	4620      	mov	r0, r4
   bd730:	f000 fc9d 	bl	be06e <_calloc_r>
   bd734:	b160      	cbz	r0, bd750 <_Balloc+0x64>
   bd736:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd73a:	e00e      	b.n	bd75a <_Balloc+0x6e>
   bd73c:	2221      	movs	r2, #33	; 0x21
   bd73e:	2104      	movs	r1, #4
   bd740:	4620      	mov	r0, r4
   bd742:	f000 fc94 	bl	be06e <_calloc_r>
   bd746:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd748:	60f0      	str	r0, [r6, #12]
   bd74a:	68db      	ldr	r3, [r3, #12]
   bd74c:	2b00      	cmp	r3, #0
   bd74e:	d1e4      	bne.n	bd71a <_Balloc+0x2e>
   bd750:	2000      	movs	r0, #0
   bd752:	bd70      	pop	{r4, r5, r6, pc}
   bd754:	6802      	ldr	r2, [r0, #0]
   bd756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd75a:	2300      	movs	r3, #0
   bd75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd760:	e7f7      	b.n	bd752 <_Balloc+0x66>
   bd762:	bf00      	nop
   bd764:	000bf6c5 	.word	0x000bf6c5
   bd768:	000bf964 	.word	0x000bf964

000bd76c <_Bfree>:
   bd76c:	b570      	push	{r4, r5, r6, lr}
   bd76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd770:	4605      	mov	r5, r0
   bd772:	460c      	mov	r4, r1
   bd774:	b976      	cbnz	r6, bd794 <_Bfree+0x28>
   bd776:	2010      	movs	r0, #16
   bd778:	f7fa faae 	bl	b7cd8 <malloc>
   bd77c:	4602      	mov	r2, r0
   bd77e:	6268      	str	r0, [r5, #36]	; 0x24
   bd780:	b920      	cbnz	r0, bd78c <_Bfree+0x20>
   bd782:	4b09      	ldr	r3, [pc, #36]	; (bd7a8 <_Bfree+0x3c>)
   bd784:	4809      	ldr	r0, [pc, #36]	; (bd7ac <_Bfree+0x40>)
   bd786:	218a      	movs	r1, #138	; 0x8a
   bd788:	f7fa fae6 	bl	b7d58 <__assert_func>
   bd78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd790:	6006      	str	r6, [r0, #0]
   bd792:	60c6      	str	r6, [r0, #12]
   bd794:	b13c      	cbz	r4, bd7a6 <_Bfree+0x3a>
   bd796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd798:	6862      	ldr	r2, [r4, #4]
   bd79a:	68db      	ldr	r3, [r3, #12]
   bd79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd7a0:	6021      	str	r1, [r4, #0]
   bd7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd7a6:	bd70      	pop	{r4, r5, r6, pc}
   bd7a8:	000bf6c5 	.word	0x000bf6c5
   bd7ac:	000bf964 	.word	0x000bf964

000bd7b0 <__multadd>:
   bd7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd7b4:	690d      	ldr	r5, [r1, #16]
   bd7b6:	4607      	mov	r7, r0
   bd7b8:	460c      	mov	r4, r1
   bd7ba:	461e      	mov	r6, r3
   bd7bc:	f101 0c14 	add.w	ip, r1, #20
   bd7c0:	2000      	movs	r0, #0
   bd7c2:	f8dc 3000 	ldr.w	r3, [ip]
   bd7c6:	b299      	uxth	r1, r3
   bd7c8:	fb02 6101 	mla	r1, r2, r1, r6
   bd7cc:	0c1e      	lsrs	r6, r3, #16
   bd7ce:	0c0b      	lsrs	r3, r1, #16
   bd7d0:	fb02 3306 	mla	r3, r2, r6, r3
   bd7d4:	b289      	uxth	r1, r1
   bd7d6:	3001      	adds	r0, #1
   bd7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd7dc:	4285      	cmp	r5, r0
   bd7de:	f84c 1b04 	str.w	r1, [ip], #4
   bd7e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd7e6:	dcec      	bgt.n	bd7c2 <__multadd+0x12>
   bd7e8:	b30e      	cbz	r6, bd82e <__multadd+0x7e>
   bd7ea:	68a3      	ldr	r3, [r4, #8]
   bd7ec:	42ab      	cmp	r3, r5
   bd7ee:	dc19      	bgt.n	bd824 <__multadd+0x74>
   bd7f0:	6861      	ldr	r1, [r4, #4]
   bd7f2:	4638      	mov	r0, r7
   bd7f4:	3101      	adds	r1, #1
   bd7f6:	f7ff ff79 	bl	bd6ec <_Balloc>
   bd7fa:	4680      	mov	r8, r0
   bd7fc:	b928      	cbnz	r0, bd80a <__multadd+0x5a>
   bd7fe:	4602      	mov	r2, r0
   bd800:	4b0c      	ldr	r3, [pc, #48]	; (bd834 <__multadd+0x84>)
   bd802:	480d      	ldr	r0, [pc, #52]	; (bd838 <__multadd+0x88>)
   bd804:	21b5      	movs	r1, #181	; 0xb5
   bd806:	f7fa faa7 	bl	b7d58 <__assert_func>
   bd80a:	6922      	ldr	r2, [r4, #16]
   bd80c:	3202      	adds	r2, #2
   bd80e:	f104 010c 	add.w	r1, r4, #12
   bd812:	0092      	lsls	r2, r2, #2
   bd814:	300c      	adds	r0, #12
   bd816:	f7fe fc03 	bl	bc020 <memcpy>
   bd81a:	4621      	mov	r1, r4
   bd81c:	4638      	mov	r0, r7
   bd81e:	f7ff ffa5 	bl	bd76c <_Bfree>
   bd822:	4644      	mov	r4, r8
   bd824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd828:	3501      	adds	r5, #1
   bd82a:	615e      	str	r6, [r3, #20]
   bd82c:	6125      	str	r5, [r4, #16]
   bd82e:	4620      	mov	r0, r4
   bd830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd834:	000bf8b9 	.word	0x000bf8b9
   bd838:	000bf964 	.word	0x000bf964

000bd83c <__s2b>:
   bd83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd840:	460c      	mov	r4, r1
   bd842:	4615      	mov	r5, r2
   bd844:	461f      	mov	r7, r3
   bd846:	2209      	movs	r2, #9
   bd848:	3308      	adds	r3, #8
   bd84a:	4606      	mov	r6, r0
   bd84c:	fb93 f3f2 	sdiv	r3, r3, r2
   bd850:	2100      	movs	r1, #0
   bd852:	2201      	movs	r2, #1
   bd854:	429a      	cmp	r2, r3
   bd856:	db09      	blt.n	bd86c <__s2b+0x30>
   bd858:	4630      	mov	r0, r6
   bd85a:	f7ff ff47 	bl	bd6ec <_Balloc>
   bd85e:	b940      	cbnz	r0, bd872 <__s2b+0x36>
   bd860:	4602      	mov	r2, r0
   bd862:	4b19      	ldr	r3, [pc, #100]	; (bd8c8 <__s2b+0x8c>)
   bd864:	4819      	ldr	r0, [pc, #100]	; (bd8cc <__s2b+0x90>)
   bd866:	21ce      	movs	r1, #206	; 0xce
   bd868:	f7fa fa76 	bl	b7d58 <__assert_func>
   bd86c:	0052      	lsls	r2, r2, #1
   bd86e:	3101      	adds	r1, #1
   bd870:	e7f0      	b.n	bd854 <__s2b+0x18>
   bd872:	9b08      	ldr	r3, [sp, #32]
   bd874:	6143      	str	r3, [r0, #20]
   bd876:	2d09      	cmp	r5, #9
   bd878:	f04f 0301 	mov.w	r3, #1
   bd87c:	6103      	str	r3, [r0, #16]
   bd87e:	dd16      	ble.n	bd8ae <__s2b+0x72>
   bd880:	f104 0909 	add.w	r9, r4, #9
   bd884:	46c8      	mov	r8, r9
   bd886:	442c      	add	r4, r5
   bd888:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd88c:	4601      	mov	r1, r0
   bd88e:	3b30      	subs	r3, #48	; 0x30
   bd890:	220a      	movs	r2, #10
   bd892:	4630      	mov	r0, r6
   bd894:	f7ff ff8c 	bl	bd7b0 <__multadd>
   bd898:	45a0      	cmp	r8, r4
   bd89a:	d1f5      	bne.n	bd888 <__s2b+0x4c>
   bd89c:	f1a5 0408 	sub.w	r4, r5, #8
   bd8a0:	444c      	add	r4, r9
   bd8a2:	1b2d      	subs	r5, r5, r4
   bd8a4:	1963      	adds	r3, r4, r5
   bd8a6:	42bb      	cmp	r3, r7
   bd8a8:	db04      	blt.n	bd8b4 <__s2b+0x78>
   bd8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd8ae:	340a      	adds	r4, #10
   bd8b0:	2509      	movs	r5, #9
   bd8b2:	e7f6      	b.n	bd8a2 <__s2b+0x66>
   bd8b4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd8b8:	4601      	mov	r1, r0
   bd8ba:	3b30      	subs	r3, #48	; 0x30
   bd8bc:	220a      	movs	r2, #10
   bd8be:	4630      	mov	r0, r6
   bd8c0:	f7ff ff76 	bl	bd7b0 <__multadd>
   bd8c4:	e7ee      	b.n	bd8a4 <__s2b+0x68>
   bd8c6:	bf00      	nop
   bd8c8:	000bf8b9 	.word	0x000bf8b9
   bd8cc:	000bf964 	.word	0x000bf964

000bd8d0 <__hi0bits>:
   bd8d0:	0c03      	lsrs	r3, r0, #16
   bd8d2:	041b      	lsls	r3, r3, #16
   bd8d4:	b9d3      	cbnz	r3, bd90c <__hi0bits+0x3c>
   bd8d6:	0400      	lsls	r0, r0, #16
   bd8d8:	2310      	movs	r3, #16
   bd8da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd8de:	bf04      	itt	eq
   bd8e0:	0200      	lsleq	r0, r0, #8
   bd8e2:	3308      	addeq	r3, #8
   bd8e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd8e8:	bf04      	itt	eq
   bd8ea:	0100      	lsleq	r0, r0, #4
   bd8ec:	3304      	addeq	r3, #4
   bd8ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd8f2:	bf04      	itt	eq
   bd8f4:	0080      	lsleq	r0, r0, #2
   bd8f6:	3302      	addeq	r3, #2
   bd8f8:	2800      	cmp	r0, #0
   bd8fa:	db05      	blt.n	bd908 <__hi0bits+0x38>
   bd8fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd900:	f103 0301 	add.w	r3, r3, #1
   bd904:	bf08      	it	eq
   bd906:	2320      	moveq	r3, #32
   bd908:	4618      	mov	r0, r3
   bd90a:	4770      	bx	lr
   bd90c:	2300      	movs	r3, #0
   bd90e:	e7e4      	b.n	bd8da <__hi0bits+0xa>

000bd910 <__lo0bits>:
   bd910:	6803      	ldr	r3, [r0, #0]
   bd912:	f013 0207 	ands.w	r2, r3, #7
   bd916:	4601      	mov	r1, r0
   bd918:	d00b      	beq.n	bd932 <__lo0bits+0x22>
   bd91a:	07da      	lsls	r2, r3, #31
   bd91c:	d423      	bmi.n	bd966 <__lo0bits+0x56>
   bd91e:	0798      	lsls	r0, r3, #30
   bd920:	bf49      	itett	mi
   bd922:	085b      	lsrmi	r3, r3, #1
   bd924:	089b      	lsrpl	r3, r3, #2
   bd926:	2001      	movmi	r0, #1
   bd928:	600b      	strmi	r3, [r1, #0]
   bd92a:	bf5c      	itt	pl
   bd92c:	600b      	strpl	r3, [r1, #0]
   bd92e:	2002      	movpl	r0, #2
   bd930:	4770      	bx	lr
   bd932:	b298      	uxth	r0, r3
   bd934:	b9a8      	cbnz	r0, bd962 <__lo0bits+0x52>
   bd936:	0c1b      	lsrs	r3, r3, #16
   bd938:	2010      	movs	r0, #16
   bd93a:	b2da      	uxtb	r2, r3
   bd93c:	b90a      	cbnz	r2, bd942 <__lo0bits+0x32>
   bd93e:	3008      	adds	r0, #8
   bd940:	0a1b      	lsrs	r3, r3, #8
   bd942:	071a      	lsls	r2, r3, #28
   bd944:	bf04      	itt	eq
   bd946:	091b      	lsreq	r3, r3, #4
   bd948:	3004      	addeq	r0, #4
   bd94a:	079a      	lsls	r2, r3, #30
   bd94c:	bf04      	itt	eq
   bd94e:	089b      	lsreq	r3, r3, #2
   bd950:	3002      	addeq	r0, #2
   bd952:	07da      	lsls	r2, r3, #31
   bd954:	d403      	bmi.n	bd95e <__lo0bits+0x4e>
   bd956:	085b      	lsrs	r3, r3, #1
   bd958:	f100 0001 	add.w	r0, r0, #1
   bd95c:	d005      	beq.n	bd96a <__lo0bits+0x5a>
   bd95e:	600b      	str	r3, [r1, #0]
   bd960:	4770      	bx	lr
   bd962:	4610      	mov	r0, r2
   bd964:	e7e9      	b.n	bd93a <__lo0bits+0x2a>
   bd966:	2000      	movs	r0, #0
   bd968:	4770      	bx	lr
   bd96a:	2020      	movs	r0, #32
   bd96c:	4770      	bx	lr
	...

000bd970 <__i2b>:
   bd970:	b510      	push	{r4, lr}
   bd972:	460c      	mov	r4, r1
   bd974:	2101      	movs	r1, #1
   bd976:	f7ff feb9 	bl	bd6ec <_Balloc>
   bd97a:	4602      	mov	r2, r0
   bd97c:	b928      	cbnz	r0, bd98a <__i2b+0x1a>
   bd97e:	4b05      	ldr	r3, [pc, #20]	; (bd994 <__i2b+0x24>)
   bd980:	4805      	ldr	r0, [pc, #20]	; (bd998 <__i2b+0x28>)
   bd982:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd986:	f7fa f9e7 	bl	b7d58 <__assert_func>
   bd98a:	2301      	movs	r3, #1
   bd98c:	6144      	str	r4, [r0, #20]
   bd98e:	6103      	str	r3, [r0, #16]
   bd990:	bd10      	pop	{r4, pc}
   bd992:	bf00      	nop
   bd994:	000bf8b9 	.word	0x000bf8b9
   bd998:	000bf964 	.word	0x000bf964

000bd99c <__multiply>:
   bd99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd9a0:	4691      	mov	r9, r2
   bd9a2:	690a      	ldr	r2, [r1, #16]
   bd9a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd9a8:	429a      	cmp	r2, r3
   bd9aa:	bfb8      	it	lt
   bd9ac:	460b      	movlt	r3, r1
   bd9ae:	460c      	mov	r4, r1
   bd9b0:	bfbc      	itt	lt
   bd9b2:	464c      	movlt	r4, r9
   bd9b4:	4699      	movlt	r9, r3
   bd9b6:	6927      	ldr	r7, [r4, #16]
   bd9b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd9bc:	68a3      	ldr	r3, [r4, #8]
   bd9be:	6861      	ldr	r1, [r4, #4]
   bd9c0:	eb07 060a 	add.w	r6, r7, sl
   bd9c4:	42b3      	cmp	r3, r6
   bd9c6:	b085      	sub	sp, #20
   bd9c8:	bfb8      	it	lt
   bd9ca:	3101      	addlt	r1, #1
   bd9cc:	f7ff fe8e 	bl	bd6ec <_Balloc>
   bd9d0:	b930      	cbnz	r0, bd9e0 <__multiply+0x44>
   bd9d2:	4602      	mov	r2, r0
   bd9d4:	4b44      	ldr	r3, [pc, #272]	; (bdae8 <__multiply+0x14c>)
   bd9d6:	4845      	ldr	r0, [pc, #276]	; (bdaec <__multiply+0x150>)
   bd9d8:	f240 115d 	movw	r1, #349	; 0x15d
   bd9dc:	f7fa f9bc 	bl	b7d58 <__assert_func>
   bd9e0:	f100 0514 	add.w	r5, r0, #20
   bd9e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd9e8:	462b      	mov	r3, r5
   bd9ea:	2200      	movs	r2, #0
   bd9ec:	4543      	cmp	r3, r8
   bd9ee:	d321      	bcc.n	bda34 <__multiply+0x98>
   bd9f0:	f104 0314 	add.w	r3, r4, #20
   bd9f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd9f8:	f109 0314 	add.w	r3, r9, #20
   bd9fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bda00:	9202      	str	r2, [sp, #8]
   bda02:	1b3a      	subs	r2, r7, r4
   bda04:	3a15      	subs	r2, #21
   bda06:	f022 0203 	bic.w	r2, r2, #3
   bda0a:	3204      	adds	r2, #4
   bda0c:	f104 0115 	add.w	r1, r4, #21
   bda10:	428f      	cmp	r7, r1
   bda12:	bf38      	it	cc
   bda14:	2204      	movcc	r2, #4
   bda16:	9201      	str	r2, [sp, #4]
   bda18:	9a02      	ldr	r2, [sp, #8]
   bda1a:	9303      	str	r3, [sp, #12]
   bda1c:	429a      	cmp	r2, r3
   bda1e:	d80c      	bhi.n	bda3a <__multiply+0x9e>
   bda20:	2e00      	cmp	r6, #0
   bda22:	dd03      	ble.n	bda2c <__multiply+0x90>
   bda24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bda28:	2b00      	cmp	r3, #0
   bda2a:	d05a      	beq.n	bdae2 <__multiply+0x146>
   bda2c:	6106      	str	r6, [r0, #16]
   bda2e:	b005      	add	sp, #20
   bda30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bda34:	f843 2b04 	str.w	r2, [r3], #4
   bda38:	e7d8      	b.n	bd9ec <__multiply+0x50>
   bda3a:	f8b3 a000 	ldrh.w	sl, [r3]
   bda3e:	f1ba 0f00 	cmp.w	sl, #0
   bda42:	d024      	beq.n	bda8e <__multiply+0xf2>
   bda44:	f104 0e14 	add.w	lr, r4, #20
   bda48:	46a9      	mov	r9, r5
   bda4a:	f04f 0c00 	mov.w	ip, #0
   bda4e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bda52:	f8d9 1000 	ldr.w	r1, [r9]
   bda56:	fa1f fb82 	uxth.w	fp, r2
   bda5a:	b289      	uxth	r1, r1
   bda5c:	fb0a 110b 	mla	r1, sl, fp, r1
   bda60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bda64:	f8d9 2000 	ldr.w	r2, [r9]
   bda68:	4461      	add	r1, ip
   bda6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bda6e:	fb0a c20b 	mla	r2, sl, fp, ip
   bda72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bda76:	b289      	uxth	r1, r1
   bda78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bda7c:	4577      	cmp	r7, lr
   bda7e:	f849 1b04 	str.w	r1, [r9], #4
   bda82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bda86:	d8e2      	bhi.n	bda4e <__multiply+0xb2>
   bda88:	9a01      	ldr	r2, [sp, #4]
   bda8a:	f845 c002 	str.w	ip, [r5, r2]
   bda8e:	9a03      	ldr	r2, [sp, #12]
   bda90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bda94:	3304      	adds	r3, #4
   bda96:	f1b9 0f00 	cmp.w	r9, #0
   bda9a:	d020      	beq.n	bdade <__multiply+0x142>
   bda9c:	6829      	ldr	r1, [r5, #0]
   bda9e:	f104 0c14 	add.w	ip, r4, #20
   bdaa2:	46ae      	mov	lr, r5
   bdaa4:	f04f 0a00 	mov.w	sl, #0
   bdaa8:	f8bc b000 	ldrh.w	fp, [ip]
   bdaac:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bdab0:	fb09 220b 	mla	r2, r9, fp, r2
   bdab4:	4492      	add	sl, r2
   bdab6:	b289      	uxth	r1, r1
   bdab8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bdabc:	f84e 1b04 	str.w	r1, [lr], #4
   bdac0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bdac4:	f8be 1000 	ldrh.w	r1, [lr]
   bdac8:	0c12      	lsrs	r2, r2, #16
   bdaca:	fb09 1102 	mla	r1, r9, r2, r1
   bdace:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bdad2:	4567      	cmp	r7, ip
   bdad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bdad8:	d8e6      	bhi.n	bdaa8 <__multiply+0x10c>
   bdada:	9a01      	ldr	r2, [sp, #4]
   bdadc:	50a9      	str	r1, [r5, r2]
   bdade:	3504      	adds	r5, #4
   bdae0:	e79a      	b.n	bda18 <__multiply+0x7c>
   bdae2:	3e01      	subs	r6, #1
   bdae4:	e79c      	b.n	bda20 <__multiply+0x84>
   bdae6:	bf00      	nop
   bdae8:	000bf8b9 	.word	0x000bf8b9
   bdaec:	000bf964 	.word	0x000bf964

000bdaf0 <__pow5mult>:
   bdaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdaf4:	4615      	mov	r5, r2
   bdaf6:	f012 0203 	ands.w	r2, r2, #3
   bdafa:	4606      	mov	r6, r0
   bdafc:	460f      	mov	r7, r1
   bdafe:	d007      	beq.n	bdb10 <__pow5mult+0x20>
   bdb00:	4c25      	ldr	r4, [pc, #148]	; (bdb98 <__pow5mult+0xa8>)
   bdb02:	3a01      	subs	r2, #1
   bdb04:	2300      	movs	r3, #0
   bdb06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bdb0a:	f7ff fe51 	bl	bd7b0 <__multadd>
   bdb0e:	4607      	mov	r7, r0
   bdb10:	10ad      	asrs	r5, r5, #2
   bdb12:	d03d      	beq.n	bdb90 <__pow5mult+0xa0>
   bdb14:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bdb16:	b97c      	cbnz	r4, bdb38 <__pow5mult+0x48>
   bdb18:	2010      	movs	r0, #16
   bdb1a:	f7fa f8dd 	bl	b7cd8 <malloc>
   bdb1e:	4602      	mov	r2, r0
   bdb20:	6270      	str	r0, [r6, #36]	; 0x24
   bdb22:	b928      	cbnz	r0, bdb30 <__pow5mult+0x40>
   bdb24:	4b1d      	ldr	r3, [pc, #116]	; (bdb9c <__pow5mult+0xac>)
   bdb26:	481e      	ldr	r0, [pc, #120]	; (bdba0 <__pow5mult+0xb0>)
   bdb28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bdb2c:	f7fa f914 	bl	b7d58 <__assert_func>
   bdb30:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdb34:	6004      	str	r4, [r0, #0]
   bdb36:	60c4      	str	r4, [r0, #12]
   bdb38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bdb3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bdb40:	b94c      	cbnz	r4, bdb56 <__pow5mult+0x66>
   bdb42:	f240 2171 	movw	r1, #625	; 0x271
   bdb46:	4630      	mov	r0, r6
   bdb48:	f7ff ff12 	bl	bd970 <__i2b>
   bdb4c:	2300      	movs	r3, #0
   bdb4e:	f8c8 0008 	str.w	r0, [r8, #8]
   bdb52:	4604      	mov	r4, r0
   bdb54:	6003      	str	r3, [r0, #0]
   bdb56:	f04f 0900 	mov.w	r9, #0
   bdb5a:	07eb      	lsls	r3, r5, #31
   bdb5c:	d50a      	bpl.n	bdb74 <__pow5mult+0x84>
   bdb5e:	4639      	mov	r1, r7
   bdb60:	4622      	mov	r2, r4
   bdb62:	4630      	mov	r0, r6
   bdb64:	f7ff ff1a 	bl	bd99c <__multiply>
   bdb68:	4639      	mov	r1, r7
   bdb6a:	4680      	mov	r8, r0
   bdb6c:	4630      	mov	r0, r6
   bdb6e:	f7ff fdfd 	bl	bd76c <_Bfree>
   bdb72:	4647      	mov	r7, r8
   bdb74:	106d      	asrs	r5, r5, #1
   bdb76:	d00b      	beq.n	bdb90 <__pow5mult+0xa0>
   bdb78:	6820      	ldr	r0, [r4, #0]
   bdb7a:	b938      	cbnz	r0, bdb8c <__pow5mult+0x9c>
   bdb7c:	4622      	mov	r2, r4
   bdb7e:	4621      	mov	r1, r4
   bdb80:	4630      	mov	r0, r6
   bdb82:	f7ff ff0b 	bl	bd99c <__multiply>
   bdb86:	6020      	str	r0, [r4, #0]
   bdb88:	f8c0 9000 	str.w	r9, [r0]
   bdb8c:	4604      	mov	r4, r0
   bdb8e:	e7e4      	b.n	bdb5a <__pow5mult+0x6a>
   bdb90:	4638      	mov	r0, r7
   bdb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdb96:	bf00      	nop
   bdb98:	000bfad8 	.word	0x000bfad8
   bdb9c:	000bf6c5 	.word	0x000bf6c5
   bdba0:	000bf964 	.word	0x000bf964

000bdba4 <__lshift>:
   bdba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdba8:	460c      	mov	r4, r1
   bdbaa:	6849      	ldr	r1, [r1, #4]
   bdbac:	6923      	ldr	r3, [r4, #16]
   bdbae:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bdbb2:	68a3      	ldr	r3, [r4, #8]
   bdbb4:	4607      	mov	r7, r0
   bdbb6:	4691      	mov	r9, r2
   bdbb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bdbbc:	f108 0601 	add.w	r6, r8, #1
   bdbc0:	42b3      	cmp	r3, r6
   bdbc2:	db0b      	blt.n	bdbdc <__lshift+0x38>
   bdbc4:	4638      	mov	r0, r7
   bdbc6:	f7ff fd91 	bl	bd6ec <_Balloc>
   bdbca:	4605      	mov	r5, r0
   bdbcc:	b948      	cbnz	r0, bdbe2 <__lshift+0x3e>
   bdbce:	4602      	mov	r2, r0
   bdbd0:	4b2a      	ldr	r3, [pc, #168]	; (bdc7c <__lshift+0xd8>)
   bdbd2:	482b      	ldr	r0, [pc, #172]	; (bdc80 <__lshift+0xdc>)
   bdbd4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bdbd8:	f7fa f8be 	bl	b7d58 <__assert_func>
   bdbdc:	3101      	adds	r1, #1
   bdbde:	005b      	lsls	r3, r3, #1
   bdbe0:	e7ee      	b.n	bdbc0 <__lshift+0x1c>
   bdbe2:	2300      	movs	r3, #0
   bdbe4:	f100 0114 	add.w	r1, r0, #20
   bdbe8:	f100 0210 	add.w	r2, r0, #16
   bdbec:	4618      	mov	r0, r3
   bdbee:	4553      	cmp	r3, sl
   bdbf0:	db37      	blt.n	bdc62 <__lshift+0xbe>
   bdbf2:	6920      	ldr	r0, [r4, #16]
   bdbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bdbf8:	f104 0314 	add.w	r3, r4, #20
   bdbfc:	f019 091f 	ands.w	r9, r9, #31
   bdc00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bdc04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bdc08:	d02f      	beq.n	bdc6a <__lshift+0xc6>
   bdc0a:	f1c9 0e20 	rsb	lr, r9, #32
   bdc0e:	468a      	mov	sl, r1
   bdc10:	f04f 0c00 	mov.w	ip, #0
   bdc14:	681a      	ldr	r2, [r3, #0]
   bdc16:	fa02 f209 	lsl.w	r2, r2, r9
   bdc1a:	ea42 020c 	orr.w	r2, r2, ip
   bdc1e:	f84a 2b04 	str.w	r2, [sl], #4
   bdc22:	f853 2b04 	ldr.w	r2, [r3], #4
   bdc26:	4298      	cmp	r0, r3
   bdc28:	fa22 fc0e 	lsr.w	ip, r2, lr
   bdc2c:	d8f2      	bhi.n	bdc14 <__lshift+0x70>
   bdc2e:	1b03      	subs	r3, r0, r4
   bdc30:	3b15      	subs	r3, #21
   bdc32:	f023 0303 	bic.w	r3, r3, #3
   bdc36:	3304      	adds	r3, #4
   bdc38:	f104 0215 	add.w	r2, r4, #21
   bdc3c:	4290      	cmp	r0, r2
   bdc3e:	bf38      	it	cc
   bdc40:	2304      	movcc	r3, #4
   bdc42:	f841 c003 	str.w	ip, [r1, r3]
   bdc46:	f1bc 0f00 	cmp.w	ip, #0
   bdc4a:	d001      	beq.n	bdc50 <__lshift+0xac>
   bdc4c:	f108 0602 	add.w	r6, r8, #2
   bdc50:	3e01      	subs	r6, #1
   bdc52:	4638      	mov	r0, r7
   bdc54:	612e      	str	r6, [r5, #16]
   bdc56:	4621      	mov	r1, r4
   bdc58:	f7ff fd88 	bl	bd76c <_Bfree>
   bdc5c:	4628      	mov	r0, r5
   bdc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdc62:	f842 0f04 	str.w	r0, [r2, #4]!
   bdc66:	3301      	adds	r3, #1
   bdc68:	e7c1      	b.n	bdbee <__lshift+0x4a>
   bdc6a:	3904      	subs	r1, #4
   bdc6c:	f853 2b04 	ldr.w	r2, [r3], #4
   bdc70:	f841 2f04 	str.w	r2, [r1, #4]!
   bdc74:	4298      	cmp	r0, r3
   bdc76:	d8f9      	bhi.n	bdc6c <__lshift+0xc8>
   bdc78:	e7ea      	b.n	bdc50 <__lshift+0xac>
   bdc7a:	bf00      	nop
   bdc7c:	000bf8b9 	.word	0x000bf8b9
   bdc80:	000bf964 	.word	0x000bf964

000bdc84 <__mcmp>:
   bdc84:	b530      	push	{r4, r5, lr}
   bdc86:	6902      	ldr	r2, [r0, #16]
   bdc88:	690c      	ldr	r4, [r1, #16]
   bdc8a:	1b12      	subs	r2, r2, r4
   bdc8c:	d10e      	bne.n	bdcac <__mcmp+0x28>
   bdc8e:	f100 0314 	add.w	r3, r0, #20
   bdc92:	3114      	adds	r1, #20
   bdc94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bdc98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bdc9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bdca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bdca4:	42a5      	cmp	r5, r4
   bdca6:	d003      	beq.n	bdcb0 <__mcmp+0x2c>
   bdca8:	d305      	bcc.n	bdcb6 <__mcmp+0x32>
   bdcaa:	2201      	movs	r2, #1
   bdcac:	4610      	mov	r0, r2
   bdcae:	bd30      	pop	{r4, r5, pc}
   bdcb0:	4283      	cmp	r3, r0
   bdcb2:	d3f3      	bcc.n	bdc9c <__mcmp+0x18>
   bdcb4:	e7fa      	b.n	bdcac <__mcmp+0x28>
   bdcb6:	f04f 32ff 	mov.w	r2, #4294967295
   bdcba:	e7f7      	b.n	bdcac <__mcmp+0x28>

000bdcbc <__mdiff>:
   bdcbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdcc0:	460c      	mov	r4, r1
   bdcc2:	4606      	mov	r6, r0
   bdcc4:	4611      	mov	r1, r2
   bdcc6:	4620      	mov	r0, r4
   bdcc8:	4690      	mov	r8, r2
   bdcca:	f7ff ffdb 	bl	bdc84 <__mcmp>
   bdcce:	1e05      	subs	r5, r0, #0
   bdcd0:	d110      	bne.n	bdcf4 <__mdiff+0x38>
   bdcd2:	4629      	mov	r1, r5
   bdcd4:	4630      	mov	r0, r6
   bdcd6:	f7ff fd09 	bl	bd6ec <_Balloc>
   bdcda:	b930      	cbnz	r0, bdcea <__mdiff+0x2e>
   bdcdc:	4b3a      	ldr	r3, [pc, #232]	; (bddc8 <__mdiff+0x10c>)
   bdcde:	4602      	mov	r2, r0
   bdce0:	f240 2132 	movw	r1, #562	; 0x232
   bdce4:	4839      	ldr	r0, [pc, #228]	; (bddcc <__mdiff+0x110>)
   bdce6:	f7fa f837 	bl	b7d58 <__assert_func>
   bdcea:	2301      	movs	r3, #1
   bdcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bdcf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdcf4:	bfa4      	itt	ge
   bdcf6:	4643      	movge	r3, r8
   bdcf8:	46a0      	movge	r8, r4
   bdcfa:	4630      	mov	r0, r6
   bdcfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bdd00:	bfa6      	itte	ge
   bdd02:	461c      	movge	r4, r3
   bdd04:	2500      	movge	r5, #0
   bdd06:	2501      	movlt	r5, #1
   bdd08:	f7ff fcf0 	bl	bd6ec <_Balloc>
   bdd0c:	b920      	cbnz	r0, bdd18 <__mdiff+0x5c>
   bdd0e:	4b2e      	ldr	r3, [pc, #184]	; (bddc8 <__mdiff+0x10c>)
   bdd10:	4602      	mov	r2, r0
   bdd12:	f44f 7110 	mov.w	r1, #576	; 0x240
   bdd16:	e7e5      	b.n	bdce4 <__mdiff+0x28>
   bdd18:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bdd1c:	6926      	ldr	r6, [r4, #16]
   bdd1e:	60c5      	str	r5, [r0, #12]
   bdd20:	f104 0914 	add.w	r9, r4, #20
   bdd24:	f108 0514 	add.w	r5, r8, #20
   bdd28:	f100 0e14 	add.w	lr, r0, #20
   bdd2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bdd30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bdd34:	f108 0210 	add.w	r2, r8, #16
   bdd38:	46f2      	mov	sl, lr
   bdd3a:	2100      	movs	r1, #0
   bdd3c:	f859 3b04 	ldr.w	r3, [r9], #4
   bdd40:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdd44:	fa1f f883 	uxth.w	r8, r3
   bdd48:	fa11 f18b 	uxtah	r1, r1, fp
   bdd4c:	0c1b      	lsrs	r3, r3, #16
   bdd4e:	eba1 0808 	sub.w	r8, r1, r8
   bdd52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdd56:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdd5a:	fa1f f888 	uxth.w	r8, r8
   bdd5e:	1419      	asrs	r1, r3, #16
   bdd60:	454e      	cmp	r6, r9
   bdd62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdd66:	f84a 3b04 	str.w	r3, [sl], #4
   bdd6a:	d8e7      	bhi.n	bdd3c <__mdiff+0x80>
   bdd6c:	1b33      	subs	r3, r6, r4
   bdd6e:	3b15      	subs	r3, #21
   bdd70:	f023 0303 	bic.w	r3, r3, #3
   bdd74:	3304      	adds	r3, #4
   bdd76:	3415      	adds	r4, #21
   bdd78:	42a6      	cmp	r6, r4
   bdd7a:	bf38      	it	cc
   bdd7c:	2304      	movcc	r3, #4
   bdd7e:	441d      	add	r5, r3
   bdd80:	4473      	add	r3, lr
   bdd82:	469e      	mov	lr, r3
   bdd84:	462e      	mov	r6, r5
   bdd86:	4566      	cmp	r6, ip
   bdd88:	d30e      	bcc.n	bdda8 <__mdiff+0xec>
   bdd8a:	f10c 0203 	add.w	r2, ip, #3
   bdd8e:	1b52      	subs	r2, r2, r5
   bdd90:	f022 0203 	bic.w	r2, r2, #3
   bdd94:	3d03      	subs	r5, #3
   bdd96:	45ac      	cmp	ip, r5
   bdd98:	bf38      	it	cc
   bdd9a:	2200      	movcc	r2, #0
   bdd9c:	441a      	add	r2, r3
   bdd9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bdda2:	b17b      	cbz	r3, bddc4 <__mdiff+0x108>
   bdda4:	6107      	str	r7, [r0, #16]
   bdda6:	e7a3      	b.n	bdcf0 <__mdiff+0x34>
   bdda8:	f856 8b04 	ldr.w	r8, [r6], #4
   bddac:	fa11 f288 	uxtah	r2, r1, r8
   bddb0:	1414      	asrs	r4, r2, #16
   bddb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bddb6:	b292      	uxth	r2, r2
   bddb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bddbc:	f84e 2b04 	str.w	r2, [lr], #4
   bddc0:	1421      	asrs	r1, r4, #16
   bddc2:	e7e0      	b.n	bdd86 <__mdiff+0xca>
   bddc4:	3f01      	subs	r7, #1
   bddc6:	e7ea      	b.n	bdd9e <__mdiff+0xe2>
   bddc8:	000bf8b9 	.word	0x000bf8b9
   bddcc:	000bf964 	.word	0x000bf964

000bddd0 <__ulp>:
   bddd0:	b082      	sub	sp, #8
   bddd2:	ed8d 0b00 	vstr	d0, [sp]
   bddd6:	9b01      	ldr	r3, [sp, #4]
   bddd8:	4912      	ldr	r1, [pc, #72]	; (bde24 <__ulp+0x54>)
   bddda:	4019      	ands	r1, r3
   bdddc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bdde0:	2900      	cmp	r1, #0
   bdde2:	dd05      	ble.n	bddf0 <__ulp+0x20>
   bdde4:	2200      	movs	r2, #0
   bdde6:	460b      	mov	r3, r1
   bdde8:	ec43 2b10 	vmov	d0, r2, r3
   bddec:	b002      	add	sp, #8
   bddee:	4770      	bx	lr
   bddf0:	4249      	negs	r1, r1
   bddf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bddf6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bddfa:	f04f 0200 	mov.w	r2, #0
   bddfe:	f04f 0300 	mov.w	r3, #0
   bde02:	da04      	bge.n	bde0e <__ulp+0x3e>
   bde04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bde08:	fa41 f300 	asr.w	r3, r1, r0
   bde0c:	e7ec      	b.n	bdde8 <__ulp+0x18>
   bde0e:	f1a0 0114 	sub.w	r1, r0, #20
   bde12:	291e      	cmp	r1, #30
   bde14:	bfda      	itte	le
   bde16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bde1a:	fa20 f101 	lsrle.w	r1, r0, r1
   bde1e:	2101      	movgt	r1, #1
   bde20:	460a      	mov	r2, r1
   bde22:	e7e1      	b.n	bdde8 <__ulp+0x18>
   bde24:	7ff00000 	.word	0x7ff00000

000bde28 <__b2d>:
   bde28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bde2a:	6905      	ldr	r5, [r0, #16]
   bde2c:	f100 0714 	add.w	r7, r0, #20
   bde30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bde34:	1f2e      	subs	r6, r5, #4
   bde36:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bde3a:	4620      	mov	r0, r4
   bde3c:	f7ff fd48 	bl	bd8d0 <__hi0bits>
   bde40:	f1c0 0320 	rsb	r3, r0, #32
   bde44:	280a      	cmp	r0, #10
   bde46:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdec4 <__b2d+0x9c>
   bde4a:	600b      	str	r3, [r1, #0]
   bde4c:	dc14      	bgt.n	bde78 <__b2d+0x50>
   bde4e:	f1c0 0e0b 	rsb	lr, r0, #11
   bde52:	fa24 f10e 	lsr.w	r1, r4, lr
   bde56:	42b7      	cmp	r7, r6
   bde58:	ea41 030c 	orr.w	r3, r1, ip
   bde5c:	bf34      	ite	cc
   bde5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bde62:	2100      	movcs	r1, #0
   bde64:	3015      	adds	r0, #21
   bde66:	fa04 f000 	lsl.w	r0, r4, r0
   bde6a:	fa21 f10e 	lsr.w	r1, r1, lr
   bde6e:	ea40 0201 	orr.w	r2, r0, r1
   bde72:	ec43 2b10 	vmov	d0, r2, r3
   bde76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bde78:	42b7      	cmp	r7, r6
   bde7a:	bf3a      	itte	cc
   bde7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bde80:	f1a5 0608 	subcc.w	r6, r5, #8
   bde84:	2100      	movcs	r1, #0
   bde86:	380b      	subs	r0, #11
   bde88:	d017      	beq.n	bdeba <__b2d+0x92>
   bde8a:	f1c0 0c20 	rsb	ip, r0, #32
   bde8e:	fa04 f500 	lsl.w	r5, r4, r0
   bde92:	42be      	cmp	r6, r7
   bde94:	fa21 f40c 	lsr.w	r4, r1, ip
   bde98:	ea45 0504 	orr.w	r5, r5, r4
   bde9c:	bf8c      	ite	hi
   bde9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdea2:	2400      	movls	r4, #0
   bdea4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdea8:	fa01 f000 	lsl.w	r0, r1, r0
   bdeac:	fa24 f40c 	lsr.w	r4, r4, ip
   bdeb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdeb4:	ea40 0204 	orr.w	r2, r0, r4
   bdeb8:	e7db      	b.n	bde72 <__b2d+0x4a>
   bdeba:	ea44 030c 	orr.w	r3, r4, ip
   bdebe:	460a      	mov	r2, r1
   bdec0:	e7d7      	b.n	bde72 <__b2d+0x4a>
   bdec2:	bf00      	nop
   bdec4:	3ff00000 	.word	0x3ff00000

000bdec8 <__d2b>:
   bdec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdecc:	4689      	mov	r9, r1
   bdece:	2101      	movs	r1, #1
   bded0:	ec57 6b10 	vmov	r6, r7, d0
   bded4:	4690      	mov	r8, r2
   bded6:	f7ff fc09 	bl	bd6ec <_Balloc>
   bdeda:	4604      	mov	r4, r0
   bdedc:	b930      	cbnz	r0, bdeec <__d2b+0x24>
   bdede:	4602      	mov	r2, r0
   bdee0:	4b25      	ldr	r3, [pc, #148]	; (bdf78 <__d2b+0xb0>)
   bdee2:	4826      	ldr	r0, [pc, #152]	; (bdf7c <__d2b+0xb4>)
   bdee4:	f240 310a 	movw	r1, #778	; 0x30a
   bdee8:	f7f9 ff36 	bl	b7d58 <__assert_func>
   bdeec:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdef4:	bb35      	cbnz	r5, bdf44 <__d2b+0x7c>
   bdef6:	2e00      	cmp	r6, #0
   bdef8:	9301      	str	r3, [sp, #4]
   bdefa:	d028      	beq.n	bdf4e <__d2b+0x86>
   bdefc:	4668      	mov	r0, sp
   bdefe:	9600      	str	r6, [sp, #0]
   bdf00:	f7ff fd06 	bl	bd910 <__lo0bits>
   bdf04:	9900      	ldr	r1, [sp, #0]
   bdf06:	b300      	cbz	r0, bdf4a <__d2b+0x82>
   bdf08:	9a01      	ldr	r2, [sp, #4]
   bdf0a:	f1c0 0320 	rsb	r3, r0, #32
   bdf0e:	fa02 f303 	lsl.w	r3, r2, r3
   bdf12:	430b      	orrs	r3, r1
   bdf14:	40c2      	lsrs	r2, r0
   bdf16:	6163      	str	r3, [r4, #20]
   bdf18:	9201      	str	r2, [sp, #4]
   bdf1a:	9b01      	ldr	r3, [sp, #4]
   bdf1c:	61a3      	str	r3, [r4, #24]
   bdf1e:	2b00      	cmp	r3, #0
   bdf20:	bf14      	ite	ne
   bdf22:	2202      	movne	r2, #2
   bdf24:	2201      	moveq	r2, #1
   bdf26:	6122      	str	r2, [r4, #16]
   bdf28:	b1d5      	cbz	r5, bdf60 <__d2b+0x98>
   bdf2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdf2e:	4405      	add	r5, r0
   bdf30:	f8c9 5000 	str.w	r5, [r9]
   bdf34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdf38:	f8c8 0000 	str.w	r0, [r8]
   bdf3c:	4620      	mov	r0, r4
   bdf3e:	b003      	add	sp, #12
   bdf40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdf44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdf48:	e7d5      	b.n	bdef6 <__d2b+0x2e>
   bdf4a:	6161      	str	r1, [r4, #20]
   bdf4c:	e7e5      	b.n	bdf1a <__d2b+0x52>
   bdf4e:	a801      	add	r0, sp, #4
   bdf50:	f7ff fcde 	bl	bd910 <__lo0bits>
   bdf54:	9b01      	ldr	r3, [sp, #4]
   bdf56:	6163      	str	r3, [r4, #20]
   bdf58:	2201      	movs	r2, #1
   bdf5a:	6122      	str	r2, [r4, #16]
   bdf5c:	3020      	adds	r0, #32
   bdf5e:	e7e3      	b.n	bdf28 <__d2b+0x60>
   bdf60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdf64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdf68:	f8c9 0000 	str.w	r0, [r9]
   bdf6c:	6918      	ldr	r0, [r3, #16]
   bdf6e:	f7ff fcaf 	bl	bd8d0 <__hi0bits>
   bdf72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdf76:	e7df      	b.n	bdf38 <__d2b+0x70>
   bdf78:	000bf8b9 	.word	0x000bf8b9
   bdf7c:	000bf964 	.word	0x000bf964

000bdf80 <__ratio>:
   bdf80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf84:	4688      	mov	r8, r1
   bdf86:	4669      	mov	r1, sp
   bdf88:	4681      	mov	r9, r0
   bdf8a:	f7ff ff4d 	bl	bde28 <__b2d>
   bdf8e:	a901      	add	r1, sp, #4
   bdf90:	4640      	mov	r0, r8
   bdf92:	ec55 4b10 	vmov	r4, r5, d0
   bdf96:	f7ff ff47 	bl	bde28 <__b2d>
   bdf9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdf9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdfa2:	eba3 0c02 	sub.w	ip, r3, r2
   bdfa6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdfaa:	1a9b      	subs	r3, r3, r2
   bdfac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdfb0:	ec51 0b10 	vmov	r0, r1, d0
   bdfb4:	2b00      	cmp	r3, #0
   bdfb6:	bfd6      	itet	le
   bdfb8:	460a      	movle	r2, r1
   bdfba:	462a      	movgt	r2, r5
   bdfbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdfc0:	468b      	mov	fp, r1
   bdfc2:	462f      	mov	r7, r5
   bdfc4:	bfd4      	ite	le
   bdfc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdfca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdfce:	4620      	mov	r0, r4
   bdfd0:	ee10 2a10 	vmov	r2, s0
   bdfd4:	465b      	mov	r3, fp
   bdfd6:	4639      	mov	r1, r7
   bdfd8:	f7f6 fb08 	bl	b45ec <__aeabi_ddiv>
   bdfdc:	ec41 0b10 	vmov	d0, r0, r1
   bdfe0:	b003      	add	sp, #12
   bdfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdfe6 <__copybits>:
   bdfe6:	3901      	subs	r1, #1
   bdfe8:	b570      	push	{r4, r5, r6, lr}
   bdfea:	1149      	asrs	r1, r1, #5
   bdfec:	6914      	ldr	r4, [r2, #16]
   bdfee:	3101      	adds	r1, #1
   bdff0:	f102 0314 	add.w	r3, r2, #20
   bdff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdffc:	1f05      	subs	r5, r0, #4
   bdffe:	42a3      	cmp	r3, r4
   be000:	d30c      	bcc.n	be01c <__copybits+0x36>
   be002:	1aa3      	subs	r3, r4, r2
   be004:	3b11      	subs	r3, #17
   be006:	f023 0303 	bic.w	r3, r3, #3
   be00a:	3211      	adds	r2, #17
   be00c:	42a2      	cmp	r2, r4
   be00e:	bf88      	it	hi
   be010:	2300      	movhi	r3, #0
   be012:	4418      	add	r0, r3
   be014:	2300      	movs	r3, #0
   be016:	4288      	cmp	r0, r1
   be018:	d305      	bcc.n	be026 <__copybits+0x40>
   be01a:	bd70      	pop	{r4, r5, r6, pc}
   be01c:	f853 6b04 	ldr.w	r6, [r3], #4
   be020:	f845 6f04 	str.w	r6, [r5, #4]!
   be024:	e7eb      	b.n	bdffe <__copybits+0x18>
   be026:	f840 3b04 	str.w	r3, [r0], #4
   be02a:	e7f4      	b.n	be016 <__copybits+0x30>

000be02c <__any_on>:
   be02c:	f100 0214 	add.w	r2, r0, #20
   be030:	6900      	ldr	r0, [r0, #16]
   be032:	114b      	asrs	r3, r1, #5
   be034:	4298      	cmp	r0, r3
   be036:	b510      	push	{r4, lr}
   be038:	db11      	blt.n	be05e <__any_on+0x32>
   be03a:	dd0a      	ble.n	be052 <__any_on+0x26>
   be03c:	f011 011f 	ands.w	r1, r1, #31
   be040:	d007      	beq.n	be052 <__any_on+0x26>
   be042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be046:	fa24 f001 	lsr.w	r0, r4, r1
   be04a:	fa00 f101 	lsl.w	r1, r0, r1
   be04e:	428c      	cmp	r4, r1
   be050:	d10b      	bne.n	be06a <__any_on+0x3e>
   be052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be056:	4293      	cmp	r3, r2
   be058:	d803      	bhi.n	be062 <__any_on+0x36>
   be05a:	2000      	movs	r0, #0
   be05c:	bd10      	pop	{r4, pc}
   be05e:	4603      	mov	r3, r0
   be060:	e7f7      	b.n	be052 <__any_on+0x26>
   be062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be066:	2900      	cmp	r1, #0
   be068:	d0f5      	beq.n	be056 <__any_on+0x2a>
   be06a:	2001      	movs	r0, #1
   be06c:	e7f6      	b.n	be05c <__any_on+0x30>

000be06e <_calloc_r>:
   be06e:	b513      	push	{r0, r1, r4, lr}
   be070:	434a      	muls	r2, r1
   be072:	4611      	mov	r1, r2
   be074:	9201      	str	r2, [sp, #4]
   be076:	f7f9 fe5f 	bl	b7d38 <_malloc_r>
   be07a:	4604      	mov	r4, r0
   be07c:	b118      	cbz	r0, be086 <_calloc_r+0x18>
   be07e:	9a01      	ldr	r2, [sp, #4]
   be080:	2100      	movs	r1, #0
   be082:	f7fd fff5 	bl	bc070 <memset>
   be086:	4620      	mov	r0, r4
   be088:	b002      	add	sp, #8
   be08a:	bd10      	pop	{r4, pc}
   be08c:	0000      	movs	r0, r0
	...

000be090 <nan>:
   be090:	ed9f 0b01 	vldr	d0, [pc, #4]	; be098 <nan+0x8>
   be094:	4770      	bx	lr
   be096:	bf00      	nop
   be098:	00000000 	.word	0x00000000
   be09c:	7ff80000 	.word	0x7ff80000

000be0a0 <__ascii_wctomb>:
   be0a0:	b149      	cbz	r1, be0b6 <__ascii_wctomb+0x16>
   be0a2:	2aff      	cmp	r2, #255	; 0xff
   be0a4:	bf85      	ittet	hi
   be0a6:	238a      	movhi	r3, #138	; 0x8a
   be0a8:	6003      	strhi	r3, [r0, #0]
   be0aa:	700a      	strbls	r2, [r1, #0]
   be0ac:	f04f 30ff 	movhi.w	r0, #4294967295
   be0b0:	bf98      	it	ls
   be0b2:	2001      	movls	r0, #1
   be0b4:	4770      	bx	lr
   be0b6:	4608      	mov	r0, r1
   be0b8:	4770      	bx	lr

000be0ba <link_code_end>:
	...

000be0bc <link_const_data_start>:
   be0bc:	514d0400 	.word	0x514d0400
   be0c0:	00045454 	.word	0x00045454
   be0c4:	49514d06 	.word	0x49514d06
   be0c8:	03706473 	.word	0x03706473
   be0cc:	00000000 	.word	0x00000000
   be0d0:	34fb0000 	.word	0x34fb0000
   be0d4:	00805f9b 	.word	0x00805f9b
   be0d8:	10008000 	.word	0x10008000
	...

000be0e4 <dynalib_user>:
   be0e4:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   be0f4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   be104:	72697620 6c617574 54514d00 61762054      virtual.MQTT va
   be114:	3a65756c 73720020 253d6973 65732064     lue: .rssi=%d se
   be124:	72657672 3230253d 30253a58 253a5832     rver=%02X:%02X:%
   be134:	3a583230 58323025 3230253a 30253a58     02X:%02X:%02X:%0
   be144:	25005832 6c250069 6e690069 74756f00     2X.%i.%li.in.out
   be154:	6d777000 00776400 74007761 006c706d     .pwm.dw.aw.tmpl.
   be164:	4c504d54 55585832 43666b4c 77760031     TMPL2XXULkfC1.vw
   be174:	20314100 4e00203a 6164206f 41006174     .A1 : .No data.A
   be184:	203a2032 20334100 4200203a 612f5241     2 : .A3 : .BAR/a
   be194:	6e6f6772 53522f31 67004953 5f674644     rgon1/RSSI.gDFg_
   be1a4:	6d565955 4b4f6d78 34597575 356f496f     UYVmxmOKuuY4oIo5
   be1b4:	6e73344e 6934736f 00763536 6e796c62     N4snos4i65v.blyn
   be1c4:	6c632e6b 0064756f 2e62616c 77656874     k.cloud.lab.thew
   be1d4:	632e6c63 42006d6f 612f5241 6e6f6772     cl.com.BAR/argon
   be1e4:	53522f32 42004953 612f5241 6e6f6772     2/RSSI.BAR/argon
   be1f4:	53522f33 61004953 61376566 2d356363     3/RSSI.afe7acc5-
   be204:	39613333 3837342d 62622d66 382d3165     33a9-478f-bbe1-8
   be214:	61343439 65383061 00343838              944aa08e884.

000be220 <_ZTVN5spark10LogHandlerE>:
	...
   be230:	000b4ac5 000b4aed                       .J...J..

000be238 <_ZTVN5spark16SerialLogHandlerE>:
	...
   be240:	000b4be5 000b4c19 000ba77d 000ba921     .K...L..}...!...

000be250 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   be250:	6b6e6c62 00666e69 00726576 2e312e31     blnkinf.ver.1.1.
   be260:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   be270:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   be280:	6c636974 72412065 006e6f67 742d7766     ticle Argon.fw-t
   be290:	00657079 4c504d54 55585832 43666b4c     ype.TMPL2XXULkfC
   be2a0:	75620031 00646c69 206c754a 32203331     1.build.Jul 13 2
   be2b0:	20333230 323a3031 32343a36 64000000     023 10:26:42...d
   be2c0:	75616665 0020746c 0042534d 0042534c     efault .MSB.LSB.
   be2d0:	4950533c 74746553 73676e69 66656420     <SPISettings def
   be2e0:	746c7561 533c003e 65534950 6e697474     ault>.<SPISettin
   be2f0:	25207367 20752573 4d207325 2545444f     gs %s%u %s MODE%
   be300:	                                         u>.

000be303 <_ZL4font>:
   be303:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   be313:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   be323:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   be333:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   be343:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   be353:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   be363:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   be373:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   be383:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   be393:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   be3a3:	00000000 5f000000 07000000 14000700     ......._........
   be3b3:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   be3c3:	00502056 00030708 41221c00 22410000     V P......."A..A"
   be3d3:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   be3e3:	08080800 00000808 20006060 02040810     ........``. ....
   be3f3:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   be403:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   be413:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   be423:	00001e29 00000014 00003440 22140800     ).......@4....."
   be433:	14141441 41001414 02081422 06095901     A......A"....Y..
   be443:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   be453:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   be463:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   be473:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   be483:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   be493:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   be4a3:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   be4b3:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   be4c3:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   be4d3:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   be4e3:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   be4f3:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   be503:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   be513:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   be523:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   be533:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   be543:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   be553:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   be563:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   be573:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   be583:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   be593:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   be5a3:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   be5b3:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   be5c3:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   be5d3:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   be5e3:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   be5f3:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   be603:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   be613:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   be623:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   be633:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   be643:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   be653:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   be663:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   be673:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   be683:	00ff0000 ff101010 14141400 101000ff     ................
   be693:	10ff00ff f010f010 fc141414 f7141400     ................
   be6a3:	0000ff00 14ff00ff fc04f414 10171414     ................
   be6b3:	1f10101f 14141f10 10001f14 00f01010     ................
   be6c3:	1f000000 10101010 1010101f 0010f010     ................
   be6d3:	10ff0000 10101010 10101010 000010ff     ................
   be6e3:	0014ff00 ff00ff00 101f0000 fc000017     ................
   be6f3:	1414f404 14171017 f404f414 00ff0000     ................
   be703:	141414f7 14141414 14f700f7 14171414     ................
   be713:	101f1010 1414141f 101014f4 00f010f0     ................
   be723:	1f101f00 1f000000 00000014 000014fc     ................
   be733:	10f010f0 ff10ff10 ff141414 10101014     ................
   be743:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   be753:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   be763:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   be773:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   be783:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   be793:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   be7a3:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   be7b3:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   be7c3:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   be7d3:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   be7e3:	00000018 30001010 0101ff40 01011f00     .......0@.......
   be7f3:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000be804 <_ZTV12Adafruit_GFX>:
	...
   be814:	000b61ed 000b99dd 000b4ac5 000b5bf3     .a.......J...[..
   be824:	000b5bf5 000b5c27 000b5c03 000b5c15     .[..'\...\...\..
   be834:	000b5b35 000b5bf3 000b5e1f 000b5e1d     5[...[...^...^..
   be844:	000b5c3f 000b5c7d 000b5cb7 000b5cfd     ?\..}\...\...\..
   be854:	000b5d19 000b5d9d                       .]...]..

000be85c <_ZTV16OledWingAdafruit>:
	...
   be864:	000b62fd 000b631d 000b61ed 000b99dd     .b...c...a......
   be874:	000b6d65 000b5bf3 000b5bf5 000b5c27     em...[...[..'\..
   be884:	000b5c03 000b5c15 000b5b35 000b5bf3     .\...\..5[...[..
   be894:	000b5e1f 000b6f03 000b74ab 000b745d     .^...o...t..]t..
   be8a4:	000b5cb7 000b5cfd 000b5d19 000b5d9d     .\...\...]...]..

000be8b4 <_ZTVN8particle11SPISettingsE>:
	...
   be8bc:	000b5ae1 000b5ab5 000b5ab7              .Z...Z...Z..

000be8c8 <_ZL12splash1_data>:
   be8c8:	00000000 00800100 00000000 00000000     ................
   be8d8:	00008003 00000000 07000000 000000c0     ................
   be8e8:	00000000 c0070000 00000000 00000000     ................
   be8f8:	00c00f00 00000000 00000000 0000e01f     ................
   be908:	00000000 1f000000 000000e0 00000000     ................
   be918:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   be930:	0000f07f 00000000 7ff81f00 000000f0     ................
   be940:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   be950:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   be960:	00000000 f9ff0f00 0000c0ff 00000000     ................
   be970:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   be980:	00000000 fc030000 80ffff73 00000000     ........s.......
   be990:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   be9a0:	000000ff 00000000 fc1ffe7f 00000000     ................
   be9b0:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   be9c0:	0000e0ff 00000000 ff191f00 000000c0     ................
   be9d0:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   be9e0:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   be9f0:	00000000 fcffff00 00000000 00000000     ................
   bea00:	00feffff 00000000 ff000000 0000feff     ................
   bea10:	00000000 efff0100 000000fe 00000000     ................
   bea20:	fecfff01 00000000 03000000 00fe07ff     ................
   bea30:	00000000 fc030000 0000fe07 00000000     ................
   bea40:	03f00300 000000fe 00000000 fe008001     ................
	...
   bea58:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bea70:	0000000c 07000000 00fc0080 00c00300     ................
   bea80:	80070000 0000fc01 0000c003 01800700     ................
   bea90:	030000fc 000000c0 e0018007 1e000000     ................
   beaa0:	07000000 00e00180 001e0000 9ff7e37f     ................
   beab0:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   beac0:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bead0:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   beae0:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   beaf0:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   beb00:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   beb10:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   beb20:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   beb30:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   beb40:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   beb50:	ffffff00 ffffffff c0ffffff ffffffff     ................
   beb60:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   beb70:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   beb80:	5b6bfdff c0fd6adb                       ..k[.j..

000beb88 <_ZL12splash2_data>:
   beb88:	00600000 00000000 00000000 00000000     ..`.............
   beb98:	0000e000 00000000 00000000 01000000     ................
   beba8:	000000e0 00000000 00000000 f0010000     ................
	...
   bebc4:	00f00300 00000000 00000000 00000000     ................
   bebd4:	0000f007 00000000 00000000 07000000     ................
   bebe4:	000000f8 00000000 00000000 f80f0000     ................
   bebf4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bec04:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bec14:	00c00300 010000fe ffff00e0 000000f8     ................
   bec24:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bec34:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bec44:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bec54:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bec64:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bec74:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bec84:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bec94:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   beca4:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   becb4:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   becc4:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   becd4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bece4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   becf4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bed04:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bed1c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bed2c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bed3c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bed4c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bed5c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bed68 <_ZTV16Adafruit_SSD1306>:
	...
   bed70:	000b6d39 000b6d51 000b61ed 000b99dd     9m..Qm...a......
   bed80:	000b6d65 000b5bf3 000b5bf5 000b5c27     em...[...[..'\..
   bed90:	000b5c03 000b5c15 000b5b35 000b5bf3     .\...\..5[...[..
   beda0:	000b5e1f 000b6f03 000b74ab 000b745d     .^...o...t..]t..
   bedb0:	000b5cb7 000b5cfd 000b5d19 000b5d9d     .\...\...]...]..

000bedc0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bedc0:	e0c08000 fefcf8f0                       ........

000bedc8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bedc8:	07030100 7f3f1f0f                       ......?.

000bedd0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bedd0:	a880d5ae                                ....

000bedd4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bedd4:	8d4000d3                                ..@.

000bedd8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bedd8:	c8a10020                                 ...

000beddc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   beddc:	a6a440db                                 .@....

000bede2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bede2:	8f8102da                                ....

000bede6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bede6:	                                         ...

000bede9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bede9:	                                         ...

000bedec <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bedec:	21ff0022 00000000                       "..!....

000bedf4 <_ZL22BlynkReadHandlerVector>:
   bedf4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee04:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee14:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee24:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee34:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee44:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee54:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee64:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee74:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee84:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bee94:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beea4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beeb4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beec4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beed4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beee4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   beef4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef04:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef14:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef24:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef34:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef44:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef54:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef64:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef74:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef84:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   bef94:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   befa4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   befb4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   befc4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   befd4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..
   befe4:	000b7647 000b7647 000b7647 000b7647     Gv..Gv..Gv..Gv..

000beff4 <_ZL23BlynkWriteHandlerVector>:
   beff4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf004:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf014:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf024:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf034:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf044:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf054:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf064:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf074:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf084:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf094:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0a4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0b4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0c4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0d4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0e4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf0f4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf104:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf114:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf124:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf134:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf144:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf154:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf164:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf174:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf184:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf194:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf1a4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf1b4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf1c4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf1d4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..
   bf1e4:	000b7649 000b7649 000b7649 000b7649     Iv..Iv..Iv..Iv..

000bf1f4 <_ZTVN5spark13EthernetClassE>:
	...
   bf1fc:	000b7dd7 000b7dcd 000b7dc3 000b7db9     .}...}...}...}..
   bf20c:	000b7dad 000b7da1 000bb655 000bb65d     .}...}..U...]...
   bf21c:	000b7d95 000b7d8d 000b7d83 000b7d79     .}...}...}..y}..
   bf22c:	000bb68d                                ....

000bf230 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bf230:	18100800 38302820 65737341 6f697472     .... (08Assertio
   bf240:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bf250:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bf260:	63736964 7265766f 20676e69 76726573     discovering serv
   bf270:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bf280:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bf290:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bf2a0:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bf2b0:	4e5f524f 00454e4f 6c696146 74206465     OR_NONE.Failed t
   bf2c0:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   bf2d0:	46002179 656c6961 6f742064 70706120     y!.Failed to app
   bf2e0:	20646e65 72656570 6e654320 6c617274     end peer Central
   bf2f0:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   bf300:	44006465 6f637369 63656e6e 00646574     ed.Disconnected.

000bf310 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf318:	000b8261 000b8285 000b898d 000b8293     a...............
   bf328:	000b8265                                e...

000bf32c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bf334:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   bf344:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   bf354:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   bf364:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   bf374:	6f63005b 3d206564 65640020 6c696174     [.code = .detail
   bf384:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   bf394:	64006564 69617465 0000006c              de.detail...

000bf3a0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf3a8:	000b9b75 000b9b9b 000b9b59 000bb7a7     u.......Y.......

000bf3b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf3c0:	000ba025 000ba03d 000ba77d 000ba921     %...=...}...!...

000bf3d0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf3d8:	000ba051 000ba065 000ba959 000b9b61     Q...e...Y...a...

000bf3e8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf3f0:	000b9b73 000b9ba9 000ba6e1 000b9b63     s...........c...

000bf400 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf408:	000b9b71 000b9bb7 000b9f8d 000b9bd9     q...............
   bf418:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   bf428:	007a2553 74637361 00656d69              S%z.asctime.

000bf434 <_ZTV9IPAddress>:
	...
   bf43c:	000bac69 000bac59 000bac5b              i...Y...[...

000bf448 <_ZTV9USBSerial>:
	...
   bf450:	000bad7b 000bade3 000badb9 000b99dd     {...............
   bf460:	000badab 000bad7d 000bad8d 000baddd     ....}...........
   bf470:	000bad9d 000bad75                       ....u...

000bf478 <_ZTV11USARTSerial>:
	...
   bf480:	000bae85 000baef1 000baec9 000b99dd     ................
   bf490:	000bae99 000baeb5 000baea7 000baec3     ................
   bf4a0:	000bae87 000bae8b                       ........

000bf4a8 <_ZTV7TwoWire>:
	...
   bf4b0:	000baf3d 000baf87 000baf5f 000baf3f     =......._...?...
   bf4c0:	000baf67 000baf6f 000baf77 000baf7f     g...o...w.......
   bf4d0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bf4e0:	203d2072 00006425                       r = %d..

000bf4e8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf4f0:	000bb085 000bb0a9 000bb593 000bb0b7     ................
   bf500:	000bb089                                ....

000bf504 <_ZTV9TCPClient>:
	...
   bf50c:	000baae9 000bab01 000bb001 000bb01b     ................
   bf51c:	000bb429 000bb045 000bb29f 000bb079     )...E.......y...
   bf52c:	000bb331 000bb171 000bb2cd 000bb4dd     1...q...........
   bf53c:	000bb26d 000bb07b 000bb02d 000bb0bd     m...{...-.......
   bf54c:	000bb151                                Q...

000bf550 <_ZTVN5spark9WiFiClassE>:
	...
   bf558:	000bb5f7 000bb5ed 000bb5e3 000bb599     ................
   bf568:	000bb5d7 000bb5cb 000bb655 000bb65d     ........U...]...
   bf578:	000bb5bf 000bb5b7 000bb5ad 000bb5a3     ................
   bf588:	000bb68d                                ....

000bf58c <_ZTVN5spark12NetworkClassE>:
	...
   bf594:	000bb615 000bb61f 000bb629 000bb633     ........)...3...
   bf5a4:	000bb63d 000bb649 000bb655 000bb65d     =...I...U...]...
   bf5b4:	000bb665 000bb671 000bb679 000bb683     e...q...y.......
   bf5c4:	000bb68d 75007525 78343025               ....%u.u%04x.

000bf5d1 <_ZSt7nothrow>:
	...

000bf5d2 <_ZTSSt19_Sp_make_shared_tag>:
   bf5d2:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bf5e2:	5f646572 00676174                        red_tag...

000bf5ec <_ZTISt19_Sp_make_shared_tag>:
   bf5ec:	000bf62c 000bf5d2                       ,.......

000bf5f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf5f4:	000bf68c 000bf600 000bf6b0              ............

000bf600 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf600:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bf610:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bf620:	00000045                                E...

000bf624 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf624:	00000000 000bf5f4 000bbdf5 000bbe09     ................
   bf634:	000bbf9d 000bbf9d 000bbe73 000bbdb5     ........s.......
   bf644:	000bbe5b 000bbe1d 000bbde7              [...........

000bf650 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf650:	000bf68c 000bf65c 000bf5f4              ....\.......

000bf65c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf65c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bf66c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bf67c:	456f666e 00000000                       nfoE....

000bf684 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf684:	00000000 000bf650 000bbe9d 000bbeb1     ....P...........
   bf694:	000bbf9d 000bbf9d 000bbe73 000bbdb5     ........s.......
   bf6a4:	000bbf71 000bbefd 000bbec5              q...........

000bf6b0 <_ZTISt9type_info>:
   bf6b0:	000bf62c 000bf6b8                       ,.......

000bf6b8 <_ZTSSt9type_info>:
   bf6b8:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bf6c8:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bf6d8:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bf6e8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bf6f8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bf708:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bf718:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bf728:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bf738:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bf748:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bf758:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bf768 <fpi.1>:
   bf768:	00000035 fffffbce 000003cb 00000001     5...............
   bf778:	00000000                                ....

000bf77c <fpinan.0>:
   bf77c:	00000034 fffffbce 000003cb 00000001     4...............
   bf78c:	00000000                                ....

000bf790 <tinytens>:
   bf790:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bf7a0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bf7b0:	64ac6f43 11680628                       Co.d(.h.

000bf7b8 <_ctype_>:
   bf7b8:	20202000 20202020 28282020 20282828     .         ((((( 
   bf7c8:	20202020 20202020 20202020 20202020                     
   bf7d8:	10108820 10101010 10101010 10101010      ...............
   bf7e8:	04040410 04040404 10040404 10101010     ................
   bf7f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bf808:	01010101 01010101 01010101 10101010     ................
   bf818:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bf828:	02020202 02020202 02020202 10101010     ................
   bf838:	00000020 00000000 00000000 00000000      ...............
	...
   bf8b8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bf8c8:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bf8d8:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bf8e8:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bf8f8:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bf908:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bf918:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bf928:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bf938:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bf948:	78656874 0000632e                       thex.c..

000bf950 <_C_numeric_locale>:
   bf950:	000bf2f7 000bf38b 2003e360 4f500043     ........`.. C.PO
   bf960:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bf970:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bf980:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bf990:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bf9a0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bf9b0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bf9c0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bf9d0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bf9e0:	00000063 00000000                       c.......

000bf9e8 <__mprec_bigtens>:
   bf9e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bf9f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bfa08:	7f73bf3c 75154fdd                       <.s..O.u

000bfa10 <__mprec_tens>:
   bfa10:	00000000 3ff00000 00000000 40240000     .......?......$@
   bfa20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bfa30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bfa40:	00000000 412e8480 00000000 416312d0     .......A......cA
   bfa50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bfa60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bfa70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bfa80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bfa90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bfaa0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bfab0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bfac0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bfad0:	79d99db4 44ea7843                       ...yCx.D

000bfad8 <p05.0>:
   bfad8:	00000005 00000019 0000007d              ........}...

000bfae4 <link_const_data_end>:
   bfae4:	000b5981 	.word	0x000b5981
   bfae8:	000b7de1 	.word	0x000b7de1
   bfaec:	000b7f59 	.word	0x000b7f59
   bfaf0:	000b99cd 	.word	0x000b99cd
   bfaf4:	000ba76d 	.word	0x000ba76d
   bfaf8:	000baacd 	.word	0x000baacd
   bfafc:	000bab15 	.word	0x000bab15
   bfb00:	000bb601 	.word	0x000bb601
   bfb04:	000bb765 	.word	0x000bb765
