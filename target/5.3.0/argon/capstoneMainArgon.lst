
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/capstoneMainArgon/target/5.3.0/argon/capstoneMainArgon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009ab8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdad8  000bdad8  0000dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001ec  2003e368  000bdafc  0000e368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000029c  2003e554  2003e554  0001e554  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bdce8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bdcec  000bdcec  0001dcec  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bdcf2  000bdcf2  0001dcf2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bdd16  000bdd16  0001dd16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016e68b  00000000  00000000  0001dd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00018f58  00000000  00000000  0018c3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004e0cc  00000000  00000000  001a52fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003a58  00000000  00000000  001f33c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c6d8  00000000  00000000  001f6e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004356f  00000000  00000000  002034f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00056c21  00000000  00000000  00246a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00145934  00000000  00000000  0029d689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b59c  00000000  00000000  003e2fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f005 fd6f 	bl	ba530 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f005 fd91 	bl	ba580 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e368 	.word	0x2003e368
   b4a68:	000bdafc 	.word	0x000bdafc
   b4a6c:	2003e554 	.word	0x2003e554
   b4a70:	2003e554 	.word	0x2003e554
   b4a74:	2003e7f0 	.word	0x2003e7f0

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f004 fb87 	bl	b9190 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bdab4 	.word	0x000bdab4
   b4a9c:	000bdad8 	.word	0x000bdad8

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 b8b8 	b.w	b4c14 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 f927 	bl	b4cf8 <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f004 bb27 	b.w	b9100 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f002 ba8f 	b.w	b6fd4 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f002 ba8d 	b.w	b6fd4 <malloc>

000b4aba <_ZdaPv>:
   b4aba:	f002 ba93 	b.w	b6fe4 <free>

000b4abe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4abe:	f002 ba91 	b.w	b6fe4 <free>
	...

000b4ac4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac6:	4a03      	ldr	r2, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x10>)
   b4ac8:	4903      	ldr	r1, [pc, #12]	; (b4ad8 <__cxa_pure_virtual+0x14>)
   b4aca:	200c      	movs	r0, #12
   b4acc:	f002 f9be 	bl	b6e4c <panic_>
  while (1);
   b4ad0:	e7fe      	b.n	b4ad0 <__cxa_pure_virtual+0xc>
   b4ad2:	bf00      	nop
   b4ad4:	000b6a65 	.word	0x000b6a65
   b4ad8:	000bc5e8 	.word	0x000bc5e8

000b4adc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4adc:	7800      	ldrb	r0, [r0, #0]
   b4ade:	fab0 f080 	clz	r0, r0
   b4ae2:	0940      	lsrs	r0, r0, #5
   b4ae4:	4770      	bx	lr

000b4ae6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae6:	2301      	movs	r3, #1
   b4ae8:	7003      	strb	r3, [r0, #0]
   b4aea:	4770      	bx	lr

000b4aec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4aec:	4770      	bx	lr
	...

000b4af0 <_Z8callbackPcPhj>:
  display.print(" : ");
  display.print(argon3_distance);
  display.display();
}

void callback(char *topic, byte *payload, unsigned int length) {
   b4af0:	b5b0      	push	{r4, r5, r7, lr}
   b4af2:	ed2d 8b02 	vpush	{d8}
  //Function called when ever data is recieved from MQTT subscriptions

  //formats and extracts data from mqtt 
  char p[length + 1];
   b4af6:	f102 0308 	add.w	r3, r2, #8
void callback(char *topic, byte *payload, unsigned int length) {
   b4afa:	b088      	sub	sp, #32
  char p[length + 1];
   b4afc:	f023 0307 	bic.w	r3, r3, #7
void callback(char *topic, byte *payload, unsigned int length) {
   b4b00:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4b02:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char *topic, byte *payload, unsigned int length) {
   b4b06:	4614      	mov	r4, r2
   b4b08:	4605      	mov	r5, r0
  memcpy(p, payload, length);
   b4b0a:	4668      	mov	r0, sp
   b4b0c:	f005 fd10 	bl	ba530 <memcpy>
  p[length] = NULL;
   b4b10:	2300      	movs	r3, #0
  String s = p;
   b4b12:	4669      	mov	r1, sp
   b4b14:	4638      	mov	r0, r7
  p[length] = NULL;
   b4b16:	f80d 3004 	strb.w	r3, [sp, r4]
  String s = p;
   b4b1a:	f002 fbf0 	bl	b72fe <_ZN6StringC1EPK19__FlashStringHelper>
  double value = s.toFloat();
   b4b1e:	4638      	mov	r0, r7
   b4b20:	f002 fc6a 	bl	b73f8 <_ZNK6String7toFloatEv>

  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b24:	4629      	mov	r1, r5
   b4b26:	f107 0010 	add.w	r0, r7, #16
  double value = s.toFloat();
   b4b2a:	eeb0 8a40 	vmov.f32	s16, s0
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b2e:	f002 fbe6 	bl	b72fe <_ZN6StringC1EPK19__FlashStringHelper>

  if (callbackTopic.compareTo(argon2)) {
   b4b32:	490d      	ldr	r1, [pc, #52]	; (b4b68 <_Z8callbackPcPhj+0x78>)
   b4b34:	f107 0010 	add.w	r0, r7, #16
   b4b38:	f002 fc49 	bl	b73ce <_ZNK6String9compareToERKS_>
   b4b3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b4b40:	ee17 3a90 	vmov	r3, s15
   b4b44:	b168      	cbz	r0, b4b62 <_Z8callbackPcPhj+0x72>
    argon2_distance = value;
   b4b46:	4a09      	ldr	r2, [pc, #36]	; (b4b6c <_Z8callbackPcPhj+0x7c>)
  } else {
    argon3_distance = value;
   b4b48:	6013      	str	r3, [r2, #0]
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b4a:	f107 0010 	add.w	r0, r7, #16
   b4b4e:	f002 fb8b 	bl	b7268 <_ZN6StringD1Ev>
  String s = p;
   b4b52:	4638      	mov	r0, r7
   b4b54:	f002 fb88 	bl	b7268 <_ZN6StringD1Ev>
  }

}
   b4b58:	3720      	adds	r7, #32
   b4b5a:	46bd      	mov	sp, r7
   b4b5c:	ecbd 8b02 	vpop	{d8}
   b4b60:	bdb0      	pop	{r4, r5, r7, pc}
    argon3_distance = value;
   b4b62:	4a03      	ldr	r2, [pc, #12]	; (b4b70 <_Z8callbackPcPhj+0x80>)
   b4b64:	e7f0      	b.n	b4b48 <_Z8callbackPcPhj+0x58>
   b4b66:	bf00      	nop
   b4b68:	2003e554 	.word	0x2003e554
   b4b6c:	2003e368 	.word	0x2003e368
   b4b70:	2003e36c 	.word	0x2003e36c

000b4b74 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4b74:	4b0a      	ldr	r3, [pc, #40]	; (b4ba0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4b76:	b510      	push	{r4, lr}
   b4b78:	4604      	mov	r4, r0
   b4b7a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4b7c:	f003 fc40 	bl	b8400 <_ZN5spark10LogManager8instanceEv>
   b4b80:	4621      	mov	r1, r4
   b4b82:	f003 fe78 	bl	b8876 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4b86:	f004 fc25 	bl	b93d4 <_Z16_fetch_usbserialv>
   b4b8a:	f004 fc17 	bl	b93bc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4b8e:	4620      	mov	r0, r4
   b4b90:	4b04      	ldr	r3, [pc, #16]	; (b4ba4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4b92:	f840 3b04 	str.w	r3, [r0], #4
   b4b96:	f003 fd09 	bl	b85ac <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	bd10      	pop	{r4, pc}
   b4b9e:	bf00      	nop
   b4ba0:	000bc694 	.word	0x000bc694
   b4ba4:	000bc67c 	.word	0x000bc67c

000b4ba8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4ba8:	b510      	push	{r4, lr}
   b4baa:	4604      	mov	r4, r0
    }
   b4bac:	f7ff ffe2 	bl	b4b74 <_ZN5spark16SerialLogHandlerD1Ev>
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	2124      	movs	r1, #36	; 0x24
   b4bb4:	f7ff ff83 	bl	b4abe <_ZdlPvj>
   b4bb8:	4620      	mov	r0, r4
   b4bba:	bd10      	pop	{r4, pc}

000b4bbc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4bbc:	b40e      	push	{r1, r2, r3}
   b4bbe:	b500      	push	{lr}
   b4bc0:	b08c      	sub	sp, #48	; 0x30
   b4bc2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4bc4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4bc8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4bcc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bce:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4bd2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bd4:	6801      	ldr	r1, [r0, #0]
   b4bd6:	aa04      	add	r2, sp, #16
   b4bd8:	201e      	movs	r0, #30
    attr.flags = 0;
   b4bda:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4bde:	f002 f945 	bl	b6e6c <log_message_v>
}
   b4be2:	b00c      	add	sp, #48	; 0x30
   b4be4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4be8:	b003      	add	sp, #12
   b4bea:	4770      	bx	lr

000b4bec <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv>:

void connectedCallback(const BlePeerDevice& peer, void* context) {
   b4bec:	b508      	push	{r3, lr}
	Log.info("connected");
   b4bee:	4902      	ldr	r1, [pc, #8]	; (b4bf8 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4bf0:	4802      	ldr	r0, [pc, #8]	; (b4bfc <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4bf2:	f7ff ffe3 	bl	b4bbc <_ZNK5spark6Logger4infoEPKcz>

}
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	000bd2cf 	.word	0x000bd2cf
   b4bfc:	2003e6b8 	.word	0x2003e6b8

000b4c00 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectedCallback(const BlePeerDevice& peer, void* context) {
   b4c00:	b508      	push	{r3, lr}
	Log.info("disconnected");
   b4c02:	4902      	ldr	r1, [pc, #8]	; (b4c0c <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4c04:	4802      	ldr	r0, [pc, #8]	; (b4c10 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4c06:	f7ff ffd9 	bl	b4bbc <_ZNK5spark6Logger4infoEPKcz>

}
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	000bc5fd 	.word	0x000bc5fd
   b4c10:	2003e6b8 	.word	0x2003e6b8

000b4c14 <setup>:
void setup() {
   b4c14:	b570      	push	{r4, r5, r6, lr}
  display.setup();
   b4c16:	4828      	ldr	r0, [pc, #160]	; (b4cb8 <setup+0xa4>)
   b4c18:	4c28      	ldr	r4, [pc, #160]	; (b4cbc <setup+0xa8>)
void setup() {
   b4c1a:	b090      	sub	sp, #64	; 0x40
  display.setup();
   b4c1c:	f000 fe20 	bl	b5860 <_ZN16OledWingAdafruit5setupEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4c20:	4b27      	ldr	r3, [pc, #156]	; (b4cc0 <setup+0xac>)
  client.subscribe(argon2);
   b4c22:	4828      	ldr	r0, [pc, #160]	; (b4cc4 <setup+0xb0>)
   b4c24:	6819      	ldr	r1, [r3, #0]
   b4c26:	f001 fed9 	bl	b69dc <_ZN4MQTT9subscribeEPKc>
   b4c2a:	4b27      	ldr	r3, [pc, #156]	; (b4cc8 <setup+0xb4>)
  client.subscribe(argon3);
   b4c2c:	4825      	ldr	r0, [pc, #148]	; (b4cc4 <setup+0xb0>)
   b4c2e:	6819      	ldr	r1, [r3, #0]
   b4c30:	f001 fed4 	bl	b69dc <_ZN4MQTT9subscribeEPKc>
	BLE.on();
   b4c34:	f002 fdf2 	bl	b781c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c38:	f002 fe0c 	bl	b7854 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.onConnected(connectedCallback, NULL);
   b4c3c:	f002 fdee 	bl	b781c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c40:	4922      	ldr	r1, [pc, #136]	; (b4ccc <setup+0xb8>)
   b4c42:	2200      	movs	r2, #0
   b4c44:	f003 f99b 	bl	b7f7e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
	BLE.onDisconnected(disconnectedCallback, NULL);
   b4c48:	f002 fde8 	bl	b781c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c4c:	4920      	ldr	r1, [pc, #128]	; (b4cd0 <setup+0xbc>)
   b4c4e:	2200      	movs	r2, #0
   b4c50:	f003 f976 	bl	b7f40 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BleAdvertisingData advData;
   b4c54:	a803      	add	r0, sp, #12
   b4c56:	f002 ffbd 	bl	b7bd4 <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendServiceUUID(serviceUuid);
   b4c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4c5c:	ad06      	add	r5, sp, #24
   b4c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4c60:	ad06      	add	r5, sp, #24
   b4c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c64:	6826      	ldr	r6, [r4, #0]
   b4c66:	ac0b      	add	r4, sp, #44	; 0x2c
   b4c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c6a:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4c6c:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c6e:	f002 fcb5 	bl	b75dc <_ZNK8particle7BleUuid4typeEv>
   b4c72:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4c74:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4c76:	b9b4      	cbnz	r4, b4ca6 <setup+0x92>
            uint16_t uuid16 = tempUUID.shorted();
   b4c78:	f002 fcb2 	bl	b75e0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c7c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4c7e:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4c82:	2302      	movs	r3, #2
   b4c84:	f10d 020a 	add.w	r2, sp, #10
   b4c88:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4c8a:	a803      	add	r0, sp, #12
   b4c8c:	f002 ff97 	bl	b7bbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&advData);
   b4c90:	f002 fdc4 	bl	b781c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c94:	2200      	movs	r2, #0
   b4c96:	a903      	add	r1, sp, #12
   b4c98:	f002 fe38 	bl	b790c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4c9c:	9803      	ldr	r0, [sp, #12]
   b4c9e:	f002 f9a1 	bl	b6fe4 <free>
}
   b4ca2:	b010      	add	sp, #64	; 0x40
   b4ca4:	bd70      	pop	{r4, r5, r6, pc}
   b4ca6:	f002 fc9d 	bl	b75e4 <_ZNK8particle7BleUuid8rawBytesEv>
   b4caa:	2300      	movs	r3, #0
   b4cac:	9300      	str	r3, [sp, #0]
   b4cae:	4602      	mov	r2, r0
   b4cb0:	2310      	movs	r3, #16
   b4cb2:	2107      	movs	r1, #7
   b4cb4:	e7e9      	b.n	b4c8a <setup+0x76>
   b4cb6:	bf00      	nop
   b4cb8:	2003e5d4 	.word	0x2003e5d4
   b4cbc:	2003e668 	.word	0x2003e668
   b4cc0:	2003e554 	.word	0x2003e554
   b4cc4:	2003e574 	.word	0x2003e574
   b4cc8:	2003e564 	.word	0x2003e564
   b4ccc:	000b4bed 	.word	0x000b4bed
   b4cd0:	000b4c01 	.word	0x000b4c01

000b4cd4 <_Z14format_displayv>:

void format_display () {
   b4cd4:	b510      	push	{r4, lr}
  //sets up basic formatting for when using the display
  display.clearDisplay();
   b4cd6:	4c07      	ldr	r4, [pc, #28]	; (b4cf4 <_Z14format_displayv+0x20>)
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f000 ffc7 	bl	b5c6c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4cde:	2101      	movs	r1, #1
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	f000 fd6e 	bl	b57c2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4ce6:	2200      	movs	r2, #0
   b4ce8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4cec:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE); 
  display.setCursor(0,0);
   b4cf0:	bd10      	pop	{r4, pc}
   b4cf2:	bf00      	nop
   b4cf4:	2003e5d4 	.word	0x2003e5d4

000b4cf8 <loop>:
void loop() {
   b4cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b4cfa:	4826      	ldr	r0, [pc, #152]	; (b4d94 <loop+0x9c>)
   b4cfc:	f000 fdd9 	bl	b58b2 <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected()) {
   b4d00:	4825      	ldr	r0, [pc, #148]	; (b4d98 <loop+0xa0>)
   b4d02:	f001 fbdb 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b4d06:	b360      	cbz	r0, b4d62 <loop+0x6a>
    client.loop();
   b4d08:	4823      	ldr	r0, [pc, #140]	; (b4d98 <loop+0xa0>)
   b4d0a:	f001 fd1f 	bl	b674c <_ZN4MQTT4loopEv>
  format_display();
   b4d0e:	f7ff ffe1 	bl	b4cd4 <_Z14format_displayv>
  display.println("A2 dist : A3 dist");
   b4d12:	4922      	ldr	r1, [pc, #136]	; (b4d9c <loop+0xa4>)
   b4d14:	481f      	ldr	r0, [pc, #124]	; (b4d94 <loop+0x9c>)
   b4d16:	f003 f994 	bl	b8042 <_ZN5Print7printlnEPKc>
  display.print(argon2_distance);
   b4d1a:	4b21      	ldr	r3, [pc, #132]	; (b4da0 <loop+0xa8>)
   b4d1c:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4d1e:	2c00      	cmp	r4, #0
   b4d20:	da34      	bge.n	b4d8c <loop+0x94>
            t = print('-');
   b4d22:	212d      	movs	r1, #45	; 0x2d
   b4d24:	481b      	ldr	r0, [pc, #108]	; (b4d94 <loop+0x9c>)
   b4d26:	f003 f97d 	bl	b8024 <_ZN5Print5printEc>
            val = -n;
   b4d2a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d2c:	220a      	movs	r2, #10
   b4d2e:	4819      	ldr	r0, [pc, #100]	; (b4d94 <loop+0x9c>)
   b4d30:	f003 f991 	bl	b8056 <_ZN5Print11printNumberEmh>
  display.print(" : ");
   b4d34:	491b      	ldr	r1, [pc, #108]	; (b4da4 <loop+0xac>)
   b4d36:	4817      	ldr	r0, [pc, #92]	; (b4d94 <loop+0x9c>)
   b4d38:	f003 f970 	bl	b801c <_ZN5Print5printEPKc>
  display.print(argon3_distance);
   b4d3c:	4b1a      	ldr	r3, [pc, #104]	; (b4da8 <loop+0xb0>)
   b4d3e:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   b4d40:	2c00      	cmp	r4, #0
   b4d42:	da25      	bge.n	b4d90 <loop+0x98>
            t = print('-');
   b4d44:	212d      	movs	r1, #45	; 0x2d
   b4d46:	4813      	ldr	r0, [pc, #76]	; (b4d94 <loop+0x9c>)
   b4d48:	f003 f96c 	bl	b8024 <_ZN5Print5printEc>
            val = -n;
   b4d4c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4d4e:	220a      	movs	r2, #10
   b4d50:	4810      	ldr	r0, [pc, #64]	; (b4d94 <loop+0x9c>)
   b4d52:	f003 f980 	bl	b8056 <_ZN5Print11printNumberEmh>
  display.display();
   b4d56:	480f      	ldr	r0, [pc, #60]	; (b4d94 <loop+0x9c>)
}
   b4d58:	b004      	add	sp, #16
   b4d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4d5e:	f001 b9f3 	b.w	b6148 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4d62:	4668      	mov	r0, sp
   b4d64:	f002 f926 	bl	b6fb4 <spark_deviceID>
    client.connect(System.deviceID());
   b4d68:	9900      	ldr	r1, [sp, #0]
   b4d6a:	480b      	ldr	r0, [pc, #44]	; (b4d98 <loop+0xa0>)
   b4d6c:	f001 fc96 	bl	b669c <_ZN4MQTT7connectEPKc>
   b4d70:	4668      	mov	r0, sp
   b4d72:	f002 fa79 	bl	b7268 <_ZN6StringD1Ev>
   b4d76:	4b0d      	ldr	r3, [pc, #52]	; (b4dac <loop+0xb4>)
    client.subscribe(argon2);
   b4d78:	4807      	ldr	r0, [pc, #28]	; (b4d98 <loop+0xa0>)
   b4d7a:	6819      	ldr	r1, [r3, #0]
   b4d7c:	f001 fe2e 	bl	b69dc <_ZN4MQTT9subscribeEPKc>
   b4d80:	4b0b      	ldr	r3, [pc, #44]	; (b4db0 <loop+0xb8>)
    client.subscribe(argon3);
   b4d82:	4805      	ldr	r0, [pc, #20]	; (b4d98 <loop+0xa0>)
   b4d84:	6819      	ldr	r1, [r3, #0]
   b4d86:	f001 fe29 	bl	b69dc <_ZN4MQTT9subscribeEPKc>
   b4d8a:	e7c0      	b.n	b4d0e <loop+0x16>
            val = n;
   b4d8c:	4621      	mov	r1, r4
   b4d8e:	e7cd      	b.n	b4d2c <loop+0x34>
   b4d90:	4621      	mov	r1, r4
   b4d92:	e7dc      	b.n	b4d4e <loop+0x56>
   b4d94:	2003e5d4 	.word	0x2003e5d4
   b4d98:	2003e574 	.word	0x2003e574
   b4d9c:	000bc60a 	.word	0x000bc60a
   b4da0:	2003e368 	.word	0x2003e368
   b4da4:	000bc61c 	.word	0x000bc61c
   b4da8:	2003e36c 	.word	0x2003e36c
   b4dac:	2003e554 	.word	0x2003e554
   b4db0:	2003e564 	.word	0x2003e564

000b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4db4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4db6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dbc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4dbe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4dc2:	42ae      	cmp	r6, r5
   b4dc4:	d004      	beq.n	b4dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4dc6:	4628      	mov	r0, r5
   b4dc8:	f002 fa4e 	bl	b7268 <_ZN6StringD1Ev>
   b4dcc:	3514      	adds	r5, #20
   b4dce:	e7f8      	b.n	b4dc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4dd0:	6820      	ldr	r0, [r4, #0]
   b4dd2:	f002 f907 	bl	b6fe4 <free>
    AllocatorT::free(data_);
}
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	bd70      	pop	{r4, r5, r6, pc}

000b4dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4dda:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dde:	4604      	mov	r4, r0
   b4de0:	460d      	mov	r5, r1
   b4de2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4de4:	d916      	bls.n	b4e14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4de6:	4290      	cmp	r0, r2
   b4de8:	d215      	bcs.n	b4e16 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4dea:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4dee:	1a75      	subs	r5, r6, r1
   b4df0:	f1a1 0714 	sub.w	r7, r1, #20
   b4df4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4df6:	42b7      	cmp	r7, r6
   b4df8:	d01c      	beq.n	b4e34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4dfa:	b12c      	cbz	r4, b4e08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4dfc:	4631      	mov	r1, r6
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f002 faae 	bl	b7360 <_ZN6StringC1EOS_>
   b4e04:	7c33      	ldrb	r3, [r6, #16]
   b4e06:	7423      	strb	r3, [r4, #16]
   b4e08:	4630      	mov	r0, r6
   b4e0a:	f002 fa2d 	bl	b7268 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e0e:	3e14      	subs	r6, #20
   b4e10:	3c14      	subs	r4, #20
   b4e12:	e7f0      	b.n	b4df6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e14:	d00e      	beq.n	b4e34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e16:	42b5      	cmp	r5, r6
   b4e18:	d00c      	beq.n	b4e34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e1a:	b12c      	cbz	r4, b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e1c:	4629      	mov	r1, r5
   b4e1e:	4620      	mov	r0, r4
   b4e20:	f002 fa9e 	bl	b7360 <_ZN6StringC1EOS_>
   b4e24:	7c2b      	ldrb	r3, [r5, #16]
   b4e26:	7423      	strb	r3, [r4, #16]
   b4e28:	4628      	mov	r0, r5
   b4e2a:	f002 fa1d 	bl	b7268 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e2e:	3514      	adds	r5, #20
   b4e30:	3414      	adds	r4, #20
   b4e32:	e7f0      	b.n	b4e16 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e3a:	2300      	movs	r3, #0
   b4e3c:	e9c0 3300 	strd	r3, r3, [r0]
   b4e40:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e42:	684f      	ldr	r7, [r1, #4]
   b4e44:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e46:	4604      	mov	r4, r0
   b4e48:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e4a:	dd23      	ble.n	b4e94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e4c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e50:	fb08 f007 	mul.w	r0, r8, r7
   b4e54:	f002 f8be 	bl	b6fd4 <malloc>
            if (!d) {
   b4e58:	4605      	mov	r5, r0
   b4e5a:	b1d8      	cbz	r0, b4e94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e5c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e60:	fb08 1202 	mla	r2, r8, r2, r1
   b4e64:	f7ff ffb9 	bl	b4dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e68:	6820      	ldr	r0, [r4, #0]
   b4e6a:	f002 f8bb 	bl	b6fe4 <free>
        data_ = d;
   b4e6e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e70:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e72:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e76:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e7a:	45b8      	cmp	r8, r7
   b4e7c:	d008      	beq.n	b4e90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e7e:	4639      	mov	r1, r7
   b4e80:	4628      	mov	r0, r5
   b4e82:	f002 fa87 	bl	b7394 <_ZN6StringC1ERKS_>
   b4e86:	7c3b      	ldrb	r3, [r7, #16]
   b4e88:	742b      	strb	r3, [r5, #16]
   b4e8a:	3714      	adds	r7, #20
   b4e8c:	3514      	adds	r5, #20
   b4e8e:	e7f4      	b.n	b4e7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e90:	6873      	ldr	r3, [r6, #4]
   b4e92:	6063      	str	r3, [r4, #4]
}
   b4e94:	4620      	mov	r0, r4
   b4e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4e9c <_GLOBAL__sub_I_client>:
   b4e9c:	b570      	push	{r4, r5, r6, lr}
   b4e9e:	b08e      	sub	sp, #56	; 0x38
MQTT client("lab.thewcl.com", 1883, callback);
   b4ea0:	2400      	movs	r4, #0
SYSTEM_THREAD(ENABLED);
   b4ea2:	2100      	movs	r1, #0
   b4ea4:	2001      	movs	r0, #1
   b4ea6:	f002 f809 	bl	b6ebc <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b4eaa:	f240 725b 	movw	r2, #1883	; 0x75b
   b4eae:	4b28      	ldr	r3, [pc, #160]	; (b4f50 <_GLOBAL__sub_I_client+0xb4>)
   b4eb0:	9400      	str	r4, [sp, #0]
   b4eb2:	4928      	ldr	r1, [pc, #160]	; (b4f54 <_GLOBAL__sub_I_client+0xb8>)
   b4eb4:	4828      	ldr	r0, [pc, #160]	; (b4f58 <_GLOBAL__sub_I_client+0xbc>)
   b4eb6:	f001 fa25 	bl	b6304 <_ZN4MQTTC1EPKctPFvPcPhjEb>
String argon2 = "BAR/argon2/RSSI";
   b4eba:	4928      	ldr	r1, [pc, #160]	; (b4f5c <_GLOBAL__sub_I_client+0xc0>)
   b4ebc:	4828      	ldr	r0, [pc, #160]	; (b4f60 <_GLOBAL__sub_I_client+0xc4>)
   b4ebe:	f002 fa1e 	bl	b72fe <_ZN6StringC1EPK19__FlashStringHelper>
String argon3 = "BAR/argon3/RSSI";
   b4ec2:	4928      	ldr	r1, [pc, #160]	; (b4f64 <_GLOBAL__sub_I_client+0xc8>)
   b4ec4:	4828      	ldr	r0, [pc, #160]	; (b4f68 <_GLOBAL__sub_I_client+0xcc>)
   b4ec6:	f002 fa1a 	bl	b72fe <_ZN6StringC1EPK19__FlashStringHelper>
OledWingAdafruit display;
   b4eca:	2107      	movs	r1, #7
   b4ecc:	4827      	ldr	r0, [pc, #156]	; (b4f6c <_GLOBAL__sub_I_client+0xd0>)
   b4ece:	f000 fc99 	bl	b5804 <_ZN16OledWingAdafruitC1Ei>
        capacity_(0) {
   b4ed2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4ed6:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4ed8:	f004 fa7c 	bl	b93d4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4edc:	4c24      	ldr	r4, [pc, #144]	; (b4f70 <_GLOBAL__sub_I_client+0xd4>)
   b4ede:	4605      	mov	r5, r0
   b4ee0:	a902      	add	r1, sp, #8
   b4ee2:	a805      	add	r0, sp, #20
   b4ee4:	f7ff ffa7 	bl	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ee8:	4626      	mov	r6, r4
        stream_(&stream) {
   b4eea:	a905      	add	r1, sp, #20
   b4eec:	a808      	add	r0, sp, #32
   b4eee:	f7ff ffa2 	bl	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4ef2:	4b20      	ldr	r3, [pc, #128]	; (b4f74 <_GLOBAL__sub_I_client+0xd8>)
   b4ef4:	f846 3b04 	str.w	r3, [r6], #4
   b4ef8:	a908      	add	r1, sp, #32
   b4efa:	a80b      	add	r0, sp, #44	; 0x2c
   b4efc:	f7ff ff9b 	bl	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4f00:	aa0b      	add	r2, sp, #44	; 0x2c
   b4f02:	211e      	movs	r1, #30
   b4f04:	4630      	mov	r0, r6
   b4f06:	f003 fd99 	bl	b8a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4f0a:	a80b      	add	r0, sp, #44	; 0x2c
   b4f0c:	f7ff ff52 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4f10:	a808      	add	r0, sp, #32
   b4f12:	f7ff ff4f 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f16:	4b18      	ldr	r3, [pc, #96]	; (b4f78 <_GLOBAL__sub_I_client+0xdc>)
   b4f18:	6023      	str	r3, [r4, #0]
   b4f1a:	6225      	str	r5, [r4, #32]
   b4f1c:	a805      	add	r0, sp, #20
   b4f1e:	f7ff ff49 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f22:	4b16      	ldr	r3, [pc, #88]	; (b4f7c <_GLOBAL__sub_I_client+0xe0>)
   b4f24:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4f26:	f004 fa55 	bl	b93d4 <_Z16_fetch_usbserialv>
   b4f2a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f2e:	f004 fa41 	bl	b93b4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4f32:	f003 fa65 	bl	b8400 <_ZN5spark10LogManager8instanceEv>
   b4f36:	4621      	mov	r1, r4
   b4f38:	f003 fc56 	bl	b87e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4f3c:	a802      	add	r0, sp, #8
   b4f3e:	f7ff ff39 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b4f42:	490f      	ldr	r1, [pc, #60]	; (b4f80 <_GLOBAL__sub_I_client+0xe4>)
   b4f44:	480f      	ldr	r0, [pc, #60]	; (b4f84 <_GLOBAL__sub_I_client+0xe8>)
   b4f46:	b00e      	add	sp, #56	; 0x38
   b4f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b4f4c:	f002 bbbc 	b.w	b76c8 <_ZN8particle7BleUuidC1EPKc>
   b4f50:	000b4af1 	.word	0x000b4af1
   b4f54:	000bc620 	.word	0x000bc620
   b4f58:	2003e574 	.word	0x2003e574
   b4f5c:	000bc62f 	.word	0x000bc62f
   b4f60:	2003e554 	.word	0x2003e554
   b4f64:	000bc63f 	.word	0x000bc63f
   b4f68:	2003e564 	.word	0x2003e564
   b4f6c:	2003e5d4 	.word	0x2003e5d4
   b4f70:	2003e644 	.word	0x2003e644
   b4f74:	000bc67c 	.word	0x000bc67c
   b4f78:	000bd390 	.word	0x000bd390
   b4f7c:	000bc694 	.word	0x000bc694
   b4f80:	000bc64f 	.word	0x000bc64f
   b4f84:	2003e668 	.word	0x2003e668

000b4f88 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4f88:	4770      	bx	lr

000b4f8a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4f8a:	b510      	push	{r4, lr}
  }
   b4f8c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4f8e:	4604      	mov	r4, r0
  }
   b4f90:	f7ff fd95 	bl	b4abe <_ZdlPvj>
   b4f94:	4620      	mov	r0, r4
   b4f96:	bd10      	pop	{r4, pc}

000b4f98 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4f98:	b40e      	push	{r1, r2, r3}
   b4f9a:	b503      	push	{r0, r1, lr}
   b4f9c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4f9e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4fa0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4fa4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4fa6:	f003 f874 	bl	b8092 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4faa:	b002      	add	sp, #8
   b4fac:	f85d eb04 	ldr.w	lr, [sp], #4
   b4fb0:	b003      	add	sp, #12
   b4fb2:	4770      	bx	lr

000b4fb4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4fb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4fb6:	4604      	mov	r4, r0
   b4fb8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4fba:	7922      	ldrb	r2, [r4, #4]
   b4fbc:	68a3      	ldr	r3, [r4, #8]
   b4fbe:	b132      	cbz	r2, b4fce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4fc0:	b9a3      	cbnz	r3, b4fec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4fc2:	490b      	ldr	r1, [pc, #44]	; (b4ff0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4fc4:	b002      	add	sp, #8
   b4fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4fca:	f003 b827 	b.w	b801c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4fce:	4a09      	ldr	r2, [pc, #36]	; (b4ff4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4fd0:	7b26      	ldrb	r6, [r4, #12]
   b4fd2:	4d09      	ldr	r5, [pc, #36]	; (b4ff8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4fd4:	4909      	ldr	r1, [pc, #36]	; (b4ffc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4fd6:	7b64      	ldrb	r4, [r4, #13]
   b4fd8:	2e01      	cmp	r6, #1
   b4fda:	bf18      	it	ne
   b4fdc:	4629      	movne	r1, r5
   b4fde:	e9cd 1400 	strd	r1, r4, [sp]
   b4fe2:	4907      	ldr	r1, [pc, #28]	; (b5000 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4fe4:	f7ff ffd8 	bl	b4f98 <_ZN5Print6printfEPKcz>
  }
   b4fe8:	b002      	add	sp, #8
   b4fea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4fec:	4a05      	ldr	r2, [pc, #20]	; (b5004 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4fee:	e7ef      	b.n	b4fd0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4ff0:	000bc6b5 	.word	0x000bc6b5
   b4ff4:	000bd35a 	.word	0x000bd35a
   b4ff8:	000bc6b1 	.word	0x000bc6b1
   b4ffc:	000bc6ad 	.word	0x000bc6ad
   b5000:	000bc6cb 	.word	0x000bc6cb
   b5004:	000bc6a4 	.word	0x000bc6a4

000b5008 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b500c:	b085      	sub	sp, #20
   b500e:	461f      	mov	r7, r3
   b5010:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5014:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5018:	eba8 0902 	sub.w	r9, r8, r2
   b501c:	eba7 0a01 	sub.w	sl, r7, r1
   b5020:	f1b9 0f00 	cmp.w	r9, #0
   b5024:	bfb8      	it	lt
   b5026:	f1c9 0900 	rsblt	r9, r9, #0
   b502a:	f1ba 0f00 	cmp.w	sl, #0
   b502e:	bfb8      	it	lt
   b5030:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5034:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5036:	4683      	mov	fp, r0
   b5038:	460c      	mov	r4, r1
   b503a:	4615      	mov	r5, r2
    if (steep) {
   b503c:	dd04      	ble.n	b5048 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b503e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5040:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5042:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5044:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5046:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5048:	42bc      	cmp	r4, r7
   b504a:	dd05      	ble.n	b5058 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b504c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b504e:	4645      	mov	r5, r8
   b5050:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5052:	4622      	mov	r2, r4
   b5054:	463c      	mov	r4, r7
   b5056:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5058:	1b3e      	subs	r6, r7, r4
   b505a:	b2b2      	uxth	r2, r6
   b505c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b505e:	eba8 0205 	sub.w	r2, r8, r5
   b5062:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5066:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b506a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b506e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5072:	4545      	cmp	r5, r8
   b5074:	bfb4      	ite	lt
   b5076:	2201      	movlt	r2, #1
   b5078:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b507c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b507e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5080:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5082:	42bc      	cmp	r4, r7
   b5084:	dc1c      	bgt.n	b50c0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5086:	f8db 2000 	ldr.w	r2, [fp]
   b508a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b508c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b508e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5092:	bfc7      	ittee	gt
   b5094:	4629      	movgt	r1, r5
   b5096:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5098:	462a      	movle	r2, r5
   b509a:	4621      	movle	r1, r4
   b509c:	4658      	mov	r0, fp
   b509e:	47c0      	blx	r8
        }
        err -= dy;
   b50a0:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b50a2:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b50a4:	1ab6      	subs	r6, r6, r2
   b50a6:	b2b1      	uxth	r1, r6
   b50a8:	b236      	sxth	r6, r6
        if (err < 0) {
   b50aa:	2e00      	cmp	r6, #0
   b50ac:	da05      	bge.n	b50ba <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b50ae:	9a02      	ldr	r2, [sp, #8]
   b50b0:	4415      	add	r5, r2
            err += dx;
   b50b2:	9a00      	ldr	r2, [sp, #0]
   b50b4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b50b6:	b22d      	sxth	r5, r5
            err += dx;
   b50b8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b50ba:	3401      	adds	r4, #1
   b50bc:	b224      	sxth	r4, r4
   b50be:	e7e0      	b.n	b5082 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b50c0:	b005      	add	sp, #20
   b50c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b50c6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b50c6:	4770      	bx	lr

000b50c8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b50c8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b50ca:	6804      	ldr	r4, [r0, #0]
   b50cc:	6924      	ldr	r4, [r4, #16]
   b50ce:	46a4      	mov	ip, r4
}
   b50d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b50d4:	4760      	bx	ip

000b50d6 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b50d6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b50d8:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b50da:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b50de:	9502      	str	r5, [sp, #8]
   b50e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b50e2:	46a4      	mov	ip, r4
}
   b50e4:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b50e6:	4760      	bx	ip

000b50e8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b50e8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b50ea:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b50ec:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b50f0:	9502      	str	r5, [sp, #8]
   b50f2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b50f4:	46a4      	mov	ip, r4
}
   b50f6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b50f8:	4760      	bx	ip

000b50fa <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b50fa:	b470      	push	{r4, r5, r6}
   b50fc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5100:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5104:	6804      	ldr	r4, [r0, #0]
   b5106:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b510a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b510c:	46a4      	mov	ip, r4
}
   b510e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5110:	4760      	bx	ip

000b5112 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5112:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5116:	461c      	mov	r4, r3
    startWrite();
   b5118:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b511a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b511e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5120:	4605      	mov	r5, r0
   b5122:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5124:	3c01      	subs	r4, #1
   b5126:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5128:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b512a:	b224      	sxth	r4, r4
    startWrite();
   b512c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b512e:	682b      	ldr	r3, [r5, #0]
   b5130:	f8cd 8004 	str.w	r8, [sp, #4]
   b5134:	9400      	str	r4, [sp, #0]
   b5136:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5138:	4628      	mov	r0, r5
   b513a:	463b      	mov	r3, r7
   b513c:	4632      	mov	r2, r6
   b513e:	4639      	mov	r1, r7
   b5140:	47a0      	blx	r4
    endWrite();
   b5142:	682b      	ldr	r3, [r5, #0]
   b5144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5146:	4628      	mov	r0, r5
}
   b5148:	b002      	add	sp, #8
   b514a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b514e:	4718      	bx	r3

000b5150 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5154:	461d      	mov	r5, r3
    startWrite();
   b5156:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5158:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b515c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b515e:	4604      	mov	r4, r0
   b5160:	4617      	mov	r7, r2
   b5162:	460e      	mov	r6, r1
    startWrite();
   b5164:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5166:	e9cd 7800 	strd	r7, r8, [sp]
   b516a:	6822      	ldr	r2, [r4, #0]
   b516c:	1e6b      	subs	r3, r5, #1
   b516e:	4433      	add	r3, r6
   b5170:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5172:	4620      	mov	r0, r4
   b5174:	b21b      	sxth	r3, r3
   b5176:	463a      	mov	r2, r7
   b5178:	4631      	mov	r1, r6
   b517a:	47a8      	blx	r5
    endWrite();
   b517c:	6823      	ldr	r3, [r4, #0]
   b517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5180:	4620      	mov	r0, r4
}
   b5182:	b002      	add	sp, #8
   b5184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5188:	4718      	bx	r3

000b518a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b518a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b518e:	461e      	mov	r6, r3
    startWrite();
   b5190:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5192:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5196:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5198:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b519c:	460c      	mov	r4, r1
   b519e:	4605      	mov	r5, r0
   b51a0:	4617      	mov	r7, r2
    startWrite();
   b51a2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b51a4:	4426      	add	r6, r4
   b51a6:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b51a8:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b51aa:	da0b      	bge.n	b51c4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b51ac:	f8cd 8000 	str.w	r8, [sp]
   b51b0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b51b4:	4621      	mov	r1, r4
   b51b6:	464b      	mov	r3, r9
   b51b8:	463a      	mov	r2, r7
   b51ba:	4628      	mov	r0, r5
   b51bc:	3401      	adds	r4, #1
   b51be:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b51c0:	b224      	sxth	r4, r4
   b51c2:	e7f0      	b.n	b51a6 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b51c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51c6:	4628      	mov	r0, r5
}
   b51c8:	b002      	add	sp, #8
   b51ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b51ce:	4718      	bx	r3

000b51d0 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b51d0:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b51d2:	6802      	ldr	r2, [r0, #0]
   b51d4:	9101      	str	r1, [sp, #4]
   b51d6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b51da:	9100      	str	r1, [sp, #0]
   b51dc:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b51de:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51e2:	2200      	movs	r2, #0
   b51e4:	4611      	mov	r1, r2
   b51e6:	47a0      	blx	r4
}
   b51e8:	b002      	add	sp, #8
   b51ea:	bd10      	pop	{r4, pc}

000b51ec <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b51ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b51f0:	4299      	cmp	r1, r3
        uint16_t color) {
   b51f2:	4616      	mov	r6, r2
   b51f4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b51f8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b51fc:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b51fe:	4680      	mov	r8, r0
   b5200:	460d      	mov	r5, r1
   b5202:	461c      	mov	r4, r3
    if(x0 == x1){
   b5204:	d113      	bne.n	b522e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5206:	42be      	cmp	r6, r7
   b5208:	bfc8      	it	gt
   b520a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b520c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5210:	bfc4      	itt	gt
   b5212:	463e      	movgt	r6, r7
   b5214:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5216:	1c7b      	adds	r3, r7, #1
   b5218:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b521a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b521c:	b21b      	sxth	r3, r3
   b521e:	4632      	mov	r2, r6
   b5220:	4629      	mov	r1, r5
   b5222:	4640      	mov	r0, r8
   b5224:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5226:	b003      	add	sp, #12
   b5228:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b522c:	4760      	bx	ip
    } else if(y0 == y1){
   b522e:	42be      	cmp	r6, r7
   b5230:	d10a      	bne.n	b5248 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5232:	4299      	cmp	r1, r3
   b5234:	bfc2      	ittt	gt
   b5236:	460b      	movgt	r3, r1
   b5238:	4625      	movgt	r5, r4
   b523a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b523c:	1c63      	adds	r3, r4, #1
   b523e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5242:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5244:	1b5b      	subs	r3, r3, r5
   b5246:	e7e9      	b.n	b521c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5248:	6953      	ldr	r3, [r2, #20]
   b524a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b524c:	e9cd 7900 	strd	r7, r9, [sp]
   b5250:	f8d8 3000 	ldr.w	r3, [r8]
   b5254:	4640      	mov	r0, r8
   b5256:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5258:	4632      	mov	r2, r6
   b525a:	4623      	mov	r3, r4
   b525c:	4629      	mov	r1, r5
   b525e:	47b8      	blx	r7
        endWrite();
   b5260:	f8d8 3000 	ldr.w	r3, [r8]
   b5264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5266:	4640      	mov	r0, r8
}
   b5268:	b003      	add	sp, #12
   b526a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b526e:	4718      	bx	r3

000b5270 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5270:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5274:	461d      	mov	r5, r3
    startWrite();
   b5276:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5278:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b527c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b527e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5282:	4604      	mov	r4, r0
   b5284:	460f      	mov	r7, r1
   b5286:	4616      	mov	r6, r2
    startWrite();
   b5288:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b528a:	6823      	ldr	r3, [r4, #0]
   b528c:	f8cd 8000 	str.w	r8, [sp]
   b5290:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5294:	4632      	mov	r2, r6
   b5296:	462b      	mov	r3, r5
   b5298:	4639      	mov	r1, r7
   b529a:	4620      	mov	r0, r4
   b529c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b529e:	6823      	ldr	r3, [r4, #0]
   b52a0:	f8cd 8000 	str.w	r8, [sp]
   b52a4:	f109 32ff 	add.w	r2, r9, #4294967295
   b52a8:	4432      	add	r2, r6
   b52aa:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b52ae:	4639      	mov	r1, r7
   b52b0:	462b      	mov	r3, r5
   b52b2:	4620      	mov	r0, r4
   b52b4:	b212      	sxth	r2, r2
   b52b6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b52b8:	6823      	ldr	r3, [r4, #0]
   b52ba:	f8cd 8000 	str.w	r8, [sp]
   b52be:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b52c2:	4632      	mov	r2, r6
   b52c4:	464b      	mov	r3, r9
   b52c6:	4639      	mov	r1, r7
   b52c8:	4620      	mov	r0, r4
   b52ca:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b52cc:	1e6b      	subs	r3, r5, #1
   b52ce:	19d9      	adds	r1, r3, r7
   b52d0:	6823      	ldr	r3, [r4, #0]
   b52d2:	f8cd 8000 	str.w	r8, [sp]
   b52d6:	6a1d      	ldr	r5, [r3, #32]
   b52d8:	4620      	mov	r0, r4
   b52da:	464b      	mov	r3, r9
   b52dc:	4632      	mov	r2, r6
   b52de:	b209      	sxth	r1, r1
   b52e0:	47a8      	blx	r5
    endWrite();
   b52e2:	6823      	ldr	r3, [r4, #0]
   b52e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52e6:	4620      	mov	r0, r4
}
   b52e8:	b002      	add	sp, #8
   b52ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b52ee:	4718      	bx	r3

000b52f0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b52f0:	4770      	bx	lr

000b52f2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b52f2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b52f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b52fa:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b52fc:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b52fe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5302:	bf59      	ittee	pl
   b5304:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5306:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5308:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b530a:	81c3      	strhmi	r3, [r0, #14]
}
   b530c:	4770      	bx	lr
	...

000b5310 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5310:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5312:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5314:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5316:	4a07      	ldr	r2, [pc, #28]	; (b5334 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5318:	4d07      	ldr	r5, [pc, #28]	; (b5338 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b531a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b531c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b531e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5320:	f04f 31ff 	mov.w	r1, #4294967295
   b5324:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5328:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b532a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b532c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b532e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5330:	6204      	str	r4, [r0, #32]
}
   b5332:	bd30      	pop	{r4, r5, pc}
   b5334:	01000101 	.word	0x01000101
   b5338:	000bcbf0 	.word	0x000bcbf0

000b533c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5340:	b089      	sub	sp, #36	; 0x24
   b5342:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5346:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5348:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b534c:	9304      	str	r3, [sp, #16]
   b534e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5352:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5354:	9305      	str	r3, [sp, #20]
   b5356:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b535a:	4604      	mov	r4, r0
    startWrite();
   b535c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b535e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5362:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5366:	bf48      	it	mi
   b5368:	f108 020e 	addmi.w	r2, r8, #14
   b536c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5370:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5372:	4635      	mov	r5, r6
   b5374:	9b03      	ldr	r3, [sp, #12]
   b5376:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5378:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b537c:	189a      	adds	r2, r3, r2
   b537e:	9b05      	ldr	r3, [sp, #20]
   b5380:	428b      	cmp	r3, r1
   b5382:	b212      	sxth	r2, r2
   b5384:	dd27      	ble.n	b53d6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5386:	9b04      	ldr	r3, [sp, #16]
   b5388:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b538a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b538e:	9306      	str	r3, [sp, #24]
   b5390:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5394:	4580      	cmp	r8, r0
   b5396:	fa1f f189 	uxth.w	r1, r9
   b539a:	dd17      	ble.n	b53cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b539c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b539e:	bf05      	ittet	eq
   b53a0:	9b06      	ldreq	r3, [sp, #24]
   b53a2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b53a4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53a6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b53a8:	bf18      	it	ne
   b53aa:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b53ac:	062b      	lsls	r3, r5, #24
   b53ae:	d50a      	bpl.n	b53c6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b53b0:	9b02      	ldr	r3, [sp, #8]
   b53b2:	6820      	ldr	r0, [r4, #0]
   b53b4:	9207      	str	r2, [sp, #28]
   b53b6:	4419      	add	r1, r3
   b53b8:	6983      	ldr	r3, [r0, #24]
   b53ba:	b209      	sxth	r1, r1
   b53bc:	461f      	mov	r7, r3
   b53be:	4620      	mov	r0, r4
   b53c0:	4653      	mov	r3, sl
   b53c2:	47b8      	blx	r7
   b53c4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b53c6:	f109 0901 	add.w	r9, r9, #1
   b53ca:	e7e1      	b.n	b5390 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b53cc:	9b01      	ldr	r3, [sp, #4]
   b53ce:	3301      	adds	r3, #1
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	445e      	add	r6, fp
   b53d4:	e7ce      	b.n	b5374 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b53d6:	6823      	ldr	r3, [r4, #0]
   b53d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53da:	4620      	mov	r0, r4
}
   b53dc:	b009      	add	sp, #36	; 0x24
   b53de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b53e2:	4718      	bx	r3

000b53e4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e8:	ed2d 8b02 	vpush	{d8}
   b53ec:	b091      	sub	sp, #68	; 0x44
   b53ee:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b53f0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53f2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b53f6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b53fa:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b53fe:	9103      	str	r1, [sp, #12]
   b5400:	461f      	mov	r7, r3
   b5402:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5406:	9304      	str	r3, [sp, #16]
   b5408:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b540a:	2a00      	cmp	r2, #0
   b540c:	f040 80c5 	bne.w	b559a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5410:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5414:	428b      	cmp	r3, r1
   b5416:	f340 814c 	ble.w	b56b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b541a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b541e:	42b3      	cmp	r3, r6
   b5420:	f340 8147 	ble.w	b56b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5424:	2306      	movs	r3, #6
   b5426:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b542a:	2b00      	cmp	r3, #0
   b542c:	f340 8141 	ble.w	b56b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5430:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5434:	2b00      	cmp	r3, #0
   b5436:	f340 813c 	ble.w	b56b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b543a:	7f03      	ldrb	r3, [r0, #28]
   b543c:	b91b      	cbnz	r3, b5446 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b543e:	2faf      	cmp	r7, #175	; 0xaf
   b5440:	bf84      	itt	hi
   b5442:	3701      	addhi	r7, #1
   b5444:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5446:	f8db 3000 	ldr.w	r3, [fp]
   b544a:	4658      	mov	r0, fp
   b544c:	695b      	ldr	r3, [r3, #20]
   b544e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5450:	2205      	movs	r2, #5
   b5452:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5454:	2200      	movs	r2, #0
   b5456:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5458:	4a98      	ldr	r2, [pc, #608]	; (b56bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b545a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b545e:	18d3      	adds	r3, r2, r3
   b5460:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5462:	b2b3      	uxth	r3, r6
   b5464:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5466:	9a05      	ldr	r2, [sp, #20]
   b5468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b546a:	5c9b      	ldrb	r3, [r3, r2]
   b546c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b546e:	b2ab      	uxth	r3, r5
   b5470:	930b      	str	r3, [sp, #44]	; 0x2c
   b5472:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5476:	9308      	str	r3, [sp, #32]
   b5478:	9b03      	ldr	r3, [sp, #12]
   b547a:	fb02 f905 	mul.w	r9, r2, r5
   b547e:	fa19 f983 	uxtah	r9, r9, r3
   b5482:	fa0f f389 	sxth.w	r3, r9
   b5486:	ee08 3a10 	vmov	s16, r3
   b548a:	2308      	movs	r3, #8
   b548c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b548e:	9b03      	ldr	r3, [sp, #12]
   b5490:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5494:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5498:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b549c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b549e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b54a2:	07d2      	lsls	r2, r2, #31
   b54a4:	d552      	bpl.n	b554c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b54a6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b54a8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b54ac:	d13e      	bne.n	b552c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b54ae:	2c01      	cmp	r4, #1
   b54b0:	d13c      	bne.n	b552c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b54b2:	699b      	ldr	r3, [r3, #24]
   b54b4:	9906      	ldr	r1, [sp, #24]
   b54b6:	461f      	mov	r7, r3
   b54b8:	9b04      	ldr	r3, [sp, #16]
   b54ba:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b54bc:	b212      	sxth	r2, r2
   b54be:	4651      	mov	r1, sl
   b54c0:	4658      	mov	r0, fp
   b54c2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b54c4:	f109 0301 	add.w	r3, r9, #1
   b54c8:	fa4f f983 	sxtb.w	r9, r3
   b54cc:	9b07      	ldr	r3, [sp, #28]
   b54ce:	085b      	lsrs	r3, r3, #1
   b54d0:	9307      	str	r3, [sp, #28]
   b54d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b54d4:	3b01      	subs	r3, #1
   b54d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54da:	930a      	str	r3, [sp, #40]	; 0x28
   b54dc:	d1de      	bne.n	b549c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b54de:	9f05      	ldr	r7, [sp, #20]
   b54e0:	3701      	adds	r7, #1
   b54e2:	b27b      	sxtb	r3, r7
   b54e4:	9305      	str	r3, [sp, #20]
   b54e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b54e8:	3b01      	subs	r3, #1
   b54ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54ee:	9309      	str	r3, [sp, #36]	; 0x24
   b54f0:	d1b9      	bne.n	b5466 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b54f2:	9b04      	ldr	r3, [sp, #16]
   b54f4:	4543      	cmp	r3, r8
   b54f6:	d00f      	beq.n	b5518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b54f8:	2d01      	cmp	r5, #1
   b54fa:	f8db 3000 	ldr.w	r3, [fp]
   b54fe:	d13b      	bne.n	b5578 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5500:	2c01      	cmp	r4, #1
   b5502:	d139      	bne.n	b5578 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5504:	9908      	ldr	r1, [sp, #32]
   b5506:	f8cd 8000 	str.w	r8, [sp]
   b550a:	3105      	adds	r1, #5
   b550c:	6a1c      	ldr	r4, [r3, #32]
   b550e:	4632      	mov	r2, r6
   b5510:	2308      	movs	r3, #8
   b5512:	b209      	sxth	r1, r1
   b5514:	4658      	mov	r0, fp
   b5516:	47a0      	blx	r4
        endWrite();
   b5518:	f8db 3000 	ldr.w	r3, [fp]
   b551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b551e:	4658      	mov	r0, fp
}
   b5520:	b011      	add	sp, #68	; 0x44
   b5522:	ecbd 8b02 	vpop	{d8}
   b5526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b552a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b552c:	9906      	ldr	r1, [sp, #24]
   b552e:	fb14 f202 	smulbb	r2, r4, r2
   b5532:	440a      	add	r2, r1
   b5534:	9904      	ldr	r1, [sp, #16]
   b5536:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5538:	9400      	str	r4, [sp, #0]
   b553a:	69db      	ldr	r3, [r3, #28]
   b553c:	ee18 1a10 	vmov	r1, s16
   b5540:	461f      	mov	r7, r3
   b5542:	b212      	sxth	r2, r2
   b5544:	462b      	mov	r3, r5
   b5546:	4658      	mov	r0, fp
   b5548:	47b8      	blx	r7
   b554a:	e7bb      	b.n	b54c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b554c:	9a04      	ldr	r2, [sp, #16]
   b554e:	4542      	cmp	r2, r8
   b5550:	d0b8      	beq.n	b54c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5552:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5554:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5558:	d107      	bne.n	b556a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b555a:	2c01      	cmp	r4, #1
   b555c:	d105      	bne.n	b556a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b555e:	699b      	ldr	r3, [r3, #24]
   b5560:	9906      	ldr	r1, [sp, #24]
   b5562:	461f      	mov	r7, r3
   b5564:	440a      	add	r2, r1
   b5566:	4643      	mov	r3, r8
   b5568:	e7a8      	b.n	b54bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b556a:	9906      	ldr	r1, [sp, #24]
   b556c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5570:	fb14 f202 	smulbb	r2, r4, r2
   b5574:	440a      	add	r2, r1
   b5576:	e7df      	b.n	b5538 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b557a:	f8cd 8004 	str.w	r8, [sp, #4]
   b557e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5582:	9a08      	ldr	r2, [sp, #32]
   b5584:	00e4      	lsls	r4, r4, #3
   b5586:	440a      	add	r2, r1
   b5588:	4611      	mov	r1, r2
   b558a:	9400      	str	r4, [sp, #0]
   b558c:	69dc      	ldr	r4, [r3, #28]
   b558e:	4632      	mov	r2, r6
   b5590:	462b      	mov	r3, r5
   b5592:	b209      	sxth	r1, r1
   b5594:	4658      	mov	r0, fp
   b5596:	47a0      	blx	r4
        endWrite();
   b5598:	e7be      	b.n	b5518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b559a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b559c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b559e:	6812      	ldr	r2, [r2, #0]
   b55a0:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b55a2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b55a4:	b2ff      	uxtb	r7, r7
   b55a6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b55aa:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b55ae:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b55b0:	789a      	ldrb	r2, [r3, #2]
   b55b2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b55b4:	78da      	ldrb	r2, [r3, #3]
   b55b6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b55b8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55ba:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b55be:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55c2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b55c4:	d801      	bhi.n	b55ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b55c6:	2c01      	cmp	r4, #1
   b55c8:	d957      	bls.n	b567a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b55ca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b55ce:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b55d0:	fa0f f38a 	sxth.w	r3, sl
   b55d4:	9307      	str	r3, [sp, #28]
        startWrite();
   b55d6:	f8db 3000 	ldr.w	r3, [fp]
   b55da:	4658      	mov	r0, fp
   b55dc:	695b      	ldr	r3, [r3, #20]
   b55de:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55e0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55e2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55e6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55e8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55ec:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b55ee:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55f0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b55f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b55f4:	429f      	cmp	r7, r3
   b55f6:	d28f      	bcs.n	b5518 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55f8:	9b07      	ldr	r3, [sp, #28]
   b55fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b55fc:	443b      	add	r3, r7
   b55fe:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5602:	2200      	movs	r2, #0
   b5604:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5608:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b560a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b560e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5612:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5616:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5618:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b561a:	9905      	ldr	r1, [sp, #20]
   b561c:	4291      	cmp	r1, r2
   b561e:	d241      	bcs.n	b56a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5620:	1c5a      	adds	r2, r3, #1
   b5622:	b2d2      	uxtb	r2, r2
   b5624:	075b      	lsls	r3, r3, #29
   b5626:	920d      	str	r2, [sp, #52]	; 0x34
   b5628:	d107      	bne.n	b563a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b562a:	9b06      	ldr	r3, [sp, #24]
   b562c:	9906      	ldr	r1, [sp, #24]
   b562e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5630:	3301      	adds	r3, #1
   b5632:	b29b      	uxth	r3, r3
   b5634:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5638:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b563a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b563e:	d012      	beq.n	b5666 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5640:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5642:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5646:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b564a:	d11a      	bne.n	b5682 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b564c:	2c01      	cmp	r4, #1
   b564e:	d118      	bne.n	b5682 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5652:	699b      	ldr	r3, [r3, #24]
   b5654:	4411      	add	r1, r2
   b5656:	9a05      	ldr	r2, [sp, #20]
   b5658:	4411      	add	r1, r2
   b565a:	461e      	mov	r6, r3
   b565c:	4652      	mov	r2, sl
   b565e:	9b04      	ldr	r3, [sp, #16]
   b5660:	b209      	sxth	r1, r1
   b5662:	4658      	mov	r0, fp
   b5664:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5666:	9e05      	ldr	r6, [sp, #20]
   b5668:	3601      	adds	r6, #1
   b566a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b566c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5670:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5672:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5678:	e7ce      	b.n	b5618 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b567a:	2300      	movs	r3, #0
   b567c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5680:	e7a9      	b.n	b55d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5682:	9805      	ldr	r0, [sp, #20]
   b5684:	9a08      	ldr	r2, [sp, #32]
   b5686:	4402      	add	r2, r0
   b5688:	fb02 1105 	mla	r1, r2, r5, r1
   b568c:	9a04      	ldr	r2, [sp, #16]
   b568e:	e9cd 4200 	strd	r4, r2, [sp]
   b5692:	69db      	ldr	r3, [r3, #28]
   b5694:	ee18 2a10 	vmov	r2, s16
   b5698:	461e      	mov	r6, r3
   b569a:	b209      	sxth	r1, r1
   b569c:	462b      	mov	r3, r5
   b569e:	4658      	mov	r0, fp
   b56a0:	47b0      	blx	r6
   b56a2:	e7e0      	b.n	b5666 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b56a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b56a6:	3701      	adds	r7, #1
   b56a8:	4498      	add	r8, r3
   b56aa:	fa5f f888 	uxtb.w	r8, r8
   b56ae:	b2ff      	uxtb	r7, r7
   b56b0:	e79f      	b.n	b55f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b56b2:	b011      	add	sp, #68	; 0x44
   b56b4:	ecbd 8b02 	vpop	{d8}
   b56b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56bc:	000bc6e8 	.word	0x000bc6e8

000b56c0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b56c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b56c2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b56c4:	b085      	sub	sp, #20
   b56c6:	4604      	mov	r4, r0
   b56c8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b56ca:	2a00      	cmp	r2, #0
   b56cc:	d134      	bne.n	b5738 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b56ce:	290a      	cmp	r1, #10
   b56d0:	d108      	bne.n	b56e4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b56d2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b56d4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b56d6:	7e42      	ldrb	r2, [r0, #25]
   b56d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b56dc:	8263      	strh	r3, [r4, #18]
}
   b56de:	2001      	movs	r0, #1
   b56e0:	b005      	add	sp, #20
   b56e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b56e4:	290d      	cmp	r1, #13
   b56e6:	d0fa      	beq.n	b56de <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56e8:	7ee1      	ldrb	r1, [r4, #27]
   b56ea:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b56ec:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56ee:	b171      	cbz	r1, b570e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b56f0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b56f4:	2106      	movs	r1, #6
   b56f6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b56fa:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b56fe:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5700:	bfc1      	itttt	gt
   b5702:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5706:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5708:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b570c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b570e:	8ae2      	ldrh	r2, [r4, #22]
   b5710:	9201      	str	r2, [sp, #4]
   b5712:	8aa2      	ldrh	r2, [r4, #20]
   b5714:	9200      	str	r2, [sp, #0]
   b5716:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b571a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b571e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5722:	4620      	mov	r0, r4
   b5724:	f7ff fe5e 	bl	b53e4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5728:	7e23      	ldrb	r3, [r4, #24]
   b572a:	8a22      	ldrh	r2, [r4, #16]
   b572c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5730:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5734:	8223      	strh	r3, [r4, #16]
   b5736:	e7d2      	b.n	b56de <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5738:	290a      	cmp	r1, #10
   b573a:	d107      	bne.n	b574c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b573c:	2300      	movs	r3, #0
   b573e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5740:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5742:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5744:	8a43      	ldrh	r3, [r0, #18]
   b5746:	fb01 3302 	mla	r3, r1, r2, r3
   b574a:	e7c7      	b.n	b56dc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b574c:	290d      	cmp	r1, #13
   b574e:	d0c6      	beq.n	b56de <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5750:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5752:	42a9      	cmp	r1, r5
   b5754:	d3c3      	bcc.n	b56de <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5756:	7a51      	ldrb	r1, [r2, #9]
   b5758:	4299      	cmp	r1, r3
   b575a:	d3c0      	bcc.n	b56de <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b575c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b575e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5760:	b2ed      	uxtb	r5, r5
   b5762:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5766:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5768:	b328      	cbz	r0, b57b6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b576a:	78e9      	ldrb	r1, [r5, #3]
   b576c:	b319      	cbz	r1, b57b6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b576e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5770:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5772:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5774:	b191      	cbz	r1, b579c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5776:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b577a:	4408      	add	r0, r1
   b577c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5780:	fb06 1100 	mla	r1, r6, r0, r1
   b5784:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5788:	4281      	cmp	r1, r0
   b578a:	dd07      	ble.n	b579c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b578c:	2000      	movs	r0, #0
   b578e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5790:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5794:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5796:	fb02 1207 	mla	r2, r2, r7, r1
   b579a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b579c:	8ae2      	ldrh	r2, [r4, #22]
   b579e:	9201      	str	r2, [sp, #4]
   b57a0:	8aa2      	ldrh	r2, [r4, #20]
   b57a2:	9200      	str	r2, [sp, #0]
   b57a4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b57a8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b57ac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7ff fe17 	bl	b53e4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b57b6:	7929      	ldrb	r1, [r5, #4]
   b57b8:	7e22      	ldrb	r2, [r4, #24]
   b57ba:	8a23      	ldrh	r3, [r4, #16]
   b57bc:	fb01 3302 	mla	r3, r1, r2, r3
   b57c0:	e7b8      	b.n	b5734 <_ZN12Adafruit_GFX5writeEh+0x74>

000b57c2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b57c2:	2901      	cmp	r1, #1
   b57c4:	bf38      	it	cc
   b57c6:	2101      	movcc	r1, #1
   b57c8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b57ca:	7641      	strb	r1, [r0, #25]
}
   b57cc:	4770      	bx	lr
	...

000b57d0 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b57d0:	b510      	push	{r4, lr}
   b57d2:	4b06      	ldr	r3, [pc, #24]	; (b57ec <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b57d4:	6003      	str	r3, [r0, #0]
   b57d6:	4604      	mov	r4, r0
	if (mutex) {
   b57d8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b57da:	b108      	cbz	r0, b57e0 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b57dc:	f001 f98e 	bl	b6afc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b57e0:	4620      	mov	r0, r4
   b57e2:	f000 f8d1 	bl	b5988 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b57e6:	4620      	mov	r0, r4
   b57e8:	bd10      	pop	{r4, pc}
   b57ea:	bf00      	nop
   b57ec:	000bcc48 	.word	0x000bcc48

000b57f0 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b57f0:	b510      	push	{r4, lr}
   b57f2:	4604      	mov	r4, r0
}
   b57f4:	f7ff ffec 	bl	b57d0 <_ZN16OledWingAdafruitD1Ev>
   b57f8:	4620      	mov	r0, r4
   b57fa:	2170      	movs	r1, #112	; 0x70
   b57fc:	f7ff f95f 	bl	b4abe <_ZdlPvj>
   b5800:	4620      	mov	r0, r4
   b5802:	bd10      	pop	{r4, pc}

000b5804 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5804:	b530      	push	{r4, r5, lr}
   b5806:	b085      	sub	sp, #20
   b5808:	4604      	mov	r4, r0
   b580a:	460d      	mov	r5, r1
   b580c:	f004 fd30 	bl	ba270 <_Z19__fetch_global_Wirev>
   b5810:	4a10      	ldr	r2, [pc, #64]	; (b5854 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5812:	4911      	ldr	r1, [pc, #68]	; (b5858 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5814:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5818:	f04f 32ff 	mov.w	r2, #4294967295
   b581c:	2180      	movs	r1, #128	; 0x80
   b581e:	4603      	mov	r3, r0
   b5820:	9200      	str	r2, [sp, #0]
   b5822:	4620      	mov	r0, r4
   b5824:	2220      	movs	r2, #32
   b5826:	f000 f927 	bl	b5a78 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b582a:	4b0c      	ldr	r3, [pc, #48]	; (b585c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b582c:	6023      	str	r3, [r4, #0]
   b582e:	2300      	movs	r3, #0
   b5830:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5834:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5838:	f000 f854 	bl	b58e4 <_ZN8DebounceC1Ev>
   b583c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5840:	f000 f850 	bl	b58e4 <_ZN8DebounceC1Ev>
   b5844:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5848:	f000 f84c 	bl	b58e4 <_ZN8DebounceC1Ev>
}
   b584c:	4620      	mov	r0, r4
   b584e:	b005      	add	sp, #20
   b5850:	bd30      	pop	{r4, r5, pc}
   b5852:	bf00      	nop
   b5854:	00061a80 	.word	0x00061a80
   b5858:	000186a0 	.word	0x000186a0
   b585c:	000bcc48 	.word	0x000bcc48

000b5860 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5860:	b513      	push	{r0, r1, r4, lr}
   b5862:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5864:	3050      	adds	r0, #80	; 0x50
   b5866:	f001 f941 	bl	b6aec <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b586a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b586c:	07d9      	lsls	r1, r3, #31
   b586e:	d505      	bpl.n	b587c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5870:	2202      	movs	r2, #2
   b5872:	2104      	movs	r1, #4
   b5874:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5878:	f000 f848 	bl	b590c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b587c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b587e:	079a      	lsls	r2, r3, #30
   b5880:	d505      	bpl.n	b588e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5882:	2200      	movs	r2, #0
   b5884:	2103      	movs	r1, #3
   b5886:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b588a:	f000 f83f 	bl	b590c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b588e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5890:	075b      	lsls	r3, r3, #29
   b5892:	d505      	bpl.n	b58a0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5894:	2202      	movs	r2, #2
   b5896:	4611      	mov	r1, r2
   b5898:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b589c:	f000 f836 	bl	b590c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b58a0:	2301      	movs	r3, #1
   b58a2:	9300      	str	r3, [sp, #0]
   b58a4:	223c      	movs	r2, #60	; 0x3c
   b58a6:	2102      	movs	r1, #2
   b58a8:	4620      	mov	r0, r4
   b58aa:	f000 f9ed 	bl	b5c88 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b58ae:	b002      	add	sp, #8
   b58b0:	bd10      	pop	{r4, pc}

000b58b2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b58b2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b58b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b58b6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b58b8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b58ba:	d502      	bpl.n	b58c2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b58bc:	3058      	adds	r0, #88	; 0x58
   b58be:	f000 f832 	bl	b5926 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b58c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b58c4:	079a      	lsls	r2, r3, #30
   b58c6:	d503      	bpl.n	b58d0 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b58c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b58cc:	f000 f82b 	bl	b5926 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b58d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b58d2:	075b      	lsls	r3, r3, #29
   b58d4:	d505      	bpl.n	b58e2 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b58d6:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b58da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b58de:	f000 b822 	b.w	b5926 <_ZN8Debounce6updateEv>
}
   b58e2:	bd10      	pop	{r4, pc}

000b58e4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b58e4:	2100      	movs	r1, #0
   b58e6:	220a      	movs	r2, #10
   b58e8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b58ec:	4770      	bx	lr

000b58ee <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b58ee:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b58f0:	b510      	push	{r4, lr}
   b58f2:	4604      	mov	r4, r0
    this->pin = pin;
   b58f4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b58f6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b58f8:	b288      	uxth	r0, r1
   b58fa:	f004 fc4b 	bl	ba194 <digitalRead>
   b58fe:	b108      	cbz	r0, b5904 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5900:	2303      	movs	r3, #3
   b5902:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5904:	f001 f8b6 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5908:	6020      	str	r0, [r4, #0]
#endif
}
   b590a:	bd10      	pop	{r4, pc}

000b590c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b590c:	b538      	push	{r3, r4, r5, lr}
   b590e:	460c      	mov	r4, r1
   b5910:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5912:	4611      	mov	r1, r2
   b5914:	b2a0      	uxth	r0, r4
   b5916:	f004 fc13 	bl	ba140 <pinMode>
  
  this->attach(pin);
   b591a:	4621      	mov	r1, r4
   b591c:	4628      	mov	r0, r5
}
   b591e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5922:	f7ff bfe4 	b.w	b58ee <_ZN8Debounce6attachEi>

000b5926 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5926:	b538      	push	{r3, r4, r5, lr}
   b5928:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b592a:	79c0      	ldrb	r0, [r0, #7]
   b592c:	f004 fc32 	bl	ba194 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5930:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5932:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5934:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5938:	bf18      	it	ne
   b593a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b593c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5940:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5942:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5944:	d00a      	beq.n	b595c <_ZN8Debounce6updateEv+0x36>
   b5946:	f001 f895 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b594a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b594c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b594e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5952:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5954:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5956:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b595a:	bd38      	pop	{r3, r4, r5, pc}
   b595c:	f001 f88a 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5960:	6823      	ldr	r3, [r4, #0]
   b5962:	1ac0      	subs	r0, r0, r3
   b5964:	88a3      	ldrh	r3, [r4, #4]
   b5966:	4298      	cmp	r0, r3
   b5968:	d3f4      	bcc.n	b5954 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b596a:	79a3      	ldrb	r3, [r4, #6]
   b596c:	f003 0301 	and.w	r3, r3, #1
   b5970:	42ab      	cmp	r3, r5
   b5972:	d0ef      	beq.n	b5954 <_ZN8Debounce6updateEv+0x2e>
   b5974:	f001 f87e 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5978:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b597a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b597c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5980:	f043 0308 	orr.w	r3, r3, #8
   b5984:	e7e5      	b.n	b5952 <_ZN8Debounce6updateEv+0x2c>
	...

000b5988 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5988:	b510      	push	{r4, lr}
   b598a:	4b04      	ldr	r3, [pc, #16]	; (b599c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b598c:	6003      	str	r3, [r0, #0]
   b598e:	4604      	mov	r4, r0
  if(buffer) {
   b5990:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5992:	b108      	cbz	r0, b5998 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5994:	f001 fb26 	bl	b6fe4 <free>
    buffer = NULL;
  }
}
   b5998:	4620      	mov	r0, r4
   b599a:	bd10      	pop	{r4, pc}
   b599c:	000bd154 	.word	0x000bd154

000b59a0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b59a0:	b510      	push	{r4, lr}
   b59a2:	4604      	mov	r4, r0
}
   b59a4:	f7ff fff0 	bl	b5988 <_ZN16Adafruit_SSD1306D1Ev>
   b59a8:	4620      	mov	r0, r4
   b59aa:	2150      	movs	r1, #80	; 0x50
   b59ac:	f7ff f887 	bl	b4abe <_ZdlPvj>
   b59b0:	4620      	mov	r0, r4
   b59b2:	bd10      	pop	{r4, pc}

000b59b4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b59b4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b59b6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b59b8:	db4b      	blt.n	b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59ba:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b59be:	428c      	cmp	r4, r1
   b59c0:	dd47      	ble.n	b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59c2:	2a00      	cmp	r2, #0
   b59c4:	db45      	blt.n	b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59c6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b59ca:	4294      	cmp	r4, r2
   b59cc:	dd41      	ble.n	b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b59ce:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b59d0:	2c02      	cmp	r4, #2
   b59d2:	d01f      	beq.n	b5a14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b59d4:	2c03      	cmp	r4, #3
   b59d6:	d026      	beq.n	b5a26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b59d8:	2c01      	cmp	r4, #1
   b59da:	d104      	bne.n	b59e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b59dc:	8904      	ldrh	r4, [r0, #8]
   b59de:	43d2      	mvns	r2, r2
   b59e0:	4414      	add	r4, r2
      break;
   b59e2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b59e4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b59e6:	2b01      	cmp	r3, #1
   b59e8:	d023      	beq.n	b5a32 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b59ea:	2b02      	cmp	r3, #2
   b59ec:	d032      	beq.n	b5a54 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b59ee:	bb83      	cbnz	r3, b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b59f0:	2a00      	cmp	r2, #0
   b59f2:	4613      	mov	r3, r2
   b59f4:	8904      	ldrh	r4, [r0, #8]
   b59f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59f8:	bfb8      	it	lt
   b59fa:	1dd3      	addlt	r3, r2, #7
   b59fc:	10db      	asrs	r3, r3, #3
   b59fe:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5a02:	f002 0207 	and.w	r2, r2, #7
   b5a06:	2301      	movs	r3, #1
   b5a08:	4093      	lsls	r3, r2
   b5a0a:	5c42      	ldrb	r2, [r0, r1]
   b5a0c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5a10:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5a12:	e01e      	b.n	b5a52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5a14:	8904      	ldrh	r4, [r0, #8]
   b5a16:	3c01      	subs	r4, #1
   b5a18:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5a1a:	8944      	ldrh	r4, [r0, #10]
   b5a1c:	43d2      	mvns	r2, r2
   b5a1e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5a20:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5a22:	b212      	sxth	r2, r2
      break;
   b5a24:	e7df      	b.n	b59e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5a26:	8944      	ldrh	r4, [r0, #10]
   b5a28:	3c01      	subs	r4, #1
   b5a2a:	1a64      	subs	r4, r4, r1
      break;
   b5a2c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5a2e:	b222      	sxth	r2, r4
      break;
   b5a30:	e7d9      	b.n	b59e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5a32:	2a00      	cmp	r2, #0
   b5a34:	8904      	ldrh	r4, [r0, #8]
   b5a36:	4613      	mov	r3, r2
   b5a38:	bfb8      	it	lt
   b5a3a:	1dd3      	addlt	r3, r2, #7
   b5a3c:	10db      	asrs	r3, r3, #3
   b5a3e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5a42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5a44:	f002 0007 	and.w	r0, r2, #7
   b5a48:	2201      	movs	r2, #1
   b5a4a:	4082      	lsls	r2, r0
   b5a4c:	5c58      	ldrb	r0, [r3, r1]
   b5a4e:	4302      	orrs	r2, r0
   b5a50:	545a      	strb	r2, [r3, r1]
}
   b5a52:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5a54:	2a00      	cmp	r2, #0
   b5a56:	4613      	mov	r3, r2
   b5a58:	8904      	ldrh	r4, [r0, #8]
   b5a5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5a5c:	bfb8      	it	lt
   b5a5e:	1dd3      	addlt	r3, r2, #7
   b5a60:	10db      	asrs	r3, r3, #3
   b5a62:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5a66:	f002 0207 	and.w	r2, r2, #7
   b5a6a:	2301      	movs	r3, #1
   b5a6c:	fa03 f202 	lsl.w	r2, r3, r2
   b5a70:	5c43      	ldrb	r3, [r0, r1]
   b5a72:	405a      	eors	r2, r3
   b5a74:	e7cc      	b.n	b5a10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5a78 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5a78:	b570      	push	{r4, r5, r6, lr}
   b5a7a:	4604      	mov	r4, r0
   b5a7c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a7e:	2600      	movs	r6, #0
   b5a80:	f7ff fc46 	bl	b5310 <_ZN12Adafruit_GFXC1Ess>
   b5a84:	4b11      	ldr	r3, [pc, #68]	; (b5acc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5a86:	6023      	str	r3, [r4, #0]
   b5a88:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5a8a:	b915      	cbnz	r5, b5a92 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5a8c:	f004 fbf0 	bl	ba270 <_Z19__fetch_global_Wirev>
   b5a90:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a92:	23ff      	movs	r3, #255	; 0xff
   b5a94:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5a98:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5a9c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5aa0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5aa4:	4b0a      	ldr	r3, [pc, #40]	; (b5ad0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5aa6:	63a3      	str	r3, [r4, #56]	; 0x38
   b5aa8:	2301      	movs	r3, #1
   b5aaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5aae:	9b05      	ldr	r3, [sp, #20]
   b5ab0:	64a3      	str	r3, [r4, #72]	; 0x48
   b5ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5ab6:	9b06      	ldr	r3, [sp, #24]
   b5ab8:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5aba:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5abe:	6426      	str	r6, [r4, #64]	; 0x40
   b5ac0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5ac4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	bd70      	pop	{r4, r5, r6, pc}
   b5aca:	bf00      	nop
   b5acc:	000bd154 	.word	0x000bd154
   b5ad0:	000bcca0 	.word	0x000bcca0

000b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ad6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5ad8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5ada:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5adc:	b190      	cbz	r0, b5b04 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5ade:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5ae2:	f003 fd51 	bl	b9588 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5ae6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ae8:	6803      	ldr	r3, [r0, #0]
   b5aea:	2100      	movs	r1, #0
   b5aec:	689b      	ldr	r3, [r3, #8]
   b5aee:	4798      	blx	r3
    WIRE_WRITE(c);
   b5af0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5af2:	6803      	ldr	r3, [r0, #0]
   b5af4:	4629      	mov	r1, r5
   b5af6:	689b      	ldr	r3, [r3, #8]
   b5af8:	4798      	blx	r3
    wire->endTransmission();
   b5afa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5b00:	f003 bd49 	b.w	b9596 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5b04:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5b08:	4601      	mov	r1, r0
   b5b0a:	b298      	uxth	r0, r3
   b5b0c:	f004 fb29 	bl	ba162 <digitalWrite>
  if(spi) {
   b5b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b12:	b120      	cbz	r0, b5b1e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5b14:	4629      	mov	r1, r5
}
   b5b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5b1a:	f001 bb8d 	b.w	b7238 <_ZN8SPIClass8transferEh>
   b5b1e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5b20:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5b22:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5b26:	ea05 0107 	and.w	r1, r5, r7
   b5b2a:	b280      	uxth	r0, r0
   b5b2c:	f004 fb19 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5b30:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b34:	2101      	movs	r1, #1
   b5b36:	b280      	uxth	r0, r0
   b5b38:	f004 fb13 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5b3c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b40:	2100      	movs	r1, #0
   b5b42:	b280      	uxth	r0, r0
   b5b44:	f004 fb0d 	bl	ba162 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5b48:	3e01      	subs	r6, #1
   b5b4a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5b4e:	d1e8      	bne.n	b5b22 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b52 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5b52:	b538      	push	{r3, r4, r5, lr}
   b5b54:	4604      	mov	r4, r0
  TRANSACTION_START
   b5b56:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5b58:	460d      	mov	r5, r1
  TRANSACTION_START
   b5b5a:	b180      	cbz	r0, b5b7e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5b5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5b5e:	f003 fd05 	bl	b956c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5b62:	2d00      	cmp	r5, #0
   b5b64:	4620      	mov	r0, r4
   b5b66:	bf14      	ite	ne
   b5b68:	21a7      	movne	r1, #167	; 0xa7
   b5b6a:	21a6      	moveq	r1, #166	; 0xa6
   b5b6c:	f7ff ffb2 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b72:	b188      	cbz	r0, b5b98 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5b74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5b7a:	f003 bcf7 	b.w	b956c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b80:	b118      	cbz	r0, b5b8a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5b82:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5b86:	f001 fae9 	bl	b715c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5b8a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b8e:	2100      	movs	r1, #0
   b5b90:	b280      	uxth	r0, r0
   b5b92:	f004 fae6 	bl	ba162 <digitalWrite>
   b5b96:	e7e4      	b.n	b5b62 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5b98:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b9c:	2101      	movs	r1, #1
   b5b9e:	b280      	uxth	r0, r0
   b5ba0:	f004 fadf 	bl	ba162 <digitalWrite>
   b5ba4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ba6:	b118      	cbz	r0, b5bb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5bac:	f001 babc 	b.w	b7128 <_ZN8SPIClass14endTransactionEv>
}
   b5bb0:	bd38      	pop	{r3, r4, r5, pc}

000b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5bb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5bb6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5bb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5bba:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5bbc:	188f      	adds	r7, r1, r2
   b5bbe:	b340      	cbz	r0, b5c12 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5bc0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5bc4:	f003 fce0 	bl	b9588 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5bc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bca:	6803      	ldr	r3, [r0, #0]
   b5bcc:	2100      	movs	r1, #0
   b5bce:	689b      	ldr	r3, [r3, #8]
   b5bd0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5bd2:	2601      	movs	r6, #1
    while(n--) {
   b5bd4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5bd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5bd8:	d017      	beq.n	b5c0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5bda:	2e1f      	cmp	r6, #31
   b5bdc:	d90c      	bls.n	b5bf8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5bde:	f003 fcda 	bl	b9596 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5be2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5be8:	f003 fcce 	bl	b9588 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5bec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bee:	6803      	ldr	r3, [r0, #0]
   b5bf0:	2100      	movs	r1, #0
   b5bf2:	689b      	ldr	r3, [r3, #8]
   b5bf4:	4798      	blx	r3
        bytesOut = 1;
   b5bf6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5bf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bfa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5bfe:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5c00:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5c02:	689b      	ldr	r3, [r3, #8]
   b5c04:	4798      	blx	r3
      bytesOut++;
   b5c06:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5c08:	e7e4      	b.n	b5bd4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5c0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5c0e:	f003 bcc2 	b.w	b9596 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5c12:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5c16:	4601      	mov	r1, r0
   b5c18:	b298      	uxth	r0, r3
   b5c1a:	f004 faa2 	bl	ba162 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5c1e:	42bd      	cmp	r5, r7
   b5c20:	d022      	beq.n	b5c68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5c22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5c24:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5c28:	b118      	cbz	r0, b5c32 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5c2a:	4649      	mov	r1, r9
   b5c2c:	f001 fb04 	bl	b7238 <_ZN8SPIClass8transferEh>
   b5c30:	e7f5      	b.n	b5c1e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5c32:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5c34:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5c38:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5c3c:	ea09 0108 	and.w	r1, r9, r8
   b5c40:	b280      	uxth	r0, r0
   b5c42:	f004 fa8e 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5c46:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5c4a:	2101      	movs	r1, #1
   b5c4c:	b280      	uxth	r0, r0
   b5c4e:	f004 fa88 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5c52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5c56:	2100      	movs	r1, #0
   b5c58:	b280      	uxth	r0, r0
   b5c5a:	f004 fa82 	bl	ba162 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5c5e:	3e01      	subs	r6, #1
   b5c60:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5c64:	d1e8      	bne.n	b5c38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5c66:	e7da      	b.n	b5c1e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5c6c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5c6c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5c70:	1dda      	adds	r2, r3, #7
   b5c72:	bf48      	it	mi
   b5c74:	f103 020e 	addmi.w	r2, r3, #14
   b5c78:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5c7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c7e:	10d2      	asrs	r2, r2, #3
   b5c80:	435a      	muls	r2, r3
   b5c82:	2100      	movs	r1, #0
   b5c84:	f004 bc7c 	b.w	ba580 <memset>

000b5c88 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5c88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c8c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5c90:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5c94:	4604      	mov	r4, r0
   b5c96:	460f      	mov	r7, r1
   b5c98:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c9a:	b1c3      	cbz	r3, b5cce <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	f7ff ffe5 	bl	b5c6c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5ca2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5ca6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5caa:	2820      	cmp	r0, #32
   b5cac:	dc21      	bgt.n	b5cf2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5cae:	2320      	movs	r3, #32
   b5cb0:	2201      	movs	r2, #1
   b5cb2:	3820      	subs	r0, #32
   b5cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5cb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5cbc:	2373      	movs	r3, #115	; 0x73
   b5cbe:	3973      	subs	r1, #115	; 0x73
   b5cc0:	9300      	str	r3, [sp, #0]
   b5cc2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5cc6:	4b89      	ldr	r3, [pc, #548]	; (b5eec <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5cc8:	f340 024f 	sbfx	r2, r0, #1, #16
   b5ccc:	e021      	b.n	b5d12 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5cce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5cd2:	1dd8      	adds	r0, r3, #7
   b5cd4:	bf48      	it	mi
   b5cd6:	f103 000e 	addmi.w	r0, r3, #14
   b5cda:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5cde:	10c0      	asrs	r0, r0, #3
   b5ce0:	4358      	muls	r0, r3
   b5ce2:	f001 f977 	bl	b6fd4 <malloc>
   b5ce6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5ce8:	2800      	cmp	r0, #0
   b5cea:	d1d7      	bne.n	b5c9c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5cec:	b004      	add	sp, #16
   b5cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5cf2:	3840      	subs	r0, #64	; 0x40
   b5cf4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5cf8:	fa02 f280 	sxtah	r2, r2, r0
   b5cfc:	2340      	movs	r3, #64	; 0x40
   b5cfe:	2001      	movs	r0, #1
   b5d00:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5d04:	2352      	movs	r3, #82	; 0x52
   b5d06:	3952      	subs	r1, #82	; 0x52
   b5d08:	9300      	str	r3, [sp, #0]
   b5d0a:	4b79      	ldr	r3, [pc, #484]	; (b5ef0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5d0c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5d10:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5d12:	4620      	mov	r0, r4
   b5d14:	f341 014f 	sbfx	r1, r1, #1, #16
   b5d18:	f7ff fb10 	bl	b533c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5d1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5d1e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5d22:	2800      	cmp	r0, #0
   b5d24:	d078      	beq.n	b5e18 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5d26:	2d00      	cmp	r5, #0
   b5d28:	d174      	bne.n	b5e14 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5d2a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5d2e:	2b20      	cmp	r3, #32
   b5d30:	bf0c      	ite	eq
   b5d32:	253c      	moveq	r5, #60	; 0x3c
   b5d34:	253d      	movne	r5, #61	; 0x3d
   b5d36:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5d3a:	f1b8 0f00 	cmp.w	r8, #0
   b5d3e:	d001      	beq.n	b5d44 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5d40:	f003 fc18 	bl	b9574 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5d44:	b1fe      	cbz	r6, b5d86 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5d46:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	db1b      	blt.n	b5d86 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5d4e:	2101      	movs	r1, #1
   b5d50:	b280      	uxth	r0, r0
   b5d52:	f004 f9f5 	bl	ba140 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5d56:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d5a:	2101      	movs	r1, #1
   b5d5c:	b280      	uxth	r0, r0
   b5d5e:	f004 fa00 	bl	ba162 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5d62:	2001      	movs	r0, #1
   b5d64:	f003 f98a 	bl	b907c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5d68:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d6c:	2100      	movs	r1, #0
   b5d6e:	b280      	uxth	r0, r0
   b5d70:	f004 f9f7 	bl	ba162 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5d74:	200a      	movs	r0, #10
   b5d76:	f003 f981 	bl	b907c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5d7a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d7e:	2101      	movs	r1, #1
   b5d80:	b280      	uxth	r0, r0
   b5d82:	f004 f9ee 	bl	ba162 <digitalWrite>
  TRANSACTION_START
   b5d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	d074      	beq.n	b5e76 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5d8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5d8e:	f003 fbed 	bl	b956c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5d92:	2204      	movs	r2, #4
   b5d94:	4957      	ldr	r1, [pc, #348]	; (b5ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5d96:	4620      	mov	r0, r4
   b5d98:	f7ff ff0b 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5d9c:	8961      	ldrh	r1, [r4, #10]
   b5d9e:	3901      	subs	r1, #1
   b5da0:	b2c9      	uxtb	r1, r1
   b5da2:	4620      	mov	r0, r4
   b5da4:	f7ff fe96 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5da8:	4953      	ldr	r1, [pc, #332]	; (b5ef8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5daa:	2204      	movs	r2, #4
   b5dac:	4620      	mov	r0, r4
   b5dae:	f7ff ff00 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5db2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5db6:	2b01      	cmp	r3, #1
   b5db8:	bf0c      	ite	eq
   b5dba:	2110      	moveq	r1, #16
   b5dbc:	2114      	movne	r1, #20
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f7ff fe88 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5dc4:	2204      	movs	r2, #4
   b5dc6:	494d      	ldr	r1, [pc, #308]	; (b5efc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5dc8:	4620      	mov	r0, r4
   b5dca:	f7ff fef2 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5dce:	68a3      	ldr	r3, [r4, #8]
   b5dd0:	4a4b      	ldr	r2, [pc, #300]	; (b5f00 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5dd2:	4293      	cmp	r3, r2
   b5dd4:	d15c      	bne.n	b5e90 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5dd6:	494b      	ldr	r1, [pc, #300]	; (b5f04 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5dd8:	2204      	movs	r2, #4
   b5dda:	4620      	mov	r0, r4
   b5ddc:	f7ff fee9 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5de0:	21d9      	movs	r1, #217	; 0xd9
   b5de2:	4620      	mov	r0, r4
   b5de4:	f7ff fe76 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5de8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5dec:	2b01      	cmp	r3, #1
   b5dee:	bf0c      	ite	eq
   b5df0:	2122      	moveq	r1, #34	; 0x22
   b5df2:	21f1      	movne	r1, #241	; 0xf1
   b5df4:	4620      	mov	r0, r4
   b5df6:	f7ff fe6d 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5dfa:	4620      	mov	r0, r4
   b5dfc:	4942      	ldr	r1, [pc, #264]	; (b5f08 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5dfe:	2206      	movs	r2, #6
   b5e00:	f7ff fed7 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5e04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e06:	2800      	cmp	r0, #0
   b5e08:	d063      	beq.n	b5ed2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5e0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5e0c:	f003 fbae 	bl	b956c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5e10:	2001      	movs	r0, #1
   b5e12:	e76b      	b.n	b5cec <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5e14:	b26d      	sxtb	r5, r5
   b5e16:	e78e      	b.n	b5d36 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5e18:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5e1c:	2101      	movs	r1, #1
   b5e1e:	b280      	uxth	r0, r0
   b5e20:	f004 f98e 	bl	ba140 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5e24:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e28:	2101      	movs	r1, #1
   b5e2a:	b280      	uxth	r0, r0
   b5e2c:	f004 f988 	bl	ba140 <pinMode>
    SSD1306_DESELECT
   b5e30:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e34:	2101      	movs	r1, #1
   b5e36:	b280      	uxth	r0, r0
   b5e38:	f004 f993 	bl	ba162 <digitalWrite>
    if(spi) { // Hardware SPI
   b5e3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5e3e:	b13d      	cbz	r5, b5e50 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5e40:	f1b8 0f00 	cmp.w	r8, #0
   b5e44:	f43f af7e 	beq.w	b5d44 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5e48:	4628      	mov	r0, r5
   b5e4a:	f001 f959 	bl	b7100 <_ZN8SPIClass5beginEv>
   b5e4e:	e779      	b.n	b5d44 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5e50:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5e54:	2101      	movs	r1, #1
   b5e56:	b280      	uxth	r0, r0
   b5e58:	f004 f972 	bl	ba140 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5e5c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e60:	2101      	movs	r1, #1
   b5e62:	b280      	uxth	r0, r0
   b5e64:	f004 f96c 	bl	ba140 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5e68:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e6c:	4629      	mov	r1, r5
   b5e6e:	b280      	uxth	r0, r0
   b5e70:	f004 f977 	bl	ba162 <digitalWrite>
   b5e74:	e766      	b.n	b5d44 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e78:	b118      	cbz	r0, b5e82 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5e7a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5e7e:	f001 f96d 	bl	b715c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5e82:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e86:	2100      	movs	r1, #0
   b5e88:	b280      	uxth	r0, r0
   b5e8a:	f004 f96a 	bl	ba162 <digitalWrite>
   b5e8e:	e780      	b.n	b5d92 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5e90:	4a1e      	ldr	r2, [pc, #120]	; (b5f0c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5e92:	4293      	cmp	r3, r2
   b5e94:	d10e      	bne.n	b5eb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5e96:	491e      	ldr	r1, [pc, #120]	; (b5f10 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5e98:	2203      	movs	r2, #3
   b5e9a:	4620      	mov	r0, r4
   b5e9c:	f7ff fe89 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5ea0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5ea4:	2b01      	cmp	r3, #1
   b5ea6:	bf0c      	ite	eq
   b5ea8:	219f      	moveq	r1, #159	; 0x9f
   b5eaa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5eac:	4620      	mov	r0, r4
   b5eae:	f7ff fe11 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5eb2:	e795      	b.n	b5de0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5eb4:	4a17      	ldr	r2, [pc, #92]	; (b5f14 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5eb6:	4293      	cmp	r3, r2
   b5eb8:	d192      	bne.n	b5de0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5eba:	4917      	ldr	r1, [pc, #92]	; (b5f18 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5ebc:	2203      	movs	r2, #3
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	f7ff fe77 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5ec4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5ec8:	2b01      	cmp	r3, #1
   b5eca:	bf0c      	ite	eq
   b5ecc:	2110      	moveq	r1, #16
   b5ece:	21af      	movne	r1, #175	; 0xaf
   b5ed0:	e7ec      	b.n	b5eac <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5ed2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5ed6:	2101      	movs	r1, #1
   b5ed8:	b280      	uxth	r0, r0
   b5eda:	f004 f942 	bl	ba162 <digitalWrite>
   b5ede:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ee0:	2800      	cmp	r0, #0
   b5ee2:	d095      	beq.n	b5e10 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5ee4:	f001 f920 	bl	b7128 <_ZN8SPIClass14endTransactionEv>
   b5ee8:	e792      	b.n	b5e10 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5eea:	bf00      	nop
   b5eec:	000bcf6c 	.word	0x000bcf6c
   b5ef0:	000bccac 	.word	0x000bccac
   b5ef4:	000bd1b4 	.word	0x000bd1b4
   b5ef8:	000bd1b8 	.word	0x000bd1b8
   b5efc:	000bd1bc 	.word	0x000bd1bc
   b5f00:	00200080 	.word	0x00200080
   b5f04:	000bd1c6 	.word	0x000bd1c6
   b5f08:	000bd1c0 	.word	0x000bd1c0
   b5f0c:	00400080 	.word	0x00400080
   b5f10:	000bd1ca 	.word	0x000bd1ca
   b5f14:	00100060 	.word	0x00100060
   b5f18:	000bd1cd 	.word	0x000bd1cd

000b5f1c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f1c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5f1e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f20:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5f24:	db3d      	blt.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f26:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5f2a:	4294      	cmp	r4, r2
   b5f2c:	dd39      	ble.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5f2e:	2900      	cmp	r1, #0
      w += x;
   b5f30:	bfbe      	ittt	lt
   b5f32:	185b      	addlt	r3, r3, r1
   b5f34:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5f36:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5f38:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5f3c:	18ce      	adds	r6, r1, r3
   b5f3e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5f40:	bfc4      	itt	gt
   b5f42:	1a63      	subgt	r3, r4, r1
   b5f44:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5f46:	2b00      	cmp	r3, #0
   b5f48:	dd2b      	ble.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5f4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5f4c:	10d6      	asrs	r6, r2, #3
   b5f4e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5f52:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5f54:	f002 0007 	and.w	r0, r2, #7
   b5f58:	2201      	movs	r2, #1
   b5f5a:	4082      	lsls	r2, r0
      switch(color) {
   b5f5c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5f5e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5f60:	d016      	beq.n	b5f90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5f62:	2d02      	cmp	r5, #2
   b5f64:	d00b      	beq.n	b5f7e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5f66:	b9e5      	cbnz	r5, b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5f68:	43d2      	mvns	r2, r2
   b5f6a:	b2d2      	uxtb	r2, r2
   b5f6c:	440b      	add	r3, r1
   b5f6e:	4299      	cmp	r1, r3
   b5f70:	d017      	beq.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f72:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f76:	4010      	ands	r0, r2
   b5f78:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f7c:	e7f7      	b.n	b5f6e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5f7e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5f80:	4299      	cmp	r1, r3
   b5f82:	d00e      	beq.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f84:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f88:	4050      	eors	r0, r2
   b5f8a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f8e:	e7f7      	b.n	b5f80 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5f90:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5f92:	4299      	cmp	r1, r3
   b5f94:	d005      	beq.n	b5fa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f96:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f9a:	4310      	orrs	r0, r2
   b5f9c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5fa0:	e7f7      	b.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5fa2:	bd70      	pop	{r4, r5, r6, pc}

000b5fa4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5fa6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5fa8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5fac:	db76      	blt.n	b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5fae:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5fb2:	42b1      	cmp	r1, r6
   b5fb4:	da72      	bge.n	b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5fb6:	2a00      	cmp	r2, #0
      __h += __y;
   b5fb8:	bfbe      	ittt	lt
   b5fba:	189b      	addlt	r3, r3, r2
   b5fbc:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5fbe:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5fc0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5fc4:	18d7      	adds	r7, r2, r3
   b5fc6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5fc8:	bfc4      	itt	gt
   b5fca:	1aa3      	subgt	r3, r4, r2
   b5fcc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5fce:	2b00      	cmp	r3, #0
   b5fd0:	dd64      	ble.n	b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5fd2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5fd6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5fd8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5fdc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5fe0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5fe2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5fe6:	d023      	beq.n	b6030 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5fe8:	f1c2 0208 	rsb	r2, r2, #8
   b5fec:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5fee:	492d      	ldr	r1, [pc, #180]	; (b60a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5ff0:	4293      	cmp	r3, r2
   b5ff2:	bf3c      	itt	cc
   b5ff4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5ff8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5ffc:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5ffe:	bf3c      	itt	cc
   b6000:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6004:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6008:	2d01      	cmp	r5, #1
   b600a:	d007      	beq.n	b601c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b600c:	2d02      	cmp	r5, #2
   b600e:	d02e      	beq.n	b606e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6010:	b94d      	cbnz	r5, b6026 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6012:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6016:	ea2c 0101 	bic.w	r1, ip, r1
   b601a:	e003      	b.n	b6024 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b601c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6020:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6024:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6026:	4293      	cmp	r3, r2
   b6028:	d338      	bcc.n	b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b602a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b602e:	440c      	add	r4, r1
        h -= mod;
   b6030:	1a9a      	subs	r2, r3, r2
   b6032:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6034:	2a07      	cmp	r2, #7
   b6036:	d90e      	bls.n	b6056 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6038:	2d02      	cmp	r5, #2
   b603a:	d11d      	bne.n	b6078 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b603c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b603e:	7821      	ldrb	r1, [r4, #0]
   b6040:	43c9      	mvns	r1, r1
   b6042:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6044:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6046:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b604a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b604c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b604e:	440c      	add	r4, r1
            } while(h >= 8);
   b6050:	d8f5      	bhi.n	b603e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6052:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6056:	b30a      	cbz	r2, b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6058:	4b13      	ldr	r3, [pc, #76]	; (b60a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b605a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b605c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b605e:	d01a      	beq.n	b6096 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6060:	2d02      	cmp	r5, #2
   b6062:	d01c      	beq.n	b609e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6064:	b9d5      	cbnz	r5, b609c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6066:	7822      	ldrb	r2, [r4, #0]
   b6068:	ea22 0303 	bic.w	r3, r2, r3
   b606c:	e015      	b.n	b609a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b606e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6072:	ea81 010c 	eor.w	r1, r1, ip
   b6076:	e7d5      	b.n	b6024 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6078:	1e29      	subs	r1, r5, #0
   b607a:	bf18      	it	ne
   b607c:	2101      	movne	r1, #1
   b607e:	4249      	negs	r1, r1
   b6080:	b2c9      	uxtb	r1, r1
   b6082:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6084:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6086:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6088:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b608c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b608e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6090:	4434      	add	r4, r6
            } while(h >= 8);
   b6092:	d8f7      	bhi.n	b6084 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6094:	e7dd      	b.n	b6052 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6096:	7822      	ldrb	r2, [r4, #0]
   b6098:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b609a:	7023      	strb	r3, [r4, #0]
}
   b609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b609e:	7822      	ldrb	r2, [r4, #0]
   b60a0:	4053      	eors	r3, r2
   b60a2:	e7fa      	b.n	b609a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b60a4:	000bd1a4 	.word	0x000bd1a4
   b60a8:	000bd1ac 	.word	0x000bd1ac

000b60ac <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b60ac:	b470      	push	{r4, r5, r6}
   b60ae:	4614      	mov	r4, r2
  switch(rotation) {
   b60b0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b60b2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b60b6:	2a02      	cmp	r2, #2
   b60b8:	d00d      	beq.n	b60d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b60ba:	2a03      	cmp	r2, #3
   b60bc:	d018      	beq.n	b60f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b60be:	2a01      	cmp	r2, #1
   b60c0:	d111      	bne.n	b60e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b60c2:	8902      	ldrh	r2, [r0, #8]
   b60c4:	43e4      	mvns	r4, r4
   b60c6:	4414      	add	r4, r2
   b60c8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b60ca:	9603      	str	r6, [sp, #12]
   b60cc:	460a      	mov	r2, r1
   b60ce:	4621      	mov	r1, r4
}
   b60d0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b60d2:	f7ff bf67 	b.w	b5fa4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b60d6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b60d8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b60da:	43e4      	mvns	r4, r4
    x -= (w-1);
   b60dc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b60de:	4414      	add	r4, r2
    x -= (w-1);
   b60e0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b60e2:	b224      	sxth	r4, r4
    x -= (w-1);
   b60e4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b60e6:	9603      	str	r6, [sp, #12]
   b60e8:	4622      	mov	r2, r4
}
   b60ea:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b60ec:	f7ff bf16 	b.w	b5f1c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b60f0:	8945      	ldrh	r5, [r0, #10]
   b60f2:	4419      	add	r1, r3
   b60f4:	1a69      	subs	r1, r5, r1
   b60f6:	b209      	sxth	r1, r1
    break;
   b60f8:	e7e7      	b.n	b60ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b60fa <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b60fa:	b430      	push	{r4, r5}
   b60fc:	4614      	mov	r4, r2
  switch(rotation) {
   b60fe:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6100:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6104:	2a02      	cmp	r2, #2
   b6106:	d00d      	beq.n	b6124 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6108:	2a03      	cmp	r2, #3
   b610a:	d018      	beq.n	b613e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b610c:	2a01      	cmp	r2, #1
   b610e:	d111      	bne.n	b6134 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6110:	18e2      	adds	r2, r4, r3
   b6112:	8904      	ldrh	r4, [r0, #8]
   b6114:	1aa4      	subs	r4, r4, r2
   b6116:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6118:	9502      	str	r5, [sp, #8]
   b611a:	460a      	mov	r2, r1
   b611c:	4621      	mov	r1, r4
}
   b611e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6120:	f7ff befc 	b.w	b5f1c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6124:	8902      	ldrh	r2, [r0, #8]
   b6126:	43c9      	mvns	r1, r1
   b6128:	4411      	add	r1, r2
    y -= (h-1);
   b612a:	18e2      	adds	r2, r4, r3
   b612c:	8944      	ldrh	r4, [r0, #10]
   b612e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6130:	b209      	sxth	r1, r1
    y -= (h-1);
   b6132:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6134:	9502      	str	r5, [sp, #8]
   b6136:	4622      	mov	r2, r4
}
   b6138:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b613a:	f7ff bf33 	b.w	b5fa4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b613e:	8942      	ldrh	r2, [r0, #10]
   b6140:	43c9      	mvns	r1, r1
   b6142:	4411      	add	r1, r2
   b6144:	b209      	sxth	r1, r1
    break;
   b6146:	e7e7      	b.n	b6118 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6148 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b614c:	4604      	mov	r4, r0
  TRANSACTION_START
   b614e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6150:	2800      	cmp	r0, #0
   b6152:	d042      	beq.n	b61da <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6154:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6156:	f003 fa09 	bl	b956c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b615a:	4947      	ldr	r1, [pc, #284]	; (b6278 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b615c:	2205      	movs	r2, #5
   b615e:	4620      	mov	r0, r4
   b6160:	f7ff fd27 	bl	b5bb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6164:	8921      	ldrh	r1, [r4, #8]
   b6166:	3901      	subs	r1, #1
   b6168:	4620      	mov	r0, r4
   b616a:	b2c9      	uxtb	r1, r1
   b616c:	f7ff fcb2 	bl	b5ad4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6170:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6174:	1dde      	adds	r6, r3, #7
   b6176:	bf48      	it	mi
   b6178:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b617c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6180:	8923      	ldrh	r3, [r4, #8]
   b6182:	10f6      	asrs	r6, r6, #3
   b6184:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6188:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b618c:	2800      	cmp	r0, #0
   b618e:	d03a      	beq.n	b6206 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6190:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6194:	f003 f9f8 	bl	b9588 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6198:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b619a:	6803      	ldr	r3, [r0, #0]
   b619c:	2140      	movs	r1, #64	; 0x40
   b619e:	689b      	ldr	r3, [r3, #8]
   b61a0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b61a2:	2701      	movs	r7, #1
    while(count--) {
   b61a4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b61a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b61a8:	d024      	beq.n	b61f4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b61aa:	2f1f      	cmp	r7, #31
   b61ac:	d90c      	bls.n	b61c8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b61ae:	f003 f9f2 	bl	b9596 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b61b2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b61b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61b8:	f003 f9e6 	bl	b9588 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b61bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61be:	6803      	ldr	r3, [r0, #0]
   b61c0:	2140      	movs	r1, #64	; 0x40
   b61c2:	689b      	ldr	r3, [r3, #8]
   b61c4:	4798      	blx	r3
        bytesOut = 1;
   b61c6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b61c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61ce:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b61d0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b61d2:	689b      	ldr	r3, [r3, #8]
   b61d4:	4798      	blx	r3
      bytesOut++;
   b61d6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b61d8:	e7e4      	b.n	b61a4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b61da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61dc:	b118      	cbz	r0, b61e6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b61de:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b61e2:	f000 ffbb 	bl	b715c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b61e6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61ea:	2100      	movs	r1, #0
   b61ec:	b280      	uxth	r0, r0
   b61ee:	f003 ffb8 	bl	ba162 <digitalWrite>
   b61f2:	e7b2      	b.n	b615a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b61f4:	f003 f9cf 	bl	b9596 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b61f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61fa:	b378      	cbz	r0, b625c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b61fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b61fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6202:	f003 b9b3 	b.w	b956c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6206:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b620a:	2101      	movs	r1, #1
   b620c:	b280      	uxth	r0, r0
   b620e:	f003 ffa8 	bl	ba162 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6212:	42ae      	cmp	r6, r5
   b6214:	d0f0      	beq.n	b61f8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6216:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6218:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b621c:	b118      	cbz	r0, b6226 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b621e:	4649      	mov	r1, r9
   b6220:	f001 f80a 	bl	b7238 <_ZN8SPIClass8transferEh>
   b6224:	e7f5      	b.n	b6212 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6226:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6228:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b622c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6230:	ea09 0108 	and.w	r1, r9, r8
   b6234:	b280      	uxth	r0, r0
   b6236:	f003 ff94 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b623a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b623e:	2101      	movs	r1, #1
   b6240:	b280      	uxth	r0, r0
   b6242:	f003 ff8e 	bl	ba162 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6246:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b624a:	2100      	movs	r1, #0
   b624c:	b280      	uxth	r0, r0
   b624e:	f003 ff88 	bl	ba162 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6252:	3f01      	subs	r7, #1
   b6254:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6258:	d1e8      	bne.n	b622c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b625a:	e7da      	b.n	b6212 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b625c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6260:	2101      	movs	r1, #1
   b6262:	b280      	uxth	r0, r0
   b6264:	f003 ff7d 	bl	ba162 <digitalWrite>
   b6268:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b626a:	b118      	cbz	r0, b6274 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b626c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6270:	f000 bf5a 	b.w	b7128 <_ZN8SPIClass14endTransactionEv>
}
   b6274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6278:	000bd1d0 	.word	0x000bd1d0

000b627c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b627c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b6280:	b510      	push	{r4, lr}
   b6282:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b6284:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b6286:	b113      	cbz	r3, b628e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b6288:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b628a:	f000 fc3f 	bl	b6b0c <os_mutex_lock>
#endif
#endif
#endif
        }
   b628e:	4620      	mov	r0, r4
   b6290:	bd10      	pop	{r4, pc}

000b6292 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6292:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b6294:	6803      	ldr	r3, [r0, #0]
   b6296:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b629a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b629c:	b112      	cbz	r2, b62a4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b629e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b62a0:	f000 fc3c 	bl	b6b1c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b62a4:	4620      	mov	r0, r4
   b62a6:	bd10      	pop	{r4, pc}

000b62a8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62aa:	461f      	mov	r7, r3
   b62ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b62b0:	4604      	mov	r4, r0
   b62b2:	460d      	mov	r5, r1
   b62b4:	4616      	mov	r6, r2
    if (thread) {
   b62b6:	b12b      	cbz	r3, b62c4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b62b8:	2301      	movs	r3, #1
   b62ba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b62be:	3058      	adds	r0, #88	; 0x58
   b62c0:	f000 fc14 	bl	b6aec <os_mutex_create>
    }
    this->callback = callback;
   b62c4:	9b08      	ldr	r3, [sp, #32]
   b62c6:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b62c8:	2300      	movs	r3, #0
   b62ca:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b62cc:	b106      	cbz	r6, b62d0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b62ce:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b62d0:	b125      	cbz	r5, b62dc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b62d2:	4629      	mov	r1, r5
   b62d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b62d8:	f001 f867 	bl	b73aa <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b62dc:	9b06      	ldr	r3, [sp, #24]
   b62de:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b62e0:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b62e2:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b62e4:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b62e8:	2bff      	cmp	r3, #255	; 0xff
   b62ea:	bfb8      	it	lt
   b62ec:	23ff      	movlt	r3, #255	; 0xff
   b62ee:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b62f2:	b108      	cbz	r0, b62f8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b62f4:	f7fe fbe1 	bl	b4aba <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b62f8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b62fc:	f7fe fbdb 	bl	b4ab6 <_Znaj>
   b6300:	61e0      	str	r0, [r4, #28]
}
   b6302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6304 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6308:	4604      	mov	r4, r0
            bool thread) {
   b630a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b630c:	4617      	mov	r7, r2
   b630e:	4698      	mov	r8, r3
   b6310:	460e      	mov	r6, r1
            bool thread) {
   b6312:	f003 fbfb 	bl	b9b0c <_ZN9TCPClientC1Ev>
   b6316:	490d      	ldr	r1, [pc, #52]	; (b634c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6318:	61e5      	str	r5, [r4, #28]
   b631a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b631e:	f000 ffee 	bl	b72fe <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6322:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b6326:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6328:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b632c:	22ff      	movs	r2, #255	; 0xff
   b632e:	230f      	movs	r3, #15
   b6330:	e9cd 3200 	strd	r3, r2, [sp]
   b6334:	4620      	mov	r0, r4
            bool thread) {
   b6336:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b633a:	463b      	mov	r3, r7
   b633c:	462a      	mov	r2, r5
   b633e:	4631      	mov	r1, r6
   b6340:	f7ff ffb2 	bl	b62a8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b6344:	4620      	mov	r0, r4
   b6346:	b004      	add	sp, #16
   b6348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b634c:	000bd35a 	.word	0x000bd35a

000b6350 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6350:	b510      	push	{r4, lr}
   b6352:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b6354:	4620      	mov	r0, r4
   b6356:	f003 fb35 	bl	b99c4 <_ZN9TCPClient9availableEv>
   b635a:	2800      	cmp	r0, #0
   b635c:	d0fa      	beq.n	b6354 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b635e:	4620      	mov	r0, r4
   b6360:	f003 f93e 	bl	b95e0 <_ZN9TCPClient4readEv>
}
   b6364:	b2c0      	uxtb	r0, r0
   b6366:	bd10      	pop	{r4, pc}

000b6368 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b636c:	4605      	mov	r5, r0
   b636e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b6370:	f7ff ffee 	bl	b6350 <_ZN4MQTT8readByteEv>
   b6374:	69eb      	ldr	r3, [r5, #28]
   b6376:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6378:	69eb      	ldr	r3, [r5, #28]
   b637a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b637e:	f04f 0901 	mov.w	r9, #1
   b6382:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b6386:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6388:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b638a:	4628      	mov	r0, r5
   b638c:	f7ff ffe0 	bl	b6350 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6390:	4626      	mov	r6, r4
   b6392:	69eb      	ldr	r3, [r5, #28]
   b6394:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b6396:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b639a:	fb13 f309 	smulbb	r3, r3, r9
   b639e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b63a0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b63a2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b63a4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b63a6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b63a8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b63ac:	d4ed      	bmi.n	b638a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b63ae:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b63b0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b63b4:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b63b8:	d11e      	bne.n	b63f8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b63ba:	4628      	mov	r0, r5
   b63bc:	f7ff ffc8 	bl	b6350 <_ZN4MQTT8readByteEv>
   b63c0:	69eb      	ldr	r3, [r5, #28]
   b63c2:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b63c4:	4628      	mov	r0, r5
   b63c6:	f7ff ffc3 	bl	b6350 <_ZN4MQTT8readByteEv>
   b63ca:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b63cc:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b63ce:	b2b6      	uxth	r6, r6
   b63d0:	69eb      	ldr	r3, [r5, #28]
   b63d2:	b2a4      	uxth	r4, r4
   b63d4:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b63d6:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b63d8:	b2b6      	uxth	r6, r6
   b63da:	42be      	cmp	r6, r7
   b63dc:	d20e      	bcs.n	b63fc <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b63de:	4628      	mov	r0, r5
   b63e0:	f7ff ffb6 	bl	b6350 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b63e4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b63e8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b63ea:	bf84      	itt	hi
   b63ec:	69eb      	ldrhi	r3, [r5, #28]
   b63ee:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b63f0:	3401      	adds	r4, #1
   b63f2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b63f4:	3601      	adds	r6, #1
   b63f6:	e7ef      	b.n	b63d8 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b63f8:	2600      	movs	r6, #0
   b63fa:	e7ed      	b.n	b63d8 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b63fc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6400:	42a3      	cmp	r3, r4
   b6402:	bf2c      	ite	cs
   b6404:	4620      	movcs	r0, r4
   b6406:	2000      	movcc	r0, #0
   b6408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b640c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b640c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6410:	4615      	mov	r5, r2
   b6412:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b6414:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6416:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6418:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b641a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b641c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b641e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6422:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6426:	f103 0401 	add.w	r4, r3, #1
   b642a:	4403      	add	r3, r0
            digit |= 0x80;
   b642c:	bf88      	it	hi
   b642e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b6432:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b6436:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b643a:	b2e4      	uxtb	r4, r4
   b643c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6440:	d81e      	bhi.n	b6480 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b6442:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b6446:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b644a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b644c:	4622      	mov	r2, r4
   b644e:	a901      	add	r1, sp, #4
   b6450:	4428      	add	r0, r5
    buf[4-llen] = header;
   b6452:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b6456:	f004 f86b 	bl	ba530 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b645a:	1c72      	adds	r2, r6, #1
   b645c:	4422      	add	r2, r4
   b645e:	4641      	mov	r1, r8
   b6460:	4638      	mov	r0, r7
   b6462:	f003 f8a8 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
   b6466:	4605      	mov	r5, r0
   b6468:	f000 fb04 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b646c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b646e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6470:	4432      	add	r2, r6
   b6472:	b2a8      	uxth	r0, r5
}
   b6474:	1a13      	subs	r3, r2, r0
   b6476:	4258      	negs	r0, r3
   b6478:	4158      	adcs	r0, r3
   b647a:	b002      	add	sp, #8
   b647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6480:	4623      	mov	r3, r4
   b6482:	e7ca      	b.n	b641a <_ZN4MQTT5writeEhPht+0xe>

000b6484 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b6484:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b6486:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6488:	4605      	mov	r5, r0
    pos += 2;
   b648a:	b298      	uxth	r0, r3
   b648c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b648e:	5cce      	ldrb	r6, [r1, r3]
   b6490:	b29c      	uxth	r4, r3
   b6492:	b156      	cbz	r6, b64aa <_ZN4MQTT11writeStringEPKcPht+0x26>
   b6494:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6498:	4584      	cmp	ip, r0
   b649a:	f103 0701 	add.w	r7, r3, #1
   b649e:	d904      	bls.n	b64aa <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b64a0:	1c44      	adds	r4, r0, #1
   b64a2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b64a4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b64a6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b64a8:	e7f1      	b.n	b648e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b64aa:	b299      	uxth	r1, r3
   b64ac:	1a41      	subs	r1, r0, r1
   b64ae:	440a      	add	r2, r1
   b64b0:	0a21      	lsrs	r1, r4, #8
   b64b2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b64b6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b64ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b64bc <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b64bc:	b538      	push	{r3, r4, r5, lr}
   b64be:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b64c0:	f003 f9a2 	bl	b9808 <_ZN9TCPClient9connectedEv>
   b64c4:	2800      	cmp	r0, #0
   b64c6:	bf14      	ite	ne
   b64c8:	2501      	movne	r5, #1
   b64ca:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b64cc:	d102      	bne.n	b64d4 <_ZN4MQTT11isConnectedEv+0x18>
   b64ce:	4620      	mov	r0, r4
   b64d0:	f003 fad2 	bl	b9a78 <_ZN9TCPClient4stopEv>
    return rc;
}
   b64d4:	4628      	mov	r0, r5
   b64d6:	bd38      	pop	{r3, r4, r5, pc}

000b64d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b64d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b64dc:	b088      	sub	sp, #32
   b64de:	4604      	mov	r4, r0
   b64e0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b64e4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b64e8:	4689      	mov	r9, r1
   b64ea:	4617      	mov	r7, r2
   b64ec:	461e      	mov	r6, r3
    if (!isConnected()) {
   b64ee:	f7ff ffe5 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b64f2:	4605      	mov	r5, r0
   b64f4:	2800      	cmp	r0, #0
   b64f6:	f040 80cd 	bne.w	b6694 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b64fa:	4621      	mov	r1, r4
   b64fc:	a801      	add	r0, sp, #4
   b64fe:	f7ff febd 	bl	b627c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b6502:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6504:	2900      	cmp	r1, #0
   b6506:	f040 8088 	bne.w	b661a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b650a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b650e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6510:	462b      	mov	r3, r5
   b6512:	4620      	mov	r0, r4
   b6514:	f003 f8fa 	bl	b970c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6518:	2800      	cmp	r0, #0
   b651a:	d07a      	beq.n	b6612 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b651c:	2301      	movs	r3, #1
   b651e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6520:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6524:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b6526:	2b04      	cmp	r3, #4
   b6528:	4b5b      	ldr	r3, [pc, #364]	; (b6698 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b652a:	f040 8081 	bne.w	b6630 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b652e:	6818      	ldr	r0, [r3, #0]
   b6530:	8899      	ldrh	r1, [r3, #4]
   b6532:	799b      	ldrb	r3, [r3, #6]
   b6534:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6538:	f88d 300e 	strb.w	r3, [sp, #14]
   b653c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b653e:	f8c2 0005 	str.w	r0, [r2, #5]
   b6542:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b6546:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b654a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b654e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6550:	230c      	movs	r3, #12
            if (willTopic) {
   b6552:	f1b8 0f00 	cmp.w	r8, #0
   b6556:	f000 8081 	beq.w	b665c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b655a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b655e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b6562:	0140      	lsls	r0, r0, #5
   b6564:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6568:	f040 0006 	orr.w	r0, r0, #6
   b656c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b656e:	f1ba 0f00 	cmp.w	sl, #0
   b6572:	d101      	bne.n	b6578 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b6574:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6578:	b11f      	cbz	r7, b6582 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b657a:	2e00      	cmp	r6, #0
   b657c:	d170      	bne.n	b6660 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b657e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b6582:	69e2      	ldr	r2, [r4, #28]
   b6584:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b6586:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6588:	69e1      	ldr	r1, [r4, #28]
   b658a:	1c58      	adds	r0, r3, #1
   b658c:	1212      	asrs	r2, r2, #8
   b658e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6590:	1c9a      	adds	r2, r3, #2
   b6592:	69e1      	ldr	r1, [r4, #28]
   b6594:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6596:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6598:	3303      	adds	r3, #3
   b659a:	69e2      	ldr	r2, [r4, #28]
   b659c:	4649      	mov	r1, r9
   b659e:	4620      	mov	r0, r4
   b65a0:	f7ff ff70 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
   b65a4:	4603      	mov	r3, r0
            if (willTopic) {
   b65a6:	f1b8 0f00 	cmp.w	r8, #0
   b65aa:	d00b      	beq.n	b65c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b65ac:	69e2      	ldr	r2, [r4, #28]
   b65ae:	4641      	mov	r1, r8
   b65b0:	4620      	mov	r0, r4
   b65b2:	f7ff ff67 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b65b6:	69e2      	ldr	r2, [r4, #28]
   b65b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b65ba:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b65bc:	4620      	mov	r0, r4
   b65be:	f7ff ff61 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
   b65c2:	4603      	mov	r3, r0
            if(user != NULL) {
   b65c4:	b167      	cbz	r7, b65e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b65c6:	69e2      	ldr	r2, [r4, #28]
   b65c8:	4639      	mov	r1, r7
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff ff5a 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
   b65d0:	4603      	mov	r3, r0
                if(pass != NULL) {
   b65d2:	b12e      	cbz	r6, b65e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b65d4:	69e2      	ldr	r2, [r4, #28]
   b65d6:	4631      	mov	r1, r6
   b65d8:	4620      	mov	r0, r4
   b65da:	f7ff ff53 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
   b65de:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b65e0:	3b05      	subs	r3, #5
   b65e2:	69e2      	ldr	r2, [r4, #28]
   b65e4:	b29b      	uxth	r3, r3
   b65e6:	2110      	movs	r1, #16
   b65e8:	4620      	mov	r0, r4
   b65ea:	f7ff ff0f 	bl	b640c <_ZN4MQTT5writeEhPht>
   b65ee:	f000 fa41 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b65f2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b65f6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b65fa:	4620      	mov	r0, r4
   b65fc:	f003 f9e2 	bl	b99c4 <_ZN9TCPClient9availableEv>
   b6600:	bb88      	cbnz	r0, b6666 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6602:	f000 fa37 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6608:	1ac0      	subs	r0, r0, r3
   b660a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b660c:	4373      	muls	r3, r6
   b660e:	4298      	cmp	r0, r3
   b6610:	d9f3      	bls.n	b65fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6612:	4620      	mov	r0, r4
   b6614:	f003 fa30 	bl	b9a78 <_ZN9TCPClient4stopEv>
   b6618:	e035      	b.n	b6686 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b661a:	a802      	add	r0, sp, #8
   b661c:	f002 fe68 	bl	b92f0 <_ZN9IPAddressC1EPKh>
   b6620:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6624:	462b      	mov	r3, r5
   b6626:	a902      	add	r1, sp, #8
   b6628:	4620      	mov	r0, r4
   b662a:	f003 f94f 	bl	b98cc <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b662e:	e773      	b.n	b6518 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6630:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6634:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6638:	7bdb      	ldrb	r3, [r3, #15]
   b663a:	f10d 0c08 	add.w	ip, sp, #8
   b663e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6642:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b6646:	ab02      	add	r3, sp, #8
   b6648:	cb03      	ldmia	r3!, {r0, r1}
   b664a:	f8c2 0005 	str.w	r0, [r2, #5]
   b664e:	f8c2 1009 	str.w	r1, [r2, #9]
   b6652:	f89c 3000 	ldrb.w	r3, [ip]
   b6656:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6658:	230e      	movs	r3, #14
   b665a:	e77a      	b.n	b6552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b665c:	2002      	movs	r0, #2
   b665e:	e786      	b.n	b656e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6660:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b6664:	e78d      	b.n	b6582 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b6666:	a902      	add	r1, sp, #8
   b6668:	4620      	mov	r0, r4
   b666a:	f7ff fe7d 	bl	b6368 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b666e:	2804      	cmp	r0, #4
   b6670:	d1cf      	bne.n	b6612 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b6672:	69e3      	ldr	r3, [r4, #28]
   b6674:	78de      	ldrb	r6, [r3, #3]
   b6676:	2e00      	cmp	r6, #0
   b6678:	d1cb      	bne.n	b6612 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b667a:	f000 f9fb 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b667e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6680:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b6682:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b6686:	a801      	add	r0, sp, #4
   b6688:	f7ff fe03 	bl	b6292 <_ZN4MQTT11MutexLockerD1Ev>
}
   b668c:	4628      	mov	r0, r5
   b668e:	b008      	add	sp, #32
   b6690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b6694:	2500      	movs	r5, #0
   b6696:	e7f9      	b.n	b668c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6698:	000bc5ac 	.word	0x000bc5ac

000b669c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b669c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b669e:	2301      	movs	r3, #1
   b66a0:	2204      	movs	r2, #4
   b66a2:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b66a6:	2300      	movs	r3, #0
   b66a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b66ac:	e9cd 3300 	strd	r3, r3, [sp]
   b66b0:	461a      	mov	r2, r3
   b66b2:	f7ff ff11 	bl	b64d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b66b6:	b007      	add	sp, #28
   b66b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b66bc <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b66bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66be:	4604      	mov	r4, r0
   b66c0:	460e      	mov	r6, r1
    if (isConnected()) {
   b66c2:	f7ff fefb 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b66c6:	4605      	mov	r5, r0
   b66c8:	b1c8      	cbz	r0, b66fe <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b66ca:	4621      	mov	r1, r4
   b66cc:	a801      	add	r0, sp, #4
   b66ce:	f7ff fdd5 	bl	b627c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b66d2:	69e3      	ldr	r3, [r4, #28]
   b66d4:	2262      	movs	r2, #98	; 0x62
   b66d6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b66d8:	69e3      	ldr	r3, [r4, #28]
   b66da:	2202      	movs	r2, #2
   b66dc:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b66de:	69e3      	ldr	r3, [r4, #28]
   b66e0:	0a32      	lsrs	r2, r6, #8
   b66e2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b66e4:	69e3      	ldr	r3, [r4, #28]
   b66e6:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b66e8:	69e1      	ldr	r1, [r4, #28]
   b66ea:	2204      	movs	r2, #4
   b66ec:	4620      	mov	r0, r4
   b66ee:	f002 ff62 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
   b66f2:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b66f4:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b66f6:	bf18      	it	ne
   b66f8:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b66fa:	f7ff fdca 	bl	b6292 <_ZN4MQTT11MutexLockerD1Ev>
}
   b66fe:	4628      	mov	r0, r5
   b6700:	b002      	add	sp, #8
   b6702:	bd70      	pop	{r4, r5, r6, pc}

000b6704 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6704:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6706:	4604      	mov	r4, r0
   b6708:	460e      	mov	r6, r1
    if (isConnected()) {
   b670a:	f7ff fed7 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b670e:	4605      	mov	r5, r0
   b6710:	b1c8      	cbz	r0, b6746 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6712:	4621      	mov	r1, r4
   b6714:	a801      	add	r0, sp, #4
   b6716:	f7ff fdb1 	bl	b627c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b671a:	69e3      	ldr	r3, [r4, #28]
   b671c:	2272      	movs	r2, #114	; 0x72
   b671e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6720:	69e3      	ldr	r3, [r4, #28]
   b6722:	2202      	movs	r2, #2
   b6724:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6726:	69e3      	ldr	r3, [r4, #28]
   b6728:	0a32      	lsrs	r2, r6, #8
   b672a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b672c:	69e3      	ldr	r3, [r4, #28]
   b672e:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6730:	69e1      	ldr	r1, [r4, #28]
   b6732:	2204      	movs	r2, #4
   b6734:	4620      	mov	r0, r4
   b6736:	f002 ff3e 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
   b673a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b673c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b673e:	bf18      	it	ne
   b6740:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6742:	f7ff fda6 	bl	b6292 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6746:	4628      	mov	r0, r5
   b6748:	b002      	add	sp, #8
   b674a:	bd70      	pop	{r4, r5, r6, pc}

000b674c <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6750:	ed2d 8b02 	vpush	{d8}
   b6754:	b087      	sub	sp, #28
   b6756:	af00      	add	r7, sp, #0
   b6758:	4604      	mov	r4, r0
    if (isConnected()) {
   b675a:	f7ff feaf 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b675e:	4681      	mov	r9, r0
   b6760:	b1f8      	cbz	r0, b67a2 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6762:	4621      	mov	r1, r4
   b6764:	f107 0014 	add.w	r0, r7, #20
   b6768:	f7ff fd88 	bl	b627c <_ZN4MQTT11MutexLockerC1EPS_>
   b676c:	f000 f982 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6770:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6776:	4353      	muls	r3, r2
   b6778:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b677a:	1a82      	subs	r2, r0, r2
   b677c:	429a      	cmp	r2, r3
   b677e:	4606      	mov	r6, r0
   b6780:	d803      	bhi.n	b678a <_ZN4MQTT4loopEv+0x3e>
   b6782:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b6784:	1a82      	subs	r2, r0, r2
   b6786:	4293      	cmp	r3, r2
   b6788:	d221      	bcs.n	b67ce <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b678a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b678e:	b17b      	cbz	r3, b67b0 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6790:	4620      	mov	r0, r4
   b6792:	f003 f971 	bl	b9a78 <_ZN9TCPClient4stopEv>
                return false;
   b6796:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b679a:	f107 0014 	add.w	r0, r7, #20
   b679e:	f7ff fd78 	bl	b6292 <_ZN4MQTT11MutexLockerD1Ev>
}
   b67a2:	4648      	mov	r0, r9
   b67a4:	371c      	adds	r7, #28
   b67a6:	46bd      	mov	sp, r7
   b67a8:	ecbd 8b02 	vpop	{d8}
   b67ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b67b0:	69e2      	ldr	r2, [r4, #28]
   b67b2:	21c0      	movs	r1, #192	; 0xc0
   b67b4:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b67b6:	69e2      	ldr	r2, [r4, #28]
   b67b8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b67ba:	69e1      	ldr	r1, [r4, #28]
   b67bc:	2202      	movs	r2, #2
   b67be:	4620      	mov	r0, r4
   b67c0:	f002 fef9 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b67c4:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b67c8:	2301      	movs	r3, #1
   b67ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b67ce:	4620      	mov	r0, r4
   b67d0:	f003 f8f8 	bl	b99c4 <_ZN9TCPClient9availableEv>
   b67d4:	2800      	cmp	r0, #0
   b67d6:	d0e0      	beq.n	b679a <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b67d8:	f107 0113 	add.w	r1, r7, #19
   b67dc:	4620      	mov	r0, r4
   b67de:	f7ff fdc3 	bl	b6368 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b67e2:	4683      	mov	fp, r0
   b67e4:	2800      	cmp	r0, #0
   b67e6:	d0d8      	beq.n	b679a <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b67e8:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b67ea:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b67ec:	7819      	ldrb	r1, [r3, #0]
   b67ee:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b67f2:	2a30      	cmp	r2, #48	; 0x30
   b67f4:	d17f      	bne.n	b68f6 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b67f6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b67fa:	f1ba 0f00 	cmp.w	sl, #0
   b67fe:	d0cc      	beq.n	b679a <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6800:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6804:	466a      	mov	r2, sp
   b6806:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b680a:	eb03 020c 	add.w	r2, r3, ip
   b680e:	7851      	ldrb	r1, [r2, #1]
   b6810:	7895      	ldrb	r5, [r2, #2]
   b6812:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6816:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b6818:	f105 0208 	add.w	r2, r5, #8
   b681c:	4669      	mov	r1, sp
   b681e:	08d2      	lsrs	r2, r2, #3
   b6820:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b6824:	4695      	mov	sp, r2
   b6826:	f10c 0203 	add.w	r2, ip, #3
   b682a:	60fa      	str	r2, [r7, #12]
   b682c:	eb03 0e02 	add.w	lr, r3, r2
   b6830:	eb0d 0205 	add.w	r2, sp, r5
   b6834:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b6836:	f8c7 d008 	str.w	sp, [r7, #8]
   b683a:	607a      	str	r2, [r7, #4]
   b683c:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6840:	428a      	cmp	r2, r1
   b6842:	d006      	beq.n	b6852 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b6844:	460a      	mov	r2, r1
   b6846:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b684a:	f802 8b01 	strb.w	r8, [r2], #1
   b684e:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6850:	e7f4      	b.n	b683c <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6852:	2200      	movs	r2, #0
   b6854:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6856:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b685a:	68f9      	ldr	r1, [r7, #12]
   b685c:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6860:	ebab 020c 	sub.w	r2, fp, ip
   b6864:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6866:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b686a:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b686e:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6870:	d125      	bne.n	b68be <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6872:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6876:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b6878:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b687a:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b687e:	f10c 0105 	add.w	r1, ip, #5
   b6882:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6884:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6886:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b688a:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b688c:	69e3      	ldr	r3, [r4, #28]
   b688e:	2240      	movs	r2, #64	; 0x40
   b6890:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6892:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6894:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6898:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b689c:	69e3      	ldr	r3, [r4, #28]
   b689e:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b68a2:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b68a4:	69e3      	ldr	r3, [r4, #28]
   b68a6:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b68aa:	69e1      	ldr	r1, [r4, #28]
   b68ac:	2204      	movs	r2, #4
   b68ae:	4620      	mov	r0, r4
   b68b0:	f002 fe81 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b68b4:	6266      	str	r6, [r4, #36]	; 0x24
   b68b6:	ee18 3a10 	vmov	r3, s16
   b68ba:	469d      	mov	sp, r3
   b68bc:	e76d      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b68be:	f1b8 0f04 	cmp.w	r8, #4
   b68c2:	d115      	bne.n	b68f0 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b68c4:	f813 e001 	ldrb.w	lr, [r3, r1]
   b68c8:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b68ca:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b68cc:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b68d0:	f10c 0105 	add.w	r1, ip, #5
   b68d4:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b68d6:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b68d8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b68dc:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b68de:	69e3      	ldr	r3, [r4, #28]
   b68e0:	2250      	movs	r2, #80	; 0x50
   b68e2:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b68e4:	69e3      	ldr	r3, [r4, #28]
   b68e6:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b68e8:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b68ec:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b68ee:	e7d5      	b.n	b689c <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b68f0:	4419      	add	r1, r3
   b68f2:	47d0      	blx	sl
   b68f4:	e7df      	b.n	b68b6 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b68f6:	2a50      	cmp	r2, #80	; 0x50
   b68f8:	d108      	bne.n	b690c <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b68fa:	789a      	ldrb	r2, [r3, #2]
   b68fc:	78d9      	ldrb	r1, [r3, #3]
   b68fe:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6902:	b289      	uxth	r1, r1
   b6904:	4620      	mov	r0, r4
   b6906:	f7ff fed9 	bl	b66bc <_ZN4MQTT14publishReleaseEt>
   b690a:	e746      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b690c:	2a40      	cmp	r2, #64	; 0x40
   b690e:	d112      	bne.n	b6936 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6910:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6912:	2a00      	cmp	r2, #0
   b6914:	f43f af41 	beq.w	b679a <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6918:	f1bb 0f04 	cmp.w	fp, #4
   b691c:	f47f af3d 	bne.w	b679a <_ZN4MQTT4loopEv+0x4e>
   b6920:	f011 0f06 	tst.w	r1, #6
   b6924:	f47f af39 	bne.w	b679a <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6928:	7899      	ldrb	r1, [r3, #2]
   b692a:	78d8      	ldrb	r0, [r3, #3]
   b692c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6930:	b280      	uxth	r0, r0
   b6932:	4790      	blx	r2
   b6934:	e731      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6936:	2a60      	cmp	r2, #96	; 0x60
   b6938:	d108      	bne.n	b694c <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b693a:	789a      	ldrb	r2, [r3, #2]
   b693c:	78d9      	ldrb	r1, [r3, #3]
   b693e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6942:	b289      	uxth	r1, r1
   b6944:	4620      	mov	r0, r4
   b6946:	f7ff fedd 	bl	b6704 <_ZN4MQTT15publishCompleteEt>
   b694a:	e726      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b694c:	2a70      	cmp	r2, #112	; 0x70
   b694e:	d0df      	beq.n	b6910 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6950:	2a90      	cmp	r2, #144	; 0x90
   b6952:	f43f af22 	beq.w	b679a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6956:	2ac0      	cmp	r2, #192	; 0xc0
   b6958:	d10a      	bne.n	b6970 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b695a:	22d0      	movs	r2, #208	; 0xd0
   b695c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b695e:	69e3      	ldr	r3, [r4, #28]
   b6960:	2200      	movs	r2, #0
   b6962:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6964:	69e1      	ldr	r1, [r4, #28]
   b6966:	2202      	movs	r2, #2
   b6968:	4620      	mov	r0, r4
   b696a:	f002 fe24 	bl	b95b6 <_ZN9TCPClient5writeEPKhj>
   b696e:	e714      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6970:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6972:	bf04      	itt	eq
   b6974:	2300      	moveq	r3, #0
   b6976:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b697a:	e70e      	b.n	b679a <_ZN4MQTT4loopEv+0x4e>

000b697c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b697c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b697e:	4604      	mov	r4, r0
   b6980:	460f      	mov	r7, r1
   b6982:	4616      	mov	r6, r2
    if (isConnected()) {
   b6984:	f7ff fd9a 	bl	b64bc <_ZN4MQTT11isConnectedEv>
   b6988:	4605      	mov	r5, r0
   b698a:	b310      	cbz	r0, b69d2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b698c:	4621      	mov	r1, r4
   b698e:	a801      	add	r0, sp, #4
   b6990:	f7ff fc74 	bl	b627c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6994:	8c23      	ldrh	r3, [r4, #32]
   b6996:	3301      	adds	r3, #1
   b6998:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b699a:	b1eb      	cbz	r3, b69d8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b699c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b699e:	8c23      	ldrh	r3, [r4, #32]
   b69a0:	69e2      	ldr	r2, [r4, #28]
   b69a2:	0a1b      	lsrs	r3, r3, #8
   b69a4:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b69a6:	69e3      	ldr	r3, [r4, #28]
   b69a8:	8c22      	ldrh	r2, [r4, #32]
   b69aa:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b69ac:	69e2      	ldr	r2, [r4, #28]
   b69ae:	2307      	movs	r3, #7
   b69b0:	4639      	mov	r1, r7
   b69b2:	4620      	mov	r0, r4
   b69b4:	f7ff fd66 	bl	b6484 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b69b8:	69e3      	ldr	r3, [r4, #28]
   b69ba:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b69bc:	3804      	subs	r0, #4
   b69be:	b283      	uxth	r3, r0
   b69c0:	69e2      	ldr	r2, [r4, #28]
   b69c2:	2182      	movs	r1, #130	; 0x82
   b69c4:	4620      	mov	r0, r4
   b69c6:	f7ff fd21 	bl	b640c <_ZN4MQTT5writeEhPht>
   b69ca:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b69cc:	a801      	add	r0, sp, #4
   b69ce:	f7ff fc60 	bl	b6292 <_ZN4MQTT11MutexLockerD1Ev>
}
   b69d2:	4628      	mov	r0, r5
   b69d4:	b003      	add	sp, #12
   b69d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b69d8:	2301      	movs	r3, #1
   b69da:	e7df      	b.n	b699c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b69dc <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b69dc:	2200      	movs	r2, #0
   b69de:	f7ff bfcd 	b.w	b697c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000b69e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <netdb_freeaddrinfo+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	689b      	ldr	r3, [r3, #8]
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	00030268 	.word	0x00030268

000b69f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <netdb_getaddrinfo+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	68db      	ldr	r3, [r3, #12]
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	00030268 	.word	0x00030268

000b6a04 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <hal_gpio_mode+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	689b      	ldr	r3, [r3, #8]
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	0003022c 	.word	0x0003022c

000b6a14 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <hal_gpio_get_mode+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	68db      	ldr	r3, [r3, #12]
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	0003022c 	.word	0x0003022c

000b6a24 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <hal_gpio_write+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	691b      	ldr	r3, [r3, #16]
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	0003022c 	.word	0x0003022c

000b6a34 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <hal_gpio_read+0xc>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	695b      	ldr	r3, [r3, #20]
   b6a3c:	9301      	str	r3, [sp, #4]
   b6a3e:	bd08      	pop	{r3, pc}
   b6a40:	0003022c 	.word	0x0003022c

000b6a44 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6a44:	b508      	push	{r3, lr}
   b6a46:	4b02      	ldr	r3, [pc, #8]	; (b6a50 <if_index_to_name+0xc>)
   b6a48:	681b      	ldr	r3, [r3, #0]
   b6a4a:	695b      	ldr	r3, [r3, #20]
   b6a4c:	9301      	str	r3, [sp, #4]
   b6a4e:	bd08      	pop	{r3, pc}
   b6a50:	0003026c 	.word	0x0003026c

000b6a54 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6a54:	b508      	push	{r3, lr}
   b6a56:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <HAL_RNG_GetRandomNumber+0xc>)
   b6a58:	681b      	ldr	r3, [r3, #0]
   b6a5a:	685b      	ldr	r3, [r3, #4]
   b6a5c:	9301      	str	r3, [sp, #4]
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	00030218 	.word	0x00030218

000b6a64 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6a64:	b508      	push	{r3, lr}
   b6a66:	4b02      	ldr	r3, [pc, #8]	; (b6a70 <HAL_Delay_Microseconds+0xc>)
   b6a68:	681b      	ldr	r3, [r3, #0]
   b6a6a:	68db      	ldr	r3, [r3, #12]
   b6a6c:	9301      	str	r3, [sp, #4]
   b6a6e:	bd08      	pop	{r3, pc}
   b6a70:	00030218 	.word	0x00030218

000b6a74 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b02      	ldr	r3, [pc, #8]	; (b6a80 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	695b      	ldr	r3, [r3, #20]
   b6a7c:	9301      	str	r3, [sp, #4]
   b6a7e:	bd08      	pop	{r3, pc}
   b6a80:	00030218 	.word	0x00030218

000b6a84 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6a84:	b508      	push	{r3, lr}
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <hal_ble_stack_init+0xc>)
   b6a88:	681b      	ldr	r3, [r3, #0]
   b6a8a:	689b      	ldr	r3, [r3, #8]
   b6a8c:	9301      	str	r3, [sp, #4]
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	00030278 	.word	0x00030278

000b6a94 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6a94:	b508      	push	{r3, lr}
   b6a96:	4b02      	ldr	r3, [pc, #8]	; (b6aa0 <hal_ble_gap_set_advertising_data+0xc>)
   b6a98:	681b      	ldr	r3, [r3, #0]
   b6a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6a9c:	9301      	str	r3, [sp, #4]
   b6a9e:	bd08      	pop	{r3, pc}
   b6aa0:	00030278 	.word	0x00030278

000b6aa4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6aa4:	b508      	push	{r3, lr}
   b6aa6:	4b02      	ldr	r3, [pc, #8]	; (b6ab0 <hal_ble_gap_set_scan_response_data+0xc>)
   b6aa8:	681b      	ldr	r3, [r3, #0]
   b6aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6aac:	9301      	str	r3, [sp, #4]
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	00030278 	.word	0x00030278

000b6ab4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <hal_ble_gap_start_advertising+0xc>)
   b6ab8:	681b      	ldr	r3, [r3, #0]
   b6aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6abc:	9301      	str	r3, [sp, #4]
   b6abe:	bd08      	pop	{r3, pc}
   b6ac0:	00030278 	.word	0x00030278

000b6ac4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b03      	ldr	r3, [pc, #12]	; (b6ad4 <hal_ble_gap_disconnect+0x10>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6ace:	9301      	str	r3, [sp, #4]
   b6ad0:	bd08      	pop	{r3, pc}
   b6ad2:	0000      	.short	0x0000
   b6ad4:	00030278 	.word	0x00030278

000b6ad8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6ad8:	b508      	push	{r3, lr}
   b6ada:	4b03      	ldr	r3, [pc, #12]	; (b6ae8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6adc:	681b      	ldr	r3, [r3, #0]
   b6ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6ae2:	9301      	str	r3, [sp, #4]
   b6ae4:	bd08      	pop	{r3, pc}
   b6ae6:	0000      	.short	0x0000
   b6ae8:	00030278 	.word	0x00030278

000b6aec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <os_mutex_create+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	00030248 	.word	0x00030248

000b6afc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <os_mutex_destroy+0xc>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b04:	9301      	str	r3, [sp, #4]
   b6b06:	bd08      	pop	{r3, pc}
   b6b08:	00030248 	.word	0x00030248

000b6b0c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6b0c:	b508      	push	{r3, lr}
   b6b0e:	4b02      	ldr	r3, [pc, #8]	; (b6b18 <os_mutex_lock+0xc>)
   b6b10:	681b      	ldr	r3, [r3, #0]
   b6b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b14:	9301      	str	r3, [sp, #4]
   b6b16:	bd08      	pop	{r3, pc}
   b6b18:	00030248 	.word	0x00030248

000b6b1c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b02      	ldr	r3, [pc, #8]	; (b6b28 <os_mutex_unlock+0xc>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b24:	9301      	str	r3, [sp, #4]
   b6b26:	bd08      	pop	{r3, pc}
   b6b28:	00030248 	.word	0x00030248

000b6b2c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b02      	ldr	r3, [pc, #8]	; (b6b38 <os_mutex_recursive_create+0xc>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b34:	9301      	str	r3, [sp, #4]
   b6b36:	bd08      	pop	{r3, pc}
   b6b38:	00030248 	.word	0x00030248

000b6b3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6b3c:	b508      	push	{r3, lr}
   b6b3e:	4b02      	ldr	r3, [pc, #8]	; (b6b48 <os_mutex_recursive_destroy+0xc>)
   b6b40:	681b      	ldr	r3, [r3, #0]
   b6b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	bd08      	pop	{r3, pc}
   b6b48:	00030248 	.word	0x00030248

000b6b4c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <os_mutex_recursive_lock+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	00030248 	.word	0x00030248

000b6b5c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <os_mutex_recursive_unlock+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	00030248 	.word	0x00030248

000b6b6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <inet_inet_ntop+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	695b      	ldr	r3, [r3, #20]
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	00030264 	.word	0x00030264

000b6b7c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <inet_htonl+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	6a1b      	ldr	r3, [r3, #32]
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030264 	.word	0x00030264

000b6b8c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <inet_htons+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030264 	.word	0x00030264

000b6b9c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <hal_usart_end+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	689b      	ldr	r3, [r3, #8]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	0003023c 	.word	0x0003023c

000b6bac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <hal_usart_write+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	68db      	ldr	r3, [r3, #12]
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	0003023c 	.word	0x0003023c

000b6bbc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <hal_usart_available+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	691b      	ldr	r3, [r3, #16]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	0003023c 	.word	0x0003023c

000b6bcc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <hal_usart_read+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	695b      	ldr	r3, [r3, #20]
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	0003023c 	.word	0x0003023c

000b6bdc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <hal_usart_peek+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	699b      	ldr	r3, [r3, #24]
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	0003023c 	.word	0x0003023c

000b6bec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <hal_usart_flush+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	69db      	ldr	r3, [r3, #28]
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	0003023c 	.word	0x0003023c

000b6bfc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <hal_usart_is_enabled+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	6a1b      	ldr	r3, [r3, #32]
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	0003023c 	.word	0x0003023c

000b6c0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <hal_usart_available_data_for_write+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	0003023c 	.word	0x0003023c

000b6c1c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <hal_usart_begin_config+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	0003023c 	.word	0x0003023c

000b6c2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <hal_usart_init_ex+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	0003023c 	.word	0x0003023c

000b6c3c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <hal_i2c_set_speed+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	681b      	ldr	r3, [r3, #0]
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	00030228 	.word	0x00030228

000b6c4c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <hal_i2c_begin+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	68db      	ldr	r3, [r3, #12]
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	00030228 	.word	0x00030228

000b6c5c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <hal_i2c_begin_transmission+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	699b      	ldr	r3, [r3, #24]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	00030228 	.word	0x00030228

000b6c6c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <hal_i2c_end_transmission+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	69db      	ldr	r3, [r3, #28]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	00030228 	.word	0x00030228

000b6c7c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <hal_i2c_write+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	6a1b      	ldr	r3, [r3, #32]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	00030228 	.word	0x00030228

000b6c8c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <hal_i2c_available+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	00030228 	.word	0x00030228

000b6c9c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <hal_i2c_read+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	00030228 	.word	0x00030228

000b6cac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <hal_i2c_peek+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	00030228 	.word	0x00030228

000b6cbc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <hal_i2c_flush+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030228 	.word	0x00030228

000b6ccc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <hal_i2c_is_enabled+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030228 	.word	0x00030228

000b6cdc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <hal_i2c_init+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030228 	.word	0x00030228

000b6cec <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <sock_setsockopt+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	699b      	ldr	r3, [r3, #24]
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030238 	.word	0x00030238

000b6cfc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <sock_close+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	69db      	ldr	r3, [r3, #28]
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030238 	.word	0x00030238

000b6d0c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <sock_connect+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	6a1b      	ldr	r3, [r3, #32]
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	00030238 	.word	0x00030238

000b6d1c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <sock_recv+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	00030238 	.word	0x00030238

000b6d2c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <sock_send+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030238 	.word	0x00030238

000b6d3c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <sock_socket+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	00030238 	.word	0x00030238

000b6d4c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <hal_spi_begin+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	681b      	ldr	r3, [r3, #0]
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030230 	.word	0x00030230

000b6d5c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <hal_spi_transfer+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	695b      	ldr	r3, [r3, #20]
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030230 	.word	0x00030230

000b6d6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <hal_spi_init+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	69db      	ldr	r3, [r3, #28]
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	00030230 	.word	0x00030230

000b6d7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <hal_spi_is_enabled+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	6a1b      	ldr	r3, [r3, #32]
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	00030230 	.word	0x00030230

000b6d8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <hal_spi_info+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	00030230 	.word	0x00030230

000b6d9c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <hal_spi_set_settings+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	00030230 	.word	0x00030230

000b6dac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <hal_spi_acquire+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	00030230 	.word	0x00030230

000b6dbc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <hal_spi_release+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	00030230 	.word	0x00030230

000b6dcc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <HAL_USB_USART_Init+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	681b      	ldr	r3, [r3, #0]
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	0003024c 	.word	0x0003024c

000b6ddc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <HAL_USB_USART_Begin+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	685b      	ldr	r3, [r3, #4]
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	0003024c 	.word	0x0003024c

000b6dec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <HAL_USB_USART_End+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	689b      	ldr	r3, [r3, #8]
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	0003024c 	.word	0x0003024c

000b6dfc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <HAL_USB_USART_Available_Data+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	691b      	ldr	r3, [r3, #16]
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	0003024c 	.word	0x0003024c

000b6e0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	695b      	ldr	r3, [r3, #20]
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	0003024c 	.word	0x0003024c

000b6e1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <HAL_USB_USART_Receive_Data+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	699b      	ldr	r3, [r3, #24]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	0003024c 	.word	0x0003024c

000b6e2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <HAL_USB_USART_Send_Data+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	69db      	ldr	r3, [r3, #28]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	0003024c 	.word	0x0003024c

000b6e3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <HAL_USB_USART_Flush_Data+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	6a1b      	ldr	r3, [r3, #32]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003024c 	.word	0x0003024c

000b6e4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <panic_+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	00030260 	.word	0x00030260

000b6e5c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <log_message+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	00030260 	.word	0x00030260

000b6e6c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <log_message_v+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	00030260 	.word	0x00030260

000b6e7c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <log_level_name+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	00030260 	.word	0x00030260

000b6e8c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <log_set_callbacks+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	00030260 	.word	0x00030260

000b6e9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <set_system_mode+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	685b      	ldr	r3, [r3, #4]
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	00030220 	.word	0x00030220

000b6eac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <system_delay_ms+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	695b      	ldr	r3, [r3, #20]
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	00030220 	.word	0x00030220

000b6ebc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <system_thread_set_state+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	00030220 	.word	0x00030220

000b6ecc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b03      	ldr	r3, [pc, #12]	; (b6edc <system_ctrl_set_app_request_handler+0x10>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6ed6:	9301      	str	r3, [sp, #4]
   b6ed8:	bd08      	pop	{r3, pc}
   b6eda:	0000      	.short	0x0000
   b6edc:	00030220 	.word	0x00030220

000b6ee0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6ee0:	b508      	push	{r3, lr}
   b6ee2:	4b03      	ldr	r3, [pc, #12]	; (b6ef0 <system_ctrl_set_result+0x10>)
   b6ee4:	681b      	ldr	r3, [r3, #0]
   b6ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6eea:	9301      	str	r3, [sp, #4]
   b6eec:	bd08      	pop	{r3, pc}
   b6eee:	0000      	.short	0x0000
   b6ef0:	00030220 	.word	0x00030220

000b6ef4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <network_connect+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	685b      	ldr	r3, [r3, #4]
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030240 	.word	0x00030240

000b6f04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <network_connecting+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	689b      	ldr	r3, [r3, #8]
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	00030240 	.word	0x00030240

000b6f14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <network_disconnect+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	68db      	ldr	r3, [r3, #12]
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	00030240 	.word	0x00030240

000b6f24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <network_ready+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	691b      	ldr	r3, [r3, #16]
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	00030240 	.word	0x00030240

000b6f34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <network_on+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	695b      	ldr	r3, [r3, #20]
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	00030240 	.word	0x00030240

000b6f44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <network_off+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	699b      	ldr	r3, [r3, #24]
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	00030240 	.word	0x00030240

000b6f54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <network_listen+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	69db      	ldr	r3, [r3, #28]
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	00030240 	.word	0x00030240

000b6f64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <network_listening+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	6a1b      	ldr	r3, [r3, #32]
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	00030240 	.word	0x00030240

000b6f74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <network_set_listen_timeout+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	00030240 	.word	0x00030240

000b6f84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <network_get_listen_timeout+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	00030240 	.word	0x00030240

000b6f94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <network_is_on+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	00030240 	.word	0x00030240

000b6fa4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <network_is_off+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	00030240 	.word	0x00030240

000b6fb4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <spark_deviceID+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	69db      	ldr	r3, [r3, #28]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	00030244 	.word	0x00030244

000b6fc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	00030244 	.word	0x00030244

000b6fd4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <malloc+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	681b      	ldr	r3, [r3, #0]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	0003021c 	.word	0x0003021c

000b6fe4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <free+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	685b      	ldr	r3, [r3, #4]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	0003021c 	.word	0x0003021c

000b6ff4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <realloc+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	689b      	ldr	r3, [r3, #8]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	0003021c 	.word	0x0003021c

000b7004 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <vsnprintf+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	0003021c 	.word	0x0003021c

000b7014 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <abort+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	0003021c 	.word	0x0003021c

000b7024 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <_malloc_r+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	0003021c 	.word	0x0003021c

000b7034 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <__errno+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	0003021c 	.word	0x0003021c

000b7044 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <__assert_func+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	0003021c 	.word	0x0003021c

000b7054 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <newlib_impure_ptr_callback+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	0003021c 	.word	0x0003021c

000b7064 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7064:	2200      	movs	r2, #0
   b7066:	6840      	ldr	r0, [r0, #4]
   b7068:	4611      	mov	r1, r2
   b706a:	f7ff bf7b 	b.w	b6f64 <network_listening>

000b706e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b706e:	2200      	movs	r2, #0
   b7070:	6840      	ldr	r0, [r0, #4]
   b7072:	4611      	mov	r1, r2
   b7074:	f7ff bf86 	b.w	b6f84 <network_get_listen_timeout>

000b7078 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7078:	6840      	ldr	r0, [r0, #4]
   b707a:	2200      	movs	r2, #0
   b707c:	f7ff bf7a 	b.w	b6f74 <network_set_listen_timeout>

000b7080 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7080:	6840      	ldr	r0, [r0, #4]
   b7082:	2200      	movs	r2, #0
   b7084:	f081 0101 	eor.w	r1, r1, #1
   b7088:	f7ff bf64 	b.w	b6f54 <network_listen>

000b708c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b708c:	2300      	movs	r3, #0
   b708e:	6840      	ldr	r0, [r0, #4]
   b7090:	461a      	mov	r2, r3
   b7092:	4619      	mov	r1, r3
   b7094:	f7ff bf56 	b.w	b6f44 <network_off>

000b7098 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7098:	2300      	movs	r3, #0
   b709a:	6840      	ldr	r0, [r0, #4]
   b709c:	461a      	mov	r2, r3
   b709e:	4619      	mov	r1, r3
   b70a0:	f7ff bf48 	b.w	b6f34 <network_on>

000b70a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b70a4:	2200      	movs	r2, #0
   b70a6:	6840      	ldr	r0, [r0, #4]
   b70a8:	4611      	mov	r1, r2
   b70aa:	f7ff bf3b 	b.w	b6f24 <network_ready>

000b70ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b70ae:	2200      	movs	r2, #0
   b70b0:	6840      	ldr	r0, [r0, #4]
   b70b2:	4611      	mov	r1, r2
   b70b4:	f7ff bf26 	b.w	b6f04 <network_connecting>

000b70b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b70b8:	6840      	ldr	r0, [r0, #4]
   b70ba:	2200      	movs	r2, #0
   b70bc:	2102      	movs	r1, #2
   b70be:	f7ff bf29 	b.w	b6f14 <network_disconnect>

000b70c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b70c2:	2300      	movs	r3, #0
   b70c4:	6840      	ldr	r0, [r0, #4]
   b70c6:	461a      	mov	r2, r3
   b70c8:	f7ff bf14 	b.w	b6ef4 <network_connect>

000b70cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b70cc:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b70ce:	2203      	movs	r2, #3
   b70d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b70d2:	4a02      	ldr	r2, [pc, #8]	; (b70dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b70d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b70d6:	4770      	bx	lr
   b70d8:	2003e688 	.word	0x2003e688
   b70dc:	000bd1e0 	.word	0x000bd1e0

000b70e0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b70e0:	2100      	movs	r1, #0
   b70e2:	f7ff be6b 	b.w	b6dbc <hal_spi_release>

000b70e6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b70e6:	2100      	movs	r1, #0
   b70e8:	f7ff be60 	b.w	b6dac <hal_spi_acquire>

000b70ec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b70ec:	b510      	push	{r4, lr}
   b70ee:	4604      	mov	r4, r0
   b70f0:	4608      	mov	r0, r1
{
    _spi = spi;
   b70f2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b70f4:	f7ff fe3a 	bl	b6d6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b70f8:	2300      	movs	r3, #0
   b70fa:	6063      	str	r3, [r4, #4]
}
   b70fc:	4620      	mov	r0, r4
   b70fe:	bd10      	pop	{r4, pc}

000b7100 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7100:	b513      	push	{r0, r1, r4, lr}
   b7102:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7104:	7800      	ldrb	r0, [r0, #0]
   b7106:	f7ff ffee 	bl	b70e6 <_ZN8SPIClass4lockEv.isra.0>
   b710a:	b958      	cbnz	r0, b7124 <_ZN8SPIClass5beginEv+0x24>
   b710c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b710e:	9001      	str	r0, [sp, #4]
   b7110:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7114:	f7ff fe1a 	bl	b6d4c <hal_spi_begin>
        unlock();
   b7118:	9801      	ldr	r0, [sp, #4]
    }
}
   b711a:	b002      	add	sp, #8
   b711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7120:	f7ff bfde 	b.w	b70e0 <_ZN8SPIClass6unlockEv.isra.0>
   b7124:	b002      	add	sp, #8
   b7126:	bd10      	pop	{r4, pc}

000b7128 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7128:	7800      	ldrb	r0, [r0, #0]
   b712a:	f7ff bfd9 	b.w	b70e0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7130 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7130:	0840      	lsrs	r0, r0, #1
{
   b7132:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7134:	6018      	str	r0, [r3, #0]
   b7136:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7138:	6818      	ldr	r0, [r3, #0]
   b713a:	4288      	cmp	r0, r1
   b713c:	b2e5      	uxtb	r5, r4
   b713e:	d906      	bls.n	b714e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7140:	3401      	adds	r4, #1
   b7142:	2c08      	cmp	r4, #8
   b7144:	d002      	beq.n	b714c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7146:	0840      	lsrs	r0, r0, #1
   b7148:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b714a:	e7f5      	b.n	b7138 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b714c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7150:	5d5b      	ldrb	r3, [r3, r5]
   b7152:	7013      	strb	r3, [r2, #0]
}
   b7154:	bd30      	pop	{r4, r5, pc}
   b7156:	bf00      	nop
   b7158:	000bd214 	.word	0x000bd214

000b715c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b715c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7160:	4606      	mov	r6, r0
   b7162:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7164:	7800      	ldrb	r0, [r0, #0]
{
   b7166:	460c      	mov	r4, r1
    CHECK(lock());
   b7168:	f7ff ffbd 	bl	b70e6 <_ZN8SPIClass4lockEv.isra.0>
   b716c:	2800      	cmp	r0, #0
   b716e:	db1b      	blt.n	b71a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7170:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7172:	2214      	movs	r2, #20
   b7174:	2100      	movs	r1, #0
   b7176:	a809      	add	r0, sp, #36	; 0x24
   b7178:	f003 fa02 	bl	ba580 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b717c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b717e:	2200      	movs	r2, #0
   b7180:	a909      	add	r1, sp, #36	; 0x24
   b7182:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7184:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7188:	f7ff fe00 	bl	b6d8c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b718c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7190:	b113      	cbz	r3, b7198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7192:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7196:	b155      	cbz	r5, b71ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7198:	2700      	movs	r7, #0
   b719a:	46b9      	mov	r9, r7
   b719c:	46b8      	mov	r8, r7
   b719e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b71a0:	7923      	ldrb	r3, [r4, #4]
   b71a2:	b15d      	cbz	r5, b71bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b71a4:	b1c3      	cbz	r3, b71d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b71a6:	2000      	movs	r0, #0
}
   b71a8:	b00f      	add	sp, #60	; 0x3c
   b71aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b71ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b71b2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b71b6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b71ba:	e7f1      	b.n	b71a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b71bc:	2b00      	cmp	r3, #0
   b71be:	d135      	bne.n	b722c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b71c0:	68a3      	ldr	r3, [r4, #8]
   b71c2:	4543      	cmp	r3, r8
   b71c4:	d108      	bne.n	b71d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b71c6:	f88d 9020 	strb.w	r9, [sp, #32]
   b71ca:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b71ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b71d2:	89a3      	ldrh	r3, [r4, #12]
   b71d4:	429a      	cmp	r2, r3
   b71d6:	d0e6      	beq.n	b71a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b71d8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b71da:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b71dc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b71e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b71e2:	ab04      	add	r3, sp, #16
   b71e4:	f10d 020f 	add.w	r2, sp, #15
   b71e8:	f7ff ffa2 	bl	b7130 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b71ec:	7921      	ldrb	r1, [r4, #4]
   b71ee:	b985      	cbnz	r5, b7212 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b71f0:	b989      	cbnz	r1, b7216 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b71f2:	68a3      	ldr	r3, [r4, #8]
   b71f4:	4543      	cmp	r3, r8
   b71f6:	d30e      	bcc.n	b7216 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b71f8:	f88d 9020 	strb.w	r9, [sp, #32]
   b71fc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7200:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7204:	89a3      	ldrh	r3, [r4, #12]
   b7206:	429a      	cmp	r2, r3
   b7208:	d105      	bne.n	b7216 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b720a:	9b04      	ldr	r3, [sp, #16]
   b720c:	4543      	cmp	r3, r8
   b720e:	d102      	bne.n	b7216 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7210:	e7c9      	b.n	b71a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7212:	2900      	cmp	r1, #0
   b7214:	d1f9      	bne.n	b720a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7216:	2300      	movs	r3, #0
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	7b63      	ldrb	r3, [r4, #13]
   b721c:	9300      	str	r3, [sp, #0]
   b721e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7222:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7224:	7830      	ldrb	r0, [r6, #0]
   b7226:	f7ff fdb9 	bl	b6d9c <hal_spi_set_settings>
   b722a:	e7bc      	b.n	b71a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b722c:	e9cd 5500 	strd	r5, r5, [sp]
   b7230:	462b      	mov	r3, r5
   b7232:	462a      	mov	r2, r5
   b7234:	2101      	movs	r1, #1
   b7236:	e7f5      	b.n	b7224 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7238 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7238:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b723a:	7800      	ldrb	r0, [r0, #0]
   b723c:	f7ff fd8e 	bl	b6d5c <hal_spi_transfer>
}
   b7240:	b2c0      	uxtb	r0, r0
   b7242:	bd08      	pop	{r3, pc}

000b7244 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7244:	4b05      	ldr	r3, [pc, #20]	; (b725c <_GLOBAL__sub_I_System+0x18>)
   b7246:	2202      	movs	r2, #2
   b7248:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b724a:	4b05      	ldr	r3, [pc, #20]	; (b7260 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b724c:	4a05      	ldr	r2, [pc, #20]	; (b7264 <_GLOBAL__sub_I_System+0x20>)
   b724e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7250:	2000      	movs	r0, #0
   b7252:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7256:	f7ff be21 	b.w	b6e9c <set_system_mode>
   b725a:	bf00      	nop
   b725c:	2003e69c 	.word	0x2003e69c
   b7260:	2003e690 	.word	0x2003e690
   b7264:	ffff0000 	.word	0xffff0000

000b7268 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7268:	b510      	push	{r4, lr}
   b726a:	4604      	mov	r4, r0
{
	free(buffer);
   b726c:	6800      	ldr	r0, [r0, #0]
   b726e:	f7ff feb9 	bl	b6fe4 <free>
}
   b7272:	4620      	mov	r0, r4
   b7274:	bd10      	pop	{r4, pc}

000b7276 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7276:	b510      	push	{r4, lr}
   b7278:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b727a:	6800      	ldr	r0, [r0, #0]
   b727c:	b108      	cbz	r0, b7282 <_ZN6String10invalidateEv+0xc>
   b727e:	f7ff feb1 	bl	b6fe4 <free>
	buffer = NULL;
   b7282:	2300      	movs	r3, #0
	capacity = len = 0;
   b7284:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7288:	6023      	str	r3, [r4, #0]
}
   b728a:	bd10      	pop	{r4, pc}

000b728c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b728c:	b538      	push	{r3, r4, r5, lr}
   b728e:	4604      	mov	r4, r0
   b7290:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7292:	6800      	ldr	r0, [r0, #0]
   b7294:	3101      	adds	r1, #1
   b7296:	f7ff fead 	bl	b6ff4 <realloc>
	if (newbuffer) {
   b729a:	b110      	cbz	r0, b72a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b729c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b72a0:	2001      	movs	r0, #1
	}
	return 0;
}
   b72a2:	bd38      	pop	{r3, r4, r5, pc}

000b72a4 <_ZN6String7reserveEj>:
{
   b72a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b72a6:	6803      	ldr	r3, [r0, #0]
{
   b72a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b72aa:	b123      	cbz	r3, b72b6 <_ZN6String7reserveEj+0x12>
   b72ac:	6843      	ldr	r3, [r0, #4]
   b72ae:	428b      	cmp	r3, r1
   b72b0:	d301      	bcc.n	b72b6 <_ZN6String7reserveEj+0x12>
   b72b2:	2001      	movs	r0, #1
}
   b72b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b72b6:	4620      	mov	r0, r4
   b72b8:	f7ff ffe8 	bl	b728c <_ZN6String12changeBufferEj>
   b72bc:	2800      	cmp	r0, #0
   b72be:	d0f9      	beq.n	b72b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b72c0:	68a3      	ldr	r3, [r4, #8]
   b72c2:	2b00      	cmp	r3, #0
   b72c4:	d1f5      	bne.n	b72b2 <_ZN6String7reserveEj+0xe>
   b72c6:	6822      	ldr	r2, [r4, #0]
   b72c8:	7013      	strb	r3, [r2, #0]
   b72ca:	e7f2      	b.n	b72b2 <_ZN6String7reserveEj+0xe>

000b72cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b72cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b72ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b72d0:	4611      	mov	r1, r2
   b72d2:	9201      	str	r2, [sp, #4]
{
   b72d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b72d6:	f7ff ffe5 	bl	b72a4 <_ZN6String7reserveEj>
   b72da:	9a01      	ldr	r2, [sp, #4]
   b72dc:	b928      	cbnz	r0, b72ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b72de:	4620      	mov	r0, r4
   b72e0:	f7ff ffc9 	bl	b7276 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b72e4:	4620      	mov	r0, r4
   b72e6:	b003      	add	sp, #12
   b72e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b72ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b72ec:	4629      	mov	r1, r5
   b72ee:	6820      	ldr	r0, [r4, #0]
   b72f0:	f003 f91e 	bl	ba530 <memcpy>
	buffer[len] = 0;
   b72f4:	6822      	ldr	r2, [r4, #0]
   b72f6:	68a3      	ldr	r3, [r4, #8]
   b72f8:	2100      	movs	r1, #0
   b72fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b72fc:	e7f2      	b.n	b72e4 <_ZN6String4copyEPKcj+0x18>

000b72fe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b72fe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7300:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7302:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7306:	4604      	mov	r4, r0
	len = 0;
   b7308:	6083      	str	r3, [r0, #8]
	flags = 0;
   b730a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b730c:	b141      	cbz	r1, b7320 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b730e:	4608      	mov	r0, r1
   b7310:	9101      	str	r1, [sp, #4]
   b7312:	f7fd fb73 	bl	b49fc <strlen>
   b7316:	9901      	ldr	r1, [sp, #4]
   b7318:	4602      	mov	r2, r0
   b731a:	4620      	mov	r0, r4
   b731c:	f7ff ffd6 	bl	b72cc <_ZN6String4copyEPKcj>
}
   b7320:	4620      	mov	r0, r4
   b7322:	b002      	add	sp, #8
   b7324:	bd10      	pop	{r4, pc}

000b7326 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7326:	b538      	push	{r3, r4, r5, lr}
   b7328:	4605      	mov	r5, r0
	if (buffer) {
   b732a:	6800      	ldr	r0, [r0, #0]
{
   b732c:	460c      	mov	r4, r1
	if (buffer) {
   b732e:	b168      	cbz	r0, b734c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7330:	686a      	ldr	r2, [r5, #4]
   b7332:	688b      	ldr	r3, [r1, #8]
   b7334:	429a      	cmp	r2, r3
   b7336:	d307      	bcc.n	b7348 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7338:	6809      	ldr	r1, [r1, #0]
   b733a:	f003 f96e 	bl	ba61a <strcpy>
			len = rhs.len;
   b733e:	68a3      	ldr	r3, [r4, #8]
   b7340:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7342:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7344:	60a3      	str	r3, [r4, #8]
}
   b7346:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7348:	f7ff fe4c 	bl	b6fe4 <free>
	buffer = rhs.buffer;
   b734c:	6823      	ldr	r3, [r4, #0]
   b734e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7350:	6863      	ldr	r3, [r4, #4]
   b7352:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7354:	68a3      	ldr	r3, [r4, #8]
   b7356:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7358:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b735a:	e9c4 3300 	strd	r3, r3, [r4]
   b735e:	e7f1      	b.n	b7344 <_ZN6String4moveERS_+0x1e>

000b7360 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7360:	b510      	push	{r4, lr}
	buffer = NULL;
   b7362:	2300      	movs	r3, #0
	capacity = 0;
   b7364:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7368:	4604      	mov	r4, r0
	len = 0;
   b736a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b736c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b736e:	f7ff ffda 	bl	b7326 <_ZN6String4moveERS_>
}
   b7372:	4620      	mov	r0, r4
   b7374:	bd10      	pop	{r4, pc}

000b7376 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7376:	4288      	cmp	r0, r1
{
   b7378:	b510      	push	{r4, lr}
   b737a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b737c:	d005      	beq.n	b738a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b737e:	680b      	ldr	r3, [r1, #0]
   b7380:	b12b      	cbz	r3, b738e <_ZN6StringaSERKS_+0x18>
   b7382:	688a      	ldr	r2, [r1, #8]
   b7384:	4619      	mov	r1, r3
   b7386:	f7ff ffa1 	bl	b72cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b738a:	4620      	mov	r0, r4
   b738c:	bd10      	pop	{r4, pc}
	else invalidate();
   b738e:	f7ff ff72 	bl	b7276 <_ZN6String10invalidateEv>
   b7392:	e7fa      	b.n	b738a <_ZN6StringaSERKS_+0x14>

000b7394 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7394:	b510      	push	{r4, lr}
	buffer = NULL;
   b7396:	2300      	movs	r3, #0
String::String(const String &value)
   b7398:	4604      	mov	r4, r0
	capacity = 0;
   b739a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b739e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b73a0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b73a2:	f7ff ffe8 	bl	b7376 <_ZN6StringaSERKS_>
}
   b73a6:	4620      	mov	r0, r4
   b73a8:	bd10      	pop	{r4, pc}

000b73aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b73aa:	b513      	push	{r0, r1, r4, lr}
   b73ac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b73ae:	b159      	cbz	r1, b73c8 <_ZN6StringaSEPKc+0x1e>
   b73b0:	4608      	mov	r0, r1
   b73b2:	9101      	str	r1, [sp, #4]
   b73b4:	f7fd fb22 	bl	b49fc <strlen>
   b73b8:	9901      	ldr	r1, [sp, #4]
   b73ba:	4602      	mov	r2, r0
   b73bc:	4620      	mov	r0, r4
   b73be:	f7ff ff85 	bl	b72cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73c2:	4620      	mov	r0, r4
   b73c4:	b002      	add	sp, #8
   b73c6:	bd10      	pop	{r4, pc}
	else invalidate();
   b73c8:	f7ff ff55 	bl	b7276 <_ZN6String10invalidateEv>
   b73cc:	e7f9      	b.n	b73c2 <_ZN6StringaSEPKc+0x18>

000b73ce <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b73ce:	6802      	ldr	r2, [r0, #0]
{
   b73d0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b73d2:	6809      	ldr	r1, [r1, #0]
   b73d4:	b162      	cbz	r2, b73f0 <_ZNK6String9compareToERKS_+0x22>
   b73d6:	b941      	cbnz	r1, b73ea <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b73d8:	6880      	ldr	r0, [r0, #8]
   b73da:	b160      	cbz	r0, b73f6 <_ZNK6String9compareToERKS_+0x28>
   b73dc:	7810      	ldrb	r0, [r2, #0]
   b73de:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b73e0:	6898      	ldr	r0, [r3, #8]
   b73e2:	b140      	cbz	r0, b73f6 <_ZNK6String9compareToERKS_+0x28>
   b73e4:	7809      	ldrb	r1, [r1, #0]
   b73e6:	4248      	negs	r0, r1
   b73e8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b73ea:	4610      	mov	r0, r2
   b73ec:	f7fd bafc 	b.w	b49e8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b73f0:	2900      	cmp	r1, #0
   b73f2:	d1f5      	bne.n	b73e0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b73f4:	4608      	mov	r0, r1
}
   b73f6:	4770      	bx	lr

000b73f8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b73f8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b73fa:	6800      	ldr	r0, [r0, #0]
   b73fc:	b140      	cbz	r0, b7410 <_ZNK6String7toFloatEv+0x18>
   b73fe:	f003 f87b 	bl	ba4f8 <atof>
   b7402:	ec51 0b10 	vmov	r0, r1, d0
   b7406:	f7fd fa81 	bl	b490c <__aeabi_d2f>
   b740a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b740e:	bd08      	pop	{r3, pc}
	return 0;
   b7410:	ed9f 0a01 	vldr	s0, [pc, #4]	; b7418 <_ZNK6String7toFloatEv+0x20>
   b7414:	e7fb      	b.n	b740e <_ZNK6String7toFloatEv+0x16>
   b7416:	bf00      	nop
   b7418:	00000000 	.word	0x00000000

000b741c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b741c:	4770      	bx	lr
	...

000b7420 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b7420:	4b06      	ldr	r3, [pc, #24]	; (b743c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7422:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7424:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7426:	f100 040c 	add.w	r4, r0, #12
	    ||
   b742a:	d005      	beq.n	b7438 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b742c:	4608      	mov	r0, r1
   b742e:	f002 ff4b 	bl	ba2c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b7432:	2800      	cmp	r0, #0
   b7434:	bf08      	it	eq
   b7436:	2400      	moveq	r4, #0
      }
   b7438:	4620      	mov	r0, r4
   b743a:	bd10      	pop	{r4, pc}
   b743c:	000bd2f8 	.word	0x000bd2f8

000b7440 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7440:	b510      	push	{r4, lr}
   b7442:	2130      	movs	r1, #48	; 0x30
   b7444:	4604      	mov	r4, r0
   b7446:	f7fd fb3a 	bl	b4abe <_ZdlPvj>
   b744a:	4620      	mov	r0, r4
   b744c:	bd10      	pop	{r4, pc}

000b744e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b744e:	2130      	movs	r1, #48	; 0x30
   b7450:	f7fd bb35 	b.w	b4abe <_ZdlPvj>

000b7454 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7454:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7456:	2500      	movs	r5, #0
   b7458:	1cec      	adds	r4, r5, #3
   b745a:	428c      	cmp	r4, r1
   b745c:	d80d      	bhi.n	b747a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b745e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7460:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7462:	5d87      	ldrb	r7, [r0, r6]
   b7464:	4297      	cmp	r7, r2
   b7466:	d105      	bne.n	b7474 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7468:	4426      	add	r6, r4
   b746a:	42b1      	cmp	r1, r6
   b746c:	d305      	bcc.n	b747a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b746e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7470:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7472:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7474:	3401      	adds	r4, #1
   b7476:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7478:	e7ee      	b.n	b7458 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b747a:	2000      	movs	r0, #0
   b747c:	e7f9      	b.n	b7472 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b747e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b747e:	4603      	mov	r3, r0
   b7480:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b7482:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7484:	e9d3 2100 	ldrd	r2, r1, [r3]
   b7488:	4710      	bx	r2

000b748a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b748a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b748c:	b538      	push	{r3, r4, r5, lr}
   b748e:	4604      	mov	r4, r0
	switch (__op)
   b7490:	d102      	bne.n	b7498 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7492:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7494:	6023      	str	r3, [r4, #0]
	}
   b7496:	e003      	b.n	b74a0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b7498:	2a02      	cmp	r2, #2
   b749a:	d003      	beq.n	b74a4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b749c:	2a03      	cmp	r2, #3
   b749e:	d00d      	beq.n	b74bc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b74a0:	2000      	movs	r0, #0
   b74a2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b74a4:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b74a6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b74a8:	f7fd fb03 	bl	b4ab2 <_Znwj>
   b74ac:	4603      	mov	r3, r0
   b74ae:	2800      	cmp	r0, #0
   b74b0:	d0f0      	beq.n	b7494 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b74b2:	e895 0003 	ldmia.w	r5, {r0, r1}
   b74b6:	e883 0003 	stmia.w	r3, {r0, r1}
   b74ba:	e7eb      	b.n	b7494 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b74bc:	6800      	ldr	r0, [r0, #0]
   b74be:	2800      	cmp	r0, #0
   b74c0:	d0ee      	beq.n	b74a0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b74c2:	2108      	movs	r1, #8
   b74c4:	f7fd fafb 	bl	b4abe <_ZdlPvj>
   b74c8:	e7ea      	b.n	b74a0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b74ca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b74ca:	b510      	push	{r4, lr}
      if (_M_manager)
   b74cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b74ce:	4604      	mov	r4, r0
      if (_M_manager)
   b74d0:	b113      	cbz	r3, b74d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b74d2:	2203      	movs	r2, #3
   b74d4:	4601      	mov	r1, r0
   b74d6:	4798      	blx	r3
    }
   b74d8:	4620      	mov	r0, r4
   b74da:	bd10      	pop	{r4, pc}

000b74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b74dc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b74de:	6843      	ldr	r3, [r0, #4]
   b74e0:	3b01      	subs	r3, #1
    {
   b74e2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b74e4:	6043      	str	r3, [r0, #4]
   b74e6:	b963      	cbnz	r3, b7502 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b74e8:	6803      	ldr	r3, [r0, #0]
   b74ea:	689b      	ldr	r3, [r3, #8]
   b74ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b74ee:	68a3      	ldr	r3, [r4, #8]
   b74f0:	3b01      	subs	r3, #1
   b74f2:	60a3      	str	r3, [r4, #8]
   b74f4:	b92b      	cbnz	r3, b7502 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b74f6:	6823      	ldr	r3, [r4, #0]
   b74f8:	4620      	mov	r0, r4
   b74fa:	68db      	ldr	r3, [r3, #12]
    }
   b74fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7500:	4718      	bx	r3
    }
   b7502:	bd10      	pop	{r4, pc}

000b7504 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7504:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7508:	b2da      	uxtb	r2, r3
   b750a:	2a09      	cmp	r2, #9
   b750c:	d801      	bhi.n	b7512 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b750e:	4618      	mov	r0, r3
   b7510:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7512:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7516:	2b05      	cmp	r3, #5
   b7518:	d801      	bhi.n	b751e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b751a:	3857      	subs	r0, #87	; 0x57
   b751c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b751e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7522:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7524:	bf94      	ite	ls
   b7526:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7528:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b752c:	4770      	bx	lr
	...

000b7530 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7530:	b510      	push	{r4, lr}
            locked_(false) {
   b7532:	2300      	movs	r3, #0
   b7534:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7536:	4b04      	ldr	r3, [pc, #16]	; (b7548 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7538:	4604      	mov	r4, r0
   b753a:	6818      	ldr	r0, [r3, #0]
   b753c:	f7ff fb06 	bl	b6b4c <os_mutex_recursive_lock>
        locked_ = true;
   b7540:	2301      	movs	r3, #1
   b7542:	7023      	strb	r3, [r4, #0]
    }
   b7544:	4620      	mov	r0, r4
   b7546:	bd10      	pop	{r4, pc}
   b7548:	2003e6a4 	.word	0x2003e6a4

000b754c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b754c:	b510      	push	{r4, lr}
        if (locked_) {
   b754e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7550:	4604      	mov	r4, r0
        if (locked_) {
   b7552:	b11b      	cbz	r3, b755c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7554:	4b02      	ldr	r3, [pc, #8]	; (b7560 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7556:	6818      	ldr	r0, [r3, #0]
   b7558:	f7ff fb00 	bl	b6b5c <os_mutex_recursive_unlock>
    }
   b755c:	4620      	mov	r0, r4
   b755e:	bd10      	pop	{r4, pc}
   b7560:	2003e6a4 	.word	0x2003e6a4

000b7564 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7564:	b082      	sub	sp, #8
   b7566:	4603      	mov	r3, r0
    address_ = addr;
   b7568:	6808      	ldr	r0, [r1, #0]
   b756a:	6849      	ldr	r1, [r1, #4]
   b756c:	466a      	mov	r2, sp
   b756e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7570:	466a      	mov	r2, sp
   b7572:	ca03      	ldmia	r2!, {r0, r1}
   b7574:	6018      	str	r0, [r3, #0]
}
   b7576:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7578:	6059      	str	r1, [r3, #4]
}
   b757a:	b002      	add	sp, #8
   b757c:	4770      	bx	lr

000b757e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b757e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7580:	7982      	ldrb	r2, [r0, #6]
   b7582:	798b      	ldrb	r3, [r1, #6]
   b7584:	429a      	cmp	r2, r3
   b7586:	d106      	bne.n	b7596 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7588:	2206      	movs	r2, #6
   b758a:	f002 ffc1 	bl	ba510 <memcmp>
   b758e:	fab0 f080 	clz	r0, r0
   b7592:	0940      	lsrs	r0, r0, #5
}
   b7594:	bd08      	pop	{r3, pc}
    return false;
   b7596:	2000      	movs	r0, #0
   b7598:	e7fc      	b.n	b7594 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b759a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b759a:	f04f 33ff 	mov.w	r3, #4294967295
   b759e:	6003      	str	r3, [r0, #0]
   b75a0:	8083      	strh	r3, [r0, #4]
}
   b75a2:	2000      	movs	r0, #0
   b75a4:	4770      	bx	lr

000b75a6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b75a6:	b508      	push	{r3, lr}
   b75a8:	4602      	mov	r2, r0
        : address_{} {
   b75aa:	2100      	movs	r1, #0
   b75ac:	6001      	str	r1, [r0, #0]
   b75ae:	6041      	str	r1, [r0, #4]
    clear();
   b75b0:	f7ff fff3 	bl	b759a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b75b4:	7191      	strb	r1, [r2, #6]
}
   b75b6:	4610      	mov	r0, r2
   b75b8:	bd08      	pop	{r3, pc}
	...

000b75bc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b75bc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b75be:	2301      	movs	r3, #1
   b75c0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b75c2:	4b05      	ldr	r3, [pc, #20]	; (b75d8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b75c4:	4602      	mov	r2, r0
   b75c6:	f103 0110 	add.w	r1, r3, #16
   b75ca:	f853 4b04 	ldr.w	r4, [r3], #4
   b75ce:	f842 4b04 	str.w	r4, [r2], #4
   b75d2:	428b      	cmp	r3, r1
   b75d4:	d1f9      	bne.n	b75ca <_ZN8particle7BleUuidC1Ev+0xe>
}
   b75d6:	bd10      	pop	{r4, pc}
   b75d8:	000bc5c2 	.word	0x000bc5c2

000b75dc <_ZNK8particle7BleUuid4typeEv>:
}
   b75dc:	6900      	ldr	r0, [r0, #16]
   b75de:	4770      	bx	lr

000b75e0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b75e0:	8980      	ldrh	r0, [r0, #12]
   b75e2:	4770      	bx	lr

000b75e4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b75e4:	4770      	bx	lr
	...

000b75e8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b75e8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b75ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b75ee:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b75f0:	4b34      	ldr	r3, [pc, #208]	; (b76c4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b75f2:	460c      	mov	r4, r1
   b75f4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b75f6:	4602      	mov	r2, r0
   b75f8:	f103 0110 	add.w	r1, r3, #16
   b75fc:	f853 0b04 	ldr.w	r0, [r3], #4
   b7600:	f842 0b04 	str.w	r0, [r2], #4
   b7604:	428b      	cmp	r3, r1
   b7606:	d1f9      	bne.n	b75fc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7608:	b344      	cbz	r4, b765c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b760a:	2124      	movs	r1, #36	; 0x24
   b760c:	4620      	mov	r0, r4
   b760e:	f003 f820 	bl	ba652 <strnlen>
   b7612:	2804      	cmp	r0, #4
   b7614:	f04f 0500 	mov.w	r5, #0
   b7618:	d123      	bne.n	b7662 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b761a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b761e:	af01      	add	r7, sp, #4
   b7620:	1ca5      	adds	r5, r4, #2
   b7622:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7624:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7628:	f7ff ff6c 	bl	b7504 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b762c:	f1b0 0800 	subs.w	r8, r0, #0
   b7630:	db12      	blt.n	b7658 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7632:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7636:	f7ff ff65 	bl	b7504 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b763a:	2800      	cmp	r0, #0
   b763c:	db0c      	blt.n	b7658 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b763e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7640:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7644:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7646:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b764a:	d1eb      	bne.n	b7624 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b764c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7650:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7652:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7656:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7658:	2300      	movs	r3, #0
   b765a:	6133      	str	r3, [r6, #16]
}
   b765c:	b002      	add	sp, #8
   b765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7662:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7666:	2124      	movs	r1, #36	; 0x24
   b7668:	4620      	mov	r0, r4
   b766a:	f002 fff2 	bl	ba652 <strnlen>
   b766e:	42a8      	cmp	r0, r5
   b7670:	d807      	bhi.n	b7682 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7672:	4642      	mov	r2, r8
   b7674:	2100      	movs	r1, #0
   b7676:	4630      	mov	r0, r6
}
   b7678:	b002      	add	sp, #8
   b767a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b767e:	f002 bf7f 	b.w	ba580 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7682:	f1b8 0f00 	cmp.w	r8, #0
   b7686:	d0e9      	beq.n	b765c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7688:	5d60      	ldrb	r0, [r4, r5]
   b768a:	f7ff ff3b 	bl	b7504 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b768e:	0603      	lsls	r3, r0, #24
   b7690:	d415      	bmi.n	b76be <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7692:	0100      	lsls	r0, r0, #4
   b7694:	f108 38ff 	add.w	r8, r8, #4294967295
   b7698:	b2c7      	uxtb	r7, r0
   b769a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b769e:	2124      	movs	r1, #36	; 0x24
   b76a0:	4620      	mov	r0, r4
   b76a2:	f002 ffd6 	bl	ba652 <strnlen>
   b76a6:	3501      	adds	r5, #1
   b76a8:	42a8      	cmp	r0, r5
   b76aa:	d908      	bls.n	b76be <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b76ac:	5d60      	ldrb	r0, [r4, r5]
   b76ae:	f7ff ff29 	bl	b7504 <_ZN8particle11hexToNibbleEc>
   b76b2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b76b4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b76b6:	bfa4      	itt	ge
   b76b8:	4338      	orrge	r0, r7
   b76ba:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b76be:	3501      	adds	r5, #1
   b76c0:	e7d1      	b.n	b7666 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b76c2:	bf00      	nop
   b76c4:	000bc5c2 	.word	0x000bc5c2

000b76c8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b76c8:	b513      	push	{r0, r1, r4, lr}
   b76ca:	4604      	mov	r4, r0
   b76cc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b76ce:	f7ff ff75 	bl	b75bc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b76d2:	4620      	mov	r0, r4
   b76d4:	9901      	ldr	r1, [sp, #4]
   b76d6:	f7ff ff87 	bl	b75e8 <_ZN8particle7BleUuid9constructEPKc>
}
   b76da:	4620      	mov	r0, r4
   b76dc:	b002      	add	sp, #8
   b76de:	bd10      	pop	{r4, pc}

000b76e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b76e0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b76e2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b76e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b76ea:	4293      	cmp	r3, r2
   b76ec:	4618      	mov	r0, r3
   b76ee:	d006      	beq.n	b76fe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b76f0:	6804      	ldr	r4, [r0, #0]
   b76f2:	8824      	ldrh	r4, [r4, #0]
   b76f4:	428c      	cmp	r4, r1
   b76f6:	f103 0308 	add.w	r3, r3, #8
   b76fa:	d1f6      	bne.n	b76ea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b76fc:	bd10      	pop	{r4, pc}
        return nullptr;
   b76fe:	2000      	movs	r0, #0
   b7700:	e7fc      	b.n	b76fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7704 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7704:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7706:	2500      	movs	r5, #0
   b7708:	6005      	str	r5, [r0, #0]
   b770a:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b770c:	2030      	movs	r0, #48	; 0x30
   b770e:	f7fd f9d0 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b7712:	4604      	mov	r4, r0
   b7714:	b188      	cbz	r0, b773a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7716:	2301      	movs	r3, #1
   b7718:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b771c:	4b09      	ldr	r3, [pc, #36]	; (b7744 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b771e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7720:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7724:	8183      	strh	r3, [r0, #12]
   b7726:	300e      	adds	r0, #14
   b7728:	f7ff ff3d 	bl	b75a6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b772c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7730:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7734:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7738:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b773a:	6074      	str	r4, [r6, #4]
   b773c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b773e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7740:	4630      	mov	r0, r6
   b7742:	bd70      	pop	{r4, r5, r6, pc}
   b7744:	000bd2e4 	.word	0x000bd2e4

000b7748 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7748:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b774a:	460d      	mov	r5, r1
   b774c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b774e:	a801      	add	r0, sp, #4
   b7750:	f7ff feee 	bl	b7530 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7754:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7756:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b775a:	6023      	str	r3, [r4, #0]
   b775c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7760:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7762:	a801      	add	r0, sp, #4
   b7764:	f7ff fef2 	bl	b754c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7768:	4620      	mov	r0, r4
   b776a:	b003      	add	sp, #12
   b776c:	bd30      	pop	{r4, r5, pc}

000b776e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b776e:	b530      	push	{r4, r5, lr}
   b7770:	4605      	mov	r5, r0
   b7772:	b087      	sub	sp, #28
   b7774:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7776:	a801      	add	r0, sp, #4
   b7778:	f7ff feda 	bl	b7530 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b777c:	682a      	ldr	r2, [r5, #0]
   b777e:	6823      	ldr	r3, [r4, #0]
   b7780:	8812      	ldrh	r2, [r2, #0]
   b7782:	881b      	ldrh	r3, [r3, #0]
   b7784:	429a      	cmp	r2, r3
   b7786:	d10d      	bne.n	b77a4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7788:	4629      	mov	r1, r5
   b778a:	a802      	add	r0, sp, #8
   b778c:	f7ff ffdc 	bl	b7748 <_ZNK8particle13BlePeerDevice7addressEv>
   b7790:	4621      	mov	r1, r4
   b7792:	a804      	add	r0, sp, #16
   b7794:	f7ff ffd8 	bl	b7748 <_ZNK8particle13BlePeerDevice7addressEv>
   b7798:	a904      	add	r1, sp, #16
   b779a:	a802      	add	r0, sp, #8
   b779c:	f7ff feef 	bl	b757e <_ZNK8particle10BleAddresseqERKS0_>
   b77a0:	4604      	mov	r4, r0
   b77a2:	b900      	cbnz	r0, b77a6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b77a4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b77a6:	a801      	add	r0, sp, #4
   b77a8:	f7ff fed0 	bl	b754c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b77ac:	4620      	mov	r0, r4
   b77ae:	b007      	add	sp, #28
   b77b0:	bd30      	pop	{r4, r5, pc}
	...

000b77b4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b77b4:	b510      	push	{r4, lr}
   b77b6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b77b8:	2064      	movs	r0, #100	; 0x64
   b77ba:	f7fd f97a 	bl	b4ab2 <_Znwj>
   b77be:	b168      	cbz	r0, b77dc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b77c0:	2300      	movs	r3, #0
   b77c2:	e9c0 3300 	strd	r3, r3, [r0]
   b77c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b77ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b77ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b77d2:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b77d4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b77d6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b77d8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b77da:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b77dc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b77de:	b920      	cbnz	r0, b77ea <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b77e0:	4a0a      	ldr	r2, [pc, #40]	; (b780c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b77e2:	490b      	ldr	r1, [pc, #44]	; (b7810 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b77e4:	200a      	movs	r0, #10
   b77e6:	f7ff fb31 	bl	b6e4c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b77ea:	2000      	movs	r0, #0
   b77ec:	f7ff f94a 	bl	b6a84 <hal_ble_stack_init>
   b77f0:	b120      	cbz	r0, b77fc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b77f2:	4a06      	ldr	r2, [pc, #24]	; (b780c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b77f4:	4907      	ldr	r1, [pc, #28]	; (b7814 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b77f6:	200a      	movs	r0, #10
   b77f8:	f7ff fb28 	bl	b6e4c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b77fc:	6821      	ldr	r1, [r4, #0]
   b77fe:	4806      	ldr	r0, [pc, #24]	; (b7818 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7800:	2200      	movs	r2, #0
   b7802:	f7ff f969 	bl	b6ad8 <hal_ble_set_callback_on_periph_link_events>
}
   b7806:	4620      	mov	r0, r4
   b7808:	bd10      	pop	{r4, pc}
   b780a:	bf00      	nop
   b780c:	000b6a65 	.word	0x000b6a65
   b7810:	000bd21c 	.word	0x000bd21c
   b7814:	000bd25a 	.word	0x000bd25a
   b7818:	000b7d05 	.word	0x000b7d05

000b781c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b781c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b781e:	4c0a      	ldr	r4, [pc, #40]	; (b7848 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7820:	7823      	ldrb	r3, [r4, #0]
   b7822:	f3bf 8f5b 	dmb	ish
   b7826:	07db      	lsls	r3, r3, #31
   b7828:	d40c      	bmi.n	b7844 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b782a:	4620      	mov	r0, r4
   b782c:	f7fd f956 	bl	b4adc <__cxa_guard_acquire>
   b7830:	b140      	cbz	r0, b7844 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7832:	4806      	ldr	r0, [pc, #24]	; (b784c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7834:	f7ff ffbe 	bl	b77b4 <_ZN8particle14BleLocalDeviceC1Ev>
   b7838:	4620      	mov	r0, r4
   b783a:	f7fd f954 	bl	b4ae6 <__cxa_guard_release>
   b783e:	4804      	ldr	r0, [pc, #16]	; (b7850 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7840:	f002 fe54 	bl	ba4ec <atexit>
    return instance;
}
   b7844:	4801      	ldr	r0, [pc, #4]	; (b784c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7846:	bd10      	pop	{r4, pc}
   b7848:	2003e6a0 	.word	0x2003e6a0
   b784c:	2003e6a8 	.word	0x2003e6a8
   b7850:	000b79f5 	.word	0x000b79f5

000b7854 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7854:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7856:	2000      	movs	r0, #0
   b7858:	f7ff f914 	bl	b6a84 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b785c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7860:	bd08      	pop	{r3, pc}

000b7862 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7862:	b919      	cbnz	r1, b786c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7864:	460a      	mov	r2, r1
   b7866:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7868:	f7ff b914 	b.w	b6a94 <hal_ble_gap_set_advertising_data>
   b786c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7870:	2200      	movs	r2, #0
   b7872:	e7f9      	b.n	b7868 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7874 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7874:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7876:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b787a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b787c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7880:	42ae      	cmp	r6, r5
   b7882:	d004      	beq.n	b788e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7884:	4628      	mov	r0, r5
   b7886:	f7ff fcef 	bl	b7268 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b788a:	3510      	adds	r5, #16
   b788c:	e7f8      	b.n	b7880 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b788e:	6820      	ldr	r0, [r4, #0]
   b7890:	f7ff fba8 	bl	b6fe4 <free>
}
   b7894:	4620      	mov	r0, r4
   b7896:	bd70      	pop	{r4, r5, r6, pc}

000b7898 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7898:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b789a:	1e14      	subs	r4, r2, #0
   b789c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b789e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b78a0:	db02      	blt.n	b78a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b78a2:	1862      	adds	r2, r4, r1
   b78a4:	429a      	cmp	r2, r3
   b78a6:	dd00      	ble.n	b78aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b78a8:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b78aa:	682a      	ldr	r2, [r5, #0]
   b78ac:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b78ae:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b78b0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78b2:	1a52      	subs	r2, r2, r1
   b78b4:	f002 fe4a 	bl	ba54c <memmove>
    size_ -= n;
   b78b8:	686a      	ldr	r2, [r5, #4]
   b78ba:	1b12      	subs	r2, r2, r4
   b78bc:	606a      	str	r2, [r5, #4]
}
   b78be:	bd38      	pop	{r3, r4, r5, pc}

000b78c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b78c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b78c2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b78c4:	4604      	mov	r4, r0
   b78c6:	460d      	mov	r5, r1
   b78c8:	ab01      	add	r3, sp, #4
   b78ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78ce:	f7ff fdc1 	bl	b7454 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b78d2:	4602      	mov	r2, r0
   b78d4:	b138      	cbz	r0, b78e6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b78d6:	9901      	ldr	r1, [sp, #4]
   b78d8:	4620      	mov	r0, r4
   b78da:	f7ff ffdd 	bl	b7898 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b78de:	4629      	mov	r1, r5
   b78e0:	4620      	mov	r0, r4
   b78e2:	f7ff ffed 	bl	b78c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b78e6:	b003      	add	sp, #12
   b78e8:	bd30      	pop	{r4, r5, pc}

000b78ea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b78ea:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b78ec:	460c      	mov	r4, r1
   b78ee:	b929      	cbnz	r1, b78fc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b78f0:	460a      	mov	r2, r1
   b78f2:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b78f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b78f8:	f7ff b8d4 	b.w	b6aa4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b78fc:	2101      	movs	r1, #1
   b78fe:	4620      	mov	r0, r4
   b7900:	f7ff ffde 	bl	b78c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7904:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7908:	2200      	movs	r2, #0
   b790a:	e7f3      	b.n	b78f4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b790c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b790c:	b538      	push	{r3, r4, r5, lr}
   b790e:	4604      	mov	r4, r0
   b7910:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7912:	f7ff ffa6 	bl	b7862 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7916:	2800      	cmp	r0, #0
   b7918:	db0a      	blt.n	b7930 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b791a:	4629      	mov	r1, r5
   b791c:	4620      	mov	r0, r4
   b791e:	f7ff ffe4 	bl	b78ea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7922:	2800      	cmp	r0, #0
   b7924:	db04      	blt.n	b7930 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b792a:	2000      	movs	r0, #0
   b792c:	f7ff b8c2 	b.w	b6ab4 <hal_ble_gap_start_advertising>
}
   b7930:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7934 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   b7934:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7936:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7938:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b793a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b793c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b793e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7940:	f7fd f8b7 	bl	b4ab2 <_Znwj>
   b7944:	b118      	cbz	r0, b794e <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7946:	682b      	ldr	r3, [r5, #0]
   b7948:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b794a:	686b      	ldr	r3, [r5, #4]
   b794c:	6043      	str	r3, [r0, #4]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b794e:	4b03      	ldr	r3, [pc, #12]	; (b795c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7950:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7952:	4b03      	ldr	r3, [pc, #12]	; (b7960 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7954:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7956:	60a3      	str	r3, [r4, #8]
	  }
      }
   b7958:	4620      	mov	r0, r4
   b795a:	bd38      	pop	{r3, r4, r5, pc}
   b795c:	000b747f 	.word	0x000b747f
   b7960:	000b748b 	.word	0x000b748b

000b7964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7964:	680b      	ldr	r3, [r1, #0]
   b7966:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7968:	b113      	cbz	r3, b7970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b796a:	685a      	ldr	r2, [r3, #4]
   b796c:	3201      	adds	r2, #1
   b796e:	605a      	str	r2, [r3, #4]
      }
   b7970:	4770      	bx	lr

000b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7972:	b510      	push	{r4, lr}
   b7974:	f851 3b04 	ldr.w	r3, [r1], #4
   b7978:	4604      	mov	r4, r0
   b797a:	f840 3b04 	str.w	r3, [r0], #4
   b797e:	f7ff fff1 	bl	b7964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7982:	4620      	mov	r0, r4
   b7984:	bd10      	pop	{r4, pc}

000b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7986:	b510      	push	{r4, lr}
   b7988:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b798a:	6800      	ldr	r0, [r0, #0]
   b798c:	b108      	cbz	r0, b7992 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b798e:	f7ff fda5 	bl	b74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7992:	4620      	mov	r0, r4
   b7994:	bd10      	pop	{r4, pc}

000b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7996:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7998:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b799c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b799e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b79a2:	42ae      	cmp	r6, r5
   b79a4:	d004      	beq.n	b79b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b79a6:	1d28      	adds	r0, r5, #4
   b79a8:	f7ff ffed 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79ac:	3508      	adds	r5, #8
   b79ae:	e7f8      	b.n	b79a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b79b0:	6820      	ldr	r0, [r4, #0]
   b79b2:	f7ff fb17 	bl	b6fe4 <free>
}
   b79b6:	4620      	mov	r0, r4
   b79b8:	bd70      	pop	{r4, r5, r6, pc}

000b79ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b79ba:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b79bc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b79c0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b79c2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b79c6:	42ae      	cmp	r6, r5
   b79c8:	d004      	beq.n	b79d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b79ca:	1d28      	adds	r0, r5, #4
   b79cc:	f7ff ffdb 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79d0:	3508      	adds	r5, #8
   b79d2:	e7f8      	b.n	b79c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b79d4:	6820      	ldr	r0, [r4, #0]
   b79d6:	f7ff fb05 	bl	b6fe4 <free>
}
   b79da:	4620      	mov	r0, r4
   b79dc:	bd70      	pop	{r4, r5, r6, pc}

000b79de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b79de:	b510      	push	{r4, lr}
   b79e0:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b79e2:	3024      	adds	r0, #36	; 0x24
   b79e4:	f7ff ffe9 	bl	b79ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b79e8:	f104 0018 	add.w	r0, r4, #24
   b79ec:	f7ff ffd3 	bl	b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b79f0:	bd10      	pop	{r4, pc}
	...

000b79f4 <__tcf_0>:
    static BleLocalDevice instance;
   b79f4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b79f6:	4b17      	ldr	r3, [pc, #92]	; (b7a54 <__tcf_0+0x60>)
   b79f8:	681c      	ldr	r4, [r3, #0]
   b79fa:	b354      	cbz	r4, b7a52 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b79fc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7a00:	f7ff fd63 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
   b7a04:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7a08:	f7ff fd5f 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
   b7a0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7a10:	f7ff fd5b 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
   b7a14:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7a18:	f7ff fd57 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7a1c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7a20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7a24:	42ae      	cmp	r6, r5
   b7a26:	d004      	beq.n	b7a32 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7a28:	1d28      	adds	r0, r5, #4
   b7a2a:	f7ff ffac 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a2e:	3508      	adds	r5, #8
   b7a30:	e7f8      	b.n	b7a24 <__tcf_0+0x30>
    ::free(ptr);
   b7a32:	69a0      	ldr	r0, [r4, #24]
   b7a34:	f7ff fad6 	bl	b6fe4 <free>
    ~BleLocalDeviceImpl() = default;
   b7a38:	f104 000c 	add.w	r0, r4, #12
   b7a3c:	f7ff ffbd 	bl	b79ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7a40:	4620      	mov	r0, r4
   b7a42:	f7ff ffa8 	bl	b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7a46:	4620      	mov	r0, r4
   b7a48:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a4e:	f7fd b836 	b.w	b4abe <_ZdlPvj>
   b7a52:	bd70      	pop	{r4, r5, r6, pc}
   b7a54:	2003e6a8 	.word	0x2003e6a8

000b7a58 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7a58:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7a5a:	b510      	push	{r4, lr}
      if (_M_empty())
   b7a5c:	b90a      	cbnz	r2, b7a62 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7a5e:	f002 fc2f 	bl	ba2c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b7a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7a66:	68c3      	ldr	r3, [r0, #12]
   b7a68:	4718      	bx	r3

000b7a6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7a6a:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7a6c:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7a6e:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7a70:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7a72:	dd03      	ble.n	b7a7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7a74:	f7ff fabe 	bl	b6ff4 <realloc>
            if (!d) {
   b7a78:	b918      	cbnz	r0, b7a82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7a7a:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7a7c:	f7ff fab2 	bl	b6fe4 <free>
        T* d = nullptr;
   b7a80:	2000      	movs	r0, #0
        data_ = d;
   b7a82:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7a84:	60a5      	str	r5, [r4, #8]
        return true;
   b7a86:	2001      	movs	r0, #1
   b7a88:	e7f7      	b.n	b7a7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7a8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7a8a:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7a8c:	6883      	ldr	r3, [r0, #8]
   b7a8e:	428b      	cmp	r3, r1
   b7a90:	da02      	bge.n	b7a98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7a92:	f7ff ffea 	bl	b7a6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7a96:	bd08      	pop	{r3, pc}
    return true;
   b7a98:	2001      	movs	r0, #1
   b7a9a:	e7fc      	b.n	b7a96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7a9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7aa0:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7aa2:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7aa4:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7aa6:	4419      	add	r1, r3
   b7aa8:	6883      	ldr	r3, [r0, #8]
   b7aaa:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7aac:	4604      	mov	r4, r0
   b7aae:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7ab0:	dc12      	bgt.n	b7ad8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7ab2:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7ab4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7ab6:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7ab8:	1bd2      	subs	r2, r2, r7
   b7aba:	4631      	mov	r1, r6
   b7abc:	1970      	adds	r0, r6, r5
   b7abe:	f002 fd45 	bl	ba54c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7ac2:	462a      	mov	r2, r5
   b7ac4:	4641      	mov	r1, r8
   b7ac6:	4630      	mov	r0, r6
   b7ac8:	f002 fd32 	bl	ba530 <memcpy>
    size_ += n;
   b7acc:	6863      	ldr	r3, [r4, #4]
   b7ace:	442b      	add	r3, r5
   b7ad0:	6063      	str	r3, [r4, #4]
    return true;
   b7ad2:	2001      	movs	r0, #1
}
   b7ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7ad8:	f7ff ffc7 	bl	b7a6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7adc:	2800      	cmp	r0, #0
   b7ade:	d1e8      	bne.n	b7ab2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7ae0:	e7f8      	b.n	b7ad4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7ae2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ae4:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ae6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7aea:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7aec:	4604      	mov	r4, r0
   b7aee:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7af0:	da0b      	bge.n	b7b0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7af2:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7af4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7af6:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7af8:	1b52      	subs	r2, r2, r5
   b7afa:	1c48      	adds	r0, r1, #1
   b7afc:	f002 fd26 	bl	ba54c <memmove>
    new(p) T(std::move(value));
   b7b00:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7b02:	6863      	ldr	r3, [r4, #4]
   b7b04:	3301      	adds	r3, #1
   b7b06:	6063      	str	r3, [r4, #4]
}
   b7b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b0a:	3101      	adds	r1, #1
   b7b0c:	f7ff ffad 	bl	b7a6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7b10:	2800      	cmp	r0, #0
   b7b12:	d1ee      	bne.n	b7af2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7b14:	e7f8      	b.n	b7b08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7b16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7b16:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7b18:	6841      	ldr	r1, [r0, #4]
   b7b1a:	f7ff bfe2 	b.w	b7ae2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7b1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7b1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7b22:	4604      	mov	r4, r0
   b7b24:	461d      	mov	r5, r3
   b7b26:	460f      	mov	r7, r1
   b7b28:	ab01      	add	r3, sp, #4
   b7b2a:	4690      	mov	r8, r2
   b7b2c:	460a      	mov	r2, r1
   b7b2e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7b32:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7b36:	f7ff fc8d 	bl	b7454 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7b3a:	1cae      	adds	r6, r5, #2
   b7b3c:	6863      	ldr	r3, [r4, #4]
   b7b3e:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7b40:	f1b9 0f00 	cmp.w	r9, #0
   b7b44:	d126      	bne.n	b7b94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7b46:	b328      	cbz	r0, b7b94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7b48:	4433      	add	r3, r6
   b7b4a:	1a1b      	subs	r3, r3, r0
   b7b4c:	2bff      	cmp	r3, #255	; 0xff
   b7b4e:	d809      	bhi.n	b7b64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7b50:	9901      	ldr	r1, [sp, #4]
   b7b52:	4620      	mov	r0, r4
   b7b54:	f7ff fea0 	bl	b7898 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7b58:	6861      	ldr	r1, [r4, #4]
   b7b5a:	4620      	mov	r0, r4
   b7b5c:	4431      	add	r1, r6
   b7b5e:	f7ff ff94 	bl	b7a8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7b62:	b918      	cbnz	r0, b7b6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7b64:	6860      	ldr	r0, [r4, #4]
}
   b7b66:	b003      	add	sp, #12
   b7b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7b6c:	1c6a      	adds	r2, r5, #1
   b7b6e:	9901      	ldr	r1, [sp, #4]
   b7b70:	b2d2      	uxtb	r2, r2
   b7b72:	4620      	mov	r0, r4
   b7b74:	f7ff ffb5 	bl	b7ae2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7b78:	9901      	ldr	r1, [sp, #4]
   b7b7a:	463a      	mov	r2, r7
   b7b7c:	3101      	adds	r1, #1
   b7b7e:	4620      	mov	r0, r4
   b7b80:	f7ff ffaf 	bl	b7ae2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7b84:	9901      	ldr	r1, [sp, #4]
   b7b86:	462b      	mov	r3, r5
   b7b88:	4642      	mov	r2, r8
   b7b8a:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	f7ff ff85 	bl	b7a9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7b92:	e7e7      	b.n	b7b64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7b94:	18f1      	adds	r1, r6, r3
   b7b96:	29ff      	cmp	r1, #255	; 0xff
   b7b98:	d8e4      	bhi.n	b7b64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7b9a:	4620      	mov	r0, r4
   b7b9c:	f7ff ff75 	bl	b7a8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7ba0:	2800      	cmp	r0, #0
   b7ba2:	d0df      	beq.n	b7b64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7ba4:	1c69      	adds	r1, r5, #1
   b7ba6:	b2c9      	uxtb	r1, r1
   b7ba8:	4620      	mov	r0, r4
   b7baa:	f7ff ffb4 	bl	b7b16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7bae:	4639      	mov	r1, r7
   b7bb0:	4620      	mov	r0, r4
   b7bb2:	f7ff ffb0 	bl	b7b16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7bb6:	6861      	ldr	r1, [r4, #4]
   b7bb8:	462b      	mov	r3, r5
   b7bba:	4642      	mov	r2, r8
   b7bbc:	e7e6      	b.n	b7b8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7bbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7bbe:	b430      	push	{r4, r5}
   b7bc0:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7bc4:	b11a      	cbz	r2, b7bce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7bc6:	9502      	str	r5, [sp, #8]
}
   b7bc8:	bc30      	pop	{r4, r5}
   b7bca:	f7ff bfa8 	b.w	b7b1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7bce:	6840      	ldr	r0, [r0, #4]
}
   b7bd0:	bc30      	pop	{r4, r5}
   b7bd2:	4770      	bx	lr

000b7bd4 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7bd6:	2300      	movs	r3, #0
   b7bd8:	e9c0 3300 	strd	r3, r3, [r0]
   b7bdc:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7bde:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7be0:	9300      	str	r3, [sp, #0]
   b7be2:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7be4:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7be8:	4619      	mov	r1, r3
   b7bea:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7bee:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7bf0:	f7ff ffe5 	bl	b7bbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	b004      	add	sp, #16
   b7bf8:	bd10      	pop	{r4, pc}

000b7bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7bfa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bfe:	4604      	mov	r4, r0
   b7c00:	460d      	mov	r5, r1
   b7c02:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7c04:	d914      	bls.n	b7c30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7c06:	4290      	cmp	r0, r2
   b7c08:	d213      	bcs.n	b7c32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7c0a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7c0e:	1a75      	subs	r5, r6, r1
   b7c10:	f1a1 0708 	sub.w	r7, r1, #8
   b7c14:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7c16:	42b7      	cmp	r7, r6
   b7c18:	d018      	beq.n	b7c4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7c1a:	b11c      	cbz	r4, b7c24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7c1c:	4631      	mov	r1, r6
   b7c1e:	4620      	mov	r0, r4
   b7c20:	f7ff fea7 	bl	b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7c24:	1d30      	adds	r0, r6, #4
   b7c26:	f7ff feae 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7c2a:	3e08      	subs	r6, #8
   b7c2c:	3c08      	subs	r4, #8
   b7c2e:	e7f2      	b.n	b7c16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7c30:	d00c      	beq.n	b7c4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7c32:	42b5      	cmp	r5, r6
   b7c34:	d00a      	beq.n	b7c4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7c36:	b11c      	cbz	r4, b7c40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7c38:	4629      	mov	r1, r5
   b7c3a:	4620      	mov	r0, r4
   b7c3c:	f7ff fe99 	bl	b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7c40:	1d28      	adds	r0, r5, #4
   b7c42:	f7ff fea0 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7c46:	3508      	adds	r5, #8
   b7c48:	3408      	adds	r4, #8
   b7c4a:	e7f2      	b.n	b7c32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7c50:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7c52:	6846      	ldr	r6, [r0, #4]
   b7c54:	4668      	mov	r0, sp
   b7c56:	f7ff fe8c 	bl	b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c5a:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7c5e:	429f      	cmp	r7, r3
   b7c60:	db12      	blt.n	b7c88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7c62:	3701      	adds	r7, #1
        if (n > 0) {
   b7c64:	2f00      	cmp	r7, #0
   b7c66:	dd29      	ble.n	b7cbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7c68:	00f8      	lsls	r0, r7, #3
   b7c6a:	f7ff f9b3 	bl	b6fd4 <malloc>
            if (!d) {
   b7c6e:	4605      	mov	r5, r0
   b7c70:	b1f0      	cbz	r0, b7cb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7c72:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7c76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7c7a:	f7ff ffbe 	bl	b7bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7c7e:	6820      	ldr	r0, [r4, #0]
   b7c80:	f7ff f9b0 	bl	b6fe4 <free>
        data_ = d;
   b7c84:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7c86:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7c88:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7c8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7c90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c94:	4631      	mov	r1, r6
   b7c96:	f106 0008 	add.w	r0, r6, #8
   b7c9a:	f7ff ffae 	bl	b7bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c9e:	b11e      	cbz	r6, b7ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7ca0:	4669      	mov	r1, sp
   b7ca2:	4630      	mov	r0, r6
   b7ca4:	f7ff fe65 	bl	b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7ca8:	6863      	ldr	r3, [r4, #4]
   b7caa:	3301      	adds	r3, #1
   b7cac:	6063      	str	r3, [r4, #4]
    return true;
   b7cae:	2501      	movs	r5, #1
   b7cb0:	a801      	add	r0, sp, #4
   b7cb2:	f7ff fe68 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7cb6:	4628      	mov	r0, r5
   b7cb8:	b003      	add	sp, #12
   b7cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7cbc:	2500      	movs	r5, #0
   b7cbe:	e7de      	b.n	b7c7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7cc2:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7cc6:	4605      	mov	r5, r0
   b7cc8:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7cca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7cce:	42a6      	cmp	r6, r4
   b7cd0:	d005      	beq.n	b7cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7cd2:	4639      	mov	r1, r7
   b7cd4:	4620      	mov	r0, r4
   b7cd6:	f7ff fd4a 	bl	b776e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7cda:	b108      	cbz	r0, b7ce0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7cdc:	b914      	cbnz	r4, b7ce4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7ce0:	3408      	adds	r4, #8
   b7ce2:	e7f4      	b.n	b7cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7ce4:	1d20      	adds	r0, r4, #4
   b7ce6:	f7ff fe4e 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7cea:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7cee:	f104 0108 	add.w	r1, r4, #8
   b7cf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	f7ff ff7f 	bl	b7bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7cfc:	686b      	ldr	r3, [r5, #4]
   b7cfe:	3b01      	subs	r3, #1
   b7d00:	606b      	str	r3, [r5, #4]
    return true;
   b7d02:	e7ec      	b.n	b7cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7d04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d08:	4605      	mov	r5, r0
   b7d0a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7d0c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7d0e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7d10:	f7ff fc0e 	bl	b7530 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7d14:	682e      	ldr	r6, [r5, #0]
   b7d16:	1ef3      	subs	r3, r6, #3
   b7d18:	2b0d      	cmp	r3, #13
   b7d1a:	d83c      	bhi.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7d1c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7d20:	0057000e 	.word	0x0057000e
   b7d24:	00d3003b 	.word	0x00d3003b
   b7d28:	003b003b 	.word	0x003b003b
   b7d2c:	003b003b 	.word	0x003b003b
   b7d30:	009d003b 	.word	0x009d003b
   b7d34:	009d009d 	.word	0x009d009d
   b7d38:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b7d3c:	a804      	add	r0, sp, #16
   b7d3e:	f7ff fce1 	bl	b7704 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b7d42:	9b04      	ldr	r3, [sp, #16]
   b7d44:	89aa      	ldrh	r2, [r5, #12]
   b7d46:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7d48:	6869      	ldr	r1, [r5, #4]
   b7d4a:	9804      	ldr	r0, [sp, #16]
   b7d4c:	3108      	adds	r1, #8
   b7d4e:	3002      	adds	r0, #2
   b7d50:	f7ff fc08 	bl	b7564 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7d54:	a904      	add	r1, sp, #16
   b7d56:	a806      	add	r0, sp, #24
   b7d58:	f7ff fe0b 	bl	b7972 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7d5c:	a906      	add	r1, sp, #24
   b7d5e:	f104 0018 	add.w	r0, r4, #24
   b7d62:	f7ff ff74 	bl	b7c4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7d66:	4605      	mov	r5, r0
   b7d68:	a807      	add	r0, sp, #28
   b7d6a:	f7ff fe0c 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d6e:	b9c5      	cbnz	r5, b7da2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7d70:	2320      	movs	r3, #32
   b7d72:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b7d76:	4b5e      	ldr	r3, [pc, #376]	; (b7ef0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7d78:	495e      	ldr	r1, [pc, #376]	; (b7ef4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7d7a:	9300      	str	r3, [sp, #0]
   b7d7c:	aa06      	add	r2, sp, #24
   b7d7e:	462b      	mov	r3, r5
   b7d80:	2001      	movs	r0, #1
   b7d82:	f7ff f86b 	bl	b6e5c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7d86:	9b04      	ldr	r3, [sp, #16]
   b7d88:	4629      	mov	r1, r5
   b7d8a:	8818      	ldrh	r0, [r3, #0]
   b7d8c:	f7fe fe9a 	bl	b6ac4 <hal_ble_gap_disconnect>
   b7d90:	a805      	add	r0, sp, #20
   b7d92:	f7ff fdf8 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7d96:	a803      	add	r0, sp, #12
   b7d98:	f7ff fbd8 	bl	b754c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7d9c:	b00e      	add	sp, #56	; 0x38
   b7d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b7da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7da4:	b123      	cbz	r3, b7db0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b7da6:	a904      	add	r1, sp, #16
   b7da8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7dac:	f7ff fe54 	bl	b7a58 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7db0:	a805      	add	r0, sp, #20
   b7db2:	f7ff fde8 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b7db6:	2120      	movs	r1, #32
   b7db8:	2300      	movs	r3, #0
   b7dba:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7dbe:	4a4e      	ldr	r2, [pc, #312]	; (b7ef8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7dc0:	9200      	str	r2, [sp, #0]
   b7dc2:	494c      	ldr	r1, [pc, #304]	; (b7ef4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7dc4:	aa06      	add	r2, sp, #24
   b7dc6:	2001      	movs	r0, #1
   b7dc8:	f7ff f848 	bl	b6e5c <log_message>
   b7dcc:	e7e3      	b.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7dce:	89a9      	ldrh	r1, [r5, #12]
   b7dd0:	4620      	mov	r0, r4
   b7dd2:	f7ff fc85 	bl	b76e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7dd6:	4606      	mov	r6, r0
   b7dd8:	2800      	cmp	r0, #0
   b7dda:	d0dc      	beq.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7ddc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7dde:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7de6:	8029      	strh	r1, [r5, #0]
   b7de8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7dec:	429a      	cmp	r2, r3
   b7dee:	d003      	beq.n	b7df8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7df0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7df4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7df6:	e7f9      	b.n	b7dec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7df8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7dfc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7e00:	45b8      	cmp	r8, r7
   b7e02:	d004      	beq.n	b7e0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b7e04:	1d38      	adds	r0, r7, #4
   b7e06:	f7ff fdbe 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e0a:	3708      	adds	r7, #8
   b7e0c:	e7f8      	b.n	b7e00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b7e0e:	2300      	movs	r3, #0
   b7e10:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7e12:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7e16:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7e1a:	45b8      	cmp	r8, r7
   b7e1c:	d004      	beq.n	b7e28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b7e1e:	1d38      	adds	r0, r7, #4
   b7e20:	f7ff fdb1 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e24:	3708      	adds	r7, #8
   b7e26:	e7f8      	b.n	b7e1a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7e28:	2300      	movs	r3, #0
   b7e2a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7e2c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b7e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7e30:	b123      	cbz	r3, b7e3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b7e32:	4631      	mov	r1, r6
   b7e34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7e38:	f7ff fe0e 	bl	b7a58 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7e3c:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7e42:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7e44:	4631      	mov	r1, r6
   b7e46:	f104 0018 	add.w	r0, r4, #24
   b7e4a:	f7ff ff39 	bl	b7cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7e4e:	2220      	movs	r2, #32
   b7e50:	2300      	movs	r3, #0
   b7e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7e56:	4a29      	ldr	r2, [pc, #164]	; (b7efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7e58:	e7b2      	b.n	b7dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7e5a:	89a9      	ldrh	r1, [r5, #12]
   b7e5c:	4620      	mov	r0, r4
   b7e5e:	f7ff fc3f 	bl	b76e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7e62:	2800      	cmp	r0, #0
   b7e64:	d097      	beq.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7e66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7e68:	2b00      	cmp	r3, #0
   b7e6a:	d094      	beq.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7e6c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7e6e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7e70:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7e74:	d001      	beq.n	b7e7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7e76:	2e10      	cmp	r6, #16
   b7e78:	d117      	bne.n	b7eaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7e7a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7e7c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7e7e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7e80:	2506      	movs	r5, #6
                        };
   b7e82:	f88d 3015 	strb.w	r3, [sp, #21]
   b7e86:	9104      	str	r1, [sp, #16]
   b7e88:	f88d 2014 	strb.w	r2, [sp, #20]
   b7e8c:	9006      	str	r0, [sp, #24]
   b7e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7e92:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7e94:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7e98:	9508      	str	r5, [sp, #32]
   b7e9a:	e883 0003 	stmia.w	r3, {r0, r1}
   b7e9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7ea0:	a906      	add	r1, sp, #24
   b7ea2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7ea6:	4798      	blx	r3
   b7ea8:	e775      	b.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7eaa:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7eac:	bf01      	itttt	eq
   b7eae:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7eb0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7eb2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7eb6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7eb8:	bf0f      	iteee	eq
   b7eba:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7ebe:	461a      	movne	r2, r3
   b7ec0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7ec2:	461d      	movne	r5, r3
   b7ec4:	e7dd      	b.n	b7e82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7ec6:	89a9      	ldrh	r1, [r5, #12]
   b7ec8:	4620      	mov	r0, r4
   b7eca:	f7ff fc09 	bl	b76e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7ece:	4601      	mov	r1, r0
   b7ed0:	2800      	cmp	r0, #0
   b7ed2:	f43f af60 	beq.w	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7ed6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7ed8:	2b00      	cmp	r3, #0
   b7eda:	f43f af5c 	beq.w	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7ede:	686b      	ldr	r3, [r5, #4]
   b7ee0:	9306      	str	r3, [sp, #24]
   b7ee2:	aa06      	add	r2, sp, #24
   b7ee4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7ee6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7eea:	4798      	blx	r3
   b7eec:	e753      	b.n	b7d96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7eee:	bf00      	nop
   b7ef0:	000bd29c 	.word	0x000bd29c
   b7ef4:	000bd233 	.word	0x000bd233
   b7ef8:	000bd2c2 	.word	0x000bd2c2
   b7efc:	000bd2cc 	.word	0x000bd2cc

000b7f00 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7f00:	b513      	push	{r0, r1, r4, lr}
   b7f02:	460b      	mov	r3, r1
   b7f04:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f06:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7f0a:	466c      	mov	r4, sp
   b7f0c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7f10:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7f14:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7f18:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7f1c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7f20:	b002      	add	sp, #8
   b7f22:	bd10      	pop	{r4, pc}

000b7f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7f24:	b538      	push	{r3, r4, r5, lr}
   b7f26:	4605      	mov	r5, r0
   b7f28:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7f2a:	f7ff ffe9 	bl	b7f00 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f2e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7f30:	68a2      	ldr	r2, [r4, #8]
   b7f32:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f34:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f36:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7f38:	68e2      	ldr	r2, [r4, #12]
   b7f3a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f3c:	60e3      	str	r3, [r4, #12]
      }
   b7f3e:	bd38      	pop	{r3, r4, r5, pc}

000b7f40 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7f40:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7f42:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7f44:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7f46:	3434      	adds	r4, #52	; 0x34
   b7f48:	b1b9      	cbz	r1, b7f7a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7f4a:	e9cd 1200 	strd	r1, r2, [sp]
   b7f4e:	a802      	add	r0, sp, #8
   b7f50:	4669      	mov	r1, sp
   b7f52:	f7ff fcef 	bl	b7934 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7f56:	2300      	movs	r3, #0
	__x.swap(*this);
   b7f58:	a906      	add	r1, sp, #24
   b7f5a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7f5c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7f5e:	f7ff ffe1 	bl	b7f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7f62:	4621      	mov	r1, r4
   b7f64:	a806      	add	r0, sp, #24
   b7f66:	f7ff ffdd 	bl	b7f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7f6a:	a806      	add	r0, sp, #24
   b7f6c:	f7ff faad 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
   b7f70:	a802      	add	r0, sp, #8
   b7f72:	f7ff faaa 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
}
   b7f76:	b00a      	add	sp, #40	; 0x28
   b7f78:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7f7a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7f7c:	e7eb      	b.n	b7f56 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7f7e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7f7e:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7f80:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7f82:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7f84:	3424      	adds	r4, #36	; 0x24
   b7f86:	b1b9      	cbz	r1, b7fb8 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7f88:	e9cd 1200 	strd	r1, r2, [sp]
   b7f8c:	a802      	add	r0, sp, #8
   b7f8e:	4669      	mov	r1, sp
   b7f90:	f7ff fcd0 	bl	b7934 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7f94:	2300      	movs	r3, #0
	__x.swap(*this);
   b7f96:	a906      	add	r1, sp, #24
   b7f98:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7f9a:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7f9c:	f7ff ffc2 	bl	b7f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7fa0:	4621      	mov	r1, r4
   b7fa2:	a806      	add	r0, sp, #24
   b7fa4:	f7ff ffbe 	bl	b7f24 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7fa8:	a806      	add	r0, sp, #24
   b7faa:	f7ff fa8e 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
   b7fae:	a802      	add	r0, sp, #8
   b7fb0:	f7ff fa8b 	bl	b74ca <_ZNSt14_Function_baseD1Ev>
}
   b7fb4:	b00a      	add	sp, #40	; 0x28
   b7fb6:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7fb8:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7fba:	e7eb      	b.n	b7f94 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7fbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7fbc:	4802      	ldr	r0, [pc, #8]	; (b7fc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7fbe:	2300      	movs	r3, #0
   b7fc0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7fc2:	f7fe bdb3 	b.w	b6b2c <os_mutex_recursive_create>
   b7fc6:	bf00      	nop
   b7fc8:	2003e6a4 	.word	0x2003e6a4

000b7fcc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fce:	4606      	mov	r6, r0
   b7fd0:	460d      	mov	r5, r1
  size_t n = 0;
   b7fd2:	188f      	adds	r7, r1, r2
   b7fd4:	2400      	movs	r4, #0
  while (size--) {
   b7fd6:	42bd      	cmp	r5, r7
   b7fd8:	d00c      	beq.n	b7ff4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7fda:	6833      	ldr	r3, [r6, #0]
   b7fdc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7fe0:	689b      	ldr	r3, [r3, #8]
   b7fe2:	4630      	mov	r0, r6
   b7fe4:	4798      	blx	r3
     if (chunk>=0)
   b7fe6:	1e03      	subs	r3, r0, #0
   b7fe8:	db01      	blt.n	b7fee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7fea:	441c      	add	r4, r3
  while (size--) {
   b7fec:	e7f3      	b.n	b7fd6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7fee:	2c00      	cmp	r4, #0
   b7ff0:	bf08      	it	eq
   b7ff2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7ff4:	4620      	mov	r0, r4
   b7ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ff8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7ff8:	b513      	push	{r0, r1, r4, lr}
   b7ffa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7ffc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7ffe:	b159      	cbz	r1, b8018 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8000:	9101      	str	r1, [sp, #4]
   b8002:	f7fc fcfb 	bl	b49fc <strlen>
   b8006:	6823      	ldr	r3, [r4, #0]
   b8008:	9901      	ldr	r1, [sp, #4]
   b800a:	68db      	ldr	r3, [r3, #12]
   b800c:	4602      	mov	r2, r0
   b800e:	4620      	mov	r0, r4
    }
   b8010:	b002      	add	sp, #8
   b8012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8016:	4718      	bx	r3
    }
   b8018:	b002      	add	sp, #8
   b801a:	bd10      	pop	{r4, pc}

000b801c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b801c:	b508      	push	{r3, lr}
  return write(str);
   b801e:	f7ff ffeb 	bl	b7ff8 <_ZN5Print5writeEPKc>
}
   b8022:	bd08      	pop	{r3, pc}

000b8024 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8024:	6803      	ldr	r3, [r0, #0]
   b8026:	689b      	ldr	r3, [r3, #8]
   b8028:	4718      	bx	r3

000b802a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b802a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b802c:	210d      	movs	r1, #13
{
   b802e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8030:	f7ff fff8 	bl	b8024 <_ZN5Print5printEc>
  n += print('\n');
   b8034:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8036:	4604      	mov	r4, r0
  n += print('\n');
   b8038:	4628      	mov	r0, r5
   b803a:	f7ff fff3 	bl	b8024 <_ZN5Print5printEc>
  return n;
}
   b803e:	4420      	add	r0, r4
   b8040:	bd38      	pop	{r3, r4, r5, pc}

000b8042 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8042:	b538      	push	{r3, r4, r5, lr}
   b8044:	4605      	mov	r5, r0
  return write(str);
   b8046:	f7ff ffd7 	bl	b7ff8 <_ZN5Print5writeEPKc>
   b804a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b804c:	4628      	mov	r0, r5
   b804e:	f7ff ffec 	bl	b802a <_ZN5Print7printlnEv>
  return n;
}
   b8052:	4420      	add	r0, r4
   b8054:	bd38      	pop	{r3, r4, r5, pc}

000b8056 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8056:	b530      	push	{r4, r5, lr}
   b8058:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b805a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b805c:	2a01      	cmp	r2, #1
  *str = '\0';
   b805e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8062:	bf98      	it	ls
   b8064:	220a      	movls	r2, #10
   b8066:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8068:	460d      	mov	r5, r1
   b806a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b806e:	fb01 5312 	mls	r3, r1, r2, r5
   b8072:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8076:	2b09      	cmp	r3, #9
   b8078:	bf94      	ite	ls
   b807a:	3330      	addls	r3, #48	; 0x30
   b807c:	3337      	addhi	r3, #55	; 0x37
   b807e:	b2db      	uxtb	r3, r3
  } while(n);
   b8080:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8082:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8086:	d9ef      	bls.n	b8068 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8088:	4621      	mov	r1, r4
   b808a:	f7ff ffb5 	bl	b7ff8 <_ZN5Print5writeEPKc>
}
   b808e:	b00b      	add	sp, #44	; 0x2c
   b8090:	bd30      	pop	{r4, r5, pc}

000b8092 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8096:	b086      	sub	sp, #24
   b8098:	af00      	add	r7, sp, #0
   b809a:	4605      	mov	r5, r0
   b809c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b809e:	1d38      	adds	r0, r7, #4
   b80a0:	2114      	movs	r1, #20
{
   b80a2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b80a4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b80a6:	f7fe ffad 	bl	b7004 <vsnprintf>

    if (n<bufsize)
   b80aa:	2813      	cmp	r0, #19
   b80ac:	d80e      	bhi.n	b80cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b80ae:	1d39      	adds	r1, r7, #4
   b80b0:	4628      	mov	r0, r5
   b80b2:	f7ff ffa1 	bl	b7ff8 <_ZN5Print5writeEPKc>
   b80b6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b80b8:	b11e      	cbz	r6, b80c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b80ba:	4628      	mov	r0, r5
   b80bc:	f7ff ffb5 	bl	b802a <_ZN5Print7printlnEv>
   b80c0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b80c2:	4620      	mov	r0, r4
   b80c4:	3718      	adds	r7, #24
   b80c6:	46bd      	mov	sp, r7
   b80c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b80cc:	f100 0308 	add.w	r3, r0, #8
   b80d0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b80d4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b80d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b80da:	4622      	mov	r2, r4
   b80dc:	1c41      	adds	r1, r0, #1
   b80de:	683b      	ldr	r3, [r7, #0]
   b80e0:	4668      	mov	r0, sp
   b80e2:	f7fe ff8f 	bl	b7004 <vsnprintf>
  return write(str);
   b80e6:	4669      	mov	r1, sp
   b80e8:	4628      	mov	r0, r5
   b80ea:	f7ff ff85 	bl	b7ff8 <_ZN5Print5writeEPKc>
   b80ee:	4604      	mov	r4, r0
   b80f0:	46c5      	mov	sp, r8
   b80f2:	e7e1      	b.n	b80b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b80f4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b80f4:	6880      	ldr	r0, [r0, #8]
   b80f6:	6803      	ldr	r3, [r0, #0]
   b80f8:	68db      	ldr	r3, [r3, #12]
   b80fa:	4718      	bx	r3

000b80fc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b80fc:	4770      	bx	lr

000b80fe <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b80fe:	4608      	mov	r0, r1
   b8100:	b111      	cbz	r1, b8108 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b8102:	680b      	ldr	r3, [r1, #0]
   b8104:	685b      	ldr	r3, [r3, #4]
   b8106:	4718      	bx	r3
}
   b8108:	4770      	bx	lr

000b810a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b810a:	4770      	bx	lr

000b810c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b810c:	4770      	bx	lr

000b810e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b810e:	4770      	bx	lr

000b8110 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b8110:	4770      	bx	lr

000b8112 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b8112:	b538      	push	{r3, r4, r5, lr}
   b8114:	4604      	mov	r4, r0
   b8116:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b8118:	6800      	ldr	r0, [r0, #0]
   b811a:	212e      	movs	r1, #46	; 0x2e
   b811c:	f002 fa73 	bl	ba606 <strchrnul>
    size = s - category;
   b8120:	6823      	ldr	r3, [r4, #0]
   b8122:	1ac3      	subs	r3, r0, r3
   b8124:	602b      	str	r3, [r5, #0]
    if (size) {
   b8126:	b123      	cbz	r3, b8132 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b8128:	7803      	ldrb	r3, [r0, #0]
   b812a:	b103      	cbz	r3, b812e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b812c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b812e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8130:	6020      	str	r0, [r4, #0]
}
   b8132:	4618      	mov	r0, r3
   b8134:	bd38      	pop	{r3, r4, r5, pc}

000b8136 <_ZN5spark16JSONStreamWriterD0Ev>:
   b8136:	b510      	push	{r4, lr}
   b8138:	210c      	movs	r1, #12
   b813a:	4604      	mov	r4, r0
   b813c:	f7fc fcbf 	bl	b4abe <_ZdlPvj>
   b8140:	4620      	mov	r0, r4
   b8142:	bd10      	pop	{r4, pc}

000b8144 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b8144:	b510      	push	{r4, lr}
   b8146:	2104      	movs	r1, #4
   b8148:	4604      	mov	r4, r0
   b814a:	f7fc fcb8 	bl	b4abe <_ZdlPvj>
   b814e:	4620      	mov	r0, r4
   b8150:	bd10      	pop	{r4, pc}

000b8152 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b8152:	b510      	push	{r4, lr}
   b8154:	2104      	movs	r1, #4
   b8156:	4604      	mov	r4, r0
   b8158:	f7fc fcb1 	bl	b4abe <_ZdlPvj>
   b815c:	4620      	mov	r0, r4
   b815e:	bd10      	pop	{r4, pc}

000b8160 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b8160:	f7fe bcf4 	b.w	b6b4c <os_mutex_recursive_lock>

000b8164 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b8164:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b8166:	f7fc fc3f 	bl	b49e8 <strcmp>
}
   b816a:	fab0 f080 	clz	r0, r0
   b816e:	0940      	lsrs	r0, r0, #5
   b8170:	bd08      	pop	{r3, pc}

000b8172 <__tcf_1>:
   b8172:	4770      	bx	lr

000b8174 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b8174:	b510      	push	{r4, lr}
   b8176:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b8178:	f001 f92c 	bl	b93d4 <_Z16_fetch_usbserialv>
   b817c:	4284      	cmp	r4, r0
   b817e:	d010      	beq.n	b81a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8180:	f002 f836 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
   b8184:	4284      	cmp	r4, r0
   b8186:	d105      	bne.n	b8194 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b8188:	f002 f832 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b818c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8190:	f001 b99f 	b.w	b94d2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b8194:	b12c      	cbz	r4, b81a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b8196:	6823      	ldr	r3, [r4, #0]
   b8198:	4620      	mov	r0, r4
   b819a:	685b      	ldr	r3, [r3, #4]
}
   b819c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b81a0:	4718      	bx	r3
   b81a2:	bd10      	pop	{r4, pc}

000b81a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b81a4:	680b      	ldr	r3, [r1, #0]
   b81a6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b81a8:	684b      	ldr	r3, [r1, #4]
   b81aa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b81ac:	b113      	cbz	r3, b81b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b81ae:	685a      	ldr	r2, [r3, #4]
   b81b0:	3201      	adds	r2, #1
   b81b2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b81b4:	4770      	bx	lr

000b81b6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b81b6:	b513      	push	{r0, r1, r4, lr}
   b81b8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b81ba:	4608      	mov	r0, r1
   b81bc:	9101      	str	r1, [sp, #4]
   b81be:	f7fc fc1d 	bl	b49fc <strlen>
   b81c2:	9901      	ldr	r1, [sp, #4]
   b81c4:	4602      	mov	r2, r0
   b81c6:	4620      	mov	r0, r4
}
   b81c8:	b002      	add	sp, #8
   b81ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b81ce:	f001 bf69 	b.w	ba0a4 <_ZN5spark10JSONWriter5valueEPKcj>

000b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b81d2:	b513      	push	{r0, r1, r4, lr}
   b81d4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b81d6:	4608      	mov	r0, r1
   b81d8:	9101      	str	r1, [sp, #4]
   b81da:	f7fc fc0f 	bl	b49fc <strlen>
   b81de:	6823      	ldr	r3, [r4, #0]
   b81e0:	9901      	ldr	r1, [sp, #4]
   b81e2:	68db      	ldr	r3, [r3, #12]
   b81e4:	4602      	mov	r2, r0
   b81e6:	4620      	mov	r0, r4
}
   b81e8:	b002      	add	sp, #8
   b81ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b81ee:	4718      	bx	r3

000b81f0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b81f0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b81f2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b81f4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b81f8:	68db      	ldr	r3, [r3, #12]
   b81fa:	2201      	movs	r2, #1
   b81fc:	f10d 0107 	add.w	r1, sp, #7
   b8200:	4798      	blx	r3
}
   b8202:	b003      	add	sp, #12
   b8204:	f85d fb04 	ldr.w	pc, [sp], #4

000b8208 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b8208:	680a      	ldr	r2, [r1, #0]
   b820a:	6002      	str	r2, [r0, #0]
   b820c:	684a      	ldr	r2, [r1, #4]
   b820e:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b8210:	2200      	movs	r2, #0
   b8212:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8216:	b510      	push	{r4, lr}
   b8218:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b821a:	688c      	ldr	r4, [r1, #8]
   b821c:	6084      	str	r4, [r0, #8]
   b821e:	68cc      	ldr	r4, [r1, #12]
   b8220:	60c4      	str	r4, [r0, #12]
   b8222:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8224:	608a      	str	r2, [r1, #8]
   b8226:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8228:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b822a:	610a      	str	r2, [r1, #16]
   b822c:	bd10      	pop	{r4, pc}
	...

000b8230 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b8234:	e9d0 8400 	ldrd	r8, r4, [r0]
   b8238:	f04f 0a14 	mov.w	sl, #20
   b823c:	9300      	str	r3, [sp, #0]
   b823e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b8242:	4b18      	ldr	r3, [pc, #96]	; (b82a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8244:	10a4      	asrs	r4, r4, #2
   b8246:	4617      	mov	r7, r2
   b8248:	435c      	muls	r4, r3
   b824a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b824c:	2c00      	cmp	r4, #0
   b824e:	dd21      	ble.n	b8294 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b8250:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b8252:	fb0a f006 	mul.w	r0, sl, r6
   b8256:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b825a:	463a      	mov	r2, r7
   b825c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8260:	5828      	ldr	r0, [r5, r0]
   b8262:	9101      	str	r1, [sp, #4]
   b8264:	455f      	cmp	r7, fp
   b8266:	bf28      	it	cs
   b8268:	465a      	movcs	r2, fp
   b826a:	f002 f9de 	bl	ba62a <strncmp>
                if (cmp == 0) {
   b826e:	2800      	cmp	r0, #0
   b8270:	9901      	ldr	r1, [sp, #4]
   b8272:	f04f 0301 	mov.w	r3, #1
   b8276:	d10b      	bne.n	b8290 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8278:	455f      	cmp	r7, fp
   b827a:	d103      	bne.n	b8284 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b827c:	9a00      	ldr	r2, [sp, #0]
   b827e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8280:	4634      	mov	r4, r6
   b8282:	e7e3      	b.n	b824c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8284:	d9fc      	bls.n	b8280 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8286:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8288:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b828c:	3e01      	subs	r6, #1
   b828e:	e7f7      	b.n	b8280 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8290:	dbf9      	blt.n	b8286 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8292:	e7f5      	b.n	b8280 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8294:	eba5 0508 	sub.w	r5, r5, r8
}
   b8298:	4802      	ldr	r0, [pc, #8]	; (b82a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b829a:	10ad      	asrs	r5, r5, #2
   b829c:	4368      	muls	r0, r5
   b829e:	b003      	add	sp, #12
   b82a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b82a4:	cccccccd 	.word	0xcccccccd

000b82a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b82a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b82aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b82ac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b82ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b82b0:	b303      	cbz	r3, b82f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b82b2:	b1f9      	cbz	r1, b82f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b82b4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b82b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b82ba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b82bc:	a903      	add	r1, sp, #12
   b82be:	a801      	add	r0, sp, #4
   b82c0:	f7ff ff27 	bl	b8112 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b82c4:	4601      	mov	r1, r0
   b82c6:	b1a8      	cbz	r0, b82f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b82c8:	f10d 030b 	add.w	r3, sp, #11
   b82cc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b82ce:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b82d2:	4620      	mov	r0, r4
   b82d4:	f7ff ffac 	bl	b8230 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b82d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b82dc:	b153      	cbz	r3, b82f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b82de:	6823      	ldr	r3, [r4, #0]
   b82e0:	2414      	movs	r4, #20
   b82e2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b82e6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b82e8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b82ec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b82ee:	bfa8      	it	ge
   b82f0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b82f2:	e7e3      	b.n	b82bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b82f4:	4628      	mov	r0, r5
   b82f6:	b004      	add	sp, #16
   b82f8:	bd70      	pop	{r4, r5, r6, pc}

000b82fa <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b82fa:	b40e      	push	{r1, r2, r3}
   b82fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b82fe:	b08c      	sub	sp, #48	; 0x30
   b8300:	af00      	add	r7, sp, #0
   b8302:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b8306:	4604      	mov	r4, r0
   b8308:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b830c:	607a      	str	r2, [r7, #4]
   b830e:	462b      	mov	r3, r5
   b8310:	2120      	movs	r1, #32
   b8312:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b8316:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8318:	f7fe fe74 	bl	b7004 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b831c:	281f      	cmp	r0, #31
   b831e:	687a      	ldr	r2, [r7, #4]
   b8320:	d91a      	bls.n	b8358 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b8322:	f100 0308 	add.w	r3, r0, #8
   b8326:	f023 0307 	bic.w	r3, r3, #7
        }
   b832a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b832c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8330:	1c41      	adds	r1, r0, #1
   b8332:	462b      	mov	r3, r5
   b8334:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8336:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8338:	f7fe fe64 	bl	b7004 <vsnprintf>
        if (n > 0) {
   b833c:	1e02      	subs	r2, r0, #0
   b833e:	dd04      	ble.n	b834a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b8340:	6823      	ldr	r3, [r4, #0]
   b8342:	4669      	mov	r1, sp
   b8344:	68db      	ldr	r3, [r3, #12]
   b8346:	4620      	mov	r0, r4
   b8348:	4798      	blx	r3
   b834a:	46b5      	mov	sp, r6
}
   b834c:	3730      	adds	r7, #48	; 0x30
   b834e:	46bd      	mov	sp, r7
   b8350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8354:	b003      	add	sp, #12
   b8356:	4770      	bx	lr
    } else if (n > 0) {
   b8358:	2800      	cmp	r0, #0
   b835a:	d0f7      	beq.n	b834c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b835c:	6823      	ldr	r3, [r4, #0]
   b835e:	4602      	mov	r2, r0
   b8360:	68db      	ldr	r3, [r3, #12]
   b8362:	f107 0110 	add.w	r1, r7, #16
   b8366:	4620      	mov	r0, r4
   b8368:	4798      	blx	r3
}
   b836a:	e7ef      	b.n	b834c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b836c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b836c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b836e:	4c09      	ldr	r4, [pc, #36]	; (b8394 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8370:	7823      	ldrb	r3, [r4, #0]
   b8372:	f3bf 8f5b 	dmb	ish
   b8376:	07db      	lsls	r3, r3, #31
   b8378:	d409      	bmi.n	b838e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b837a:	4620      	mov	r0, r4
   b837c:	f7fc fbae 	bl	b4adc <__cxa_guard_acquire>
   b8380:	b128      	cbz	r0, b838e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8382:	4620      	mov	r0, r4
   b8384:	f7fc fbaf 	bl	b4ae6 <__cxa_guard_release>
   b8388:	4803      	ldr	r0, [pc, #12]	; (b8398 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b838a:	f002 f8af 	bl	ba4ec <atexit>
}
   b838e:	4803      	ldr	r0, [pc, #12]	; (b839c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8390:	bd10      	pop	{r4, pc}
   b8392:	bf00      	nop
   b8394:	2003e6b0 	.word	0x2003e6b0
   b8398:	000b810b 	.word	0x000b810b
   b839c:	2003e370 	.word	0x2003e370

000b83a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b83a0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b83a2:	4c09      	ldr	r4, [pc, #36]	; (b83c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b83a4:	7823      	ldrb	r3, [r4, #0]
   b83a6:	f3bf 8f5b 	dmb	ish
   b83aa:	07db      	lsls	r3, r3, #31
   b83ac:	d409      	bmi.n	b83c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b83ae:	4620      	mov	r0, r4
   b83b0:	f7fc fb94 	bl	b4adc <__cxa_guard_acquire>
   b83b4:	b128      	cbz	r0, b83c2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b83b6:	4620      	mov	r0, r4
   b83b8:	f7fc fb95 	bl	b4ae6 <__cxa_guard_release>
   b83bc:	4803      	ldr	r0, [pc, #12]	; (b83cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b83be:	f002 f895 	bl	ba4ec <atexit>
    return &factory;
}
   b83c2:	4803      	ldr	r0, [pc, #12]	; (b83d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b83c4:	bd10      	pop	{r4, pc}
   b83c6:	bf00      	nop
   b83c8:	2003e6b4 	.word	0x2003e6b4
   b83cc:	000b8173 	.word	0x000b8173
   b83d0:	2003e374 	.word	0x2003e374

000b83d4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b83d4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b83d6:	2500      	movs	r5, #0
   b83d8:	4604      	mov	r4, r0
   b83da:	e9c0 5500 	strd	r5, r5, [r0]
   b83de:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b83e2:	6085      	str	r5, [r0, #8]
   b83e4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b83e6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b83ea:	f7fe fb9f 	bl	b6b2c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b83ee:	f7ff ffbd 	bl	b836c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b83f2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b83f4:	f7ff ffd4 	bl	b83a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b83f8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b83fa:	6220      	str	r0, [r4, #32]
}
   b83fc:	4620      	mov	r0, r4
   b83fe:	bd38      	pop	{r3, r4, r5, pc}

000b8400 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8400:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8402:	4c0a      	ldr	r4, [pc, #40]	; (b842c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8404:	7823      	ldrb	r3, [r4, #0]
   b8406:	f3bf 8f5b 	dmb	ish
   b840a:	07db      	lsls	r3, r3, #31
   b840c:	d40c      	bmi.n	b8428 <_ZN5spark10LogManager8instanceEv+0x28>
   b840e:	4620      	mov	r0, r4
   b8410:	f7fc fb64 	bl	b4adc <__cxa_guard_acquire>
   b8414:	b140      	cbz	r0, b8428 <_ZN5spark10LogManager8instanceEv+0x28>
   b8416:	4806      	ldr	r0, [pc, #24]	; (b8430 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8418:	f7ff ffdc 	bl	b83d4 <_ZN5spark10LogManagerC1Ev>
   b841c:	4620      	mov	r0, r4
   b841e:	f7fc fb62 	bl	b4ae6 <__cxa_guard_release>
   b8422:	4804      	ldr	r0, [pc, #16]	; (b8434 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8424:	f002 f862 	bl	ba4ec <atexit>
    return &mgr;
}
   b8428:	4801      	ldr	r0, [pc, #4]	; (b8430 <_ZN5spark10LogManager8instanceEv+0x30>)
   b842a:	bd10      	pop	{r4, pc}
   b842c:	2003e6ac 	.word	0x2003e6ac
   b8430:	2003e6bc 	.word	0x2003e6bc
   b8434:	000b8955 	.word	0x000b8955

000b8438 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8438:	4a02      	ldr	r2, [pc, #8]	; (b8444 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b843a:	4903      	ldr	r1, [pc, #12]	; (b8448 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b843c:	4803      	ldr	r0, [pc, #12]	; (b844c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b843e:	2300      	movs	r3, #0
   b8440:	f7fe bd24 	b.w	b6e8c <log_set_callbacks>
   b8444:	000b8739 	.word	0x000b8739
   b8448:	000b86c5 	.word	0x000b86c5
   b844c:	000b8645 	.word	0x000b8645

000b8450 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8450:	2300      	movs	r3, #0
   b8452:	461a      	mov	r2, r3
   b8454:	4619      	mov	r1, r3
   b8456:	4618      	mov	r0, r3
   b8458:	f7fe bd18 	b.w	b6e8c <log_set_callbacks>

000b845c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b845c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b845e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8460:	4604      	mov	r4, r0
   b8462:	4668      	mov	r0, sp
   b8464:	f7ff fe9e 	bl	b81a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8468:	466a      	mov	r2, sp
   b846a:	4629      	mov	r1, r5
   b846c:	4620      	mov	r0, r4
   b846e:	f001 fd39 	bl	b9ee4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8472:	a801      	add	r0, sp, #4
   b8474:	f7ff fa87 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8478:	4620      	mov	r0, r4
   b847a:	b003      	add	sp, #12
   b847c:	bd30      	pop	{r4, r5, pc}

000b847e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b847e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8480:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8482:	4604      	mov	r4, r0
   b8484:	4668      	mov	r0, sp
   b8486:	f7ff fe8d 	bl	b81a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b848a:	466a      	mov	r2, sp
   b848c:	4629      	mov	r1, r5
   b848e:	4620      	mov	r0, r4
   b8490:	f001 fd04 	bl	b9e9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8494:	a801      	add	r0, sp, #4
   b8496:	f7ff fa76 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b849a:	4620      	mov	r0, r4
   b849c:	b003      	add	sp, #12
   b849e:	bd30      	pop	{r4, r5, pc}

000b84a0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b84a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b84a2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b84a4:	4604      	mov	r4, r0
   b84a6:	4668      	mov	r0, sp
   b84a8:	f7ff fe7c 	bl	b81a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b84ac:	466a      	mov	r2, sp
   b84ae:	4629      	mov	r1, r5
   b84b0:	4620      	mov	r0, r4
   b84b2:	f001 fc9c 	bl	b9dee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b84b6:	a801      	add	r0, sp, #4
   b84b8:	f7ff fa65 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b84bc:	4620      	mov	r0, r4
   b84be:	b003      	add	sp, #12
   b84c0:	bd30      	pop	{r4, r5, pc}
	...

000b84c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b84c4:	b570      	push	{r4, r5, r6, lr}
   b84c6:	b08a      	sub	sp, #40	; 0x28
   b84c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b84ca:	4601      	mov	r1, r0
   b84cc:	a804      	add	r0, sp, #16
   b84ce:	f7ff ffc5 	bl	b845c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b84d2:	4e14      	ldr	r6, [pc, #80]	; (b8524 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b84d4:	a804      	add	r0, sp, #16
   b84d6:	f001 fd1d 	bl	b9f14 <_ZN5spark18JSONObjectIterator4nextEv>
   b84da:	b1e8      	cbz	r0, b8518 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b84dc:	a904      	add	r1, sp, #16
   b84de:	4668      	mov	r0, sp
   b84e0:	f7ff ffcd 	bl	b847e <_ZNK5spark18JSONObjectIterator4nameEv>
   b84e4:	9802      	ldr	r0, [sp, #8]
   b84e6:	4631      	mov	r1, r6
   b84e8:	f7ff fe3c 	bl	b8164 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b84ec:	4604      	mov	r4, r0
   b84ee:	b110      	cbz	r0, b84f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b84f0:	1e2c      	subs	r4, r5, #0
   b84f2:	bf18      	it	ne
   b84f4:	2401      	movne	r4, #1
   b84f6:	a801      	add	r0, sp, #4
   b84f8:	f7ff fa45 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84fc:	2c00      	cmp	r4, #0
   b84fe:	d0e9      	beq.n	b84d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8500:	a904      	add	r1, sp, #16
   b8502:	4668      	mov	r0, sp
   b8504:	f7ff ffcc 	bl	b84a0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8508:	4668      	mov	r0, sp
   b850a:	f001 fca6 	bl	b9e5a <_ZNK5spark9JSONValue5toIntEv>
   b850e:	6028      	str	r0, [r5, #0]
   b8510:	a801      	add	r0, sp, #4
   b8512:	f7ff fa38 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8516:	e7dd      	b.n	b84d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b8518:	a805      	add	r0, sp, #20
   b851a:	f7ff fa34 	bl	b7986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b851e:	b00a      	add	sp, #40	; 0x28
   b8520:	bd70      	pop	{r4, r5, r6, pc}
   b8522:	bf00      	nop
   b8524:	000bd300 	.word	0x000bd300

000b8528 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8528:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b852a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b852c:	4620      	mov	r0, r4
   b852e:	4913      	ldr	r1, [pc, #76]	; (b857c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8530:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8532:	f7fc fa59 	bl	b49e8 <strcmp>
   b8536:	b950      	cbnz	r0, b854e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8538:	f000 ff4c 	bl	b93d4 <_Z16_fetch_usbserialv>
   b853c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8540:	f000 ff38 	bl	b93b4 <_ZN9USBSerial5beginEl>
}
   b8544:	b003      	add	sp, #12
   b8546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b854a:	f000 bf43 	b.w	b93d4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b854e:	490c      	ldr	r1, [pc, #48]	; (b8580 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8550:	4620      	mov	r0, r4
   b8552:	f7fc fa49 	bl	b49e8 <strcmp>
   b8556:	b978      	cbnz	r0, b8578 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8558:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b855c:	a901      	add	r1, sp, #4
   b855e:	4628      	mov	r0, r5
        int baud = 9600;
   b8560:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8562:	f7ff ffaf 	bl	b84c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8566:	f001 fe43 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
   b856a:	9901      	ldr	r1, [sp, #4]
   b856c:	f000 ffae 	bl	b94cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8570:	f001 fe3e 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
}
   b8574:	b003      	add	sp, #12
   b8576:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8578:	2000      	movs	r0, #0
   b857a:	e7fb      	b.n	b8574 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b857c:	000bd305 	.word	0x000bd305
   b8580:	000bd30c 	.word	0x000bd30c

000b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8584:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8586:	e9d0 5300 	ldrd	r5, r3, [r0]
   b858a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b858c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b858e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8592:	42ae      	cmp	r6, r5
   b8594:	d005      	beq.n	b85a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8596:	f105 0008 	add.w	r0, r5, #8
   b859a:	f7ff fff3 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b859e:	3514      	adds	r5, #20
   b85a0:	e7f7      	b.n	b8592 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b85a2:	6820      	ldr	r0, [r4, #0]
   b85a4:	f7fe fd1e 	bl	b6fe4 <free>
}
   b85a8:	4620      	mov	r0, r4
   b85aa:	bd70      	pop	{r4, r5, r6, pc}

000b85ac <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b85ac:	b510      	push	{r4, lr}
   b85ae:	4604      	mov	r4, r0
   b85b0:	300c      	adds	r0, #12
   b85b2:	f7ff ffe7 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b85b6:	4620      	mov	r0, r4
   b85b8:	f7ff f95c 	bl	b7874 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b85bc:	4620      	mov	r0, r4
   b85be:	bd10      	pop	{r4, pc}

000b85c0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b85c0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b85c2:	4b04      	ldr	r3, [pc, #16]	; (b85d4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b85c4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b85c6:	f840 3b04 	str.w	r3, [r0], #4
   b85ca:	f7ff ffef 	bl	b85ac <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b85ce:	4620      	mov	r0, r4
   b85d0:	bd10      	pop	{r4, pc}
   b85d2:	bf00      	nop
   b85d4:	000bc67c 	.word	0x000bc67c

000b85d8 <_ZN5spark16StreamLogHandlerD0Ev>:
   b85d8:	b510      	push	{r4, lr}
   b85da:	4604      	mov	r4, r0
   b85dc:	f7ff fff0 	bl	b85c0 <_ZN5spark16StreamLogHandlerD1Ev>
   b85e0:	4620      	mov	r0, r4
   b85e2:	2124      	movs	r1, #36	; 0x24
   b85e4:	f7fc fa6b 	bl	b4abe <_ZdlPvj>
   b85e8:	4620      	mov	r0, r4
   b85ea:	bd10      	pop	{r4, pc}

000b85ec <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b85ec:	b510      	push	{r4, lr}
   b85ee:	4b03      	ldr	r3, [pc, #12]	; (b85fc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b85f0:	6003      	str	r3, [r0, #0]
   b85f2:	4604      	mov	r4, r0
   b85f4:	f7ff ffe4 	bl	b85c0 <_ZN5spark16StreamLogHandlerD1Ev>
   b85f8:	4620      	mov	r0, r4
   b85fa:	bd10      	pop	{r4, pc}
   b85fc:	000bd3a8 	.word	0x000bd3a8

000b8600 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b8600:	b510      	push	{r4, lr}
   b8602:	4604      	mov	r4, r0
   b8604:	f7ff fff2 	bl	b85ec <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b8608:	4620      	mov	r0, r4
   b860a:	2124      	movs	r1, #36	; 0x24
   b860c:	f7fc fa57 	bl	b4abe <_ZdlPvj>
   b8610:	4620      	mov	r0, r4
   b8612:	bd10      	pop	{r4, pc}

000b8614 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b8614:	2200      	movs	r2, #0
   b8616:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b861a:	b510      	push	{r4, lr}
        capacity_(0) {
   b861c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b861e:	680c      	ldr	r4, [r1, #0]
   b8620:	6004      	str	r4, [r0, #0]
   b8622:	684c      	ldr	r4, [r1, #4]
   b8624:	6044      	str	r4, [r0, #4]
   b8626:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8628:	600a      	str	r2, [r1, #0]
   b862a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b862c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b862e:	608a      	str	r2, [r1, #8]
}
   b8630:	bd10      	pop	{r4, pc}

000b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8632:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8634:	6803      	ldr	r3, [r0, #0]
   b8636:	4604      	mov	r4, r0
   b8638:	6818      	ldr	r0, [r3, #0]
   b863a:	f7fe fa8f 	bl	b6b5c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b863e:	4620      	mov	r0, r4
   b8640:	bd10      	pop	{r4, pc}
	...

000b8644 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8648:	b087      	sub	sp, #28
   b864a:	4680      	mov	r8, r0
   b864c:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b864e:	4b1c      	ldr	r3, [pc, #112]	; (b86c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8650:	685b      	ldr	r3, [r3, #4]
   b8652:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8656:	4689      	mov	r9, r1
   b8658:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b865a:	b96b      	cbnz	r3, b8678 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b865c:	f7ff fed0 	bl	b8400 <_ZN5spark10LogManager8instanceEv>
   b8660:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8662:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8666:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8668:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b866a:	f7ff fd79 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b866e:	7b23      	ldrb	r3, [r4, #12]
   b8670:	b12b      	cbz	r3, b867e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8672:	a805      	add	r0, sp, #20
   b8674:	f7ff ffdd 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8678:	b007      	add	sp, #28
   b867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b867e:	2301      	movs	r3, #1
   b8680:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8682:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8686:	fa5f f989 	uxtb.w	r9, r9
   b868a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b868e:	45aa      	cmp	sl, r5
   b8690:	d012      	beq.n	b86b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8692:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8696:	4631      	mov	r1, r6
   b8698:	1d38      	adds	r0, r7, #4
   b869a:	f7ff fe05 	bl	b82a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b869e:	4581      	cmp	r9, r0
   b86a0:	d3f5      	bcc.n	b868e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b86a2:	683b      	ldr	r3, [r7, #0]
   b86a4:	9a03      	ldr	r2, [sp, #12]
   b86a6:	9200      	str	r2, [sp, #0]
   b86a8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b86ac:	464a      	mov	r2, r9
   b86ae:	4633      	mov	r3, r6
   b86b0:	4641      	mov	r1, r8
   b86b2:	4638      	mov	r0, r7
   b86b4:	47d8      	blx	fp
   b86b6:	e7ea      	b.n	b868e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b86b8:	2300      	movs	r3, #0
   b86ba:	7323      	strb	r3, [r4, #12]
   b86bc:	e7d9      	b.n	b8672 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b86be:	bf00      	nop
   b86c0:	e000ed00 	.word	0xe000ed00

000b86c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b86c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86c8:	469b      	mov	fp, r3
   b86ca:	4b1a      	ldr	r3, [pc, #104]	; (b8734 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b86cc:	685b      	ldr	r3, [r3, #4]
   b86ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b86d2:	4680      	mov	r8, r0
   b86d4:	4689      	mov	r9, r1
   b86d6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b86d8:	b96b      	cbnz	r3, b86f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b86da:	f7ff fe91 	bl	b8400 <_ZN5spark10LogManager8instanceEv>
   b86de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b86e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b86e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b86e6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b86e8:	f7ff fd3a 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b86ec:	7b23      	ldrb	r3, [r4, #12]
   b86ee:	b12b      	cbz	r3, b86fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b86f0:	a801      	add	r0, sp, #4
   b86f2:	f7ff ff9e 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b86f6:	b003      	add	sp, #12
   b86f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b86fc:	2301      	movs	r3, #1
   b86fe:	7323      	strb	r3, [r4, #12]
   b8700:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8704:	b2f6      	uxtb	r6, r6
   b8706:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b870a:	4555      	cmp	r5, sl
   b870c:	d00e      	beq.n	b872c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b870e:	f855 7b04 	ldr.w	r7, [r5], #4
   b8712:	4659      	mov	r1, fp
   b8714:	1d38      	adds	r0, r7, #4
   b8716:	f7ff fdc7 	bl	b82a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b871a:	4286      	cmp	r6, r0
   b871c:	d3f5      	bcc.n	b870a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b871e:	683b      	ldr	r3, [r7, #0]
   b8720:	464a      	mov	r2, r9
   b8722:	68db      	ldr	r3, [r3, #12]
   b8724:	4641      	mov	r1, r8
   b8726:	4638      	mov	r0, r7
   b8728:	4798      	blx	r3
   b872a:	e7ee      	b.n	b870a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b872c:	2300      	movs	r3, #0
   b872e:	7323      	strb	r3, [r4, #12]
   b8730:	e7de      	b.n	b86f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8732:	bf00      	nop
   b8734:	e000ed00 	.word	0xe000ed00

000b8738 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b873c:	4b16      	ldr	r3, [pc, #88]	; (b8798 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b873e:	685b      	ldr	r3, [r3, #4]
   b8740:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8744:	4605      	mov	r5, r0
   b8746:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b8748:	bb1b      	cbnz	r3, b8792 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b874a:	f7ff fe59 	bl	b8400 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b874e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8752:	4604      	mov	r4, r0
   b8754:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8756:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8758:	f7ff fd02 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
   b875c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8760:	2446      	movs	r4, #70	; 0x46
   b8762:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8766:	45b0      	cmp	r8, r6
   b8768:	d109      	bne.n	b877e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b876a:	a801      	add	r0, sp, #4
   b876c:	f7ff ff61 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8770:	42a5      	cmp	r5, r4
   b8772:	bfb4      	ite	lt
   b8774:	2000      	movlt	r0, #0
   b8776:	2001      	movge	r0, #1
}
   b8778:	b002      	add	sp, #8
   b877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b877e:	f856 0b04 	ldr.w	r0, [r6], #4
   b8782:	4639      	mov	r1, r7
   b8784:	3004      	adds	r0, #4
   b8786:	f7ff fd8f 	bl	b82a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b878a:	4284      	cmp	r4, r0
   b878c:	bfa8      	it	ge
   b878e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8790:	e7e9      	b.n	b8766 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8792:	2000      	movs	r0, #0
   b8794:	e7f0      	b.n	b8778 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8796:	bf00      	nop
   b8798:	e000ed00 	.word	0xe000ed00

000b879c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b879e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b87a2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b87a4:	4604      	mov	r4, r0
   b87a6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b87a8:	db0d      	blt.n	b87c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b87aa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b87ac:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b87ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b87b0:	dd04      	ble.n	b87bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b87b2:	00b9      	lsls	r1, r7, #2
   b87b4:	f7fe fc1e 	bl	b6ff4 <realloc>
            if (!d) {
   b87b8:	b918      	cbnz	r0, b87c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b87ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b87bc:	f7fe fc12 	bl	b6fe4 <free>
        T* d = nullptr;
   b87c0:	2000      	movs	r0, #0
        data_ = d;
   b87c2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b87c4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b87c6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b87c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b87ca:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b87ce:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b87d0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b87d4:	1d08      	adds	r0, r1, #4
   b87d6:	f001 feb9 	bl	ba54c <memmove>
    new(p) T(std::move(value));
   b87da:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b87de:	6863      	ldr	r3, [r4, #4]
   b87e0:	3301      	adds	r3, #1
   b87e2:	6063      	str	r3, [r4, #4]
    return true;
   b87e4:	2001      	movs	r0, #1
   b87e6:	e7e8      	b.n	b87ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b87e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b87e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b87ea:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b87ee:	4604      	mov	r4, r0
   b87f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b87f2:	9301      	str	r3, [sp, #4]
   b87f4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b87f6:	f7ff fcb3 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b87fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b87fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8802:	4293      	cmp	r3, r2
   b8804:	4619      	mov	r1, r3
   b8806:	d00b      	beq.n	b8820 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8808:	6809      	ldr	r1, [r1, #0]
   b880a:	42a9      	cmp	r1, r5
   b880c:	f103 0304 	add.w	r3, r3, #4
   b8810:	d1f7      	bne.n	b8802 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8812:	a801      	add	r0, sp, #4
   b8814:	f7ff ff0d 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8818:	2500      	movs	r5, #0
}
   b881a:	4628      	mov	r0, r5
   b881c:	b003      	add	sp, #12
   b881e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8820:	4629      	mov	r1, r5
   b8822:	4620      	mov	r0, r4
   b8824:	f7ff ffba 	bl	b879c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8828:	4605      	mov	r5, r0
   b882a:	2800      	cmp	r0, #0
   b882c:	d0f1      	beq.n	b8812 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b882e:	6863      	ldr	r3, [r4, #4]
   b8830:	2b01      	cmp	r3, #1
   b8832:	d101      	bne.n	b8838 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8834:	f7ff fe00 	bl	b8438 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8838:	a801      	add	r0, sp, #4
   b883a:	f7ff fefa 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b883e:	e7ec      	b.n	b881a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8840 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8840:	b570      	push	{r4, r5, r6, lr}
   b8842:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8844:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8848:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b884a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b884e:	4282      	cmp	r2, r0
   b8850:	d00f      	beq.n	b8872 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8852:	4601      	mov	r1, r0
            if (*p == value) {
   b8854:	681d      	ldr	r5, [r3, #0]
   b8856:	f851 6b04 	ldr.w	r6, [r1], #4
   b885a:	42ae      	cmp	r6, r5
   b885c:	d107      	bne.n	b886e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b885e:	1a52      	subs	r2, r2, r1
   b8860:	f001 fe74 	bl	ba54c <memmove>
    --size_;
   b8864:	6863      	ldr	r3, [r4, #4]
   b8866:	3b01      	subs	r3, #1
   b8868:	6063      	str	r3, [r4, #4]
    return true;
   b886a:	2001      	movs	r0, #1
}
   b886c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b886e:	4608      	mov	r0, r1
   b8870:	e7ed      	b.n	b884e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8872:	2000      	movs	r0, #0
   b8874:	e7fa      	b.n	b886c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b8876 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8876:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b8878:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b887c:	4604      	mov	r4, r0
   b887e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8880:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8882:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8884:	f7ff fc6c 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b8888:	a901      	add	r1, sp, #4
   b888a:	4620      	mov	r0, r4
   b888c:	f7ff ffd8 	bl	b8840 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8890:	b118      	cbz	r0, b889a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8892:	6863      	ldr	r3, [r4, #4]
   b8894:	b90b      	cbnz	r3, b889a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b8896:	f7ff fddb 	bl	b8450 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b889a:	a803      	add	r0, sp, #12
   b889c:	f7ff fec9 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b88a0:	b004      	add	sp, #16
   b88a2:	bd10      	pop	{r4, pc}

000b88a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b88a4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b88a6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b88aa:	2318      	movs	r3, #24
   b88ac:	4604      	mov	r4, r0
   b88ae:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b88b2:	42ae      	cmp	r6, r5
   b88b4:	d015      	beq.n	b88e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b88b6:	f105 0110 	add.w	r1, r5, #16
   b88ba:	4620      	mov	r0, r4
   b88bc:	f7ff ffc0 	bl	b8840 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b88c0:	6863      	ldr	r3, [r4, #4]
   b88c2:	b90b      	cbnz	r3, b88c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b88c4:	f7ff fdc4 	bl	b8450 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b88c8:	69e0      	ldr	r0, [r4, #28]
   b88ca:	6929      	ldr	r1, [r5, #16]
   b88cc:	6803      	ldr	r3, [r0, #0]
   b88ce:	68db      	ldr	r3, [r3, #12]
   b88d0:	4798      	blx	r3
        if (h.stream) {
   b88d2:	6969      	ldr	r1, [r5, #20]
   b88d4:	b119      	cbz	r1, b88de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b88d6:	6a20      	ldr	r0, [r4, #32]
   b88d8:	6803      	ldr	r3, [r0, #0]
   b88da:	68db      	ldr	r3, [r3, #12]
   b88dc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b88de:	3518      	adds	r5, #24
   b88e0:	e7e7      	b.n	b88b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b88e2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b88e6:	2618      	movs	r6, #24
   b88e8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b88ec:	42ae      	cmp	r6, r5
   b88ee:	d004      	beq.n	b88fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b88f0:	4628      	mov	r0, r5
   b88f2:	f7fe fcb9 	bl	b7268 <_ZN6StringD1Ev>
   b88f6:	3518      	adds	r5, #24
   b88f8:	e7f8      	b.n	b88ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b88fa:	2300      	movs	r3, #0
   b88fc:	6163      	str	r3, [r4, #20]
}
   b88fe:	bd70      	pop	{r4, r5, r6, pc}

000b8900 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b8900:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8902:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b8904:	f7ff fda4 	bl	b8450 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8908:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b890c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b890e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8910:	f7ff fc26 	bl	b8160 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8914:	4620      	mov	r0, r4
   b8916:	f7ff ffc5 	bl	b88a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b891a:	a801      	add	r0, sp, #4
   b891c:	f7ff fe89 	bl	b8632 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8920:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8922:	b108      	cbz	r0, b8928 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8924:	f7fe f90a 	bl	b6b3c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b8928:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b892c:	2618      	movs	r6, #24
   b892e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8932:	42ae      	cmp	r6, r5
   b8934:	d004      	beq.n	b8940 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b8936:	4628      	mov	r0, r5
   b8938:	f7fe fc96 	bl	b7268 <_ZN6StringD1Ev>
   b893c:	3518      	adds	r5, #24
   b893e:	e7f8      	b.n	b8932 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8940:	6920      	ldr	r0, [r4, #16]
   b8942:	f7fe fb4f 	bl	b6fe4 <free>
   b8946:	6820      	ldr	r0, [r4, #0]
   b8948:	f7fe fb4c 	bl	b6fe4 <free>
}
   b894c:	4620      	mov	r0, r4
   b894e:	b002      	add	sp, #8
   b8950:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8954 <__tcf_2>:
    static LogManager mgr;
   b8954:	4801      	ldr	r0, [pc, #4]	; (b895c <__tcf_2+0x8>)
   b8956:	f7ff bfd3 	b.w	b8900 <_ZN5spark10LogManagerD1Ev>
   b895a:	bf00      	nop
   b895c:	2003e6bc 	.word	0x2003e6bc

000b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8960:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8964:	4604      	mov	r4, r0
   b8966:	460d      	mov	r5, r1
   b8968:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b896a:	d915      	bls.n	b8998 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b896c:	4290      	cmp	r0, r2
   b896e:	d214      	bcs.n	b899a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8970:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8974:	1a75      	subs	r5, r6, r1
   b8976:	f1a1 0714 	sub.w	r7, r1, #20
   b897a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b897c:	42b7      	cmp	r7, r6
   b897e:	d01a      	beq.n	b89b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8980:	b11c      	cbz	r4, b898a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8982:	4631      	mov	r1, r6
   b8984:	4620      	mov	r0, r4
   b8986:	f7ff fc3f 	bl	b8208 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b898a:	f106 0008 	add.w	r0, r6, #8
   b898e:	f7ff fdf9 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8992:	3e14      	subs	r6, #20
   b8994:	3c14      	subs	r4, #20
   b8996:	e7f1      	b.n	b897c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b8998:	d00d      	beq.n	b89b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b899a:	42b5      	cmp	r5, r6
   b899c:	d00b      	beq.n	b89b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b899e:	b11c      	cbz	r4, b89a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b89a0:	4629      	mov	r1, r5
   b89a2:	4620      	mov	r0, r4
   b89a4:	f7ff fc30 	bl	b8208 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b89a8:	f105 0008 	add.w	r0, r5, #8
   b89ac:	f7ff fdea 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b89b0:	3514      	adds	r5, #20
   b89b2:	3414      	adds	r4, #20
   b89b4:	e7f1      	b.n	b899a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b89b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b89b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b89b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b89ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b89bc:	4604      	mov	r4, r0
   b89be:	460d      	mov	r5, r1
   b89c0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b89c2:	d914      	bls.n	b89ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b89c4:	4290      	cmp	r0, r2
   b89c6:	d213      	bcs.n	b89f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b89c8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b89cc:	1a75      	subs	r5, r6, r1
   b89ce:	f1a1 0710 	sub.w	r7, r1, #16
   b89d2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b89d4:	42b7      	cmp	r7, r6
   b89d6:	d018      	beq.n	b8a0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b89d8:	b11c      	cbz	r4, b89e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b89da:	4631      	mov	r1, r6
   b89dc:	4620      	mov	r0, r4
   b89de:	f7fe fcbf 	bl	b7360 <_ZN6StringC1EOS_>
                end->~T();
   b89e2:	4630      	mov	r0, r6
   b89e4:	f7fe fc40 	bl	b7268 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b89e8:	3e10      	subs	r6, #16
   b89ea:	3c10      	subs	r4, #16
   b89ec:	e7f2      	b.n	b89d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b89ee:	d00c      	beq.n	b8a0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b89f0:	42b5      	cmp	r5, r6
   b89f2:	d00a      	beq.n	b8a0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b89f4:	b11c      	cbz	r4, b89fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b89f6:	4629      	mov	r1, r5
   b89f8:	4620      	mov	r0, r4
   b89fa:	f7fe fcb1 	bl	b7360 <_ZN6StringC1EOS_>
                p->~T();
   b89fe:	4628      	mov	r0, r5
   b8a00:	f7fe fc32 	bl	b7268 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8a04:	3510      	adds	r5, #16
   b8a06:	3410      	adds	r4, #16
   b8a08:	e7f2      	b.n	b89f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b8a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8a0c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8a0e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8a10:	4605      	mov	r5, r0
        if (n > 0) {
   b8a12:	dd11      	ble.n	b8a38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8a14:	0130      	lsls	r0, r6, #4
   b8a16:	f7fe fadd 	bl	b6fd4 <malloc>
            if (!d) {
   b8a1a:	4604      	mov	r4, r0
   b8a1c:	b158      	cbz	r0, b8a36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8a1e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8a22:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b8a26:	f7ff ffc7 	bl	b89b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b8a2a:	6828      	ldr	r0, [r5, #0]
   b8a2c:	f7fe fada 	bl	b6fe4 <free>
        data_ = d;
   b8a30:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8a32:	60ae      	str	r6, [r5, #8]
        return true;
   b8a34:	2001      	movs	r0, #1
    }
   b8a36:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8a38:	2400      	movs	r4, #0
   b8a3a:	e7f6      	b.n	b8a2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b8a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a40:	4690      	mov	r8, r2
   b8a42:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8a44:	2300      	movs	r3, #0
   b8a46:	9103      	str	r1, [sp, #12]
    return size_;
   b8a48:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8a4c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8a4e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8a50:	4299      	cmp	r1, r3
        capacity_(0) {
   b8a52:	e9c0 3300 	strd	r3, r3, [r0]
   b8a56:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8a5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8a62:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8a64:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8a66:	dc23      	bgt.n	b8ab0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8a68:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8a6c:	2314      	movs	r3, #20
   b8a6e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8a72:	42af      	cmp	r7, r5
   b8a74:	d03b      	beq.n	b8aee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b8a76:	4629      	mov	r1, r5
   b8a78:	a80b      	add	r0, sp, #44	; 0x2c
   b8a7a:	f7fe fc71 	bl	b7360 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8a7e:	a90b      	add	r1, sp, #44	; 0x2c
   b8a80:	a80f      	add	r0, sp, #60	; 0x3c
   b8a82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8a84:	f7fe fc6c 	bl	b7360 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a88:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8a8c:	4299      	cmp	r1, r3
   b8a8e:	da1b      	bge.n	b8ac8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8a90:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8a94:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8a98:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8a9c:	4631      	mov	r1, r6
   b8a9e:	f106 0010 	add.w	r0, r6, #16
   b8aa2:	f7ff ff89 	bl	b89b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b8aa6:	b9ee      	cbnz	r6, b8ae4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8aaa:	3301      	adds	r3, #1
   b8aac:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8aae:	e011      	b.n	b8ad4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8ab0:	a808      	add	r0, sp, #32
   b8ab2:	f7ff ffab 	bl	b8a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8ab6:	2800      	cmp	r0, #0
   b8ab8:	d1d6      	bne.n	b8a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b8aba:	a808      	add	r0, sp, #32
   b8abc:	f7fe feda 	bl	b7874 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8ac0:	4620      	mov	r0, r4
   b8ac2:	b015      	add	sp, #84	; 0x54
   b8ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ac8:	3101      	adds	r1, #1
   b8aca:	a808      	add	r0, sp, #32
   b8acc:	f7ff ff9e 	bl	b8a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8ad0:	2800      	cmp	r0, #0
   b8ad2:	d1dd      	bne.n	b8a90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8ad4:	a80f      	add	r0, sp, #60	; 0x3c
   b8ad6:	f7fe fbc7 	bl	b7268 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b8ada:	a80b      	add	r0, sp, #44	; 0x2c
   b8adc:	f7fe fbc4 	bl	b7268 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8ae0:	3514      	adds	r5, #20
   b8ae2:	e7c6      	b.n	b8a72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8ae4:	a90f      	add	r1, sp, #60	; 0x3c
   b8ae6:	4630      	mov	r0, r6
   b8ae8:	f7fe fc3a 	bl	b7360 <_ZN6StringC1EOS_>
   b8aec:	e7dc      	b.n	b8aa8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b8aee:	2600      	movs	r6, #0
   b8af0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b8af4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b8af6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b8afa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b8afe:	429e      	cmp	r6, r3
   b8b00:	da7c      	bge.n	b8bfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b8b02:	0133      	lsls	r3, r6, #4
   b8b04:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b8b06:	9306      	str	r3, [sp, #24]
        if (!category) {
   b8b08:	b90b      	cbnz	r3, b8b0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b8b0a:	3601      	adds	r6, #1
   b8b0c:	e7f5      	b.n	b8afa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8b0e:	2300      	movs	r3, #0
   b8b10:	9307      	str	r3, [sp, #28]
   b8b12:	fb09 f306 	mul.w	r3, r9, r6
   b8b16:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b8b18:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b8b1a:	a907      	add	r1, sp, #28
   b8b1c:	a806      	add	r0, sp, #24
   b8b1e:	f7ff faf8 	bl	b8112 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8b22:	4682      	mov	sl, r0
   b8b24:	2800      	cmp	r0, #0
   b8b26:	d0f0      	beq.n	b8b0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b8b28:	f04f 0300 	mov.w	r3, #0
   b8b2c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8b30:	4601      	mov	r1, r0
   b8b32:	9a07      	ldr	r2, [sp, #28]
   b8b34:	f10d 0317 	add.w	r3, sp, #23
   b8b38:	4628      	mov	r0, r5
   b8b3a:	f7ff fb79 	bl	b8230 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8b3e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8b42:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8b44:	2f00      	cmp	r7, #0
   b8b46:	d14a      	bne.n	b8bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b8b48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8b4c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8b50:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8b58:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8b5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8b60:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b62:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b8b66:	4293      	cmp	r3, r2
   b8b68:	db17      	blt.n	b8b9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b8b6a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8b6e:	f1ba 0f00 	cmp.w	sl, #0
   b8b72:	dd30      	ble.n	b8bd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8b74:	fb09 f00a 	mul.w	r0, r9, sl
   b8b78:	f7fe fa2c 	bl	b6fd4 <malloc>
            if (!d) {
   b8b7c:	4683      	mov	fp, r0
   b8b7e:	b360      	cbz	r0, b8bda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8b80:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8b84:	fb09 1202 	mla	r2, r9, r2, r1
   b8b88:	f7ff feea 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b8b8c:	6828      	ldr	r0, [r5, #0]
   b8b8e:	f7fe fa29 	bl	b6fe4 <free>
        data_ = d;
   b8b92:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b8b96:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b8b9a:	682b      	ldr	r3, [r5, #0]
   b8b9c:	9a01      	ldr	r2, [sp, #4]
   b8b9e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8ba2:	686a      	ldr	r2, [r5, #4]
   b8ba4:	4651      	mov	r1, sl
   b8ba6:	fb09 3202 	mla	r2, r9, r2, r3
   b8baa:	f10a 0014 	add.w	r0, sl, #20
   b8bae:	f7ff fed7 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b8bb2:	f1ba 0f00 	cmp.w	sl, #0
   b8bb6:	d003      	beq.n	b8bc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b8bb8:	a90f      	add	r1, sp, #60	; 0x3c
   b8bba:	4650      	mov	r0, sl
   b8bbc:	f7ff fb24 	bl	b8208 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8bc0:	686b      	ldr	r3, [r5, #4]
   b8bc2:	3301      	adds	r3, #1
   b8bc4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b8bc6:	a811      	add	r0, sp, #68	; 0x44
   b8bc8:	f7ff fcdc 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8bcc:	b13f      	cbz	r7, b8bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b8bce:	a80b      	add	r0, sp, #44	; 0x2c
   b8bd0:	f7ff fcd8 	bl	b8584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8bd4:	e771      	b.n	b8aba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b8bd6:	46bb      	mov	fp, r7
   b8bd8:	e7d8      	b.n	b8b8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8bda:	2701      	movs	r7, #1
   b8bdc:	e7f3      	b.n	b8bc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8bde:	9b01      	ldr	r3, [sp, #4]
   b8be0:	682d      	ldr	r5, [r5, #0]
   b8be2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b8be6:	9b06      	ldr	r3, [sp, #24]
   b8be8:	781b      	ldrb	r3, [r3, #0]
   b8bea:	b92b      	cbnz	r3, b8bf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8bec:	f8d8 3000 	ldr.w	r3, [r8]
   b8bf0:	9a02      	ldr	r2, [sp, #8]
   b8bf2:	4413      	add	r3, r2
   b8bf4:	7c1b      	ldrb	r3, [r3, #16]
   b8bf6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b8bf8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b8bfa:	e78e      	b.n	b8b1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8bfc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8bfe:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c00:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c02:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c04:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c06:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b8c0a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c0c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8c0e:	60a2      	str	r2, [r4, #8]
   b8c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8c12:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c14:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8c16:	60e2      	str	r2, [r4, #12]
   b8c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8c1a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c1c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8c1e:	6122      	str	r2, [r4, #16]
   b8c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8c22:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b8c24:	9b03      	ldr	r3, [sp, #12]
   b8c26:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b8c28:	6162      	str	r2, [r4, #20]
   b8c2a:	7623      	strb	r3, [r4, #24]
   b8c2c:	e7cf      	b.n	b8bce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8c30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c32:	4604      	mov	r4, r0
   b8c34:	b087      	sub	sp, #28
   b8c36:	460d      	mov	r5, r1
        filter_(level, filters) {
   b8c38:	4626      	mov	r6, r4
        stream_(&stream) {
   b8c3a:	4619      	mov	r1, r3
   b8c3c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8c3e:	4617      	mov	r7, r2
        stream_(&stream) {
   b8c40:	f7fc f8f9 	bl	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b8c44:	4b0b      	ldr	r3, [pc, #44]	; (b8c74 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b8c46:	f846 3b04 	str.w	r3, [r6], #4
   b8c4a:	4669      	mov	r1, sp
   b8c4c:	a803      	add	r0, sp, #12
   b8c4e:	f7fc f8f2 	bl	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8c52:	aa03      	add	r2, sp, #12
   b8c54:	4639      	mov	r1, r7
   b8c56:	4630      	mov	r0, r6
   b8c58:	f7ff fef0 	bl	b8a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8c5c:	a803      	add	r0, sp, #12
   b8c5e:	f7fc f8a9 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8c62:	4668      	mov	r0, sp
   b8c64:	f7fc f8a6 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8c68:	4b03      	ldr	r3, [pc, #12]	; (b8c78 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8c6a:	6023      	str	r3, [r4, #0]
}
   b8c6c:	4620      	mov	r0, r4
        stream_(&stream) {
   b8c6e:	6225      	str	r5, [r4, #32]
}
   b8c70:	b007      	add	sp, #28
   b8c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8c74:	000bc67c 	.word	0x000bc67c
   b8c78:	000bd390 	.word	0x000bd390

000b8c7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c7e:	460f      	mov	r7, r1
   b8c80:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8c82:	491d      	ldr	r1, [pc, #116]	; (b8cf8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8c84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8c86:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8c88:	4616      	mov	r6, r2
   b8c8a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8c8c:	f7fb feac 	bl	b49e8 <strcmp>
   b8c90:	b9c0      	cbnz	r0, b8cc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8c92:	b1a4      	cbz	r4, b8cbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8c94:	4629      	mov	r1, r5
   b8c96:	a801      	add	r0, sp, #4
   b8c98:	f7ff fcbc 	bl	b8614 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8c9c:	4917      	ldr	r1, [pc, #92]	; (b8cfc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8c9e:	2024      	movs	r0, #36	; 0x24
   b8ca0:	f001 fb0a 	bl	ba2b8 <_ZnwjRKSt9nothrow_t>
   b8ca4:	4605      	mov	r5, r0
   b8ca6:	b130      	cbz	r0, b8cb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8ca8:	ab01      	add	r3, sp, #4
   b8caa:	4632      	mov	r2, r6
   b8cac:	4621      	mov	r1, r4
   b8cae:	f7ff ffbf 	bl	b8c30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8cb2:	4b13      	ldr	r3, [pc, #76]	; (b8d00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8cb4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8cb6:	a801      	add	r0, sp, #4
   b8cb8:	f7fc f87c 	bl	b4db4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8cbc:	462c      	mov	r4, r5
}
   b8cbe:	4620      	mov	r0, r4
   b8cc0:	b005      	add	sp, #20
   b8cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8cc4:	490f      	ldr	r1, [pc, #60]	; (b8d04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8cc6:	4638      	mov	r0, r7
   b8cc8:	f7fb fe8e 	bl	b49e8 <strcmp>
   b8ccc:	b990      	cbnz	r0, b8cf4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8cce:	2c00      	cmp	r4, #0
   b8cd0:	d0f5      	beq.n	b8cbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8cd2:	4629      	mov	r1, r5
   b8cd4:	a801      	add	r0, sp, #4
   b8cd6:	f7ff fc9d 	bl	b8614 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8cda:	4908      	ldr	r1, [pc, #32]	; (b8cfc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8cdc:	2024      	movs	r0, #36	; 0x24
   b8cde:	f001 faeb 	bl	ba2b8 <_ZnwjRKSt9nothrow_t>
   b8ce2:	4605      	mov	r5, r0
   b8ce4:	2800      	cmp	r0, #0
   b8ce6:	d0e6      	beq.n	b8cb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8ce8:	ab01      	add	r3, sp, #4
   b8cea:	4632      	mov	r2, r6
   b8cec:	4621      	mov	r1, r4
   b8cee:	f7ff ff9f 	bl	b8c30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8cf2:	e7e0      	b.n	b8cb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8cf4:	2400      	movs	r4, #0
   b8cf6:	e7e2      	b.n	b8cbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8cf8:	000bd314 	.word	0x000bd314
   b8cfc:	000bd5a1 	.word	0x000bd5a1
   b8d00:	000bd3a8 	.word	0x000bd3a8
   b8d04:	000bd318 	.word	0x000bd318

000b8d08 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8d08:	4b01      	ldr	r3, [pc, #4]	; (b8d10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8d0a:	4a02      	ldr	r2, [pc, #8]	; (b8d14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8d0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8d0e:	4770      	bx	lr
   b8d10:	2003e6b8 	.word	0x2003e6b8
   b8d14:	000bd329 	.word	0x000bd329

000b8d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8d1c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8d1e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8d22:	4604      	mov	r4, r0
   b8d24:	460e      	mov	r6, r1
   b8d26:	4617      	mov	r7, r2
   b8d28:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8d2a:	f000 fb53 	bl	b93d4 <_Z16_fetch_usbserialv>
   b8d2e:	4581      	cmp	r9, r0
   b8d30:	d04c      	beq.n	b8dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8d32:	792b      	ldrb	r3, [r5, #4]
   b8d34:	0719      	lsls	r1, r3, #28
   b8d36:	d504      	bpl.n	b8d42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b8d38:	696a      	ldr	r2, [r5, #20]
   b8d3a:	4954      	ldr	r1, [pc, #336]	; (b8e8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	f7ff fadc 	bl	b82fa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8d42:	f1b8 0f00 	cmp.w	r8, #0
   b8d46:	d00d      	beq.n	b8d64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b8d48:	215b      	movs	r1, #91	; 0x5b
   b8d4a:	4620      	mov	r0, r4
   b8d4c:	f7ff fa50 	bl	b81f0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8d50:	4641      	mov	r1, r8
   b8d52:	4620      	mov	r0, r4
   b8d54:	f7ff fa3d 	bl	b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8d58:	6823      	ldr	r3, [r4, #0]
   b8d5a:	494d      	ldr	r1, [pc, #308]	; (b8e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8d5c:	68db      	ldr	r3, [r3, #12]
   b8d5e:	2202      	movs	r2, #2
   b8d60:	4620      	mov	r0, r4
   b8d62:	4798      	blx	r3
    if (attr.has_file) {
   b8d64:	792b      	ldrb	r3, [r5, #4]
   b8d66:	07da      	lsls	r2, r3, #31
   b8d68:	d523      	bpl.n	b8db2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8d6a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8d6e:	212f      	movs	r1, #47	; 0x2f
   b8d70:	4640      	mov	r0, r8
   b8d72:	f001 fc7a 	bl	ba66a <strrchr>
    if (s1) {
   b8d76:	b108      	cbz	r0, b8d7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8d78:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8d7c:	4641      	mov	r1, r8
   b8d7e:	4620      	mov	r0, r4
   b8d80:	f7ff fa27 	bl	b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8d84:	792b      	ldrb	r3, [r5, #4]
   b8d86:	079b      	lsls	r3, r3, #30
   b8d88:	d508      	bpl.n	b8d9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8d8a:	213a      	movs	r1, #58	; 0x3a
   b8d8c:	4620      	mov	r0, r4
   b8d8e:	f7ff fa2f 	bl	b81f0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8d92:	68ea      	ldr	r2, [r5, #12]
   b8d94:	493f      	ldr	r1, [pc, #252]	; (b8e94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8d96:	4620      	mov	r0, r4
   b8d98:	f7ff faaf 	bl	b82fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8d9c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8d9e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8da0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8da4:	68db      	ldr	r3, [r3, #12]
   b8da6:	bf14      	ite	ne
   b8da8:	493b      	ldrne	r1, [pc, #236]	; (b8e98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8daa:	493c      	ldreq	r1, [pc, #240]	; (b8e9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8dac:	2202      	movs	r2, #2
            write(": ", 2);
   b8dae:	4620      	mov	r0, r4
   b8db0:	4798      	blx	r3
    if (attr.has_function) {
   b8db2:	792b      	ldrb	r3, [r5, #4]
   b8db4:	0758      	lsls	r0, r3, #29
   b8db6:	d51d      	bpl.n	b8df4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8db8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8dba:	460b      	mov	r3, r1
   b8dbc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8dbe:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8dc2:	b160      	cbz	r0, b8dde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8dc4:	2820      	cmp	r0, #32
   b8dc6:	d108      	bne.n	b8dda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8dc8:	4619      	mov	r1, r3
   b8dca:	e7f7      	b.n	b8dbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8dcc:	4834      	ldr	r0, [pc, #208]	; (b8ea0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8dce:	f000 ff26 	bl	b9c1e <_ZN5spark12NetworkClass9listeningEv>
   b8dd2:	2800      	cmp	r0, #0
   b8dd4:	d0ad      	beq.n	b8d32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8dda:	2828      	cmp	r0, #40	; 0x28
   b8ddc:	d1ee      	bne.n	b8dbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8dde:	6823      	ldr	r3, [r4, #0]
   b8de0:	1a52      	subs	r2, r2, r1
   b8de2:	68db      	ldr	r3, [r3, #12]
   b8de4:	4620      	mov	r0, r4
   b8de6:	4798      	blx	r3
        write("(): ", 4);
   b8de8:	6823      	ldr	r3, [r4, #0]
   b8dea:	492e      	ldr	r1, [pc, #184]	; (b8ea4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8dec:	68db      	ldr	r3, [r3, #12]
   b8dee:	2204      	movs	r2, #4
   b8df0:	4620      	mov	r0, r4
   b8df2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8df4:	2100      	movs	r1, #0
   b8df6:	4638      	mov	r0, r7
   b8df8:	f7fe f840 	bl	b6e7c <log_level_name>
   b8dfc:	4601      	mov	r1, r0
    write(s);
   b8dfe:	4620      	mov	r0, r4
   b8e00:	f7ff f9e7 	bl	b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8e04:	6823      	ldr	r3, [r4, #0]
   b8e06:	4925      	ldr	r1, [pc, #148]	; (b8e9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8e08:	68db      	ldr	r3, [r3, #12]
   b8e0a:	2202      	movs	r2, #2
   b8e0c:	4620      	mov	r0, r4
   b8e0e:	4798      	blx	r3
    if (msg) {
   b8e10:	b11e      	cbz	r6, b8e1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8e12:	4631      	mov	r1, r6
   b8e14:	4620      	mov	r0, r4
   b8e16:	f7ff f9dc 	bl	b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8e1a:	792b      	ldrb	r3, [r5, #4]
   b8e1c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8e20:	d02c      	beq.n	b8e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8e22:	6823      	ldr	r3, [r4, #0]
   b8e24:	4920      	ldr	r1, [pc, #128]	; (b8ea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8e26:	68db      	ldr	r3, [r3, #12]
   b8e28:	2202      	movs	r2, #2
   b8e2a:	4620      	mov	r0, r4
   b8e2c:	4798      	blx	r3
        if (attr.has_code) {
   b8e2e:	792b      	ldrb	r3, [r5, #4]
   b8e30:	06d9      	lsls	r1, r3, #27
   b8e32:	d50a      	bpl.n	b8e4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8e34:	6823      	ldr	r3, [r4, #0]
   b8e36:	491d      	ldr	r1, [pc, #116]	; (b8eac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8e38:	68db      	ldr	r3, [r3, #12]
   b8e3a:	2207      	movs	r2, #7
   b8e3c:	4620      	mov	r0, r4
   b8e3e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8e40:	69aa      	ldr	r2, [r5, #24]
   b8e42:	491b      	ldr	r1, [pc, #108]	; (b8eb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8e44:	4620      	mov	r0, r4
   b8e46:	f7ff fa58 	bl	b82fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8e4a:	792b      	ldrb	r3, [r5, #4]
   b8e4c:	069a      	lsls	r2, r3, #26
   b8e4e:	d511      	bpl.n	b8e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8e50:	06db      	lsls	r3, r3, #27
   b8e52:	d505      	bpl.n	b8e60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8e54:	6823      	ldr	r3, [r4, #0]
   b8e56:	4910      	ldr	r1, [pc, #64]	; (b8e98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b8e58:	68db      	ldr	r3, [r3, #12]
   b8e5a:	2202      	movs	r2, #2
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	4798      	blx	r3
            write("details = ", 10);
   b8e60:	6823      	ldr	r3, [r4, #0]
   b8e62:	4914      	ldr	r1, [pc, #80]	; (b8eb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8e64:	68db      	ldr	r3, [r3, #12]
   b8e66:	4620      	mov	r0, r4
   b8e68:	220a      	movs	r2, #10
   b8e6a:	4798      	blx	r3
            write(attr.details);
   b8e6c:	69e9      	ldr	r1, [r5, #28]
   b8e6e:	4620      	mov	r0, r4
   b8e70:	f7ff f9af 	bl	b81d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8e74:	215d      	movs	r1, #93	; 0x5d
   b8e76:	4620      	mov	r0, r4
   b8e78:	f7ff f9ba 	bl	b81f0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8e7c:	6823      	ldr	r3, [r4, #0]
   b8e7e:	490e      	ldr	r1, [pc, #56]	; (b8eb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8e80:	68db      	ldr	r3, [r3, #12]
   b8e82:	4620      	mov	r0, r4
   b8e84:	2202      	movs	r2, #2
}
   b8e86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8e8a:	4718      	bx	r3
   b8e8c:	000bd32d 	.word	0x000bd32d
   b8e90:	000bd334 	.word	0x000bd334
   b8e94:	000bd4b4 	.word	0x000bd4b4
   b8e98:	000bd337 	.word	0x000bd337
   b8e9c:	000bc61d 	.word	0x000bc61d
   b8ea0:	2003e720 	.word	0x2003e720
   b8ea4:	000bd33a 	.word	0x000bd33a
   b8ea8:	000bd33f 	.word	0x000bd33f
   b8eac:	000bd342 	.word	0x000bd342
   b8eb0:	000bd34a 	.word	0x000bd34a
   b8eb4:	000bd34d 	.word	0x000bd34d
   b8eb8:	000bd358 	.word	0x000bd358

000b8ebc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b8ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ec0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b8ec2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b8ec4:	460d      	mov	r5, r1
   b8ec6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b8ec8:	f000 fa84 	bl	b93d4 <_Z16_fetch_usbserialv>
   b8ecc:	4287      	cmp	r7, r0
   b8ece:	d007      	beq.n	b8ee0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b8ed0:	6a20      	ldr	r0, [r4, #32]
   b8ed2:	6803      	ldr	r3, [r0, #0]
   b8ed4:	4632      	mov	r2, r6
   b8ed6:	4629      	mov	r1, r5
   b8ed8:	68db      	ldr	r3, [r3, #12]
}
   b8eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b8ede:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b8ee0:	4803      	ldr	r0, [pc, #12]	; (b8ef0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b8ee2:	f000 fe9c 	bl	b9c1e <_ZN5spark12NetworkClass9listeningEv>
   b8ee6:	2800      	cmp	r0, #0
   b8ee8:	d0f2      	beq.n	b8ed0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b8eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8eee:	bf00      	nop
   b8ef0:	2003e720 	.word	0x2003e720

000b8ef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ef8:	b085      	sub	sp, #20
    return stream_;
   b8efa:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8efe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8f00:	4605      	mov	r5, r0
   b8f02:	460f      	mov	r7, r1
   b8f04:	4690      	mov	r8, r2
   b8f06:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8f08:	f000 fa64 	bl	b93d4 <_Z16_fetch_usbserialv>
   b8f0c:	4581      	cmp	r9, r0
   b8f0e:	d105      	bne.n	b8f1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8f10:	4849      	ldr	r0, [pc, #292]	; (b9038 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8f12:	f000 fe84 	bl	b9c1e <_ZN5spark12NetworkClass9listeningEv>
   b8f16:	2800      	cmp	r0, #0
   b8f18:	f040 808a 	bne.w	b9030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8f1c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b8f1e:	4a47      	ldr	r2, [pc, #284]	; (b903c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8f20:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8f22:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8f26:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8f28:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8f2a:	f88d 9008 	strb.w	r9, [sp, #8]
   b8f2e:	f001 f81a 	bl	b9f66 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8f32:	4649      	mov	r1, r9
   b8f34:	4640      	mov	r0, r8
   b8f36:	f7fd ffa1 	bl	b6e7c <log_level_name>
    json.name("l", 1).value(s);
   b8f3a:	4941      	ldr	r1, [pc, #260]	; (b9040 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8f3c:	4680      	mov	r8, r0
   b8f3e:	2201      	movs	r2, #1
   b8f40:	a801      	add	r0, sp, #4
   b8f42:	f001 f89f 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8f46:	4641      	mov	r1, r8
   b8f48:	f7ff f935 	bl	b81b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8f4c:	b13f      	cbz	r7, b8f5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b8f4e:	493d      	ldr	r1, [pc, #244]	; (b9044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8f50:	2201      	movs	r2, #1
   b8f52:	a801      	add	r0, sp, #4
   b8f54:	f001 f896 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8f58:	4639      	mov	r1, r7
   b8f5a:	f7ff f92c 	bl	b81b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b8f5e:	b13e      	cbz	r6, b8f70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8f60:	4939      	ldr	r1, [pc, #228]	; (b9048 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8f62:	2201      	movs	r2, #1
   b8f64:	a801      	add	r0, sp, #4
   b8f66:	f001 f88d 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8f6a:	4631      	mov	r1, r6
   b8f6c:	f7ff f923 	bl	b81b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b8f70:	7923      	ldrb	r3, [r4, #4]
   b8f72:	07df      	lsls	r7, r3, #31
   b8f74:	d50e      	bpl.n	b8f94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8f76:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8f78:	212f      	movs	r1, #47	; 0x2f
   b8f7a:	4630      	mov	r0, r6
   b8f7c:	f001 fb75 	bl	ba66a <strrchr>
    if (s1) {
   b8f80:	b100      	cbz	r0, b8f84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b8f82:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8f84:	4931      	ldr	r1, [pc, #196]	; (b904c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8f86:	2201      	movs	r2, #1
   b8f88:	a801      	add	r0, sp, #4
   b8f8a:	f001 f87b 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8f8e:	4631      	mov	r1, r6
   b8f90:	f7ff f911 	bl	b81b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8f94:	7923      	ldrb	r3, [r4, #4]
   b8f96:	079e      	lsls	r6, r3, #30
   b8f98:	d507      	bpl.n	b8faa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8f9a:	492d      	ldr	r1, [pc, #180]	; (b9050 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8f9c:	2202      	movs	r2, #2
   b8f9e:	a801      	add	r0, sp, #4
   b8fa0:	f001 f870 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8fa4:	68e1      	ldr	r1, [r4, #12]
   b8fa6:	f000 ffeb 	bl	b9f80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8faa:	7923      	ldrb	r3, [r4, #4]
   b8fac:	0758      	lsls	r0, r3, #29
   b8fae:	d514      	bpl.n	b8fda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8fb0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8fb2:	4633      	mov	r3, r6
   b8fb4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8fba:	b12a      	cbz	r2, b8fc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8fbc:	2a20      	cmp	r2, #32
   b8fbe:	d101      	bne.n	b8fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b8fc0:	461e      	mov	r6, r3
   b8fc2:	e7f7      	b.n	b8fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8fc4:	2a28      	cmp	r2, #40	; 0x28
   b8fc6:	d1f5      	bne.n	b8fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8fc8:	4922      	ldr	r1, [pc, #136]	; (b9054 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8fca:	2202      	movs	r2, #2
   b8fcc:	a801      	add	r0, sp, #4
   b8fce:	f001 f859 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8fd2:	1bba      	subs	r2, r7, r6
   b8fd4:	4631      	mov	r1, r6
   b8fd6:	f001 f865 	bl	ba0a4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8fda:	7923      	ldrb	r3, [r4, #4]
   b8fdc:	0719      	lsls	r1, r3, #28
   b8fde:	d507      	bpl.n	b8ff0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8fe0:	491d      	ldr	r1, [pc, #116]	; (b9058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8fe2:	2201      	movs	r2, #1
   b8fe4:	a801      	add	r0, sp, #4
   b8fe6:	f001 f84d 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b8fea:	6961      	ldr	r1, [r4, #20]
   b8fec:	f000 ffda 	bl	b9fa4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8ff0:	7923      	ldrb	r3, [r4, #4]
   b8ff2:	06da      	lsls	r2, r3, #27
   b8ff4:	d508      	bpl.n	b9008 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8ff6:	2204      	movs	r2, #4
   b8ff8:	4918      	ldr	r1, [pc, #96]	; (b905c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8ffa:	eb0d 0002 	add.w	r0, sp, r2
   b8ffe:	f001 f841 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b9002:	69a1      	ldr	r1, [r4, #24]
   b9004:	f000 ffbc 	bl	b9f80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b9008:	7923      	ldrb	r3, [r4, #4]
   b900a:	069b      	lsls	r3, r3, #26
   b900c:	d507      	bpl.n	b901e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b900e:	4914      	ldr	r1, [pc, #80]	; (b9060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b9010:	2206      	movs	r2, #6
   b9012:	a801      	add	r0, sp, #4
   b9014:	f001 f836 	bl	ba084 <_ZN5spark10JSONWriter4nameEPKcj>
   b9018:	69e1      	ldr	r1, [r4, #28]
   b901a:	f7ff f8cc 	bl	b81b6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b901e:	a801      	add	r0, sp, #4
   b9020:	f000 ff8b 	bl	b9f3a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b9024:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b9026:	490f      	ldr	r1, [pc, #60]	; (b9064 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b9028:	6803      	ldr	r3, [r0, #0]
   b902a:	2202      	movs	r2, #2
   b902c:	68db      	ldr	r3, [r3, #12]
   b902e:	4798      	blx	r3
}
   b9030:	b005      	add	sp, #20
   b9032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9036:	bf00      	nop
   b9038:	2003e720 	.word	0x2003e720
   b903c:	000bd378 	.word	0x000bd378
   b9040:	000bd30a 	.word	0x000bd30a
   b9044:	000bc62d 	.word	0x000bc62d
   b9048:	000bd9b0 	.word	0x000bd9b0
   b904c:	000bd72a 	.word	0x000bd72a
   b9050:	000bd35b 	.word	0x000bd35b
   b9054:	000bd35e 	.word	0x000bd35e
   b9058:	000bc61a 	.word	0x000bc61a
   b905c:	000bd361 	.word	0x000bd361
   b9060:	000bd366 	.word	0x000bd366
   b9064:	000bd358 	.word	0x000bd358

000b9068 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9068:	4b02      	ldr	r3, [pc, #8]	; (b9074 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b906a:	681a      	ldr	r2, [r3, #0]
   b906c:	4b02      	ldr	r3, [pc, #8]	; (b9078 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b906e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9070:	4770      	bx	lr
   b9072:	bf00      	nop
   b9074:	2003e378 	.word	0x2003e378
   b9078:	2003e6e4 	.word	0x2003e6e4

000b907c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b907c:	2100      	movs	r1, #0
   b907e:	f7fd bf15 	b.w	b6eac <system_delay_ms>
	...

000b9084 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9084:	b510      	push	{r4, lr}
   b9086:	4b04      	ldr	r3, [pc, #16]	; (b9098 <_ZN9TCPClientD1Ev+0x14>)
   b9088:	6003      	str	r3, [r0, #0]
   b908a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b908c:	6980      	ldr	r0, [r0, #24]
   b908e:	b108      	cbz	r0, b9094 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b9090:	f7fe fa24 	bl	b74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b9094:	4620      	mov	r0, r4
   b9096:	bd10      	pop	{r4, pc}
   b9098:	000bd4dc 	.word	0x000bd4dc

000b909c <_ZN9TCPClientD0Ev>:
   b909c:	b510      	push	{r4, lr}
   b909e:	4604      	mov	r4, r0
   b90a0:	f7ff fff0 	bl	b9084 <_ZN9TCPClientD1Ev>
   b90a4:	4620      	mov	r0, r4
   b90a6:	211c      	movs	r1, #28
   b90a8:	f7fb fd09 	bl	b4abe <_ZdlPvj>
   b90ac:	4620      	mov	r0, r4
   b90ae:	bd10      	pop	{r4, pc}

000b90b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b90b0:	4b01      	ldr	r3, [pc, #4]	; (b90b8 <_GLOBAL__sub_I_RGB+0x8>)
   b90b2:	2200      	movs	r2, #0
   b90b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b90b6:	4770      	bx	lr
   b90b8:	2003e6e8 	.word	0x2003e6e8

000b90bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b90bc:	4b01      	ldr	r3, [pc, #4]	; (b90c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b90be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b90c0:	4770      	bx	lr
   b90c2:	bf00      	nop
   b90c4:	2003e37c 	.word	0x2003e37c

000b90c8 <serialEventRun>:
{
   b90c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b90ca:	4b0b      	ldr	r3, [pc, #44]	; (b90f8 <serialEventRun+0x30>)
   b90cc:	b143      	cbz	r3, b90e0 <serialEventRun+0x18>
   b90ce:	f000 f981 	bl	b93d4 <_Z16_fetch_usbserialv>
   b90d2:	6803      	ldr	r3, [r0, #0]
   b90d4:	691b      	ldr	r3, [r3, #16]
   b90d6:	4798      	blx	r3
   b90d8:	2800      	cmp	r0, #0
   b90da:	dd01      	ble.n	b90e0 <serialEventRun+0x18>
        serialEvent();
   b90dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b90e0:	4b06      	ldr	r3, [pc, #24]	; (b90fc <serialEventRun+0x34>)
   b90e2:	b143      	cbz	r3, b90f6 <serialEventRun+0x2e>
   b90e4:	f001 f884 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
   b90e8:	6803      	ldr	r3, [r0, #0]
   b90ea:	691b      	ldr	r3, [r3, #16]
   b90ec:	4798      	blx	r3
   b90ee:	2800      	cmp	r0, #0
   b90f0:	dd01      	ble.n	b90f6 <serialEventRun+0x2e>
        serialEvent1();
   b90f2:	f3af 8000 	nop.w
}
   b90f6:	bd08      	pop	{r3, pc}
	...

000b9100 <_post_loop>:
{
   b9100:	b508      	push	{r3, lr}
	serialEventRun();
   b9102:	f7ff ffe1 	bl	b90c8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9106:	f7fd fcb5 	bl	b6a74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b910a:	4b01      	ldr	r3, [pc, #4]	; (b9110 <_post_loop+0x10>)
   b910c:	6018      	str	r0, [r3, #0]
}
   b910e:	bd08      	pop	{r3, pc}
   b9110:	2003e740 	.word	0x2003e740

000b9114 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9114:	4805      	ldr	r0, [pc, #20]	; (b912c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9116:	4a06      	ldr	r2, [pc, #24]	; (b9130 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9118:	4906      	ldr	r1, [pc, #24]	; (b9134 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b911a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b911c:	1a12      	subs	r2, r2, r0
   b911e:	f001 fa07 	bl	ba530 <memcpy>
    __backup_sram_signature = signature;
   b9122:	4b05      	ldr	r3, [pc, #20]	; (b9138 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9124:	4a05      	ldr	r2, [pc, #20]	; (b913c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9126:	601a      	str	r2, [r3, #0]
}
   b9128:	bd08      	pop	{r3, pc}
   b912a:	bf00      	nop
   b912c:	2003f400 	.word	0x2003f400
   b9130:	2003f404 	.word	0x2003f404
   b9134:	000bdce8 	.word	0x000bdce8
   b9138:	2003f400 	.word	0x2003f400
   b913c:	9a271c1e 	.word	0x9a271c1e

000b9140 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9140:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9142:	2300      	movs	r3, #0
   b9144:	9300      	str	r3, [sp, #0]
   b9146:	461a      	mov	r2, r3
   b9148:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b914c:	f7fd fec8 	bl	b6ee0 <system_ctrl_set_result>
}
   b9150:	b003      	add	sp, #12
   b9152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9158 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9158:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b915a:	8843      	ldrh	r3, [r0, #2]
   b915c:	2b0a      	cmp	r3, #10
   b915e:	d008      	beq.n	b9172 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9160:	2b50      	cmp	r3, #80	; 0x50
   b9162:	d10b      	bne.n	b917c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9164:	4b09      	ldr	r3, [pc, #36]	; (b918c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9166:	681b      	ldr	r3, [r3, #0]
   b9168:	b14b      	cbz	r3, b917e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b916a:	b003      	add	sp, #12
   b916c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9170:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9172:	f7ff ffe5 	bl	b9140 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9176:	b003      	add	sp, #12
   b9178:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b917c:	2300      	movs	r3, #0
   b917e:	9300      	str	r3, [sp, #0]
   b9180:	461a      	mov	r2, r3
   b9182:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9186:	f7fd feab 	bl	b6ee0 <system_ctrl_set_result>
}
   b918a:	e7f4      	b.n	b9176 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b918c:	2003e6fc 	.word	0x2003e6fc

000b9190 <module_user_init_hook>:
{
   b9190:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9192:	4812      	ldr	r0, [pc, #72]	; (b91dc <module_user_init_hook+0x4c>)
   b9194:	2100      	movs	r1, #0
   b9196:	f7fd ff5d 	bl	b7054 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b919a:	4b11      	ldr	r3, [pc, #68]	; (b91e0 <module_user_init_hook+0x50>)
   b919c:	681a      	ldr	r2, [r3, #0]
   b919e:	4b11      	ldr	r3, [pc, #68]	; (b91e4 <module_user_init_hook+0x54>)
   b91a0:	429a      	cmp	r2, r3
   b91a2:	4b11      	ldr	r3, [pc, #68]	; (b91e8 <module_user_init_hook+0x58>)
   b91a4:	bf0c      	ite	eq
   b91a6:	2201      	moveq	r2, #1
   b91a8:	2200      	movne	r2, #0
   b91aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b91ac:	d001      	beq.n	b91b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b91ae:	f7ff ffb1 	bl	b9114 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b91b2:	f7fd fc4f 	bl	b6a54 <HAL_RNG_GetRandomNumber>
   b91b6:	4604      	mov	r4, r0
    srand(seed);
   b91b8:	f001 f9ea 	bl	ba590 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b91bc:	4b0b      	ldr	r3, [pc, #44]	; (b91ec <module_user_init_hook+0x5c>)
   b91be:	b113      	cbz	r3, b91c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b91c0:	4620      	mov	r0, r4
   b91c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b91c6:	2100      	movs	r1, #0
   b91c8:	4808      	ldr	r0, [pc, #32]	; (b91ec <module_user_init_hook+0x5c>)
   b91ca:	f7fd fefb 	bl	b6fc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b91ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b91d2:	4807      	ldr	r0, [pc, #28]	; (b91f0 <module_user_init_hook+0x60>)
   b91d4:	2100      	movs	r1, #0
   b91d6:	f7fd be79 	b.w	b6ecc <system_ctrl_set_app_request_handler>
   b91da:	bf00      	nop
   b91dc:	000b90bd 	.word	0x000b90bd
   b91e0:	2003f400 	.word	0x2003f400
   b91e4:	9a271c1e 	.word	0x9a271c1e
   b91e8:	2003e6f8 	.word	0x2003e6f8
   b91ec:	00000000 	.word	0x00000000
   b91f0:	000b9159 	.word	0x000b9159

000b91f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b91f4:	4770      	bx	lr

000b91f6 <_ZN9IPAddressD0Ev>:
   b91f6:	b510      	push	{r4, lr}
   b91f8:	2118      	movs	r1, #24
   b91fa:	4604      	mov	r4, r0
   b91fc:	f7fb fc5f 	bl	b4abe <_ZdlPvj>
   b9200:	4620      	mov	r0, r4
   b9202:	bd10      	pop	{r4, pc}

000b9204 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9204:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9206:	7d03      	ldrb	r3, [r0, #20]
   b9208:	2b06      	cmp	r3, #6
{
   b920a:	b08d      	sub	sp, #52	; 0x34
   b920c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b920e:	f100 0704 	add.w	r7, r0, #4
   b9212:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9216:	d012      	beq.n	b923e <_ZNK9IPAddress7printToER5Print+0x3a>
   b9218:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b921c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9220:	220a      	movs	r2, #10
   b9222:	4630      	mov	r0, r6
   b9224:	f7fe ff17 	bl	b8056 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9228:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b922a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b922c:	d019      	beq.n	b9262 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b922e:	2c00      	cmp	r4, #0
   b9230:	d0f4      	beq.n	b921c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9232:	212e      	movs	r1, #46	; 0x2e
   b9234:	4630      	mov	r0, r6
   b9236:	f7fe fef5 	bl	b8024 <_ZN5Print5printEc>
   b923a:	4404      	add	r4, r0
   b923c:	e7ee      	b.n	b921c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b923e:	232f      	movs	r3, #47	; 0x2f
   b9240:	466a      	mov	r2, sp
   b9242:	4639      	mov	r1, r7
   b9244:	200a      	movs	r0, #10
		buf[0] = 0;
   b9246:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b924a:	f7fd fc8f 	bl	b6b6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b924e:	4668      	mov	r0, sp
   b9250:	f7fb fbd4 	bl	b49fc <strlen>
   b9254:	6833      	ldr	r3, [r6, #0]
   b9256:	4602      	mov	r2, r0
   b9258:	68db      	ldr	r3, [r3, #12]
   b925a:	4669      	mov	r1, sp
   b925c:	4630      	mov	r0, r6
   b925e:	4798      	blx	r3
   b9260:	4604      	mov	r4, r0
    }
    return n;
}
   b9262:	4620      	mov	r0, r4
   b9264:	b00d      	add	sp, #52	; 0x34
   b9266:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9268 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9268:	b510      	push	{r4, lr}
   b926a:	4b05      	ldr	r3, [pc, #20]	; (b9280 <_ZN9IPAddressC1Ev+0x18>)
   b926c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b926e:	2211      	movs	r2, #17
   b9270:	f840 3b04 	str.w	r3, [r0], #4
   b9274:	2100      	movs	r1, #0
   b9276:	f001 f983 	bl	ba580 <memset>
}
   b927a:	4620      	mov	r0, r4
   b927c:	bd10      	pop	{r4, pc}
   b927e:	bf00      	nop
   b9280:	000bd40c 	.word	0x000bd40c

000b9284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9284:	4603      	mov	r3, r0
   b9286:	4a07      	ldr	r2, [pc, #28]	; (b92a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9288:	b510      	push	{r4, lr}
   b928a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b928e:	f101 0210 	add.w	r2, r1, #16
   b9292:	f851 4b04 	ldr.w	r4, [r1], #4
   b9296:	f843 4b04 	str.w	r4, [r3], #4
   b929a:	4291      	cmp	r1, r2
   b929c:	d1f9      	bne.n	b9292 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b929e:	780a      	ldrb	r2, [r1, #0]
   b92a0:	701a      	strb	r2, [r3, #0]
}
   b92a2:	bd10      	pop	{r4, pc}
   b92a4:	000bd40c 	.word	0x000bd40c

000b92a8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b92a8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b92aa:	2b04      	cmp	r3, #4
   b92ac:	d104      	bne.n	b92b8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b92ae:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b92b0:	3800      	subs	r0, #0
   b92b2:	bf18      	it	ne
   b92b4:	2001      	movne	r0, #1
   b92b6:	4770      	bx	lr
    } else if (version() == 6) {
   b92b8:	2b06      	cmp	r3, #6
   b92ba:	d107      	bne.n	b92cc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b92bc:	6843      	ldr	r3, [r0, #4]
   b92be:	b93b      	cbnz	r3, b92d0 <_ZNK9IPAddresscvbEv+0x28>
   b92c0:	6883      	ldr	r3, [r0, #8]
   b92c2:	b92b      	cbnz	r3, b92d0 <_ZNK9IPAddresscvbEv+0x28>
   b92c4:	68c3      	ldr	r3, [r0, #12]
   b92c6:	b91b      	cbnz	r3, b92d0 <_ZNK9IPAddresscvbEv+0x28>
   b92c8:	6900      	ldr	r0, [r0, #16]
   b92ca:	e7f1      	b.n	b92b0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b92cc:	2000      	movs	r0, #0
   b92ce:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b92d0:	2001      	movs	r0, #1
}
   b92d2:	4770      	bx	lr

000b92d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b92d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b92d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b92da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b92de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b92e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b92e6:	2304      	movs	r3, #4
   b92e8:	6041      	str	r1, [r0, #4]
   b92ea:	7503      	strb	r3, [r0, #20]
}
   b92ec:	bd10      	pop	{r4, pc}
	...

000b92f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b92f0:	b507      	push	{r0, r1, r2, lr}
   b92f2:	4b06      	ldr	r3, [pc, #24]	; (b930c <_ZN9IPAddressC1EPKh+0x1c>)
   b92f4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b92f6:	78cb      	ldrb	r3, [r1, #3]
   b92f8:	9300      	str	r3, [sp, #0]
   b92fa:	788b      	ldrb	r3, [r1, #2]
   b92fc:	784a      	ldrb	r2, [r1, #1]
   b92fe:	7809      	ldrb	r1, [r1, #0]
   b9300:	f7ff ffe8 	bl	b92d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9304:	b003      	add	sp, #12
   b9306:	f85d fb04 	ldr.w	pc, [sp], #4
   b930a:	bf00      	nop
   b930c:	000bd40c 	.word	0x000bd40c

000b9310 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9310:	7441      	strb	r1, [r0, #17]
}
   b9312:	4770      	bx	lr

000b9314 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9314:	4770      	bx	lr

000b9316 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9316:	4770      	bx	lr

000b9318 <_ZN9USBSerial4readEv>:
{
   b9318:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b931a:	2100      	movs	r1, #0
   b931c:	7c00      	ldrb	r0, [r0, #16]
   b931e:	f7fd fd7d 	bl	b6e1c <HAL_USB_USART_Receive_Data>
}
   b9322:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9326:	bd08      	pop	{r3, pc}

000b9328 <_ZN9USBSerial4peekEv>:
{
   b9328:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b932a:	2101      	movs	r1, #1
   b932c:	7c00      	ldrb	r0, [r0, #16]
   b932e:	f7fd fd75 	bl	b6e1c <HAL_USB_USART_Receive_Data>
}
   b9332:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9336:	bd08      	pop	{r3, pc}

000b9338 <_ZN9USBSerial17availableForWriteEv>:
{
   b9338:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b933a:	7c00      	ldrb	r0, [r0, #16]
   b933c:	f7fd fd66 	bl	b6e0c <HAL_USB_USART_Available_Data_For_Write>
}
   b9340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9344:	bd08      	pop	{r3, pc}

000b9346 <_ZN9USBSerial9availableEv>:
{
   b9346:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9348:	7c00      	ldrb	r0, [r0, #16]
   b934a:	f7fd fd57 	bl	b6dfc <HAL_USB_USART_Available_Data>
}
   b934e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9352:	bd08      	pop	{r3, pc}

000b9354 <_ZN9USBSerial5writeEh>:
{
   b9354:	b513      	push	{r0, r1, r4, lr}
   b9356:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9358:	7c00      	ldrb	r0, [r0, #16]
{
   b935a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b935c:	f7fd fd56 	bl	b6e0c <HAL_USB_USART_Available_Data_For_Write>
   b9360:	2800      	cmp	r0, #0
   b9362:	9901      	ldr	r1, [sp, #4]
   b9364:	dc01      	bgt.n	b936a <_ZN9USBSerial5writeEh+0x16>
   b9366:	7c60      	ldrb	r0, [r4, #17]
   b9368:	b120      	cbz	r0, b9374 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b936a:	7c20      	ldrb	r0, [r4, #16]
   b936c:	f7fd fd5e 	bl	b6e2c <HAL_USB_USART_Send_Data>
   b9370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9374:	b002      	add	sp, #8
   b9376:	bd10      	pop	{r4, pc}

000b9378 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9378:	7c00      	ldrb	r0, [r0, #16]
   b937a:	f7fd bd5f 	b.w	b6e3c <HAL_USB_USART_Flush_Data>

000b937e <_ZN9USBSerialD0Ev>:
   b937e:	b510      	push	{r4, lr}
   b9380:	2114      	movs	r1, #20
   b9382:	4604      	mov	r4, r0
   b9384:	f7fb fb9b 	bl	b4abe <_ZdlPvj>
   b9388:	4620      	mov	r0, r4
   b938a:	bd10      	pop	{r4, pc}

000b938c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b938c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b938e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9392:	4604      	mov	r4, r0
   b9394:	4608      	mov	r0, r1
   b9396:	2100      	movs	r1, #0
   b9398:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b939c:	4b04      	ldr	r3, [pc, #16]	; (b93b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b939e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b93a0:	2301      	movs	r3, #1
  _serial = serial;
   b93a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b93a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b93a6:	4611      	mov	r1, r2
   b93a8:	f7fd fd10 	bl	b6dcc <HAL_USB_USART_Init>
}
   b93ac:	4620      	mov	r0, r4
   b93ae:	bd10      	pop	{r4, pc}
   b93b0:	000bd420 	.word	0x000bd420

000b93b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b93b4:	7c00      	ldrb	r0, [r0, #16]
   b93b6:	2200      	movs	r2, #0
   b93b8:	f7fd bd10 	b.w	b6ddc <HAL_USB_USART_Begin>

000b93bc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b93bc:	7c00      	ldrb	r0, [r0, #16]
   b93be:	f7fd bd15 	b.w	b6dec <HAL_USB_USART_End>

000b93c2 <_Z19acquireSerialBufferv>:
{
   b93c2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b93c4:	2214      	movs	r2, #20
{
   b93c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b93c8:	2100      	movs	r1, #0
   b93ca:	f001 f8d9 	bl	ba580 <memset>
}
   b93ce:	4620      	mov	r0, r4
   b93d0:	bd10      	pop	{r4, pc}
	...

000b93d4 <_Z16_fetch_usbserialv>:
{
   b93d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b93d6:	4c0f      	ldr	r4, [pc, #60]	; (b9414 <_Z16_fetch_usbserialv+0x40>)
{
   b93d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b93da:	a803      	add	r0, sp, #12
   b93dc:	f7ff fff1 	bl	b93c2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b93e0:	7821      	ldrb	r1, [r4, #0]
   b93e2:	f3bf 8f5b 	dmb	ish
   b93e6:	f011 0101 	ands.w	r1, r1, #1
   b93ea:	d10f      	bne.n	b940c <_Z16_fetch_usbserialv+0x38>
   b93ec:	4620      	mov	r0, r4
   b93ee:	9101      	str	r1, [sp, #4]
   b93f0:	f7fb fb74 	bl	b4adc <__cxa_guard_acquire>
   b93f4:	9901      	ldr	r1, [sp, #4]
   b93f6:	b148      	cbz	r0, b940c <_Z16_fetch_usbserialv+0x38>
   b93f8:	aa03      	add	r2, sp, #12
   b93fa:	4807      	ldr	r0, [pc, #28]	; (b9418 <_Z16_fetch_usbserialv+0x44>)
   b93fc:	f7ff ffc6 	bl	b938c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9400:	4620      	mov	r0, r4
   b9402:	f7fb fb70 	bl	b4ae6 <__cxa_guard_release>
   b9406:	4805      	ldr	r0, [pc, #20]	; (b941c <_Z16_fetch_usbserialv+0x48>)
   b9408:	f001 f870 	bl	ba4ec <atexit>
	return _usbserial;
}
   b940c:	4802      	ldr	r0, [pc, #8]	; (b9418 <_Z16_fetch_usbserialv+0x44>)
   b940e:	b008      	add	sp, #32
   b9410:	bd10      	pop	{r4, pc}
   b9412:	bf00      	nop
   b9414:	2003e700 	.word	0x2003e700
   b9418:	2003e704 	.word	0x2003e704
   b941c:	000b9315 	.word	0x000b9315

000b9420 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9420:	4770      	bx	lr

000b9422 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9422:	7441      	strb	r1, [r0, #17]
}
   b9424:	4770      	bx	lr

000b9426 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9426:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9428:	7c00      	ldrb	r0, [r0, #16]
   b942a:	f7fd fbef 	bl	b6c0c <hal_usart_available_data_for_write>
}
   b942e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9432:	bd08      	pop	{r3, pc}

000b9434 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9434:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9436:	7c00      	ldrb	r0, [r0, #16]
   b9438:	f7fd fbc0 	bl	b6bbc <hal_usart_available>
}
   b943c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9440:	bd08      	pop	{r3, pc}

000b9442 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9442:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9444:	7c00      	ldrb	r0, [r0, #16]
   b9446:	f7fd fbc9 	bl	b6bdc <hal_usart_peek>
}
   b944a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b944e:	bd08      	pop	{r3, pc}

000b9450 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9450:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9452:	7c00      	ldrb	r0, [r0, #16]
   b9454:	f7fd fbba 	bl	b6bcc <hal_usart_read>
}
   b9458:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b945c:	bd08      	pop	{r3, pc}

000b945e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b945e:	7c00      	ldrb	r0, [r0, #16]
   b9460:	f7fd bbc4 	b.w	b6bec <hal_usart_flush>

000b9464 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9464:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9466:	7c45      	ldrb	r5, [r0, #17]
{
   b9468:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b946a:	b12d      	cbz	r5, b9478 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b946c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b946e:	b003      	add	sp, #12
   b9470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9474:	f7fd bb9a 	b.w	b6bac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9478:	7c00      	ldrb	r0, [r0, #16]
   b947a:	9101      	str	r1, [sp, #4]
   b947c:	f7fd fbc6 	bl	b6c0c <hal_usart_available_data_for_write>
   b9480:	2800      	cmp	r0, #0
   b9482:	9901      	ldr	r1, [sp, #4]
   b9484:	dcf2      	bgt.n	b946c <_ZN11USARTSerial5writeEh+0x8>
}
   b9486:	4628      	mov	r0, r5
   b9488:	b003      	add	sp, #12
   b948a:	bd30      	pop	{r4, r5, pc}

000b948c <_ZN11USARTSerialD0Ev>:
   b948c:	b510      	push	{r4, lr}
   b948e:	2114      	movs	r1, #20
   b9490:	4604      	mov	r4, r0
   b9492:	f7fb fb14 	bl	b4abe <_ZdlPvj>
   b9496:	4620      	mov	r0, r4
   b9498:	bd10      	pop	{r4, pc}
	...

000b949c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b949c:	b510      	push	{r4, lr}
   b949e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94a2:	4604      	mov	r4, r0
   b94a4:	4608      	mov	r0, r1
   b94a6:	4611      	mov	r1, r2
   b94a8:	2200      	movs	r2, #0
   b94aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b94ae:	4b04      	ldr	r3, [pc, #16]	; (b94c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b94b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94b2:	2301      	movs	r3, #1
  _serial = serial;
   b94b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b94b8:	f7fd fbb8 	bl	b6c2c <hal_usart_init_ex>
}
   b94bc:	4620      	mov	r0, r4
   b94be:	bd10      	pop	{r4, pc}
   b94c0:	000bd450 	.word	0x000bd450

000b94c4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b94c4:	7c00      	ldrb	r0, [r0, #16]
   b94c6:	2300      	movs	r3, #0
   b94c8:	f7fd bba8 	b.w	b6c1c <hal_usart_begin_config>

000b94cc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b94cc:	2200      	movs	r2, #0
   b94ce:	f7ff bff9 	b.w	b94c4 <_ZN11USARTSerial5beginEmm>

000b94d2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b94d2:	7c00      	ldrb	r0, [r0, #16]
   b94d4:	f7fd bb62 	b.w	b6b9c <hal_usart_end>

000b94d8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b94d8:	4770      	bx	lr

000b94da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b94da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b94dc:	4606      	mov	r6, r0
   b94de:	4615      	mov	r5, r2
   b94e0:	460c      	mov	r4, r1
   b94e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b94e4:	42bc      	cmp	r4, r7
   b94e6:	d006      	beq.n	b94f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b94e8:	6833      	ldr	r3, [r6, #0]
   b94ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   b94ee:	689b      	ldr	r3, [r3, #8]
   b94f0:	4630      	mov	r0, r6
   b94f2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b94f4:	e7f6      	b.n	b94e4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b94f6:	4628      	mov	r0, r5
   b94f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b94fa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b94fa:	7c00      	ldrb	r0, [r0, #16]
   b94fc:	2200      	movs	r2, #0
   b94fe:	f7fd bbbd 	b.w	b6c7c <hal_i2c_write>

000b9502 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9502:	7c00      	ldrb	r0, [r0, #16]
   b9504:	2100      	movs	r1, #0
   b9506:	f7fd bbc1 	b.w	b6c8c <hal_i2c_available>

000b950a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b950a:	7c00      	ldrb	r0, [r0, #16]
   b950c:	2100      	movs	r1, #0
   b950e:	f7fd bbc5 	b.w	b6c9c <hal_i2c_read>

000b9512 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9512:	7c00      	ldrb	r0, [r0, #16]
   b9514:	2100      	movs	r1, #0
   b9516:	f7fd bbc9 	b.w	b6cac <hal_i2c_peek>

000b951a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b951a:	7c00      	ldrb	r0, [r0, #16]
   b951c:	2100      	movs	r1, #0
   b951e:	f7fd bbcd 	b.w	b6cbc <hal_i2c_flush>

000b9522 <_ZN7TwoWireD0Ev>:
   b9522:	b510      	push	{r4, lr}
   b9524:	2114      	movs	r1, #20
   b9526:	4604      	mov	r4, r0
   b9528:	f7fb fac9 	bl	b4abe <_ZdlPvj>
   b952c:	4620      	mov	r0, r4
   b952e:	bd10      	pop	{r4, pc}

000b9530 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9530:	b538      	push	{r3, r4, r5, lr}
   b9532:	4604      	mov	r4, r0
   b9534:	4615      	mov	r5, r2
   b9536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b953a:	2200      	movs	r2, #0
   b953c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9540:	4b09      	ldr	r3, [pc, #36]	; (b9568 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b9542:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9544:	4608      	mov	r0, r1
   b9546:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9548:	4629      	mov	r1, r5
   b954a:	f7fd fbc7 	bl	b6cdc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b954e:	30bf      	adds	r0, #191	; 0xbf
   b9550:	d108      	bne.n	b9564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9552:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9554:	07db      	lsls	r3, r3, #31
   b9556:	d505      	bpl.n	b9564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9558:	6868      	ldr	r0, [r5, #4]
   b955a:	f7fd fd43 	bl	b6fe4 <free>
    free(conf.tx_buffer);
   b955e:	68e8      	ldr	r0, [r5, #12]
   b9560:	f7fd fd40 	bl	b6fe4 <free>
}
   b9564:	4620      	mov	r0, r4
   b9566:	bd38      	pop	{r3, r4, r5, pc}
   b9568:	000bd480 	.word	0x000bd480

000b956c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b956c:	7c00      	ldrb	r0, [r0, #16]
   b956e:	2200      	movs	r2, #0
   b9570:	f7fd bb64 	b.w	b6c3c <hal_i2c_set_speed>

000b9574 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9574:	2300      	movs	r3, #0
   b9576:	7c00      	ldrb	r0, [r0, #16]
   b9578:	461a      	mov	r2, r3
   b957a:	4619      	mov	r1, r3
   b957c:	f7fd bb66 	b.w	b6c4c <hal_i2c_begin>

000b9580 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9580:	7c00      	ldrb	r0, [r0, #16]
   b9582:	2200      	movs	r2, #0
   b9584:	f7fd bb6a 	b.w	b6c5c <hal_i2c_begin_transmission>

000b9588 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9588:	b2c9      	uxtb	r1, r1
   b958a:	f7ff bff9 	b.w	b9580 <_ZN7TwoWire17beginTransmissionEh>

000b958e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b958e:	7c00      	ldrb	r0, [r0, #16]
   b9590:	2200      	movs	r2, #0
   b9592:	f7fd bb6b 	b.w	b6c6c <hal_i2c_end_transmission>

000b9596 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9596:	2101      	movs	r1, #1
   b9598:	f7ff bff9 	b.w	b958e <_ZN7TwoWire15endTransmissionEh>

000b959c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b959c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b959e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b95a0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b95a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b95a6:	2201      	movs	r2, #1
   b95a8:	f04f 33ff 	mov.w	r3, #4294967295
   b95ac:	f10d 0107 	add.w	r1, sp, #7
   b95b0:	47a0      	blx	r4
}
   b95b2:	b002      	add	sp, #8
   b95b4:	bd10      	pop	{r4, pc}

000b95b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b95b6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b95b8:	6803      	ldr	r3, [r0, #0]
   b95ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b95bc:	f04f 33ff 	mov.w	r3, #4294967295
   b95c0:	46a4      	mov	ip, r4
}
   b95c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b95c6:	4760      	bx	ip

000b95c8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b95c8:	b513      	push	{r0, r1, r4, lr}
   b95ca:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b95cc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b95ce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b95d2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b95d4:	f10d 0107 	add.w	r1, sp, #7
   b95d8:	2201      	movs	r2, #1
   b95da:	47a0      	blx	r4
}
   b95dc:	b002      	add	sp, #8
   b95de:	bd10      	pop	{r4, pc}

000b95e0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b95e0:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b95e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b95e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b95e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b95ec:	429a      	cmp	r2, r3
int TCPClient::read() {
   b95ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b95f0:	d008      	beq.n	b9604 <_ZN9TCPClient4readEv+0x24>
   b95f2:	6963      	ldr	r3, [r4, #20]
   b95f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b95f8:	1c51      	adds	r1, r2, #1
   b95fa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b95fe:	4413      	add	r3, r2
   b9600:	7918      	ldrb	r0, [r3, #4]
}
   b9602:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9604:	6803      	ldr	r3, [r0, #0]
   b9606:	691b      	ldr	r3, [r3, #16]
   b9608:	4798      	blx	r3
   b960a:	2800      	cmp	r0, #0
   b960c:	d1f1      	bne.n	b95f2 <_ZN9TCPClient4readEv+0x12>
   b960e:	f04f 30ff 	mov.w	r0, #4294967295
   b9612:	e7f6      	b.n	b9602 <_ZN9TCPClient4readEv+0x22>

000b9614 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9614:	4770      	bx	lr

000b9616 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9616:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9618:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b961a:	43c0      	mvns	r0, r0
   b961c:	0fc0      	lsrs	r0, r0, #31
   b961e:	4770      	bx	lr

000b9620 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9620:	4770      	bx	lr
	...

000b9624 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9624:	4b06      	ldr	r3, [pc, #24]	; (b9640 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9626:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9628:	b510      	push	{r4, lr}
   b962a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b962e:	d005      	beq.n	b963c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9630:	4608      	mov	r0, r1
   b9632:	f000 fe49 	bl	ba2c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9636:	2800      	cmp	r0, #0
   b9638:	bf08      	it	eq
   b963a:	2400      	moveq	r4, #0
      }
   b963c:	4620      	mov	r0, r4
   b963e:	bd10      	pop	{r4, pc}
   b9640:	000bd2f8 	.word	0x000bd2f8

000b9644 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9644:	b510      	push	{r4, lr}
   b9646:	21ac      	movs	r1, #172	; 0xac
   b9648:	4604      	mov	r4, r0
   b964a:	f7fb fa38 	bl	b4abe <_ZdlPvj>
   b964e:	4620      	mov	r0, r4
   b9650:	bd10      	pop	{r4, pc}

000b9652 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9652:	21ac      	movs	r1, #172	; 0xac
   b9654:	f7fb ba33 	b.w	b4abe <_ZdlPvj>

000b9658 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b965c:	f04f 0800 	mov.w	r8, #0
   b9660:	b086      	sub	sp, #24
   b9662:	461c      	mov	r4, r3
   b9664:	f8c0 8004 	str.w	r8, [r0, #4]
   b9668:	4605      	mov	r5, r0
   b966a:	460e      	mov	r6, r1
   b966c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b966e:	4641      	mov	r1, r8
   b9670:	2210      	movs	r2, #16
   b9672:	a802      	add	r0, sp, #8
   b9674:	f000 ff84 	bl	ba580 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9678:	1c63      	adds	r3, r4, #1
   b967a:	d009      	beq.n	b9690 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b967c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9680:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9684:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9688:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b968c:	435c      	muls	r4, r3
   b968e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9690:	6968      	ldr	r0, [r5, #20]
   b9692:	2310      	movs	r3, #16
   b9694:	9300      	str	r3, [sp, #0]
   b9696:	6800      	ldr	r0, [r0, #0]
   b9698:	ab02      	add	r3, sp, #8
   b969a:	f241 0205 	movw	r2, #4101	; 0x1005
   b969e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b96a2:	f7fd fb23 	bl	b6cec <sock_setsockopt>
    if (ret < 0) {
   b96a6:	2800      	cmp	r0, #0
   b96a8:	da07      	bge.n	b96ba <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b96aa:	f7fd fcc3 	bl	b7034 <__errno>
   b96ae:	6803      	ldr	r3, [r0, #0]
   b96b0:	606b      	str	r3, [r5, #4]
        return 0;
   b96b2:	2000      	movs	r0, #0
}
   b96b4:	b006      	add	sp, #24
   b96b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b96ba:	6968      	ldr	r0, [r5, #20]
   b96bc:	2300      	movs	r3, #0
   b96be:	6800      	ldr	r0, [r0, #0]
   b96c0:	463a      	mov	r2, r7
   b96c2:	4631      	mov	r1, r6
   b96c4:	f7fd fb32 	bl	b6d2c <sock_send>
    if (ret < 0) {
   b96c8:	1e03      	subs	r3, r0, #0
   b96ca:	dbee      	blt.n	b96aa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b96cc:	4618      	mov	r0, r3
   b96ce:	e7f1      	b.n	b96b4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b96d0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b96d0:	b530      	push	{r4, r5, lr}
   b96d2:	b087      	sub	sp, #28
   b96d4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b96d6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b96d8:	4668      	mov	r0, sp
   b96da:	f7ff fe09 	bl	b92f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b96de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96e0:	3404      	adds	r4, #4
   b96e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96e4:	682b      	ldr	r3, [r5, #0]
   b96e6:	7023      	strb	r3, [r4, #0]
    }
   b96e8:	b007      	add	sp, #28
   b96ea:	bd30      	pop	{r4, r5, pc}

000b96ec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b96ec:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b96ee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b96f0:	4b05      	ldr	r3, [pc, #20]	; (b9708 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b96f2:	4604      	mov	r4, r0
   b96f4:	358c      	adds	r5, #140	; 0x8c
   b96f6:	f844 3b04 	str.w	r3, [r4], #4
   b96fa:	4606      	mov	r6, r0
   b96fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9700:	682b      	ldr	r3, [r5, #0]
   b9702:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9704:	4630      	mov	r0, r6
   b9706:	bd70      	pop	{r4, r5, r6, pc}
   b9708:	000bd40c 	.word	0x000bd40c

000b970c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b970c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9710:	4698      	mov	r8, r3
    stop();
   b9712:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9714:	b093      	sub	sp, #76	; 0x4c
   b9716:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9718:	2400      	movs	r4, #0
    stop();
   b971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b971c:	4606      	mov	r6, r0
   b971e:	4617      	mov	r7, r2
    stop();
   b9720:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9722:	4628      	mov	r0, r5
   b9724:	466b      	mov	r3, sp
   b9726:	4622      	mov	r2, r4
   b9728:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b972a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b972c:	f7fd f962 	bl	b69f4 <netdb_getaddrinfo>
   b9730:	4605      	mov	r5, r0
   b9732:	2800      	cmp	r0, #0
   b9734:	d163      	bne.n	b97fe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9736:	9b00      	ldr	r3, [sp, #0]
   b9738:	2b00      	cmp	r3, #0
   b973a:	d04b      	beq.n	b97d4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b973c:	695b      	ldr	r3, [r3, #20]
   b973e:	2b00      	cmp	r3, #0
   b9740:	d048      	beq.n	b97d4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9742:	a806      	add	r0, sp, #24
   b9744:	f7ff fd90 	bl	b9268 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9748:	9b00      	ldr	r3, [sp, #0]
   b974a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b974c:	7863      	ldrb	r3, [r4, #1]
   b974e:	2b02      	cmp	r3, #2
   b9750:	d104      	bne.n	b975c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9752:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9754:	a806      	add	r0, sp, #24
   b9756:	f7ff ffbb 	bl	b96d0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b975a:	e026      	b.n	b97aa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b975c:	2b0a      	cmp	r3, #10
   b975e:	d124      	bne.n	b97aa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9760:	2211      	movs	r2, #17
   b9762:	4629      	mov	r1, r5
   b9764:	a801      	add	r0, sp, #4
   b9766:	f000 ff0b 	bl	ba580 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b976a:	68a3      	ldr	r3, [r4, #8]
   b976c:	2b00      	cmp	r3, #0
   b976e:	d038      	beq.n	b97e2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9770:	f104 0308 	add.w	r3, r4, #8
   b9774:	f10d 0c04 	add.w	ip, sp, #4
   b9778:	3418      	adds	r4, #24
   b977a:	6818      	ldr	r0, [r3, #0]
   b977c:	6859      	ldr	r1, [r3, #4]
   b977e:	4662      	mov	r2, ip
   b9780:	c203      	stmia	r2!, {r0, r1}
   b9782:	3308      	adds	r3, #8
   b9784:	42a3      	cmp	r3, r4
   b9786:	4694      	mov	ip, r2
   b9788:	d1f7      	bne.n	b977a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b978a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b978c:	a901      	add	r1, sp, #4
   b978e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9790:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9794:	f7ff fd76 	bl	b9284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9798:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b979c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b97a0:	ac07      	add	r4, sp, #28
   b97a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97a4:	f8dc 3000 	ldr.w	r3, [ip]
   b97a8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b97aa:	a806      	add	r0, sp, #24
   b97ac:	f7ff fd7c 	bl	b92a8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b97b0:	b180      	cbz	r0, b97d4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b97b2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b97b4:	ad07      	add	r5, sp, #28
   b97b6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b97ba:	4b12      	ldr	r3, [pc, #72]	; (b9804 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b97bc:	930c      	str	r3, [sp, #48]	; 0x30
   b97be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97c0:	ac0d      	add	r4, sp, #52	; 0x34
   b97c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97c4:	682b      	ldr	r3, [r5, #0]
   b97c6:	7023      	strb	r3, [r4, #0]
   b97c8:	463a      	mov	r2, r7
   b97ca:	4643      	mov	r3, r8
   b97cc:	a90c      	add	r1, sp, #48	; 0x30
   b97ce:	4630      	mov	r0, r6
   b97d0:	47c8      	blx	r9
   b97d2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b97d4:	9800      	ldr	r0, [sp, #0]
   b97d6:	f7fd f905 	bl	b69e4 <netdb_freeaddrinfo>
}
   b97da:	4628      	mov	r0, r5
   b97dc:	b013      	add	sp, #76	; 0x4c
   b97de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b97e2:	68e3      	ldr	r3, [r4, #12]
   b97e4:	2b00      	cmp	r3, #0
   b97e6:	d1c3      	bne.n	b9770 <_ZN9TCPClient7connectEPKctm+0x64>
   b97e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b97ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b97f0:	f7fd f9c4 	bl	b6b7c <inet_htonl>
   b97f4:	4581      	cmp	r9, r0
   b97f6:	d1bb      	bne.n	b9770 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b97f8:	f104 0114 	add.w	r1, r4, #20
   b97fc:	e7aa      	b.n	b9754 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b97fe:	4625      	mov	r5, r4
   b9800:	e7e8      	b.n	b97d4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9802:	bf00      	nop
   b9804:	000bd40c 	.word	0x000bd40c

000b9808 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9808:	b538      	push	{r3, r4, r5, lr}
   b980a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b980c:	681a      	ldr	r2, [r3, #0]
   b980e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9810:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9812:	da10      	bge.n	b9836 <_ZN9TCPClient9connectedEv+0x2e>
   b9814:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9818:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b981c:	429a      	cmp	r2, r3
   b981e:	d10a      	bne.n	b9836 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9820:	6803      	ldr	r3, [r0, #0]
   b9822:	691b      	ldr	r3, [r3, #16]
   b9824:	4798      	blx	r3
        if (!rv) {
   b9826:	4604      	mov	r4, r0
   b9828:	b928      	cbnz	r0, b9836 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b982a:	682b      	ldr	r3, [r5, #0]
   b982c:	4628      	mov	r0, r5
   b982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9830:	4798      	blx	r3
        rv = available();
   b9832:	4620      	mov	r0, r4
}
   b9834:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9836:	2001      	movs	r0, #1
   b9838:	e7fc      	b.n	b9834 <_ZN9TCPClient9connectedEv+0x2c>

000b983a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b983a:	b510      	push	{r4, lr}
   b983c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b983e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9842:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9846:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9848:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b984a:	d005      	beq.n	b9858 <_ZN9TCPClient4peekEv+0x1e>
   b984c:	6963      	ldr	r3, [r4, #20]
   b984e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9852:	4413      	add	r3, r2
   b9854:	7918      	ldrb	r0, [r3, #4]
}
   b9856:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9858:	6803      	ldr	r3, [r0, #0]
   b985a:	691b      	ldr	r3, [r3, #16]
   b985c:	4798      	blx	r3
   b985e:	2800      	cmp	r0, #0
   b9860:	d1f4      	bne.n	b984c <_ZN9TCPClient4peekEv+0x12>
   b9862:	f04f 30ff 	mov.w	r0, #4294967295
   b9866:	e7f6      	b.n	b9856 <_ZN9TCPClient4peekEv+0x1c>

000b9868 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b986a:	6943      	ldr	r3, [r0, #20]
   b986c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b986e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9872:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9876:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9878:	4605      	mov	r5, r0
   b987a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b987c:	d016      	beq.n	b98ac <_ZN9TCPClient4readEPhj+0x44>
   b987e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9880:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9884:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9888:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b988a:	42bc      	cmp	r4, r7
   b988c:	bf28      	it	cs
   b988e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9890:	3304      	adds	r3, #4
   b9892:	4622      	mov	r2, r4
   b9894:	4419      	add	r1, r3
   b9896:	4630      	mov	r0, r6
   b9898:	f000 fe4a 	bl	ba530 <memcpy>
   b989c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b989e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b98a2:	4423      	add	r3, r4
   b98a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b98a8:	4620      	mov	r0, r4
   b98aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b98ac:	6803      	ldr	r3, [r0, #0]
   b98ae:	691b      	ldr	r3, [r3, #16]
   b98b0:	4798      	blx	r3
   b98b2:	2800      	cmp	r0, #0
   b98b4:	d1e3      	bne.n	b987e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b98b6:	f04f 34ff 	mov.w	r4, #4294967295
   b98ba:	e7f5      	b.n	b98a8 <_ZN9TCPClient4readEPhj+0x40>

000b98bc <_ZN9TCPClient12flush_bufferEv>:
   b98bc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b98be:	2300      	movs	r3, #0
   b98c0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b98c4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b98c6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b98ca:	4770      	bx	lr

000b98cc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98d0:	461f      	mov	r7, r3
    stop();
   b98d2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98d4:	460c      	mov	r4, r1
    stop();
   b98d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98d8:	b08a      	sub	sp, #40	; 0x28
   b98da:	4605      	mov	r5, r0
   b98dc:	4616      	mov	r6, r2
    stop();
   b98de:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b98e0:	7d23      	ldrb	r3, [r4, #20]
   b98e2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b98e6:	2b04      	cmp	r3, #4
   b98e8:	bf0c      	ite	eq
   b98ea:	2002      	moveq	r0, #2
   b98ec:	200a      	movne	r0, #10
   b98ee:	2206      	movs	r2, #6
   b98f0:	2101      	movs	r1, #1
   b98f2:	f7fd fa23 	bl	b6d3c <sock_socket>
   b98f6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b98fa:	696b      	ldr	r3, [r5, #20]
   b98fc:	681b      	ldr	r3, [r3, #0]
   b98fe:	2b00      	cmp	r3, #0
   b9900:	da08      	bge.n	b9914 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9902:	682b      	ldr	r3, [r5, #0]
   b9904:	4628      	mov	r0, r5
   b9906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9908:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b990a:	4798      	blx	r3
}
   b990c:	4620      	mov	r0, r4
   b990e:	b00a      	add	sp, #40	; 0x28
   b9910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9914:	4628      	mov	r0, r5
   b9916:	f7ff ffd1 	bl	b98bc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b991a:	b1b7      	cbz	r7, b994a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b991c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b991e:	a903      	add	r1, sp, #12
   b9920:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9922:	9303      	str	r3, [sp, #12]
   b9924:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9928:	f7fd f88c 	bl	b6a44 <if_index_to_name>
   b992c:	2800      	cmp	r0, #0
   b992e:	d1e8      	bne.n	b9902 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9930:	6968      	ldr	r0, [r5, #20]
   b9932:	2306      	movs	r3, #6
   b9934:	9300      	str	r3, [sp, #0]
   b9936:	6800      	ldr	r0, [r0, #0]
   b9938:	ab03      	add	r3, sp, #12
   b993a:	f241 020b 	movw	r2, #4107	; 0x100b
   b993e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9942:	f7fd f9d3 	bl	b6cec <sock_setsockopt>
   b9946:	2800      	cmp	r0, #0
   b9948:	d1db      	bne.n	b9902 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b994a:	221c      	movs	r2, #28
   b994c:	2100      	movs	r1, #0
   b994e:	a803      	add	r0, sp, #12
   b9950:	f000 fe16 	bl	ba580 <memset>
    if (ip.version() == 4) {
   b9954:	7d23      	ldrb	r3, [r4, #20]
   b9956:	2b04      	cmp	r3, #4
   b9958:	d11d      	bne.n	b9996 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b995a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b995e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9960:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9964:	f7fd f912 	bl	b6b8c <inet_htons>
   b9968:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b996c:	6860      	ldr	r0, [r4, #4]
   b996e:	f7fd f905 	bl	b6b7c <inet_htonl>
   b9972:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9974:	696b      	ldr	r3, [r5, #20]
   b9976:	221c      	movs	r2, #28
   b9978:	6818      	ldr	r0, [r3, #0]
   b997a:	a903      	add	r1, sp, #12
   b997c:	f7fd f9c6 	bl	b6d0c <sock_connect>
   b9980:	2800      	cmp	r0, #0
   b9982:	d1be      	bne.n	b9902 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9984:	3404      	adds	r4, #4
   b9986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9988:	696d      	ldr	r5, [r5, #20]
   b998a:	358c      	adds	r5, #140	; 0x8c
   b998c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b998e:	6823      	ldr	r3, [r4, #0]
   b9990:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9992:	2401      	movs	r4, #1
   b9994:	e7ba      	b.n	b990c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9996:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b999a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b999c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b99a0:	f7fd f8f4 	bl	b6b8c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b99a4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b99a6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b99aa:	1d23      	adds	r3, r4, #4
   b99ac:	f104 0714 	add.w	r7, r4, #20
   b99b0:	6818      	ldr	r0, [r3, #0]
   b99b2:	6859      	ldr	r1, [r3, #4]
   b99b4:	4632      	mov	r2, r6
   b99b6:	c203      	stmia	r2!, {r0, r1}
   b99b8:	3308      	adds	r3, #8
   b99ba:	42bb      	cmp	r3, r7
   b99bc:	4616      	mov	r6, r2
   b99be:	d1f7      	bne.n	b99b0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b99c0:	e7d8      	b.n	b9974 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b99c4 <_ZN9TCPClient9availableEv>:
{
   b99c4:	b530      	push	{r4, r5, lr}
   b99c6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b99c8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b99cc:	b08b      	sub	sp, #44	; 0x2c
   b99ce:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b99d0:	b12b      	cbz	r3, b99de <_ZN9TCPClient9availableEv+0x1a>
   b99d2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b99d6:	429a      	cmp	r2, r3
   b99d8:	d101      	bne.n	b99de <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b99da:	f7ff ff6f 	bl	b98bc <_ZN9TCPClient12flush_bufferEv>
   b99de:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b99e0:	6808      	ldr	r0, [r1, #0]
   b99e2:	2800      	cmp	r0, #0
   b99e4:	db18      	blt.n	b9a18 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b99e6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b99ea:	2d7f      	cmp	r5, #127	; 0x7f
   b99ec:	d814      	bhi.n	b9a18 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b99ee:	3104      	adds	r1, #4
   b99f0:	2308      	movs	r3, #8
   b99f2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b99f6:	4429      	add	r1, r5
   b99f8:	f7fd f990 	bl	b6d1c <sock_recv>
            if (ret > 0) {
   b99fc:	2800      	cmp	r0, #0
   b99fe:	dd13      	ble.n	b9a28 <_ZN9TCPClient9availableEv+0x64>
   b9a00:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9a02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9a06:	b90a      	cbnz	r2, b9a0c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9a08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9a0c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9a0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9a12:	4410      	add	r0, r2
   b9a14:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9a18:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9a1a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9a1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9a22:	1ac0      	subs	r0, r0, r3
   b9a24:	b00b      	add	sp, #44	; 0x2c
   b9a26:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9a28:	f7fd fb04 	bl	b7034 <__errno>
   b9a2c:	6803      	ldr	r3, [r0, #0]
   b9a2e:	2b0b      	cmp	r3, #11
   b9a30:	d0f2      	beq.n	b9a18 <_ZN9TCPClient9availableEv+0x54>
   b9a32:	f7fd faff 	bl	b7034 <__errno>
   b9a36:	6803      	ldr	r3, [r0, #0]
   b9a38:	2b0b      	cmp	r3, #11
   b9a3a:	d0ed      	beq.n	b9a18 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9a3c:	2320      	movs	r3, #32
   b9a3e:	2500      	movs	r5, #0
   b9a40:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9a44:	f7fd faf6 	bl	b7034 <__errno>
   b9a48:	6803      	ldr	r3, [r0, #0]
   b9a4a:	9301      	str	r3, [sp, #4]
   b9a4c:	4b08      	ldr	r3, [pc, #32]	; (b9a70 <_ZN9TCPClient9availableEv+0xac>)
   b9a4e:	4909      	ldr	r1, [pc, #36]	; (b9a74 <_ZN9TCPClient9availableEv+0xb0>)
   b9a50:	9300      	str	r3, [sp, #0]
   b9a52:	aa02      	add	r2, sp, #8
   b9a54:	462b      	mov	r3, r5
   b9a56:	2032      	movs	r0, #50	; 0x32
   b9a58:	f7fd fa00 	bl	b6e5c <log_message>
                    sock_close(d_->sock);
   b9a5c:	6963      	ldr	r3, [r4, #20]
   b9a5e:	6818      	ldr	r0, [r3, #0]
   b9a60:	f7fd f94c 	bl	b6cfc <sock_close>
   b9a64:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9a66:	f04f 32ff 	mov.w	r2, #4294967295
   b9a6a:	601a      	str	r2, [r3, #0]
   b9a6c:	e7d4      	b.n	b9a18 <_ZN9TCPClient9availableEv+0x54>
   b9a6e:	bf00      	nop
   b9a70:	000bd4a7 	.word	0x000bd4a7
   b9a74:	000bd4a0 	.word	0x000bd4a0

000b9a78 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9a78:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9a7a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9a7c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9a7e:	6818      	ldr	r0, [r3, #0]
   b9a80:	2800      	cmp	r0, #0
   b9a82:	db01      	blt.n	b9a88 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9a84:	f7fd f93a 	bl	b6cfc <sock_close>
   b9a88:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9a8a:	f04f 32ff 	mov.w	r2, #4294967295
   b9a8e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9a90:	6960      	ldr	r0, [r4, #20]
   b9a92:	2211      	movs	r2, #17
   b9a94:	2100      	movs	r1, #0
   b9a96:	308c      	adds	r0, #140	; 0x8c
   b9a98:	f000 fd72 	bl	ba580 <memset>
    flush_buffer();
   b9a9c:	4620      	mov	r0, r4
}
   b9a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9aa2:	f7ff bf0b 	b.w	b98bc <_ZN9TCPClient12flush_bufferEv>

000b9aa6 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9aa6:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9aa8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9aaa:	4604      	mov	r4, r0
          total(0) {
   b9aac:	6001      	str	r1, [r0, #0]
   b9aae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9ab2:	3088      	adds	r0, #136	; 0x88
   b9ab4:	f7ff fbd8 	bl	b9268 <_ZN9IPAddressC1Ev>
}
   b9ab8:	4620      	mov	r0, r4
   b9aba:	bd10      	pop	{r4, pc}

000b9abc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9abe:	2300      	movs	r3, #0
   b9ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9ac4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9ac8:	4a0e      	ldr	r2, [pc, #56]	; (b9b04 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9aca:	6103      	str	r3, [r0, #16]
   b9acc:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9ace:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9ad0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9ad2:	20ac      	movs	r0, #172	; 0xac
   b9ad4:	9101      	str	r1, [sp, #4]
   b9ad6:	f7fa ffec 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b9ada:	1e05      	subs	r5, r0, #0
   b9adc:	f105 060c 	add.w	r6, r5, #12
   b9ae0:	d008      	beq.n	b9af4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9ae2:	2301      	movs	r3, #1
   b9ae4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9ae8:	4b07      	ldr	r3, [pc, #28]	; (b9b08 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9aea:	9901      	ldr	r1, [sp, #4]
   b9aec:	602b      	str	r3, [r5, #0]
   b9aee:	4630      	mov	r0, r6
   b9af0:	f7ff ffd9 	bl	b9aa6 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9af4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9af6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9afa:	f7ff fedf 	bl	b98bc <_ZN9TCPClient12flush_bufferEv>
}
   b9afe:	b002      	add	sp, #8
   b9b00:	bd70      	pop	{r4, r5, r6, pc}
   b9b02:	bf00      	nop
   b9b04:	000bd4dc 	.word	0x000bd4dc
   b9b08:	000bd4c0 	.word	0x000bd4c0

000b9b0c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9b0c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9b0e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b9b12:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9b14:	f7ff ffd2 	bl	b9abc <_ZN9TCPClientC1Ei>
}
   b9b18:	4620      	mov	r0, r4
   b9b1a:	bd10      	pop	{r4, pc}

000b9b1c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9b1c:	b510      	push	{r4, lr}
   b9b1e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9b20:	6800      	ldr	r0, [r0, #0]
   b9b22:	2800      	cmp	r0, #0
   b9b24:	db01      	blt.n	b9b2a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9b26:	f7fd f8e9 	bl	b6cfc <sock_close>
    }
}
   b9b2a:	4620      	mov	r0, r4
   b9b2c:	bd10      	pop	{r4, pc}

000b9b2e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9b2e:	300c      	adds	r0, #12
   b9b30:	f7ff bff4 	b.w	b9b1c <_ZN9TCPClient4DataD1Ev>

000b9b34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9b34:	2200      	movs	r2, #0
   b9b36:	6840      	ldr	r0, [r0, #4]
   b9b38:	4611      	mov	r1, r2
   b9b3a:	f7fd b9f3 	b.w	b6f24 <network_ready>

000b9b3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9b3e:	2200      	movs	r2, #0
   b9b40:	6840      	ldr	r0, [r0, #4]
   b9b42:	4611      	mov	r1, r2
   b9b44:	f7fd ba0e 	b.w	b6f64 <network_listening>

000b9b48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9b48:	2200      	movs	r2, #0
   b9b4a:	6840      	ldr	r0, [r0, #4]
   b9b4c:	4611      	mov	r1, r2
   b9b4e:	f7fd ba19 	b.w	b6f84 <network_get_listen_timeout>

000b9b52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9b52:	6840      	ldr	r0, [r0, #4]
   b9b54:	2200      	movs	r2, #0
   b9b56:	f7fd ba0d 	b.w	b6f74 <network_set_listen_timeout>

000b9b5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9b5a:	6840      	ldr	r0, [r0, #4]
   b9b5c:	2200      	movs	r2, #0
   b9b5e:	f081 0101 	eor.w	r1, r1, #1
   b9b62:	f7fd b9f7 	b.w	b6f54 <network_listen>

000b9b66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9b66:	2300      	movs	r3, #0
   b9b68:	6840      	ldr	r0, [r0, #4]
   b9b6a:	461a      	mov	r2, r3
   b9b6c:	4619      	mov	r1, r3
   b9b6e:	f7fd b9e9 	b.w	b6f44 <network_off>

000b9b72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9b72:	2300      	movs	r3, #0
   b9b74:	6840      	ldr	r0, [r0, #4]
   b9b76:	461a      	mov	r2, r3
   b9b78:	4619      	mov	r1, r3
   b9b7a:	f7fd b9db 	b.w	b6f34 <network_on>

000b9b7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9b7e:	2200      	movs	r2, #0
   b9b80:	6840      	ldr	r0, [r0, #4]
   b9b82:	4611      	mov	r1, r2
   b9b84:	f7fd b9be 	b.w	b6f04 <network_connecting>

000b9b88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9b88:	6840      	ldr	r0, [r0, #4]
   b9b8a:	2200      	movs	r2, #0
   b9b8c:	2102      	movs	r1, #2
   b9b8e:	f7fd b9c1 	b.w	b6f14 <network_disconnect>

000b9b92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9b92:	2300      	movs	r3, #0
   b9b94:	6840      	ldr	r0, [r0, #4]
   b9b96:	461a      	mov	r2, r3
   b9b98:	f7fd b9ac 	b.w	b6ef4 <network_connect>

000b9b9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9b9c:	4b02      	ldr	r3, [pc, #8]	; (b9ba8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9b9e:	2204      	movs	r2, #4
   b9ba0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9ba2:	4a02      	ldr	r2, [pc, #8]	; (b9bac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9ba4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9ba6:	4770      	bx	lr
   b9ba8:	2003e718 	.word	0x2003e718
   b9bac:	000bd528 	.word	0x000bd528

000b9bb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9bb0:	2300      	movs	r3, #0
   b9bb2:	6840      	ldr	r0, [r0, #4]
   b9bb4:	461a      	mov	r2, r3
   b9bb6:	f7fd b99d 	b.w	b6ef4 <network_connect>

000b9bba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9bba:	6840      	ldr	r0, [r0, #4]
   b9bbc:	2200      	movs	r2, #0
   b9bbe:	2102      	movs	r1, #2
   b9bc0:	f7fd b9a8 	b.w	b6f14 <network_disconnect>

000b9bc4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9bc4:	2200      	movs	r2, #0
   b9bc6:	6840      	ldr	r0, [r0, #4]
   b9bc8:	4611      	mov	r1, r2
   b9bca:	f7fd b99b 	b.w	b6f04 <network_connecting>

000b9bce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9bce:	2200      	movs	r2, #0
   b9bd0:	6840      	ldr	r0, [r0, #4]
   b9bd2:	4611      	mov	r1, r2
   b9bd4:	f7fd b9a6 	b.w	b6f24 <network_ready>

000b9bd8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9bd8:	2300      	movs	r3, #0
   b9bda:	6840      	ldr	r0, [r0, #4]
   b9bdc:	461a      	mov	r2, r3
   b9bde:	4619      	mov	r1, r3
   b9be0:	f7fd b9a8 	b.w	b6f34 <network_on>

000b9be4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9be4:	2300      	movs	r3, #0
   b9be6:	6840      	ldr	r0, [r0, #4]
   b9be8:	461a      	mov	r2, r3
   b9bea:	4619      	mov	r1, r3
   b9bec:	f7fd b9aa 	b.w	b6f44 <network_off>

000b9bf0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9bf0:	6840      	ldr	r0, [r0, #4]
   b9bf2:	2100      	movs	r1, #0
   b9bf4:	f7fd b9ce 	b.w	b6f94 <network_is_on>

000b9bf8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9bf8:	6840      	ldr	r0, [r0, #4]
   b9bfa:	2100      	movs	r1, #0
   b9bfc:	f7fd b9d2 	b.w	b6fa4 <network_is_off>

000b9c00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9c00:	6840      	ldr	r0, [r0, #4]
   b9c02:	2200      	movs	r2, #0
   b9c04:	f081 0101 	eor.w	r1, r1, #1
   b9c08:	f7fd b9a4 	b.w	b6f54 <network_listen>

000b9c0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9c0c:	6840      	ldr	r0, [r0, #4]
   b9c0e:	2200      	movs	r2, #0
   b9c10:	f7fd b9b0 	b.w	b6f74 <network_set_listen_timeout>

000b9c14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9c14:	2200      	movs	r2, #0
   b9c16:	6840      	ldr	r0, [r0, #4]
   b9c18:	4611      	mov	r1, r2
   b9c1a:	f7fd b9b3 	b.w	b6f84 <network_get_listen_timeout>

000b9c1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9c1e:	2200      	movs	r2, #0
   b9c20:	6840      	ldr	r0, [r0, #4]
   b9c22:	4611      	mov	r1, r2
   b9c24:	f7fd b99e 	b.w	b6f64 <network_listening>

000b9c28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c2c:	b095      	sub	sp, #84	; 0x54
   b9c2e:	4614      	mov	r4, r2
   b9c30:	460d      	mov	r5, r1
   b9c32:	4607      	mov	r7, r0
    IPAddress addr;
   b9c34:	f7ff fb18 	bl	b9268 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9c38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9c3a:	221c      	movs	r2, #28
   b9c3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9c3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9c40:	f000 fc9e 	bl	ba580 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9c44:	2340      	movs	r3, #64	; 0x40
   b9c46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9c48:	4620      	mov	r0, r4
   b9c4a:	466b      	mov	r3, sp
   b9c4c:	aa0c      	add	r2, sp, #48	; 0x30
   b9c4e:	2100      	movs	r1, #0
   b9c50:	f7fc fed0 	bl	b69f4 <netdb_getaddrinfo>
    if (!r) {
   b9c54:	4604      	mov	r4, r0
   b9c56:	2800      	cmp	r0, #0
   b9c58:	d14b      	bne.n	b9cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c5a:	4602      	mov	r2, r0
   b9c5c:	2101      	movs	r1, #1
   b9c5e:	6868      	ldr	r0, [r5, #4]
   b9c60:	f7fd f960 	bl	b6f24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c68:	4622      	mov	r2, r4
   b9c6a:	6868      	ldr	r0, [r5, #4]
   b9c6c:	f7fd f95a 	bl	b6f24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c72:	4681      	mov	r9, r0
        bool ok = false;
   b9c74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c76:	2e00      	cmp	r6, #0
   b9c78:	d03b      	beq.n	b9cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9c7a:	2900      	cmp	r1, #0
   b9c7c:	d139      	bne.n	b9cf2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9c7e:	6873      	ldr	r3, [r6, #4]
   b9c80:	2b02      	cmp	r3, #2
   b9c82:	d003      	beq.n	b9c8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9c84:	2b0a      	cmp	r3, #10
   b9c86:	d011      	beq.n	b9cac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c88:	69f6      	ldr	r6, [r6, #28]
   b9c8a:	e7f4      	b.n	b9c76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9c8c:	f1b8 0f00 	cmp.w	r8, #0
   b9c90:	d0fa      	beq.n	b9c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9c92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9c94:	a806      	add	r0, sp, #24
   b9c96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9c98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9c9a:	f7ff fb29 	bl	b92f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9ca0:	1d3c      	adds	r4, r7, #4
   b9ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9ca4:	682b      	ldr	r3, [r5, #0]
   b9ca6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9ca8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9caa:	e7ed      	b.n	b9c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9cac:	f1b9 0f00 	cmp.w	r9, #0
   b9cb0:	d0ea      	beq.n	b9c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9cb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9cb4:	2210      	movs	r2, #16
   b9cb6:	a801      	add	r0, sp, #4
   b9cb8:	f000 fc62 	bl	ba580 <memset>
                    a.v = 6;
   b9cbc:	2306      	movs	r3, #6
   b9cbe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9cc2:	ad01      	add	r5, sp, #4
   b9cc4:	f104 0308 	add.w	r3, r4, #8
   b9cc8:	3418      	adds	r4, #24
   b9cca:	6818      	ldr	r0, [r3, #0]
   b9ccc:	6859      	ldr	r1, [r3, #4]
   b9cce:	462a      	mov	r2, r5
   b9cd0:	c203      	stmia	r2!, {r0, r1}
   b9cd2:	3308      	adds	r3, #8
   b9cd4:	42a3      	cmp	r3, r4
   b9cd6:	4615      	mov	r5, r2
   b9cd8:	d1f7      	bne.n	b9cca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9cda:	a901      	add	r1, sp, #4
   b9cdc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9cde:	ad07      	add	r5, sp, #28
   b9ce0:	f7ff fad0 	bl	b9284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9ce6:	1d3c      	adds	r4, r7, #4
   b9ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cea:	682b      	ldr	r3, [r5, #0]
   b9cec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9cee:	4649      	mov	r1, r9
   b9cf0:	e7ca      	b.n	b9c88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9cf2:	9800      	ldr	r0, [sp, #0]
   b9cf4:	f7fc fe76 	bl	b69e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9cf8:	4638      	mov	r0, r7
   b9cfa:	b015      	add	sp, #84	; 0x54
   b9cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9d00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9d00:	4b02      	ldr	r3, [pc, #8]	; (b9d0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9d02:	4a03      	ldr	r2, [pc, #12]	; (b9d10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9d04:	601a      	str	r2, [r3, #0]
   b9d06:	2200      	movs	r2, #0
   b9d08:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b9d0a:	4770      	bx	lr
   b9d0c:	2003e720 	.word	0x2003e720
   b9d10:	000bd564 	.word	0x000bd564

000b9d14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9d14:	f100 0310 	add.w	r3, r0, #16
   b9d18:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b9d1a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9d1e:	2901      	cmp	r1, #1
   b9d20:	4618      	mov	r0, r3
   b9d22:	d108      	bne.n	b9d36 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9d24:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9d28:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9d2c:	3a01      	subs	r2, #1
   b9d2e:	f103 0310 	add.w	r3, r3, #16
   b9d32:	d1f2      	bne.n	b9d1a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9d34:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b9d36:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9d38:	bf04      	itt	eq
   b9d3a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9d3e:	1852      	addeq	r2, r2, r1
   b9d40:	e7f4      	b.n	b9d2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9d42 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9d42:	b40e      	push	{r1, r2, r3}
   b9d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d46:	b088      	sub	sp, #32
   b9d48:	af00      	add	r7, sp, #0
   b9d4a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d4e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9d50:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d54:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9d56:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d58:	462b      	mov	r3, r5
   b9d5a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9d5c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d5e:	f7fd f951 	bl	b7004 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9d62:	280f      	cmp	r0, #15
   b9d64:	687a      	ldr	r2, [r7, #4]
   b9d66:	d91a      	bls.n	b9d9e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9d68:	f100 0308 	add.w	r3, r0, #8
   b9d6c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9d70:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9d72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d76:	1c41      	adds	r1, r0, #1
   b9d78:	462b      	mov	r3, r5
   b9d7a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9d7c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d7e:	f7fd f941 	bl	b7004 <vsnprintf>
        if (n > 0) {
   b9d82:	1e02      	subs	r2, r0, #0
   b9d84:	dd04      	ble.n	b9d90 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9d86:	6823      	ldr	r3, [r4, #0]
   b9d88:	4669      	mov	r1, sp
   b9d8a:	689b      	ldr	r3, [r3, #8]
   b9d8c:	4620      	mov	r0, r4
   b9d8e:	4798      	blx	r3
   b9d90:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9d92:	3720      	adds	r7, #32
   b9d94:	46bd      	mov	sp, r7
   b9d96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9d9a:	b003      	add	sp, #12
   b9d9c:	4770      	bx	lr
    } else if (n > 0) {
   b9d9e:	2800      	cmp	r0, #0
   b9da0:	d0f7      	beq.n	b9d92 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9da2:	6823      	ldr	r3, [r4, #0]
   b9da4:	4602      	mov	r2, r0
   b9da6:	689b      	ldr	r3, [r3, #8]
   b9da8:	f107 0110 	add.w	r1, r7, #16
   b9dac:	4620      	mov	r0, r4
   b9dae:	4798      	blx	r3
}
   b9db0:	e7ef      	b.n	b9d92 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9db2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9db2:	b538      	push	{r3, r4, r5, lr}
   b9db4:	680b      	ldr	r3, [r1, #0]
   b9db6:	6003      	str	r3, [r0, #0]
   b9db8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9dba:	6843      	ldr	r3, [r0, #4]
   b9dbc:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9dbe:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9dc0:	d008      	beq.n	b9dd4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9dc2:	b115      	cbz	r5, b9dca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9dc4:	686b      	ldr	r3, [r5, #4]
   b9dc6:	3301      	adds	r3, #1
   b9dc8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9dca:	6860      	ldr	r0, [r4, #4]
   b9dcc:	b108      	cbz	r0, b9dd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9dce:	f7fd fb85 	bl	b74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9dd2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9dd4:	bd38      	pop	{r3, r4, r5, pc}

000b9dd6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b9dd6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9dd8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9dda:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9dde:	689b      	ldr	r3, [r3, #8]
   b9de0:	2201      	movs	r2, #1
   b9de2:	f10d 0107 	add.w	r1, sp, #7
   b9de6:	4798      	blx	r3
}
   b9de8:	b003      	add	sp, #12
   b9dea:	f85d fb04 	ldr.w	pc, [sp], #4

000b9dee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9dee:	460b      	mov	r3, r1
   b9df0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b9df2:	2200      	movs	r2, #0
   b9df4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9df6:	e9c0 2200 	strd	r2, r2, [r0]
   b9dfa:	4604      	mov	r4, r0
        t_ = t;
   b9dfc:	6083      	str	r3, [r0, #8]
    if (t) {
   b9dfe:	b90b      	cbnz	r3, b9e04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9e00:	4620      	mov	r0, r4
   b9e02:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9e04:	f7ff ffd5 	bl	b9db2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9e08:	e7fa      	b.n	b9e00 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9e0a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9e0a:	6883      	ldr	r3, [r0, #8]
   b9e0c:	b1eb      	cbz	r3, b9e4a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b9e0e:	781a      	ldrb	r2, [r3, #0]
   b9e10:	2a03      	cmp	r2, #3
   b9e12:	d81a      	bhi.n	b9e4a <_ZNK5spark9JSONValue4typeEv+0x40>
   b9e14:	e8df f002 	tbb	[pc, r2]
   b9e18:	1b021704 	.word	0x1b021704
   b9e1c:	2005      	movs	r0, #5
   b9e1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9e20:	6802      	ldr	r2, [r0, #0]
   b9e22:	685b      	ldr	r3, [r3, #4]
   b9e24:	6852      	ldr	r2, [r2, #4]
   b9e26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9e28:	282d      	cmp	r0, #45	; 0x2d
   b9e2a:	d012      	beq.n	b9e52 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9e2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9e30:	2b09      	cmp	r3, #9
   b9e32:	d90e      	bls.n	b9e52 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9e34:	2874      	cmp	r0, #116	; 0x74
   b9e36:	d00e      	beq.n	b9e56 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9e38:	2866      	cmp	r0, #102	; 0x66
   b9e3a:	d00c      	beq.n	b9e56 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9e3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9e40:	4258      	negs	r0, r3
   b9e42:	4158      	adcs	r0, r3
   b9e44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b9e46:	2006      	movs	r0, #6
   b9e48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9e4a:	2000      	movs	r0, #0
   b9e4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9e4e:	2004      	movs	r0, #4
   b9e50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9e52:	2003      	movs	r0, #3
   b9e54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b9e56:	2002      	movs	r0, #2
}
   b9e58:	4770      	bx	lr

000b9e5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b9e5a:	b510      	push	{r4, lr}
   b9e5c:	4604      	mov	r4, r0
    switch (type()) {
   b9e5e:	f7ff ffd4 	bl	b9e0a <_ZNK5spark9JSONValue4typeEv>
   b9e62:	2802      	cmp	r0, #2
   b9e64:	d00e      	beq.n	b9e84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b9e66:	1ec3      	subs	r3, r0, #3
   b9e68:	b2db      	uxtb	r3, r3
   b9e6a:	2b01      	cmp	r3, #1
   b9e6c:	d814      	bhi.n	b9e98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9e6e:	6822      	ldr	r2, [r4, #0]
   b9e70:	68a3      	ldr	r3, [r4, #8]
   b9e72:	6850      	ldr	r0, [r2, #4]
   b9e74:	685b      	ldr	r3, [r3, #4]
}
   b9e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9e7a:	220a      	movs	r2, #10
   b9e7c:	2100      	movs	r1, #0
   b9e7e:	4418      	add	r0, r3
   b9e80:	f001 baba 	b.w	bb3f8 <strtol>
        const char* const s = d_->json + t_->start;
   b9e84:	6822      	ldr	r2, [r4, #0]
   b9e86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9e88:	6852      	ldr	r2, [r2, #4]
   b9e8a:	685b      	ldr	r3, [r3, #4]
   b9e8c:	5cd0      	ldrb	r0, [r2, r3]
   b9e8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9e92:	4258      	negs	r0, r3
   b9e94:	4158      	adcs	r0, r3
}
   b9e96:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9e98:	2000      	movs	r0, #0
   b9e9a:	e7fc      	b.n	b9e96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9e9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9e9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9e9e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9ea0:	e9c0 3300 	strd	r3, r3, [r0]
   b9ea4:	4604      	mov	r4, r0
        n_(0) {
   b9ea6:	480e      	ldr	r0, [pc, #56]	; (b9ee0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9ea8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9eac:	b1a9      	cbz	r1, b9eda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9eae:	780b      	ldrb	r3, [r1, #0]
   b9eb0:	2b03      	cmp	r3, #3
   b9eb2:	d006      	beq.n	b9ec2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9eb4:	b98b      	cbnz	r3, b9eda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9eb6:	6813      	ldr	r3, [r2, #0]
   b9eb8:	6858      	ldr	r0, [r3, #4]
   b9eba:	684b      	ldr	r3, [r1, #4]
   b9ebc:	5cc3      	ldrb	r3, [r0, r3]
   b9ebe:	2b6e      	cmp	r3, #110	; 0x6e
   b9ec0:	d007      	beq.n	b9ed2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9ec2:	6813      	ldr	r3, [r2, #0]
   b9ec4:	684d      	ldr	r5, [r1, #4]
   b9ec6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9ec8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9eca:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9ecc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9ece:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9ed0:	60e3      	str	r3, [r4, #12]
   b9ed2:	4611      	mov	r1, r2
   b9ed4:	4620      	mov	r0, r4
   b9ed6:	f7ff ff6c 	bl	b9db2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9eda:	4620      	mov	r0, r4
   b9edc:	bd38      	pop	{r3, r4, r5, pc}
   b9ede:	bf00      	nop
   b9ee0:	000bd35a 	.word	0x000bd35a

000b9ee4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9ee4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9ee6:	2500      	movs	r5, #0
   b9ee8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9eea:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b9eee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b9ef2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9ef6:	4604      	mov	r4, r0
   b9ef8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9efa:	b14b      	cbz	r3, b9f10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9efc:	781a      	ldrb	r2, [r3, #0]
   b9efe:	2a01      	cmp	r2, #1
   b9f00:	d106      	bne.n	b9f10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b9f02:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9f06:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9f08:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9f0a:	6143      	str	r3, [r0, #20]
   b9f0c:	f7ff ff51 	bl	b9db2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9f10:	4620      	mov	r0, r4
   b9f12:	bd38      	pop	{r3, r4, r5, pc}

000b9f14 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9f14:	b510      	push	{r4, lr}
    if (!n_) {
   b9f16:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9f18:	4604      	mov	r4, r0
    if (!n_) {
   b9f1a:	b163      	cbz	r3, b9f36 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9f1c:	6880      	ldr	r0, [r0, #8]
   b9f1e:	60e0      	str	r0, [r4, #12]
    --n_;
   b9f20:	3b01      	subs	r3, #1
    ++t_;
   b9f22:	3010      	adds	r0, #16
   b9f24:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9f26:	6120      	str	r0, [r4, #16]
    --n_;
   b9f28:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9f2a:	b113      	cbz	r3, b9f32 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9f2c:	f7ff fef2 	bl	b9d14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9f30:	60a0      	str	r0, [r4, #8]
    return true;
   b9f32:	2001      	movs	r0, #1
   b9f34:	e000      	b.n	b9f38 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9f36:	4618      	mov	r0, r3
}
   b9f38:	bd10      	pop	{r4, pc}

000b9f3a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9f3a:	b510      	push	{r4, lr}
    write('}');
   b9f3c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9f3e:	4604      	mov	r4, r0
    write('}');
   b9f40:	f7ff ff49 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9f44:	2301      	movs	r3, #1
   b9f46:	7123      	strb	r3, [r4, #4]
}
   b9f48:	4620      	mov	r0, r4
   b9f4a:	bd10      	pop	{r4, pc}

000b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9f4c:	b508      	push	{r3, lr}
    switch (state_) {
   b9f4e:	7903      	ldrb	r3, [r0, #4]
   b9f50:	2b01      	cmp	r3, #1
   b9f52:	d002      	beq.n	b9f5a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9f54:	2b02      	cmp	r3, #2
   b9f56:	d004      	beq.n	b9f62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9f58:	bd08      	pop	{r3, pc}
        write(',');
   b9f5a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9f5c:	f7ff ff3b 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
}
   b9f60:	e7fa      	b.n	b9f58 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9f62:	213a      	movs	r1, #58	; 0x3a
   b9f64:	e7fa      	b.n	b9f5c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b9f66 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b9f66:	b510      	push	{r4, lr}
   b9f68:	4604      	mov	r4, r0
    writeSeparator();
   b9f6a:	f7ff ffef 	bl	b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9f6e:	4620      	mov	r0, r4
   b9f70:	217b      	movs	r1, #123	; 0x7b
   b9f72:	f7ff ff30 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9f76:	2300      	movs	r3, #0
   b9f78:	7123      	strb	r3, [r4, #4]
}
   b9f7a:	4620      	mov	r0, r4
   b9f7c:	bd10      	pop	{r4, pc}
	...

000b9f80 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9f80:	b513      	push	{r0, r1, r4, lr}
   b9f82:	4604      	mov	r4, r0
   b9f84:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9f86:	f7ff ffe1 	bl	b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9f8a:	6823      	ldr	r3, [r4, #0]
   b9f8c:	9a01      	ldr	r2, [sp, #4]
   b9f8e:	68db      	ldr	r3, [r3, #12]
   b9f90:	4903      	ldr	r1, [pc, #12]	; (b9fa0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9f92:	4620      	mov	r0, r4
   b9f94:	4798      	blx	r3
    state_ = NEXT;
   b9f96:	2301      	movs	r3, #1
}
   b9f98:	4620      	mov	r0, r4
    state_ = NEXT;
   b9f9a:	7123      	strb	r3, [r4, #4]
}
   b9f9c:	b002      	add	sp, #8
   b9f9e:	bd10      	pop	{r4, pc}
   b9fa0:	000bd4b4 	.word	0x000bd4b4

000b9fa4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9fa4:	b513      	push	{r0, r1, r4, lr}
   b9fa6:	4604      	mov	r4, r0
   b9fa8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9faa:	f7ff ffcf 	bl	b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9fae:	6823      	ldr	r3, [r4, #0]
   b9fb0:	9a01      	ldr	r2, [sp, #4]
   b9fb2:	68db      	ldr	r3, [r3, #12]
   b9fb4:	4903      	ldr	r1, [pc, #12]	; (b9fc4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9fb6:	4620      	mov	r0, r4
   b9fb8:	4798      	blx	r3
    state_ = NEXT;
   b9fba:	2301      	movs	r3, #1
}
   b9fbc:	4620      	mov	r0, r4
    state_ = NEXT;
   b9fbe:	7123      	strb	r3, [r4, #4]
}
   b9fc0:	b002      	add	sp, #8
   b9fc2:	bd10      	pop	{r4, pc}
   b9fc4:	000bd598 	.word	0x000bd598

000b9fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9fcc:	460d      	mov	r5, r1
    write('"');
   b9fce:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9fd0:	4690      	mov	r8, r2
   b9fd2:	4604      	mov	r4, r0
    write('"');
   b9fd4:	f7ff feff 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9fd8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba080 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9fdc:	44a8      	add	r8, r5
    const char *s = str;
   b9fde:	462f      	mov	r7, r5
    while (s != end) {
   b9fe0:	4547      	cmp	r7, r8
   b9fe2:	46ba      	mov	sl, r7
   b9fe4:	d03d      	beq.n	ba062 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9fe6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9fea:	2e22      	cmp	r6, #34	; 0x22
   b9fec:	d006      	beq.n	b9ffc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9fee:	2e5c      	cmp	r6, #92	; 0x5c
   b9ff0:	d004      	beq.n	b9ffc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9ff2:	4630      	mov	r0, r6
   b9ff4:	f000 fa84 	bl	ba500 <isprint>
   b9ff8:	2800      	cmp	r0, #0
   b9ffa:	d1f1      	bne.n	b9fe0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9ffc:	6823      	ldr	r3, [r4, #0]
   b9ffe:	ebaa 0205 	sub.w	r2, sl, r5
   ba002:	689b      	ldr	r3, [r3, #8]
   ba004:	4629      	mov	r1, r5
   ba006:	4620      	mov	r0, r4
   ba008:	4798      	blx	r3
            write('\\');
   ba00a:	215c      	movs	r1, #92	; 0x5c
   ba00c:	4620      	mov	r0, r4
   ba00e:	f7ff fee2 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   ba012:	2e0d      	cmp	r6, #13
   ba014:	d80a      	bhi.n	ba02c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   ba016:	2e07      	cmp	r6, #7
   ba018:	d91c      	bls.n	ba054 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba01a:	f1a6 0308 	sub.w	r3, r6, #8
   ba01e:	2b05      	cmp	r3, #5
   ba020:	d818      	bhi.n	ba054 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   ba022:	e8df f003 	tbb	[pc, r3]
   ba026:	0f0d      	.short	0x0f0d
   ba028:	15131711 	.word	0x15131711
   ba02c:	2e22      	cmp	r6, #34	; 0x22
   ba02e:	d001      	beq.n	ba034 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   ba030:	2e5c      	cmp	r6, #92	; 0x5c
   ba032:	d10f      	bne.n	ba054 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   ba034:	4631      	mov	r1, r6
                write('b');
   ba036:	4620      	mov	r0, r4
   ba038:	f7ff fecd 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   ba03c:	463d      	mov	r5, r7
    while (s != end) {
   ba03e:	e7cf      	b.n	b9fe0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   ba040:	2162      	movs	r1, #98	; 0x62
   ba042:	e7f8      	b.n	ba036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   ba044:	2174      	movs	r1, #116	; 0x74
   ba046:	e7f6      	b.n	ba036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   ba048:	216e      	movs	r1, #110	; 0x6e
   ba04a:	e7f4      	b.n	ba036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   ba04c:	2166      	movs	r1, #102	; 0x66
   ba04e:	e7f2      	b.n	ba036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   ba050:	2172      	movs	r1, #114	; 0x72
   ba052:	e7f0      	b.n	ba036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   ba054:	6823      	ldr	r3, [r4, #0]
   ba056:	4632      	mov	r2, r6
   ba058:	68db      	ldr	r3, [r3, #12]
   ba05a:	4649      	mov	r1, r9
   ba05c:	4620      	mov	r0, r4
   ba05e:	4798      	blx	r3
                break;
   ba060:	e7ec      	b.n	ba03c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   ba062:	42bd      	cmp	r5, r7
   ba064:	d005      	beq.n	ba072 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   ba066:	6823      	ldr	r3, [r4, #0]
   ba068:	1b7a      	subs	r2, r7, r5
   ba06a:	689b      	ldr	r3, [r3, #8]
   ba06c:	4629      	mov	r1, r5
   ba06e:	4620      	mov	r0, r4
   ba070:	4798      	blx	r3
    }
    write('"');
   ba072:	2122      	movs	r1, #34	; 0x22
   ba074:	4620      	mov	r0, r4
   ba076:	f7ff feae 	bl	b9dd6 <_ZN5spark10JSONWriter5writeEc>
}
   ba07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba07e:	bf00      	nop
   ba080:	000bd59b 	.word	0x000bd59b

000ba084 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   ba084:	b513      	push	{r0, r1, r4, lr}
   ba086:	4604      	mov	r4, r0
   ba088:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba08c:	f7ff ff5e 	bl	b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   ba090:	4620      	mov	r0, r4
   ba092:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba096:	f7ff ff97 	bl	b9fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   ba09a:	2302      	movs	r3, #2
}
   ba09c:	4620      	mov	r0, r4
    state_ = VALUE;
   ba09e:	7123      	strb	r3, [r4, #4]
}
   ba0a0:	b002      	add	sp, #8
   ba0a2:	bd10      	pop	{r4, pc}

000ba0a4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   ba0a4:	b513      	push	{r0, r1, r4, lr}
   ba0a6:	4604      	mov	r4, r0
   ba0a8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   ba0ac:	f7ff ff4e 	bl	b9f4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	e9dd 2100 	ldrd	r2, r1, [sp]
   ba0b6:	f7ff ff87 	bl	b9fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   ba0ba:	2301      	movs	r3, #1
}
   ba0bc:	4620      	mov	r0, r4
    state_ = NEXT;
   ba0be:	7123      	strb	r3, [r4, #4]
}
   ba0c0:	b002      	add	sp, #8
   ba0c2:	bd10      	pop	{r4, pc}

000ba0c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba0c4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba0c6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba0c8:	d902      	bls.n	ba0d0 <pinAvailable+0xc>
    return false;
   ba0ca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba0cc:	b002      	add	sp, #8
   ba0ce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba0d0:	f1a0 030b 	sub.w	r3, r0, #11
   ba0d4:	2b02      	cmp	r3, #2
   ba0d6:	d81a      	bhi.n	ba10e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba0d8:	4c17      	ldr	r4, [pc, #92]	; (ba138 <pinAvailable+0x74>)
   ba0da:	7821      	ldrb	r1, [r4, #0]
   ba0dc:	f3bf 8f5b 	dmb	ish
   ba0e0:	f011 0101 	ands.w	r1, r1, #1
   ba0e4:	d10b      	bne.n	ba0fe <pinAvailable+0x3a>
   ba0e6:	4620      	mov	r0, r4
   ba0e8:	9101      	str	r1, [sp, #4]
   ba0ea:	f7fa fcf7 	bl	b4adc <__cxa_guard_acquire>
   ba0ee:	9901      	ldr	r1, [sp, #4]
   ba0f0:	b128      	cbz	r0, ba0fe <pinAvailable+0x3a>
   ba0f2:	4812      	ldr	r0, [pc, #72]	; (ba13c <pinAvailable+0x78>)
   ba0f4:	f7fc fffa 	bl	b70ec <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba0f8:	4620      	mov	r0, r4
   ba0fa:	f7fa fcf4 	bl	b4ae6 <__cxa_guard_release>
   ba0fe:	4b0f      	ldr	r3, [pc, #60]	; (ba13c <pinAvailable+0x78>)
   ba100:	7818      	ldrb	r0, [r3, #0]
   ba102:	f7fc fe3b 	bl	b6d7c <hal_spi_is_enabled>
   ba106:	2800      	cmp	r0, #0
   ba108:	d1df      	bne.n	ba0ca <pinAvailable+0x6>
  return true; // 'pin' is available
   ba10a:	2001      	movs	r0, #1
   ba10c:	e7de      	b.n	ba0cc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba10e:	2801      	cmp	r0, #1
   ba110:	d809      	bhi.n	ba126 <pinAvailable+0x62>
   ba112:	f000 f8ad 	bl	ba270 <_Z19__fetch_global_Wirev>
   ba116:	2100      	movs	r1, #0
   ba118:	7c00      	ldrb	r0, [r0, #16]
   ba11a:	f7fc fdd7 	bl	b6ccc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba11e:	f080 0001 	eor.w	r0, r0, #1
   ba122:	b2c0      	uxtb	r0, r0
   ba124:	e7d2      	b.n	ba0cc <pinAvailable+0x8>
   ba126:	3809      	subs	r0, #9
   ba128:	2801      	cmp	r0, #1
   ba12a:	d8ee      	bhi.n	ba10a <pinAvailable+0x46>
   ba12c:	f000 f860 	bl	ba1f0 <_Z22__fetch_global_Serial1v>
   ba130:	7c00      	ldrb	r0, [r0, #16]
   ba132:	f7fc fd63 	bl	b6bfc <hal_usart_is_enabled>
   ba136:	e7f2      	b.n	ba11e <pinAvailable+0x5a>
   ba138:	2003e67c 	.word	0x2003e67c
   ba13c:	2003e680 	.word	0x2003e680

000ba140 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba140:	2823      	cmp	r0, #35	; 0x23
{
   ba142:	b538      	push	{r3, r4, r5, lr}
   ba144:	4604      	mov	r4, r0
   ba146:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba148:	d80a      	bhi.n	ba160 <pinMode+0x20>
   ba14a:	29ff      	cmp	r1, #255	; 0xff
   ba14c:	d008      	beq.n	ba160 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba14e:	f7ff ffb9 	bl	ba0c4 <pinAvailable>
   ba152:	b128      	cbz	r0, ba160 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   ba154:	4629      	mov	r1, r5
   ba156:	4620      	mov	r0, r4
}
   ba158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   ba15c:	f7fc bc52 	b.w	b6a04 <hal_gpio_mode>
}
   ba160:	bd38      	pop	{r3, r4, r5, pc}

000ba162 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   ba162:	b538      	push	{r3, r4, r5, lr}
   ba164:	4604      	mov	r4, r0
   ba166:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   ba168:	f7fc fc54 	bl	b6a14 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba16c:	28ff      	cmp	r0, #255	; 0xff
   ba16e:	d010      	beq.n	ba192 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba170:	2806      	cmp	r0, #6
   ba172:	d804      	bhi.n	ba17e <digitalWrite+0x1c>
   ba174:	234d      	movs	r3, #77	; 0x4d
   ba176:	fa23 f000 	lsr.w	r0, r3, r0
   ba17a:	07c3      	lsls	r3, r0, #31
   ba17c:	d409      	bmi.n	ba192 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba17e:	4620      	mov	r0, r4
   ba180:	f7ff ffa0 	bl	ba0c4 <pinAvailable>
   ba184:	b128      	cbz	r0, ba192 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   ba186:	4629      	mov	r1, r5
   ba188:	4620      	mov	r0, r4
}
   ba18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   ba18e:	f7fc bc49 	b.w	b6a24 <hal_gpio_write>
}
   ba192:	bd38      	pop	{r3, r4, r5, pc}

000ba194 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   ba194:	b510      	push	{r4, lr}
   ba196:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   ba198:	f7fc fc3c 	bl	b6a14 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   ba19c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   ba19e:	b2db      	uxtb	r3, r3
   ba1a0:	2b01      	cmp	r3, #1
   ba1a2:	d908      	bls.n	ba1b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   ba1a4:	4620      	mov	r0, r4
   ba1a6:	f7ff ff8d 	bl	ba0c4 <pinAvailable>
   ba1aa:	b120      	cbz	r0, ba1b6 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   ba1ac:	4620      	mov	r0, r4
}
   ba1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   ba1b2:	f7fc bc3f 	b.w	b6a34 <hal_gpio_read>
}
   ba1b6:	2000      	movs	r0, #0
   ba1b8:	bd10      	pop	{r4, pc}

000ba1ba <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba1ba:	4770      	bx	lr

000ba1bc <_Z20acquireSerial1Bufferv>:
{
   ba1bc:	b538      	push	{r3, r4, r5, lr}
   ba1be:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba1c0:	2514      	movs	r5, #20
   ba1c2:	462a      	mov	r2, r5
   ba1c4:	2100      	movs	r1, #0
   ba1c6:	f000 f9db 	bl	ba580 <memset>
   ba1ca:	8025      	strh	r5, [r4, #0]
   ba1cc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba1ce:	4907      	ldr	r1, [pc, #28]	; (ba1ec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba1d0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba1d2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba1d4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba1d6:	f000 f871 	bl	ba2bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba1da:	4904      	ldr	r1, [pc, #16]	; (ba1ec <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba1dc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba1de:	4628      	mov	r0, r5
   ba1e0:	f000 f86c 	bl	ba2bc <_ZnajRKSt9nothrow_t>
    };
   ba1e4:	60e0      	str	r0, [r4, #12]
}
   ba1e6:	4620      	mov	r0, r4
   ba1e8:	bd38      	pop	{r3, r4, r5, pc}
   ba1ea:	bf00      	nop
   ba1ec:	000bd5a1 	.word	0x000bd5a1

000ba1f0 <_Z22__fetch_global_Serial1v>:
{
   ba1f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba1f2:	4d0e      	ldr	r5, [pc, #56]	; (ba22c <_Z22__fetch_global_Serial1v+0x3c>)
   ba1f4:	7829      	ldrb	r1, [r5, #0]
   ba1f6:	f3bf 8f5b 	dmb	ish
   ba1fa:	f011 0401 	ands.w	r4, r1, #1
{
   ba1fe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba200:	d111      	bne.n	ba226 <_Z22__fetch_global_Serial1v+0x36>
   ba202:	4628      	mov	r0, r5
   ba204:	f7fa fc6a 	bl	b4adc <__cxa_guard_acquire>
   ba208:	b168      	cbz	r0, ba226 <_Z22__fetch_global_Serial1v+0x36>
   ba20a:	a801      	add	r0, sp, #4
   ba20c:	f7ff ffd6 	bl	ba1bc <_Z20acquireSerial1Bufferv>
   ba210:	aa01      	add	r2, sp, #4
   ba212:	4621      	mov	r1, r4
   ba214:	4806      	ldr	r0, [pc, #24]	; (ba230 <_Z22__fetch_global_Serial1v+0x40>)
   ba216:	f7ff f941 	bl	b949c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba21a:	4628      	mov	r0, r5
   ba21c:	f7fa fc63 	bl	b4ae6 <__cxa_guard_release>
   ba220:	4804      	ldr	r0, [pc, #16]	; (ba234 <_Z22__fetch_global_Serial1v+0x44>)
   ba222:	f000 f963 	bl	ba4ec <atexit>
    return serial1;
}
   ba226:	4802      	ldr	r0, [pc, #8]	; (ba230 <_Z22__fetch_global_Serial1v+0x40>)
   ba228:	b007      	add	sp, #28
   ba22a:	bd30      	pop	{r4, r5, pc}
   ba22c:	2003e728 	.word	0x2003e728
   ba230:	2003e72c 	.word	0x2003e72c
   ba234:	000ba1bb 	.word	0x000ba1bb

000ba238 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba238:	4770      	bx	lr
	...

000ba23c <_Z17acquireWireBufferv>:
{
   ba23c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba23e:	4b0a      	ldr	r3, [pc, #40]	; (ba268 <_Z17acquireWireBufferv+0x2c>)
   ba240:	6003      	str	r3, [r0, #0]
   ba242:	2301      	movs	r3, #1
{
   ba244:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba246:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba248:	4908      	ldr	r1, [pc, #32]	; (ba26c <_Z17acquireWireBufferv+0x30>)
   ba24a:	2020      	movs	r0, #32
   ba24c:	f000 f836 	bl	ba2bc <_ZnajRKSt9nothrow_t>
	};
   ba250:	2520      	movs	r5, #32
   ba252:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba254:	4905      	ldr	r1, [pc, #20]	; (ba26c <_Z17acquireWireBufferv+0x30>)
	};
   ba256:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba258:	4628      	mov	r0, r5
   ba25a:	f000 f82f 	bl	ba2bc <_ZnajRKSt9nothrow_t>
	};
   ba25e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   ba262:	4620      	mov	r0, r4
   ba264:	bd38      	pop	{r3, r4, r5, pc}
   ba266:	bf00      	nop
   ba268:	00010018 	.word	0x00010018
   ba26c:	000bd5a1 	.word	0x000bd5a1

000ba270 <_Z19__fetch_global_Wirev>:
{
   ba270:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba272:	4d0e      	ldr	r5, [pc, #56]	; (ba2ac <_Z19__fetch_global_Wirev+0x3c>)
   ba274:	7829      	ldrb	r1, [r5, #0]
   ba276:	f3bf 8f5b 	dmb	ish
   ba27a:	f011 0401 	ands.w	r4, r1, #1
{
   ba27e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba280:	d111      	bne.n	ba2a6 <_Z19__fetch_global_Wirev+0x36>
   ba282:	4628      	mov	r0, r5
   ba284:	f7fa fc2a 	bl	b4adc <__cxa_guard_acquire>
   ba288:	b168      	cbz	r0, ba2a6 <_Z19__fetch_global_Wirev+0x36>
   ba28a:	4668      	mov	r0, sp
   ba28c:	f7ff ffd6 	bl	ba23c <_Z17acquireWireBufferv>
   ba290:	466a      	mov	r2, sp
   ba292:	4621      	mov	r1, r4
   ba294:	4806      	ldr	r0, [pc, #24]	; (ba2b0 <_Z19__fetch_global_Wirev+0x40>)
   ba296:	f7ff f94b 	bl	b9530 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba29a:	4628      	mov	r0, r5
   ba29c:	f7fa fc23 	bl	b4ae6 <__cxa_guard_release>
   ba2a0:	4804      	ldr	r0, [pc, #16]	; (ba2b4 <_Z19__fetch_global_Wirev+0x44>)
   ba2a2:	f000 f923 	bl	ba4ec <atexit>
	return wire;
}
   ba2a6:	4802      	ldr	r0, [pc, #8]	; (ba2b0 <_Z19__fetch_global_Wirev+0x40>)
   ba2a8:	b007      	add	sp, #28
   ba2aa:	bd30      	pop	{r4, r5, pc}
   ba2ac:	2003e744 	.word	0x2003e744
   ba2b0:	2003e748 	.word	0x2003e748
   ba2b4:	000ba239 	.word	0x000ba239

000ba2b8 <_ZnwjRKSt9nothrow_t>:
   ba2b8:	f7fa bbfb 	b.w	b4ab2 <_Znwj>

000ba2bc <_ZnajRKSt9nothrow_t>:
   ba2bc:	f7fa bbfb 	b.w	b4ab6 <_Znaj>

000ba2c0 <_ZSt25__throw_bad_function_callv>:
   ba2c0:	b508      	push	{r3, lr}
   ba2c2:	f7fc fea7 	bl	b7014 <abort>
	...

000ba2c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba2c8:	4901      	ldr	r1, [pc, #4]	; (ba2d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba2ca:	f000 b8f9 	b.w	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba2ce:	bf00      	nop
   ba2d0:	000bd5bc 	.word	0x000bd5bc

000ba2d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba2d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba2d6:	2400      	movs	r4, #0
   ba2d8:	2310      	movs	r3, #16
   ba2da:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba2de:	6803      	ldr	r3, [r0, #0]
   ba2e0:	4615      	mov	r5, r2
   ba2e2:	699e      	ldr	r6, [r3, #24]
   ba2e4:	6812      	ldr	r2, [r2, #0]
   ba2e6:	466b      	mov	r3, sp
   ba2e8:	e9cd 4400 	strd	r4, r4, [sp]
   ba2ec:	47b0      	blx	r6
   ba2ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba2f2:	f003 0306 	and.w	r3, r3, #6
   ba2f6:	2b06      	cmp	r3, #6
   ba2f8:	bf03      	ittte	eq
   ba2fa:	9b00      	ldreq	r3, [sp, #0]
   ba2fc:	602b      	streq	r3, [r5, #0]
   ba2fe:	2001      	moveq	r0, #1
   ba300:	4620      	movne	r0, r4
   ba302:	b004      	add	sp, #16
   ba304:	bd70      	pop	{r4, r5, r6, pc}

000ba306 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba306:	9800      	ldr	r0, [sp, #0]
   ba308:	4290      	cmp	r0, r2
   ba30a:	bf14      	ite	ne
   ba30c:	2001      	movne	r0, #1
   ba30e:	2006      	moveq	r0, #6
   ba310:	4770      	bx	lr
	...

000ba314 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba314:	b510      	push	{r4, lr}
   ba316:	4b03      	ldr	r3, [pc, #12]	; (ba324 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba318:	6003      	str	r3, [r0, #0]
   ba31a:	4604      	mov	r4, r0
   ba31c:	f000 f8cd 	bl	ba4ba <_ZNSt9type_infoD1Ev>
   ba320:	4620      	mov	r0, r4
   ba322:	bd10      	pop	{r4, pc}
   ba324:	000bd5fc 	.word	0x000bd5fc

000ba328 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba328:	b510      	push	{r4, lr}
   ba32a:	4604      	mov	r4, r0
   ba32c:	f7ff fff2 	bl	ba314 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba330:	4620      	mov	r0, r4
   ba332:	2108      	movs	r1, #8
   ba334:	f7fa fbc3 	bl	b4abe <_ZdlPvj>
   ba338:	4620      	mov	r0, r4
   ba33a:	bd10      	pop	{r4, pc}

000ba33c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba340:	461f      	mov	r7, r3
   ba342:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba346:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba34a:	4598      	cmp	r8, r3
   ba34c:	4606      	mov	r6, r0
   ba34e:	4615      	mov	r5, r2
   ba350:	d107      	bne.n	ba362 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba352:	9907      	ldr	r1, [sp, #28]
   ba354:	f000 f8b4 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba358:	b118      	cbz	r0, ba362 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba35a:	7165      	strb	r5, [r4, #5]
   ba35c:	2000      	movs	r0, #0
   ba35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba362:	4639      	mov	r1, r7
   ba364:	4630      	mov	r0, r6
   ba366:	f000 f8ab 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba36a:	2800      	cmp	r0, #0
   ba36c:	d0f6      	beq.n	ba35c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba36e:	2301      	movs	r3, #1
   ba370:	f8c4 8000 	str.w	r8, [r4]
   ba374:	7125      	strb	r5, [r4, #4]
   ba376:	71a3      	strb	r3, [r4, #6]
   ba378:	e7f0      	b.n	ba35c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba37a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba37a:	b538      	push	{r3, r4, r5, lr}
   ba37c:	4615      	mov	r5, r2
   ba37e:	461c      	mov	r4, r3
   ba380:	f000 f89e 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba384:	b120      	cbz	r0, ba390 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba386:	2308      	movs	r3, #8
   ba388:	60e3      	str	r3, [r4, #12]
   ba38a:	2306      	movs	r3, #6
   ba38c:	6025      	str	r5, [r4, #0]
   ba38e:	7123      	strb	r3, [r4, #4]
   ba390:	bd38      	pop	{r3, r4, r5, pc}

000ba392 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba392:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba394:	4605      	mov	r5, r0
   ba396:	460c      	mov	r4, r1
   ba398:	9201      	str	r2, [sp, #4]
   ba39a:	461e      	mov	r6, r3
   ba39c:	f000 f890 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba3a0:	b950      	cbnz	r0, ba3b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba3a2:	2e03      	cmp	r6, #3
   ba3a4:	d808      	bhi.n	ba3b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba3a6:	6823      	ldr	r3, [r4, #0]
   ba3a8:	9a01      	ldr	r2, [sp, #4]
   ba3aa:	695b      	ldr	r3, [r3, #20]
   ba3ac:	4629      	mov	r1, r5
   ba3ae:	4620      	mov	r0, r4
   ba3b0:	b002      	add	sp, #8
   ba3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba3b6:	4718      	bx	r3
   ba3b8:	b002      	add	sp, #8
   ba3ba:	bd70      	pop	{r4, r5, r6, pc}

000ba3bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba3bc:	b510      	push	{r4, lr}
   ba3be:	4b03      	ldr	r3, [pc, #12]	; (ba3cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba3c0:	6003      	str	r3, [r0, #0]
   ba3c2:	4604      	mov	r4, r0
   ba3c4:	f7ff ffa6 	bl	ba314 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba3c8:	4620      	mov	r0, r4
   ba3ca:	bd10      	pop	{r4, pc}
   ba3cc:	000bd65c 	.word	0x000bd65c

000ba3d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba3d0:	b510      	push	{r4, lr}
   ba3d2:	4604      	mov	r4, r0
   ba3d4:	f7ff fff2 	bl	ba3bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba3d8:	4620      	mov	r0, r4
   ba3da:	210c      	movs	r1, #12
   ba3dc:	f7fa fb6f 	bl	b4abe <_ZdlPvj>
   ba3e0:	4620      	mov	r0, r4
   ba3e2:	bd10      	pop	{r4, pc}

000ba3e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba3e6:	9f08      	ldr	r7, [sp, #32]
   ba3e8:	4297      	cmp	r7, r2
   ba3ea:	4605      	mov	r5, r0
   ba3ec:	460e      	mov	r6, r1
   ba3ee:	4614      	mov	r4, r2
   ba3f0:	d00a      	beq.n	ba408 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba3f2:	68a8      	ldr	r0, [r5, #8]
   ba3f4:	6802      	ldr	r2, [r0, #0]
   ba3f6:	9708      	str	r7, [sp, #32]
   ba3f8:	6a15      	ldr	r5, [r2, #32]
   ba3fa:	4631      	mov	r1, r6
   ba3fc:	4622      	mov	r2, r4
   ba3fe:	46ac      	mov	ip, r5
   ba400:	b003      	add	sp, #12
   ba402:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba406:	4760      	bx	ip
   ba408:	4619      	mov	r1, r3
   ba40a:	9301      	str	r3, [sp, #4]
   ba40c:	f000 f858 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba410:	9b01      	ldr	r3, [sp, #4]
   ba412:	2800      	cmp	r0, #0
   ba414:	d0ed      	beq.n	ba3f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba416:	2006      	movs	r0, #6
   ba418:	b003      	add	sp, #12
   ba41a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba41c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba41c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba420:	460d      	mov	r5, r1
   ba422:	4619      	mov	r1, r3
   ba424:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba428:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba42c:	4681      	mov	r9, r0
   ba42e:	4617      	mov	r7, r2
   ba430:	4698      	mov	r8, r3
   ba432:	f000 f845 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba436:	b190      	cbz	r0, ba45e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba438:	2d00      	cmp	r5, #0
   ba43a:	6034      	str	r4, [r6, #0]
   ba43c:	7137      	strb	r7, [r6, #4]
   ba43e:	db09      	blt.n	ba454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba440:	1961      	adds	r1, r4, r5
   ba442:	458a      	cmp	sl, r1
   ba444:	bf0c      	ite	eq
   ba446:	2106      	moveq	r1, #6
   ba448:	2101      	movne	r1, #1
   ba44a:	71b1      	strb	r1, [r6, #6]
   ba44c:	2000      	movs	r0, #0
   ba44e:	b001      	add	sp, #4
   ba450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba454:	3502      	adds	r5, #2
   ba456:	d1f9      	bne.n	ba44c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba458:	2301      	movs	r3, #1
   ba45a:	71b3      	strb	r3, [r6, #6]
   ba45c:	e7f6      	b.n	ba44c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba45e:	4554      	cmp	r4, sl
   ba460:	d106      	bne.n	ba470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba462:	4659      	mov	r1, fp
   ba464:	4648      	mov	r0, r9
   ba466:	f000 f82b 	bl	ba4c0 <_ZNKSt9type_infoeqERKS_>
   ba46a:	b108      	cbz	r0, ba470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba46c:	7177      	strb	r7, [r6, #5]
   ba46e:	e7ed      	b.n	ba44c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba470:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba474:	6803      	ldr	r3, [r0, #0]
   ba476:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba47a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba47e:	69dc      	ldr	r4, [r3, #28]
   ba480:	463a      	mov	r2, r7
   ba482:	4643      	mov	r3, r8
   ba484:	4629      	mov	r1, r5
   ba486:	46a4      	mov	ip, r4
   ba488:	b001      	add	sp, #4
   ba48a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba48e:	4760      	bx	ip

000ba490 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba494:	4607      	mov	r7, r0
   ba496:	460c      	mov	r4, r1
   ba498:	4615      	mov	r5, r2
   ba49a:	461e      	mov	r6, r3
   ba49c:	f7ff ff6d 	bl	ba37a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba4a0:	b948      	cbnz	r0, ba4b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba4a2:	68b8      	ldr	r0, [r7, #8]
   ba4a4:	6803      	ldr	r3, [r0, #0]
   ba4a6:	699f      	ldr	r7, [r3, #24]
   ba4a8:	462a      	mov	r2, r5
   ba4aa:	4633      	mov	r3, r6
   ba4ac:	4621      	mov	r1, r4
   ba4ae:	46bc      	mov	ip, r7
   ba4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba4b4:	4760      	bx	ip
   ba4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba4ba <_ZNSt9type_infoD1Ev>:
   ba4ba:	4770      	bx	lr

000ba4bc <_ZNKSt9type_info14__is_pointer_pEv>:
   ba4bc:	2000      	movs	r0, #0
   ba4be:	4770      	bx	lr

000ba4c0 <_ZNKSt9type_infoeqERKS_>:
   ba4c0:	4281      	cmp	r1, r0
   ba4c2:	b508      	push	{r3, lr}
   ba4c4:	d00e      	beq.n	ba4e4 <_ZNKSt9type_infoeqERKS_+0x24>
   ba4c6:	6840      	ldr	r0, [r0, #4]
   ba4c8:	7803      	ldrb	r3, [r0, #0]
   ba4ca:	2b2a      	cmp	r3, #42	; 0x2a
   ba4cc:	d00c      	beq.n	ba4e8 <_ZNKSt9type_infoeqERKS_+0x28>
   ba4ce:	6849      	ldr	r1, [r1, #4]
   ba4d0:	780b      	ldrb	r3, [r1, #0]
   ba4d2:	2b2a      	cmp	r3, #42	; 0x2a
   ba4d4:	bf08      	it	eq
   ba4d6:	3101      	addeq	r1, #1
   ba4d8:	f7fa fa86 	bl	b49e8 <strcmp>
   ba4dc:	fab0 f080 	clz	r0, r0
   ba4e0:	0940      	lsrs	r0, r0, #5
   ba4e2:	bd08      	pop	{r3, pc}
   ba4e4:	2001      	movs	r0, #1
   ba4e6:	e7fc      	b.n	ba4e2 <_ZNKSt9type_infoeqERKS_+0x22>
   ba4e8:	2000      	movs	r0, #0
   ba4ea:	e7fa      	b.n	ba4e2 <_ZNKSt9type_infoeqERKS_+0x22>

000ba4ec <atexit>:
   ba4ec:	2300      	movs	r3, #0
   ba4ee:	4601      	mov	r1, r0
   ba4f0:	461a      	mov	r2, r3
   ba4f2:	4618      	mov	r0, r3
   ba4f4:	f000 bf8a 	b.w	bb40c <__register_exitproc>

000ba4f8 <atof>:
   ba4f8:	2100      	movs	r1, #0
   ba4fa:	f000 beef 	b.w	bb2dc <strtod>
	...

000ba500 <isprint>:
   ba500:	4b02      	ldr	r3, [pc, #8]	; (ba50c <isprint+0xc>)
   ba502:	4418      	add	r0, r3
   ba504:	7840      	ldrb	r0, [r0, #1]
   ba506:	f000 0097 	and.w	r0, r0, #151	; 0x97
   ba50a:	4770      	bx	lr
   ba50c:	000bd788 	.word	0x000bd788

000ba510 <memcmp>:
   ba510:	b510      	push	{r4, lr}
   ba512:	3901      	subs	r1, #1
   ba514:	4402      	add	r2, r0
   ba516:	4290      	cmp	r0, r2
   ba518:	d101      	bne.n	ba51e <memcmp+0xe>
   ba51a:	2000      	movs	r0, #0
   ba51c:	e005      	b.n	ba52a <memcmp+0x1a>
   ba51e:	7803      	ldrb	r3, [r0, #0]
   ba520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba524:	42a3      	cmp	r3, r4
   ba526:	d001      	beq.n	ba52c <memcmp+0x1c>
   ba528:	1b18      	subs	r0, r3, r4
   ba52a:	bd10      	pop	{r4, pc}
   ba52c:	3001      	adds	r0, #1
   ba52e:	e7f2      	b.n	ba516 <memcmp+0x6>

000ba530 <memcpy>:
   ba530:	440a      	add	r2, r1
   ba532:	4291      	cmp	r1, r2
   ba534:	f100 33ff 	add.w	r3, r0, #4294967295
   ba538:	d100      	bne.n	ba53c <memcpy+0xc>
   ba53a:	4770      	bx	lr
   ba53c:	b510      	push	{r4, lr}
   ba53e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba542:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba546:	4291      	cmp	r1, r2
   ba548:	d1f9      	bne.n	ba53e <memcpy+0xe>
   ba54a:	bd10      	pop	{r4, pc}

000ba54c <memmove>:
   ba54c:	4288      	cmp	r0, r1
   ba54e:	b510      	push	{r4, lr}
   ba550:	eb01 0402 	add.w	r4, r1, r2
   ba554:	d902      	bls.n	ba55c <memmove+0x10>
   ba556:	4284      	cmp	r4, r0
   ba558:	4623      	mov	r3, r4
   ba55a:	d807      	bhi.n	ba56c <memmove+0x20>
   ba55c:	1e43      	subs	r3, r0, #1
   ba55e:	42a1      	cmp	r1, r4
   ba560:	d008      	beq.n	ba574 <memmove+0x28>
   ba562:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba566:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba56a:	e7f8      	b.n	ba55e <memmove+0x12>
   ba56c:	4402      	add	r2, r0
   ba56e:	4601      	mov	r1, r0
   ba570:	428a      	cmp	r2, r1
   ba572:	d100      	bne.n	ba576 <memmove+0x2a>
   ba574:	bd10      	pop	{r4, pc}
   ba576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba57e:	e7f7      	b.n	ba570 <memmove+0x24>

000ba580 <memset>:
   ba580:	4402      	add	r2, r0
   ba582:	4603      	mov	r3, r0
   ba584:	4293      	cmp	r3, r2
   ba586:	d100      	bne.n	ba58a <memset+0xa>
   ba588:	4770      	bx	lr
   ba58a:	f803 1b01 	strb.w	r1, [r3], #1
   ba58e:	e7f9      	b.n	ba584 <memset+0x4>

000ba590 <srand>:
   ba590:	b538      	push	{r3, r4, r5, lr}
   ba592:	4b10      	ldr	r3, [pc, #64]	; (ba5d4 <srand+0x44>)
   ba594:	681d      	ldr	r5, [r3, #0]
   ba596:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba598:	4604      	mov	r4, r0
   ba59a:	b9b3      	cbnz	r3, ba5ca <srand+0x3a>
   ba59c:	2018      	movs	r0, #24
   ba59e:	f7fc fd19 	bl	b6fd4 <malloc>
   ba5a2:	4602      	mov	r2, r0
   ba5a4:	63a8      	str	r0, [r5, #56]	; 0x38
   ba5a6:	b920      	cbnz	r0, ba5b2 <srand+0x22>
   ba5a8:	4b0b      	ldr	r3, [pc, #44]	; (ba5d8 <srand+0x48>)
   ba5aa:	480c      	ldr	r0, [pc, #48]	; (ba5dc <srand+0x4c>)
   ba5ac:	2142      	movs	r1, #66	; 0x42
   ba5ae:	f7fc fd49 	bl	b7044 <__assert_func>
   ba5b2:	490b      	ldr	r1, [pc, #44]	; (ba5e0 <srand+0x50>)
   ba5b4:	4b0b      	ldr	r3, [pc, #44]	; (ba5e4 <srand+0x54>)
   ba5b6:	e9c0 1300 	strd	r1, r3, [r0]
   ba5ba:	4b0b      	ldr	r3, [pc, #44]	; (ba5e8 <srand+0x58>)
   ba5bc:	6083      	str	r3, [r0, #8]
   ba5be:	230b      	movs	r3, #11
   ba5c0:	8183      	strh	r3, [r0, #12]
   ba5c2:	2100      	movs	r1, #0
   ba5c4:	2001      	movs	r0, #1
   ba5c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba5ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba5cc:	2200      	movs	r2, #0
   ba5ce:	611c      	str	r4, [r3, #16]
   ba5d0:	615a      	str	r2, [r3, #20]
   ba5d2:	bd38      	pop	{r3, r4, r5, pc}
   ba5d4:	2003e37c 	.word	0x2003e37c
   ba5d8:	000bd695 	.word	0x000bd695
   ba5dc:	000bd6ac 	.word	0x000bd6ac
   ba5e0:	abcd330e 	.word	0xabcd330e
   ba5e4:	e66d1234 	.word	0xe66d1234
   ba5e8:	0005deec 	.word	0x0005deec

000ba5ec <strchr>:
   ba5ec:	b2c9      	uxtb	r1, r1
   ba5ee:	4603      	mov	r3, r0
   ba5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba5f4:	b11a      	cbz	r2, ba5fe <strchr+0x12>
   ba5f6:	428a      	cmp	r2, r1
   ba5f8:	d1f9      	bne.n	ba5ee <strchr+0x2>
   ba5fa:	4618      	mov	r0, r3
   ba5fc:	4770      	bx	lr
   ba5fe:	2900      	cmp	r1, #0
   ba600:	bf18      	it	ne
   ba602:	2300      	movne	r3, #0
   ba604:	e7f9      	b.n	ba5fa <strchr+0xe>

000ba606 <strchrnul>:
   ba606:	b510      	push	{r4, lr}
   ba608:	4604      	mov	r4, r0
   ba60a:	f7ff ffef 	bl	ba5ec <strchr>
   ba60e:	b918      	cbnz	r0, ba618 <strchrnul+0x12>
   ba610:	4620      	mov	r0, r4
   ba612:	f7fa f9f3 	bl	b49fc <strlen>
   ba616:	4420      	add	r0, r4
   ba618:	bd10      	pop	{r4, pc}

000ba61a <strcpy>:
   ba61a:	4603      	mov	r3, r0
   ba61c:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba620:	f803 2b01 	strb.w	r2, [r3], #1
   ba624:	2a00      	cmp	r2, #0
   ba626:	d1f9      	bne.n	ba61c <strcpy+0x2>
   ba628:	4770      	bx	lr

000ba62a <strncmp>:
   ba62a:	b510      	push	{r4, lr}
   ba62c:	b17a      	cbz	r2, ba64e <strncmp+0x24>
   ba62e:	4603      	mov	r3, r0
   ba630:	3901      	subs	r1, #1
   ba632:	1884      	adds	r4, r0, r2
   ba634:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba638:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba63c:	4290      	cmp	r0, r2
   ba63e:	d101      	bne.n	ba644 <strncmp+0x1a>
   ba640:	42a3      	cmp	r3, r4
   ba642:	d101      	bne.n	ba648 <strncmp+0x1e>
   ba644:	1a80      	subs	r0, r0, r2
   ba646:	bd10      	pop	{r4, pc}
   ba648:	2800      	cmp	r0, #0
   ba64a:	d1f3      	bne.n	ba634 <strncmp+0xa>
   ba64c:	e7fa      	b.n	ba644 <strncmp+0x1a>
   ba64e:	4610      	mov	r0, r2
   ba650:	e7f9      	b.n	ba646 <strncmp+0x1c>

000ba652 <strnlen>:
   ba652:	b510      	push	{r4, lr}
   ba654:	4602      	mov	r2, r0
   ba656:	4401      	add	r1, r0
   ba658:	428a      	cmp	r2, r1
   ba65a:	4613      	mov	r3, r2
   ba65c:	d003      	beq.n	ba666 <strnlen+0x14>
   ba65e:	781c      	ldrb	r4, [r3, #0]
   ba660:	3201      	adds	r2, #1
   ba662:	2c00      	cmp	r4, #0
   ba664:	d1f8      	bne.n	ba658 <strnlen+0x6>
   ba666:	1a18      	subs	r0, r3, r0
   ba668:	bd10      	pop	{r4, pc}

000ba66a <strrchr>:
   ba66a:	b538      	push	{r3, r4, r5, lr}
   ba66c:	4603      	mov	r3, r0
   ba66e:	460c      	mov	r4, r1
   ba670:	b969      	cbnz	r1, ba68e <strrchr+0x24>
   ba672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba676:	f7ff bfb9 	b.w	ba5ec <strchr>
   ba67a:	1c43      	adds	r3, r0, #1
   ba67c:	4605      	mov	r5, r0
   ba67e:	4621      	mov	r1, r4
   ba680:	4618      	mov	r0, r3
   ba682:	f7ff ffb3 	bl	ba5ec <strchr>
   ba686:	2800      	cmp	r0, #0
   ba688:	d1f7      	bne.n	ba67a <strrchr+0x10>
   ba68a:	4628      	mov	r0, r5
   ba68c:	bd38      	pop	{r3, r4, r5, pc}
   ba68e:	2500      	movs	r5, #0
   ba690:	e7f5      	b.n	ba67e <strrchr+0x14>

000ba692 <sulp>:
   ba692:	b570      	push	{r4, r5, r6, lr}
   ba694:	4604      	mov	r4, r0
   ba696:	460d      	mov	r5, r1
   ba698:	ec45 4b10 	vmov	d0, r4, r5
   ba69c:	4616      	mov	r6, r2
   ba69e:	f001 fe0f 	bl	bc2c0 <__ulp>
   ba6a2:	ec51 0b10 	vmov	r0, r1, d0
   ba6a6:	b17e      	cbz	r6, ba6c8 <sulp+0x36>
   ba6a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba6ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba6b0:	2b00      	cmp	r3, #0
   ba6b2:	dd09      	ble.n	ba6c8 <sulp+0x36>
   ba6b4:	051b      	lsls	r3, r3, #20
   ba6b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba6ba:	2400      	movs	r4, #0
   ba6bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba6c0:	4622      	mov	r2, r4
   ba6c2:	462b      	mov	r3, r5
   ba6c4:	f7f9 fe68 	bl	b4398 <__aeabi_dmul>
   ba6c8:	bd70      	pop	{r4, r5, r6, pc}
   ba6ca:	0000      	movs	r0, r0
   ba6cc:	0000      	movs	r0, r0
	...

000ba6d0 <_strtod_l>:
   ba6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6d4:	ed2d 8b02 	vpush	{d8}
   ba6d8:	b09d      	sub	sp, #116	; 0x74
   ba6da:	461f      	mov	r7, r3
   ba6dc:	2300      	movs	r3, #0
   ba6de:	9318      	str	r3, [sp, #96]	; 0x60
   ba6e0:	4ba2      	ldr	r3, [pc, #648]	; (ba96c <_strtod_l+0x29c>)
   ba6e2:	9213      	str	r2, [sp, #76]	; 0x4c
   ba6e4:	681b      	ldr	r3, [r3, #0]
   ba6e6:	9305      	str	r3, [sp, #20]
   ba6e8:	4604      	mov	r4, r0
   ba6ea:	4618      	mov	r0, r3
   ba6ec:	4688      	mov	r8, r1
   ba6ee:	f7fa f985 	bl	b49fc <strlen>
   ba6f2:	f04f 0a00 	mov.w	sl, #0
   ba6f6:	4605      	mov	r5, r0
   ba6f8:	f04f 0b00 	mov.w	fp, #0
   ba6fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba702:	781a      	ldrb	r2, [r3, #0]
   ba704:	2a2b      	cmp	r2, #43	; 0x2b
   ba706:	d04e      	beq.n	ba7a6 <_strtod_l+0xd6>
   ba708:	d83b      	bhi.n	ba782 <_strtod_l+0xb2>
   ba70a:	2a0d      	cmp	r2, #13
   ba70c:	d834      	bhi.n	ba778 <_strtod_l+0xa8>
   ba70e:	2a08      	cmp	r2, #8
   ba710:	d834      	bhi.n	ba77c <_strtod_l+0xac>
   ba712:	2a00      	cmp	r2, #0
   ba714:	d03e      	beq.n	ba794 <_strtod_l+0xc4>
   ba716:	2300      	movs	r3, #0
   ba718:	930a      	str	r3, [sp, #40]	; 0x28
   ba71a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba71c:	7833      	ldrb	r3, [r6, #0]
   ba71e:	2b30      	cmp	r3, #48	; 0x30
   ba720:	f040 80b0 	bne.w	ba884 <_strtod_l+0x1b4>
   ba724:	7873      	ldrb	r3, [r6, #1]
   ba726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba72a:	2b58      	cmp	r3, #88	; 0x58
   ba72c:	d168      	bne.n	ba800 <_strtod_l+0x130>
   ba72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba730:	9301      	str	r3, [sp, #4]
   ba732:	ab18      	add	r3, sp, #96	; 0x60
   ba734:	9702      	str	r7, [sp, #8]
   ba736:	9300      	str	r3, [sp, #0]
   ba738:	4a8d      	ldr	r2, [pc, #564]	; (ba970 <_strtod_l+0x2a0>)
   ba73a:	ab19      	add	r3, sp, #100	; 0x64
   ba73c:	a917      	add	r1, sp, #92	; 0x5c
   ba73e:	4620      	mov	r0, r4
   ba740:	f000 ff2e 	bl	bb5a0 <__gethex>
   ba744:	f010 0707 	ands.w	r7, r0, #7
   ba748:	4605      	mov	r5, r0
   ba74a:	d005      	beq.n	ba758 <_strtod_l+0x88>
   ba74c:	2f06      	cmp	r7, #6
   ba74e:	d12c      	bne.n	ba7aa <_strtod_l+0xda>
   ba750:	3601      	adds	r6, #1
   ba752:	2300      	movs	r3, #0
   ba754:	9617      	str	r6, [sp, #92]	; 0x5c
   ba756:	930a      	str	r3, [sp, #40]	; 0x28
   ba758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba75a:	2b00      	cmp	r3, #0
   ba75c:	f040 8590 	bne.w	bb280 <_strtod_l+0xbb0>
   ba760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba762:	b1eb      	cbz	r3, ba7a0 <_strtod_l+0xd0>
   ba764:	4652      	mov	r2, sl
   ba766:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba76a:	ec43 2b10 	vmov	d0, r2, r3
   ba76e:	b01d      	add	sp, #116	; 0x74
   ba770:	ecbd 8b02 	vpop	{d8}
   ba774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba778:	2a20      	cmp	r2, #32
   ba77a:	d1cc      	bne.n	ba716 <_strtod_l+0x46>
   ba77c:	3301      	adds	r3, #1
   ba77e:	9317      	str	r3, [sp, #92]	; 0x5c
   ba780:	e7be      	b.n	ba700 <_strtod_l+0x30>
   ba782:	2a2d      	cmp	r2, #45	; 0x2d
   ba784:	d1c7      	bne.n	ba716 <_strtod_l+0x46>
   ba786:	2201      	movs	r2, #1
   ba788:	920a      	str	r2, [sp, #40]	; 0x28
   ba78a:	1c5a      	adds	r2, r3, #1
   ba78c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba78e:	785b      	ldrb	r3, [r3, #1]
   ba790:	2b00      	cmp	r3, #0
   ba792:	d1c2      	bne.n	ba71a <_strtod_l+0x4a>
   ba794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba796:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba79a:	2b00      	cmp	r3, #0
   ba79c:	f040 856e 	bne.w	bb27c <_strtod_l+0xbac>
   ba7a0:	4652      	mov	r2, sl
   ba7a2:	465b      	mov	r3, fp
   ba7a4:	e7e1      	b.n	ba76a <_strtod_l+0x9a>
   ba7a6:	2200      	movs	r2, #0
   ba7a8:	e7ee      	b.n	ba788 <_strtod_l+0xb8>
   ba7aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba7ac:	b13a      	cbz	r2, ba7be <_strtod_l+0xee>
   ba7ae:	2135      	movs	r1, #53	; 0x35
   ba7b0:	a81a      	add	r0, sp, #104	; 0x68
   ba7b2:	f001 fe90 	bl	bc4d6 <__copybits>
   ba7b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba7b8:	4620      	mov	r0, r4
   ba7ba:	f001 fa4f 	bl	bbc5c <_Bfree>
   ba7be:	3f01      	subs	r7, #1
   ba7c0:	2f04      	cmp	r7, #4
   ba7c2:	d806      	bhi.n	ba7d2 <_strtod_l+0x102>
   ba7c4:	e8df f007 	tbb	[pc, r7]
   ba7c8:	1714030a 	.word	0x1714030a
   ba7cc:	0a          	.byte	0x0a
   ba7cd:	00          	.byte	0x00
   ba7ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba7d2:	0728      	lsls	r0, r5, #28
   ba7d4:	d5c0      	bpl.n	ba758 <_strtod_l+0x88>
   ba7d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba7da:	e7bd      	b.n	ba758 <_strtod_l+0x88>
   ba7dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba7e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba7e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba7e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba7ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba7ee:	e7f0      	b.n	ba7d2 <_strtod_l+0x102>
   ba7f0:	f8df b180 	ldr.w	fp, [pc, #384]	; ba974 <_strtod_l+0x2a4>
   ba7f4:	e7ed      	b.n	ba7d2 <_strtod_l+0x102>
   ba7f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba7fa:	f04f 3aff 	mov.w	sl, #4294967295
   ba7fe:	e7e8      	b.n	ba7d2 <_strtod_l+0x102>
   ba800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba802:	1c5a      	adds	r2, r3, #1
   ba804:	9217      	str	r2, [sp, #92]	; 0x5c
   ba806:	785b      	ldrb	r3, [r3, #1]
   ba808:	2b30      	cmp	r3, #48	; 0x30
   ba80a:	d0f9      	beq.n	ba800 <_strtod_l+0x130>
   ba80c:	2b00      	cmp	r3, #0
   ba80e:	d0a3      	beq.n	ba758 <_strtod_l+0x88>
   ba810:	2301      	movs	r3, #1
   ba812:	f04f 0900 	mov.w	r9, #0
   ba816:	9304      	str	r3, [sp, #16]
   ba818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba81a:	9308      	str	r3, [sp, #32]
   ba81c:	f8cd 901c 	str.w	r9, [sp, #28]
   ba820:	464f      	mov	r7, r9
   ba822:	220a      	movs	r2, #10
   ba824:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba826:	7806      	ldrb	r6, [r0, #0]
   ba828:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba82c:	b2d9      	uxtb	r1, r3
   ba82e:	2909      	cmp	r1, #9
   ba830:	d92a      	bls.n	ba888 <_strtod_l+0x1b8>
   ba832:	9905      	ldr	r1, [sp, #20]
   ba834:	462a      	mov	r2, r5
   ba836:	f7ff fef8 	bl	ba62a <strncmp>
   ba83a:	b398      	cbz	r0, ba8a4 <_strtod_l+0x1d4>
   ba83c:	2000      	movs	r0, #0
   ba83e:	4632      	mov	r2, r6
   ba840:	463d      	mov	r5, r7
   ba842:	9005      	str	r0, [sp, #20]
   ba844:	4603      	mov	r3, r0
   ba846:	2a65      	cmp	r2, #101	; 0x65
   ba848:	d001      	beq.n	ba84e <_strtod_l+0x17e>
   ba84a:	2a45      	cmp	r2, #69	; 0x45
   ba84c:	d118      	bne.n	ba880 <_strtod_l+0x1b0>
   ba84e:	b91d      	cbnz	r5, ba858 <_strtod_l+0x188>
   ba850:	9a04      	ldr	r2, [sp, #16]
   ba852:	4302      	orrs	r2, r0
   ba854:	d09e      	beq.n	ba794 <_strtod_l+0xc4>
   ba856:	2500      	movs	r5, #0
   ba858:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba85c:	f108 0201 	add.w	r2, r8, #1
   ba860:	9217      	str	r2, [sp, #92]	; 0x5c
   ba862:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba866:	2a2b      	cmp	r2, #43	; 0x2b
   ba868:	d075      	beq.n	ba956 <_strtod_l+0x286>
   ba86a:	2a2d      	cmp	r2, #45	; 0x2d
   ba86c:	d07b      	beq.n	ba966 <_strtod_l+0x296>
   ba86e:	f04f 0c00 	mov.w	ip, #0
   ba872:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba876:	2909      	cmp	r1, #9
   ba878:	f240 8082 	bls.w	ba980 <_strtod_l+0x2b0>
   ba87c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba880:	2600      	movs	r6, #0
   ba882:	e09d      	b.n	ba9c0 <_strtod_l+0x2f0>
   ba884:	2300      	movs	r3, #0
   ba886:	e7c4      	b.n	ba812 <_strtod_l+0x142>
   ba888:	2f08      	cmp	r7, #8
   ba88a:	bfd8      	it	le
   ba88c:	9907      	ldrle	r1, [sp, #28]
   ba88e:	f100 0001 	add.w	r0, r0, #1
   ba892:	bfda      	itte	le
   ba894:	fb02 3301 	mlale	r3, r2, r1, r3
   ba898:	9307      	strle	r3, [sp, #28]
   ba89a:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba89e:	3701      	adds	r7, #1
   ba8a0:	9017      	str	r0, [sp, #92]	; 0x5c
   ba8a2:	e7bf      	b.n	ba824 <_strtod_l+0x154>
   ba8a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8a6:	195a      	adds	r2, r3, r5
   ba8a8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba8aa:	5d5a      	ldrb	r2, [r3, r5]
   ba8ac:	2f00      	cmp	r7, #0
   ba8ae:	d037      	beq.n	ba920 <_strtod_l+0x250>
   ba8b0:	9005      	str	r0, [sp, #20]
   ba8b2:	463d      	mov	r5, r7
   ba8b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba8b8:	2b09      	cmp	r3, #9
   ba8ba:	d912      	bls.n	ba8e2 <_strtod_l+0x212>
   ba8bc:	2301      	movs	r3, #1
   ba8be:	e7c2      	b.n	ba846 <_strtod_l+0x176>
   ba8c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8c2:	1c5a      	adds	r2, r3, #1
   ba8c4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba8c6:	785a      	ldrb	r2, [r3, #1]
   ba8c8:	3001      	adds	r0, #1
   ba8ca:	2a30      	cmp	r2, #48	; 0x30
   ba8cc:	d0f8      	beq.n	ba8c0 <_strtod_l+0x1f0>
   ba8ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba8d2:	2b08      	cmp	r3, #8
   ba8d4:	f200 84d9 	bhi.w	bb28a <_strtod_l+0xbba>
   ba8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba8da:	9005      	str	r0, [sp, #20]
   ba8dc:	2000      	movs	r0, #0
   ba8de:	9308      	str	r3, [sp, #32]
   ba8e0:	4605      	mov	r5, r0
   ba8e2:	3a30      	subs	r2, #48	; 0x30
   ba8e4:	f100 0301 	add.w	r3, r0, #1
   ba8e8:	d014      	beq.n	ba914 <_strtod_l+0x244>
   ba8ea:	9905      	ldr	r1, [sp, #20]
   ba8ec:	4419      	add	r1, r3
   ba8ee:	9105      	str	r1, [sp, #20]
   ba8f0:	462b      	mov	r3, r5
   ba8f2:	eb00 0e05 	add.w	lr, r0, r5
   ba8f6:	210a      	movs	r1, #10
   ba8f8:	4573      	cmp	r3, lr
   ba8fa:	d113      	bne.n	ba924 <_strtod_l+0x254>
   ba8fc:	182b      	adds	r3, r5, r0
   ba8fe:	2b08      	cmp	r3, #8
   ba900:	f105 0501 	add.w	r5, r5, #1
   ba904:	4405      	add	r5, r0
   ba906:	dc1c      	bgt.n	ba942 <_strtod_l+0x272>
   ba908:	9907      	ldr	r1, [sp, #28]
   ba90a:	230a      	movs	r3, #10
   ba90c:	fb03 2301 	mla	r3, r3, r1, r2
   ba910:	9307      	str	r3, [sp, #28]
   ba912:	2300      	movs	r3, #0
   ba914:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba916:	1c51      	adds	r1, r2, #1
   ba918:	9117      	str	r1, [sp, #92]	; 0x5c
   ba91a:	7852      	ldrb	r2, [r2, #1]
   ba91c:	4618      	mov	r0, r3
   ba91e:	e7c9      	b.n	ba8b4 <_strtod_l+0x1e4>
   ba920:	4638      	mov	r0, r7
   ba922:	e7d2      	b.n	ba8ca <_strtod_l+0x1fa>
   ba924:	2b08      	cmp	r3, #8
   ba926:	dc04      	bgt.n	ba932 <_strtod_l+0x262>
   ba928:	9e07      	ldr	r6, [sp, #28]
   ba92a:	434e      	muls	r6, r1
   ba92c:	9607      	str	r6, [sp, #28]
   ba92e:	3301      	adds	r3, #1
   ba930:	e7e2      	b.n	ba8f8 <_strtod_l+0x228>
   ba932:	f103 0c01 	add.w	ip, r3, #1
   ba936:	f1bc 0f10 	cmp.w	ip, #16
   ba93a:	bfd8      	it	le
   ba93c:	fb01 f909 	mulle.w	r9, r1, r9
   ba940:	e7f5      	b.n	ba92e <_strtod_l+0x25e>
   ba942:	2d10      	cmp	r5, #16
   ba944:	bfdc      	itt	le
   ba946:	230a      	movle	r3, #10
   ba948:	fb03 2909 	mlale	r9, r3, r9, r2
   ba94c:	e7e1      	b.n	ba912 <_strtod_l+0x242>
   ba94e:	2300      	movs	r3, #0
   ba950:	9305      	str	r3, [sp, #20]
   ba952:	2301      	movs	r3, #1
   ba954:	e77c      	b.n	ba850 <_strtod_l+0x180>
   ba956:	f04f 0c00 	mov.w	ip, #0
   ba95a:	f108 0202 	add.w	r2, r8, #2
   ba95e:	9217      	str	r2, [sp, #92]	; 0x5c
   ba960:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba964:	e785      	b.n	ba872 <_strtod_l+0x1a2>
   ba966:	f04f 0c01 	mov.w	ip, #1
   ba96a:	e7f6      	b.n	ba95a <_strtod_l+0x28a>
   ba96c:	000bd920 	.word	0x000bd920
   ba970:	000bd738 	.word	0x000bd738
   ba974:	7ff00000 	.word	0x7ff00000
   ba978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba97a:	1c51      	adds	r1, r2, #1
   ba97c:	9117      	str	r1, [sp, #92]	; 0x5c
   ba97e:	7852      	ldrb	r2, [r2, #1]
   ba980:	2a30      	cmp	r2, #48	; 0x30
   ba982:	d0f9      	beq.n	ba978 <_strtod_l+0x2a8>
   ba984:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba988:	2908      	cmp	r1, #8
   ba98a:	f63f af79 	bhi.w	ba880 <_strtod_l+0x1b0>
   ba98e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba994:	9206      	str	r2, [sp, #24]
   ba996:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba998:	1c51      	adds	r1, r2, #1
   ba99a:	9117      	str	r1, [sp, #92]	; 0x5c
   ba99c:	7852      	ldrb	r2, [r2, #1]
   ba99e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba9a2:	2e09      	cmp	r6, #9
   ba9a4:	d937      	bls.n	baa16 <_strtod_l+0x346>
   ba9a6:	9e06      	ldr	r6, [sp, #24]
   ba9a8:	1b89      	subs	r1, r1, r6
   ba9aa:	2908      	cmp	r1, #8
   ba9ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba9b0:	dc02      	bgt.n	ba9b8 <_strtod_l+0x2e8>
   ba9b2:	4576      	cmp	r6, lr
   ba9b4:	bfa8      	it	ge
   ba9b6:	4676      	movge	r6, lr
   ba9b8:	f1bc 0f00 	cmp.w	ip, #0
   ba9bc:	d000      	beq.n	ba9c0 <_strtod_l+0x2f0>
   ba9be:	4276      	negs	r6, r6
   ba9c0:	2d00      	cmp	r5, #0
   ba9c2:	d14d      	bne.n	baa60 <_strtod_l+0x390>
   ba9c4:	9904      	ldr	r1, [sp, #16]
   ba9c6:	4301      	orrs	r1, r0
   ba9c8:	f47f aec6 	bne.w	ba758 <_strtod_l+0x88>
   ba9cc:	2b00      	cmp	r3, #0
   ba9ce:	f47f aee1 	bne.w	ba794 <_strtod_l+0xc4>
   ba9d2:	2a69      	cmp	r2, #105	; 0x69
   ba9d4:	d027      	beq.n	baa26 <_strtod_l+0x356>
   ba9d6:	dc24      	bgt.n	baa22 <_strtod_l+0x352>
   ba9d8:	2a49      	cmp	r2, #73	; 0x49
   ba9da:	d024      	beq.n	baa26 <_strtod_l+0x356>
   ba9dc:	2a4e      	cmp	r2, #78	; 0x4e
   ba9de:	f47f aed9 	bne.w	ba794 <_strtod_l+0xc4>
   ba9e2:	499f      	ldr	r1, [pc, #636]	; (bac60 <_strtod_l+0x590>)
   ba9e4:	a817      	add	r0, sp, #92	; 0x5c
   ba9e6:	f001 f833 	bl	bba50 <__match>
   ba9ea:	2800      	cmp	r0, #0
   ba9ec:	f43f aed2 	beq.w	ba794 <_strtod_l+0xc4>
   ba9f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba9f2:	781b      	ldrb	r3, [r3, #0]
   ba9f4:	2b28      	cmp	r3, #40	; 0x28
   ba9f6:	d12d      	bne.n	baa54 <_strtod_l+0x384>
   ba9f8:	499a      	ldr	r1, [pc, #616]	; (bac64 <_strtod_l+0x594>)
   ba9fa:	aa1a      	add	r2, sp, #104	; 0x68
   ba9fc:	a817      	add	r0, sp, #92	; 0x5c
   ba9fe:	f001 f83b 	bl	bba78 <__hexnan>
   baa02:	2805      	cmp	r0, #5
   baa04:	d126      	bne.n	baa54 <_strtod_l+0x384>
   baa06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   baa08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   baa0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   baa10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   baa14:	e6a0      	b.n	ba758 <_strtod_l+0x88>
   baa16:	210a      	movs	r1, #10
   baa18:	fb01 2e0e 	mla	lr, r1, lr, r2
   baa1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   baa20:	e7b9      	b.n	ba996 <_strtod_l+0x2c6>
   baa22:	2a6e      	cmp	r2, #110	; 0x6e
   baa24:	e7db      	b.n	ba9de <_strtod_l+0x30e>
   baa26:	4990      	ldr	r1, [pc, #576]	; (bac68 <_strtod_l+0x598>)
   baa28:	a817      	add	r0, sp, #92	; 0x5c
   baa2a:	f001 f811 	bl	bba50 <__match>
   baa2e:	2800      	cmp	r0, #0
   baa30:	f43f aeb0 	beq.w	ba794 <_strtod_l+0xc4>
   baa34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baa36:	498d      	ldr	r1, [pc, #564]	; (bac6c <_strtod_l+0x59c>)
   baa38:	3b01      	subs	r3, #1
   baa3a:	a817      	add	r0, sp, #92	; 0x5c
   baa3c:	9317      	str	r3, [sp, #92]	; 0x5c
   baa3e:	f001 f807 	bl	bba50 <__match>
   baa42:	b910      	cbnz	r0, baa4a <_strtod_l+0x37a>
   baa44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baa46:	3301      	adds	r3, #1
   baa48:	9317      	str	r3, [sp, #92]	; 0x5c
   baa4a:	f8df b230 	ldr.w	fp, [pc, #560]	; bac7c <_strtod_l+0x5ac>
   baa4e:	f04f 0a00 	mov.w	sl, #0
   baa52:	e681      	b.n	ba758 <_strtod_l+0x88>
   baa54:	4886      	ldr	r0, [pc, #536]	; (bac70 <_strtod_l+0x5a0>)
   baa56:	f001 fd93 	bl	bc580 <nan>
   baa5a:	ec5b ab10 	vmov	sl, fp, d0
   baa5e:	e67b      	b.n	ba758 <_strtod_l+0x88>
   baa60:	9b05      	ldr	r3, [sp, #20]
   baa62:	9807      	ldr	r0, [sp, #28]
   baa64:	1af3      	subs	r3, r6, r3
   baa66:	2f00      	cmp	r7, #0
   baa68:	bf08      	it	eq
   baa6a:	462f      	moveq	r7, r5
   baa6c:	2d10      	cmp	r5, #16
   baa6e:	9306      	str	r3, [sp, #24]
   baa70:	46a8      	mov	r8, r5
   baa72:	bfa8      	it	ge
   baa74:	f04f 0810 	movge.w	r8, #16
   baa78:	f7f9 fc14 	bl	b42a4 <__aeabi_ui2d>
   baa7c:	2d09      	cmp	r5, #9
   baa7e:	4682      	mov	sl, r0
   baa80:	468b      	mov	fp, r1
   baa82:	dd13      	ble.n	baaac <_strtod_l+0x3dc>
   baa84:	4b7b      	ldr	r3, [pc, #492]	; (bac74 <_strtod_l+0x5a4>)
   baa86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   baa8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   baa8e:	f7f9 fc83 	bl	b4398 <__aeabi_dmul>
   baa92:	4682      	mov	sl, r0
   baa94:	4648      	mov	r0, r9
   baa96:	468b      	mov	fp, r1
   baa98:	f7f9 fc04 	bl	b42a4 <__aeabi_ui2d>
   baa9c:	4602      	mov	r2, r0
   baa9e:	460b      	mov	r3, r1
   baaa0:	4650      	mov	r0, sl
   baaa2:	4659      	mov	r1, fp
   baaa4:	f7f9 fac2 	bl	b402c <__adddf3>
   baaa8:	4682      	mov	sl, r0
   baaaa:	468b      	mov	fp, r1
   baaac:	2d0f      	cmp	r5, #15
   baaae:	dc38      	bgt.n	bab22 <_strtod_l+0x452>
   baab0:	9b06      	ldr	r3, [sp, #24]
   baab2:	2b00      	cmp	r3, #0
   baab4:	f43f ae50 	beq.w	ba758 <_strtod_l+0x88>
   baab8:	dd24      	ble.n	bab04 <_strtod_l+0x434>
   baaba:	2b16      	cmp	r3, #22
   baabc:	dc0b      	bgt.n	baad6 <_strtod_l+0x406>
   baabe:	496d      	ldr	r1, [pc, #436]	; (bac74 <_strtod_l+0x5a4>)
   baac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   baac4:	e9d1 0100 	ldrd	r0, r1, [r1]
   baac8:	4652      	mov	r2, sl
   baaca:	465b      	mov	r3, fp
   baacc:	f7f9 fc64 	bl	b4398 <__aeabi_dmul>
   baad0:	4682      	mov	sl, r0
   baad2:	468b      	mov	fp, r1
   baad4:	e640      	b.n	ba758 <_strtod_l+0x88>
   baad6:	9a06      	ldr	r2, [sp, #24]
   baad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   baadc:	4293      	cmp	r3, r2
   baade:	db20      	blt.n	bab22 <_strtod_l+0x452>
   baae0:	4c64      	ldr	r4, [pc, #400]	; (bac74 <_strtod_l+0x5a4>)
   baae2:	f1c5 050f 	rsb	r5, r5, #15
   baae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   baaea:	4652      	mov	r2, sl
   baaec:	465b      	mov	r3, fp
   baaee:	e9d1 0100 	ldrd	r0, r1, [r1]
   baaf2:	f7f9 fc51 	bl	b4398 <__aeabi_dmul>
   baaf6:	9b06      	ldr	r3, [sp, #24]
   baaf8:	1b5d      	subs	r5, r3, r5
   baafa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   baafe:	e9d4 2300 	ldrd	r2, r3, [r4]
   bab02:	e7e3      	b.n	baacc <_strtod_l+0x3fc>
   bab04:	9b06      	ldr	r3, [sp, #24]
   bab06:	3316      	adds	r3, #22
   bab08:	db0b      	blt.n	bab22 <_strtod_l+0x452>
   bab0a:	9b05      	ldr	r3, [sp, #20]
   bab0c:	1b9e      	subs	r6, r3, r6
   bab0e:	4b59      	ldr	r3, [pc, #356]	; (bac74 <_strtod_l+0x5a4>)
   bab10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bab14:	e9d6 2300 	ldrd	r2, r3, [r6]
   bab18:	4650      	mov	r0, sl
   bab1a:	4659      	mov	r1, fp
   bab1c:	f7f9 fd66 	bl	b45ec <__aeabi_ddiv>
   bab20:	e7d6      	b.n	baad0 <_strtod_l+0x400>
   bab22:	9b06      	ldr	r3, [sp, #24]
   bab24:	eba5 0808 	sub.w	r8, r5, r8
   bab28:	4498      	add	r8, r3
   bab2a:	f1b8 0f00 	cmp.w	r8, #0
   bab2e:	dd74      	ble.n	bac1a <_strtod_l+0x54a>
   bab30:	f018 030f 	ands.w	r3, r8, #15
   bab34:	d00a      	beq.n	bab4c <_strtod_l+0x47c>
   bab36:	494f      	ldr	r1, [pc, #316]	; (bac74 <_strtod_l+0x5a4>)
   bab38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bab3c:	4652      	mov	r2, sl
   bab3e:	465b      	mov	r3, fp
   bab40:	e9d1 0100 	ldrd	r0, r1, [r1]
   bab44:	f7f9 fc28 	bl	b4398 <__aeabi_dmul>
   bab48:	4682      	mov	sl, r0
   bab4a:	468b      	mov	fp, r1
   bab4c:	f038 080f 	bics.w	r8, r8, #15
   bab50:	d04f      	beq.n	babf2 <_strtod_l+0x522>
   bab52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bab56:	dd22      	ble.n	bab9e <_strtod_l+0x4ce>
   bab58:	2500      	movs	r5, #0
   bab5a:	462e      	mov	r6, r5
   bab5c:	9507      	str	r5, [sp, #28]
   bab5e:	9505      	str	r5, [sp, #20]
   bab60:	2322      	movs	r3, #34	; 0x22
   bab62:	f8df b118 	ldr.w	fp, [pc, #280]	; bac7c <_strtod_l+0x5ac>
   bab66:	6023      	str	r3, [r4, #0]
   bab68:	f04f 0a00 	mov.w	sl, #0
   bab6c:	9b07      	ldr	r3, [sp, #28]
   bab6e:	2b00      	cmp	r3, #0
   bab70:	f43f adf2 	beq.w	ba758 <_strtod_l+0x88>
   bab74:	9918      	ldr	r1, [sp, #96]	; 0x60
   bab76:	4620      	mov	r0, r4
   bab78:	f001 f870 	bl	bbc5c <_Bfree>
   bab7c:	9905      	ldr	r1, [sp, #20]
   bab7e:	4620      	mov	r0, r4
   bab80:	f001 f86c 	bl	bbc5c <_Bfree>
   bab84:	4631      	mov	r1, r6
   bab86:	4620      	mov	r0, r4
   bab88:	f001 f868 	bl	bbc5c <_Bfree>
   bab8c:	9907      	ldr	r1, [sp, #28]
   bab8e:	4620      	mov	r0, r4
   bab90:	f001 f864 	bl	bbc5c <_Bfree>
   bab94:	4629      	mov	r1, r5
   bab96:	4620      	mov	r0, r4
   bab98:	f001 f860 	bl	bbc5c <_Bfree>
   bab9c:	e5dc      	b.n	ba758 <_strtod_l+0x88>
   bab9e:	4b36      	ldr	r3, [pc, #216]	; (bac78 <_strtod_l+0x5a8>)
   baba0:	9304      	str	r3, [sp, #16]
   baba2:	2300      	movs	r3, #0
   baba4:	ea4f 1828 	mov.w	r8, r8, asr #4
   baba8:	4650      	mov	r0, sl
   babaa:	4659      	mov	r1, fp
   babac:	4699      	mov	r9, r3
   babae:	f1b8 0f01 	cmp.w	r8, #1
   babb2:	dc21      	bgt.n	babf8 <_strtod_l+0x528>
   babb4:	b10b      	cbz	r3, babba <_strtod_l+0x4ea>
   babb6:	4682      	mov	sl, r0
   babb8:	468b      	mov	fp, r1
   babba:	4b2f      	ldr	r3, [pc, #188]	; (bac78 <_strtod_l+0x5a8>)
   babbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   babc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   babc4:	4652      	mov	r2, sl
   babc6:	465b      	mov	r3, fp
   babc8:	e9d9 0100 	ldrd	r0, r1, [r9]
   babcc:	f7f9 fbe4 	bl	b4398 <__aeabi_dmul>
   babd0:	4b2a      	ldr	r3, [pc, #168]	; (bac7c <_strtod_l+0x5ac>)
   babd2:	460a      	mov	r2, r1
   babd4:	400b      	ands	r3, r1
   babd6:	492a      	ldr	r1, [pc, #168]	; (bac80 <_strtod_l+0x5b0>)
   babd8:	428b      	cmp	r3, r1
   babda:	4682      	mov	sl, r0
   babdc:	d8bc      	bhi.n	bab58 <_strtod_l+0x488>
   babde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   babe2:	428b      	cmp	r3, r1
   babe4:	bf86      	itte	hi
   babe6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bac84 <_strtod_l+0x5b4>
   babea:	f04f 3aff 	movhi.w	sl, #4294967295
   babee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   babf2:	2300      	movs	r3, #0
   babf4:	9304      	str	r3, [sp, #16]
   babf6:	e084      	b.n	bad02 <_strtod_l+0x632>
   babf8:	f018 0f01 	tst.w	r8, #1
   babfc:	d005      	beq.n	bac0a <_strtod_l+0x53a>
   babfe:	9b04      	ldr	r3, [sp, #16]
   bac00:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac04:	f7f9 fbc8 	bl	b4398 <__aeabi_dmul>
   bac08:	2301      	movs	r3, #1
   bac0a:	9a04      	ldr	r2, [sp, #16]
   bac0c:	3208      	adds	r2, #8
   bac0e:	f109 0901 	add.w	r9, r9, #1
   bac12:	ea4f 0868 	mov.w	r8, r8, asr #1
   bac16:	9204      	str	r2, [sp, #16]
   bac18:	e7c9      	b.n	babae <_strtod_l+0x4de>
   bac1a:	d0ea      	beq.n	babf2 <_strtod_l+0x522>
   bac1c:	f1c8 0800 	rsb	r8, r8, #0
   bac20:	f018 020f 	ands.w	r2, r8, #15
   bac24:	d00a      	beq.n	bac3c <_strtod_l+0x56c>
   bac26:	4b13      	ldr	r3, [pc, #76]	; (bac74 <_strtod_l+0x5a4>)
   bac28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bac2c:	4650      	mov	r0, sl
   bac2e:	4659      	mov	r1, fp
   bac30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac34:	f7f9 fcda 	bl	b45ec <__aeabi_ddiv>
   bac38:	4682      	mov	sl, r0
   bac3a:	468b      	mov	fp, r1
   bac3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bac40:	d0d7      	beq.n	babf2 <_strtod_l+0x522>
   bac42:	f1b8 0f1f 	cmp.w	r8, #31
   bac46:	dd1f      	ble.n	bac88 <_strtod_l+0x5b8>
   bac48:	2500      	movs	r5, #0
   bac4a:	462e      	mov	r6, r5
   bac4c:	9507      	str	r5, [sp, #28]
   bac4e:	9505      	str	r5, [sp, #20]
   bac50:	2322      	movs	r3, #34	; 0x22
   bac52:	f04f 0a00 	mov.w	sl, #0
   bac56:	f04f 0b00 	mov.w	fp, #0
   bac5a:	6023      	str	r3, [r4, #0]
   bac5c:	e786      	b.n	bab6c <_strtod_l+0x49c>
   bac5e:	bf00      	nop
   bac60:	000bd732 	.word	0x000bd732
   bac64:	000bd74c 	.word	0x000bd74c
   bac68:	000bd729 	.word	0x000bd729
   bac6c:	000bd72c 	.word	0x000bd72c
   bac70:	000bd35a 	.word	0x000bd35a
   bac74:	000bd9e0 	.word	0x000bd9e0
   bac78:	000bd9b8 	.word	0x000bd9b8
   bac7c:	7ff00000 	.word	0x7ff00000
   bac80:	7ca00000 	.word	0x7ca00000
   bac84:	7fefffff 	.word	0x7fefffff
   bac88:	f018 0310 	ands.w	r3, r8, #16
   bac8c:	bf18      	it	ne
   bac8e:	236a      	movne	r3, #106	; 0x6a
   bac90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb040 <_strtod_l+0x970>
   bac94:	9304      	str	r3, [sp, #16]
   bac96:	4650      	mov	r0, sl
   bac98:	4659      	mov	r1, fp
   bac9a:	2300      	movs	r3, #0
   bac9c:	f018 0f01 	tst.w	r8, #1
   baca0:	d004      	beq.n	bacac <_strtod_l+0x5dc>
   baca2:	e9d9 2300 	ldrd	r2, r3, [r9]
   baca6:	f7f9 fb77 	bl	b4398 <__aeabi_dmul>
   bacaa:	2301      	movs	r3, #1
   bacac:	ea5f 0868 	movs.w	r8, r8, asr #1
   bacb0:	f109 0908 	add.w	r9, r9, #8
   bacb4:	d1f2      	bne.n	bac9c <_strtod_l+0x5cc>
   bacb6:	b10b      	cbz	r3, bacbc <_strtod_l+0x5ec>
   bacb8:	4682      	mov	sl, r0
   bacba:	468b      	mov	fp, r1
   bacbc:	9b04      	ldr	r3, [sp, #16]
   bacbe:	b1c3      	cbz	r3, bacf2 <_strtod_l+0x622>
   bacc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bacc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bacc8:	2b00      	cmp	r3, #0
   bacca:	4659      	mov	r1, fp
   baccc:	dd11      	ble.n	bacf2 <_strtod_l+0x622>
   bacce:	2b1f      	cmp	r3, #31
   bacd0:	f340 8124 	ble.w	baf1c <_strtod_l+0x84c>
   bacd4:	2b34      	cmp	r3, #52	; 0x34
   bacd6:	bfde      	ittt	le
   bacd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bacdc:	f04f 33ff 	movle.w	r3, #4294967295
   bace0:	fa03 f202 	lslle.w	r2, r3, r2
   bace4:	f04f 0a00 	mov.w	sl, #0
   bace8:	bfcc      	ite	gt
   bacea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bacee:	ea02 0b01 	andle.w	fp, r2, r1
   bacf2:	2200      	movs	r2, #0
   bacf4:	2300      	movs	r3, #0
   bacf6:	4650      	mov	r0, sl
   bacf8:	4659      	mov	r1, fp
   bacfa:	f7f9 fdb5 	bl	b4868 <__aeabi_dcmpeq>
   bacfe:	2800      	cmp	r0, #0
   bad00:	d1a2      	bne.n	bac48 <_strtod_l+0x578>
   bad02:	9b07      	ldr	r3, [sp, #28]
   bad04:	9300      	str	r3, [sp, #0]
   bad06:	9908      	ldr	r1, [sp, #32]
   bad08:	462b      	mov	r3, r5
   bad0a:	463a      	mov	r2, r7
   bad0c:	4620      	mov	r0, r4
   bad0e:	f001 f80d 	bl	bbd2c <__s2b>
   bad12:	9007      	str	r0, [sp, #28]
   bad14:	2800      	cmp	r0, #0
   bad16:	f43f af1f 	beq.w	bab58 <_strtod_l+0x488>
   bad1a:	9b05      	ldr	r3, [sp, #20]
   bad1c:	1b9e      	subs	r6, r3, r6
   bad1e:	9b06      	ldr	r3, [sp, #24]
   bad20:	2b00      	cmp	r3, #0
   bad22:	bfb4      	ite	lt
   bad24:	4633      	movlt	r3, r6
   bad26:	2300      	movge	r3, #0
   bad28:	930c      	str	r3, [sp, #48]	; 0x30
   bad2a:	9b06      	ldr	r3, [sp, #24]
   bad2c:	2500      	movs	r5, #0
   bad2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bad32:	9312      	str	r3, [sp, #72]	; 0x48
   bad34:	462e      	mov	r6, r5
   bad36:	9b07      	ldr	r3, [sp, #28]
   bad38:	4620      	mov	r0, r4
   bad3a:	6859      	ldr	r1, [r3, #4]
   bad3c:	f000 ff4e 	bl	bbbdc <_Balloc>
   bad40:	9005      	str	r0, [sp, #20]
   bad42:	2800      	cmp	r0, #0
   bad44:	f43f af0c 	beq.w	bab60 <_strtod_l+0x490>
   bad48:	9b07      	ldr	r3, [sp, #28]
   bad4a:	691a      	ldr	r2, [r3, #16]
   bad4c:	3202      	adds	r2, #2
   bad4e:	f103 010c 	add.w	r1, r3, #12
   bad52:	0092      	lsls	r2, r2, #2
   bad54:	300c      	adds	r0, #12
   bad56:	f7ff fbeb 	bl	ba530 <memcpy>
   bad5a:	ec4b ab10 	vmov	d0, sl, fp
   bad5e:	aa1a      	add	r2, sp, #104	; 0x68
   bad60:	a919      	add	r1, sp, #100	; 0x64
   bad62:	4620      	mov	r0, r4
   bad64:	f001 fb28 	bl	bc3b8 <__d2b>
   bad68:	ec4b ab18 	vmov	d8, sl, fp
   bad6c:	9018      	str	r0, [sp, #96]	; 0x60
   bad6e:	2800      	cmp	r0, #0
   bad70:	f43f aef6 	beq.w	bab60 <_strtod_l+0x490>
   bad74:	2101      	movs	r1, #1
   bad76:	4620      	mov	r0, r4
   bad78:	f001 f872 	bl	bbe60 <__i2b>
   bad7c:	4606      	mov	r6, r0
   bad7e:	2800      	cmp	r0, #0
   bad80:	f43f aeee 	beq.w	bab60 <_strtod_l+0x490>
   bad84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bad86:	9904      	ldr	r1, [sp, #16]
   bad88:	2b00      	cmp	r3, #0
   bad8a:	bfab      	itete	ge
   bad8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bad8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bad90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bad92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bad96:	bfac      	ite	ge
   bad98:	eb03 0902 	addge.w	r9, r3, r2
   bad9c:	1ad7      	sublt	r7, r2, r3
   bad9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bada0:	eba3 0801 	sub.w	r8, r3, r1
   bada4:	4490      	add	r8, r2
   bada6:	4ba1      	ldr	r3, [pc, #644]	; (bb02c <_strtod_l+0x95c>)
   bada8:	f108 38ff 	add.w	r8, r8, #4294967295
   badac:	4598      	cmp	r8, r3
   badae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   badb2:	f280 80c7 	bge.w	baf44 <_strtod_l+0x874>
   badb6:	eba3 0308 	sub.w	r3, r3, r8
   badba:	2b1f      	cmp	r3, #31
   badbc:	eba2 0203 	sub.w	r2, r2, r3
   badc0:	f04f 0101 	mov.w	r1, #1
   badc4:	f300 80b1 	bgt.w	baf2a <_strtod_l+0x85a>
   badc8:	fa01 f303 	lsl.w	r3, r1, r3
   badcc:	930d      	str	r3, [sp, #52]	; 0x34
   badce:	2300      	movs	r3, #0
   badd0:	9308      	str	r3, [sp, #32]
   badd2:	eb09 0802 	add.w	r8, r9, r2
   badd6:	9b04      	ldr	r3, [sp, #16]
   badd8:	45c1      	cmp	r9, r8
   badda:	4417      	add	r7, r2
   baddc:	441f      	add	r7, r3
   badde:	464b      	mov	r3, r9
   bade0:	bfa8      	it	ge
   bade2:	4643      	movge	r3, r8
   bade4:	42bb      	cmp	r3, r7
   bade6:	bfa8      	it	ge
   bade8:	463b      	movge	r3, r7
   badea:	2b00      	cmp	r3, #0
   badec:	bfc2      	ittt	gt
   badee:	eba8 0803 	subgt.w	r8, r8, r3
   badf2:	1aff      	subgt	r7, r7, r3
   badf4:	eba9 0903 	subgt.w	r9, r9, r3
   badf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   badfa:	2b00      	cmp	r3, #0
   badfc:	dd17      	ble.n	bae2e <_strtod_l+0x75e>
   badfe:	4631      	mov	r1, r6
   bae00:	461a      	mov	r2, r3
   bae02:	4620      	mov	r0, r4
   bae04:	f001 f8ec 	bl	bbfe0 <__pow5mult>
   bae08:	4606      	mov	r6, r0
   bae0a:	2800      	cmp	r0, #0
   bae0c:	f43f aea8 	beq.w	bab60 <_strtod_l+0x490>
   bae10:	4601      	mov	r1, r0
   bae12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bae14:	4620      	mov	r0, r4
   bae16:	f001 f839 	bl	bbe8c <__multiply>
   bae1a:	900b      	str	r0, [sp, #44]	; 0x2c
   bae1c:	2800      	cmp	r0, #0
   bae1e:	f43f ae9f 	beq.w	bab60 <_strtod_l+0x490>
   bae22:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae24:	4620      	mov	r0, r4
   bae26:	f000 ff19 	bl	bbc5c <_Bfree>
   bae2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bae2c:	9318      	str	r3, [sp, #96]	; 0x60
   bae2e:	f1b8 0f00 	cmp.w	r8, #0
   bae32:	f300 808c 	bgt.w	baf4e <_strtod_l+0x87e>
   bae36:	9b06      	ldr	r3, [sp, #24]
   bae38:	2b00      	cmp	r3, #0
   bae3a:	dd08      	ble.n	bae4e <_strtod_l+0x77e>
   bae3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bae3e:	9905      	ldr	r1, [sp, #20]
   bae40:	4620      	mov	r0, r4
   bae42:	f001 f8cd 	bl	bbfe0 <__pow5mult>
   bae46:	9005      	str	r0, [sp, #20]
   bae48:	2800      	cmp	r0, #0
   bae4a:	f43f ae89 	beq.w	bab60 <_strtod_l+0x490>
   bae4e:	2f00      	cmp	r7, #0
   bae50:	dd08      	ble.n	bae64 <_strtod_l+0x794>
   bae52:	9905      	ldr	r1, [sp, #20]
   bae54:	463a      	mov	r2, r7
   bae56:	4620      	mov	r0, r4
   bae58:	f001 f91c 	bl	bc094 <__lshift>
   bae5c:	9005      	str	r0, [sp, #20]
   bae5e:	2800      	cmp	r0, #0
   bae60:	f43f ae7e 	beq.w	bab60 <_strtod_l+0x490>
   bae64:	f1b9 0f00 	cmp.w	r9, #0
   bae68:	dd08      	ble.n	bae7c <_strtod_l+0x7ac>
   bae6a:	4631      	mov	r1, r6
   bae6c:	464a      	mov	r2, r9
   bae6e:	4620      	mov	r0, r4
   bae70:	f001 f910 	bl	bc094 <__lshift>
   bae74:	4606      	mov	r6, r0
   bae76:	2800      	cmp	r0, #0
   bae78:	f43f ae72 	beq.w	bab60 <_strtod_l+0x490>
   bae7c:	9a05      	ldr	r2, [sp, #20]
   bae7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae80:	4620      	mov	r0, r4
   bae82:	f001 f993 	bl	bc1ac <__mdiff>
   bae86:	4605      	mov	r5, r0
   bae88:	2800      	cmp	r0, #0
   bae8a:	f43f ae69 	beq.w	bab60 <_strtod_l+0x490>
   bae8e:	68c3      	ldr	r3, [r0, #12]
   bae90:	930b      	str	r3, [sp, #44]	; 0x2c
   bae92:	2300      	movs	r3, #0
   bae94:	60c3      	str	r3, [r0, #12]
   bae96:	4631      	mov	r1, r6
   bae98:	f001 f96c 	bl	bc174 <__mcmp>
   bae9c:	2800      	cmp	r0, #0
   bae9e:	da60      	bge.n	baf62 <_strtod_l+0x892>
   baea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baea2:	ea53 030a 	orrs.w	r3, r3, sl
   baea6:	f040 8082 	bne.w	bafae <_strtod_l+0x8de>
   baeaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baeae:	2b00      	cmp	r3, #0
   baeb0:	d17d      	bne.n	bafae <_strtod_l+0x8de>
   baeb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baeb6:	0d1b      	lsrs	r3, r3, #20
   baeb8:	051b      	lsls	r3, r3, #20
   baeba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   baebe:	d976      	bls.n	bafae <_strtod_l+0x8de>
   baec0:	696b      	ldr	r3, [r5, #20]
   baec2:	b913      	cbnz	r3, baeca <_strtod_l+0x7fa>
   baec4:	692b      	ldr	r3, [r5, #16]
   baec6:	2b01      	cmp	r3, #1
   baec8:	dd71      	ble.n	bafae <_strtod_l+0x8de>
   baeca:	4629      	mov	r1, r5
   baecc:	2201      	movs	r2, #1
   baece:	4620      	mov	r0, r4
   baed0:	f001 f8e0 	bl	bc094 <__lshift>
   baed4:	4631      	mov	r1, r6
   baed6:	4605      	mov	r5, r0
   baed8:	f001 f94c 	bl	bc174 <__mcmp>
   baedc:	2800      	cmp	r0, #0
   baede:	dd66      	ble.n	bafae <_strtod_l+0x8de>
   baee0:	9904      	ldr	r1, [sp, #16]
   baee2:	4a53      	ldr	r2, [pc, #332]	; (bb030 <_strtod_l+0x960>)
   baee4:	465b      	mov	r3, fp
   baee6:	2900      	cmp	r1, #0
   baee8:	f000 8081 	beq.w	bafee <_strtod_l+0x91e>
   baeec:	ea02 010b 	and.w	r1, r2, fp
   baef0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   baef4:	dc7b      	bgt.n	bafee <_strtod_l+0x91e>
   baef6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   baefa:	f77f aea9 	ble.w	bac50 <_strtod_l+0x580>
   baefe:	4b4d      	ldr	r3, [pc, #308]	; (bb034 <_strtod_l+0x964>)
   baf00:	4650      	mov	r0, sl
   baf02:	4659      	mov	r1, fp
   baf04:	2200      	movs	r2, #0
   baf06:	f7f9 fa47 	bl	b4398 <__aeabi_dmul>
   baf0a:	460b      	mov	r3, r1
   baf0c:	4303      	orrs	r3, r0
   baf0e:	bf08      	it	eq
   baf10:	2322      	moveq	r3, #34	; 0x22
   baf12:	4682      	mov	sl, r0
   baf14:	468b      	mov	fp, r1
   baf16:	bf08      	it	eq
   baf18:	6023      	streq	r3, [r4, #0]
   baf1a:	e62b      	b.n	bab74 <_strtod_l+0x4a4>
   baf1c:	f04f 32ff 	mov.w	r2, #4294967295
   baf20:	fa02 f303 	lsl.w	r3, r2, r3
   baf24:	ea03 0a0a 	and.w	sl, r3, sl
   baf28:	e6e3      	b.n	bacf2 <_strtod_l+0x622>
   baf2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   baf2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   baf32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   baf36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   baf3a:	fa01 f308 	lsl.w	r3, r1, r8
   baf3e:	9308      	str	r3, [sp, #32]
   baf40:	910d      	str	r1, [sp, #52]	; 0x34
   baf42:	e746      	b.n	badd2 <_strtod_l+0x702>
   baf44:	2300      	movs	r3, #0
   baf46:	9308      	str	r3, [sp, #32]
   baf48:	2301      	movs	r3, #1
   baf4a:	930d      	str	r3, [sp, #52]	; 0x34
   baf4c:	e741      	b.n	badd2 <_strtod_l+0x702>
   baf4e:	9918      	ldr	r1, [sp, #96]	; 0x60
   baf50:	4642      	mov	r2, r8
   baf52:	4620      	mov	r0, r4
   baf54:	f001 f89e 	bl	bc094 <__lshift>
   baf58:	9018      	str	r0, [sp, #96]	; 0x60
   baf5a:	2800      	cmp	r0, #0
   baf5c:	f47f af6b 	bne.w	bae36 <_strtod_l+0x766>
   baf60:	e5fe      	b.n	bab60 <_strtod_l+0x490>
   baf62:	465f      	mov	r7, fp
   baf64:	d16e      	bne.n	bb044 <_strtod_l+0x974>
   baf66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baf68:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baf6c:	b342      	cbz	r2, bafc0 <_strtod_l+0x8f0>
   baf6e:	4a32      	ldr	r2, [pc, #200]	; (bb038 <_strtod_l+0x968>)
   baf70:	4293      	cmp	r3, r2
   baf72:	d128      	bne.n	bafc6 <_strtod_l+0x8f6>
   baf74:	9b04      	ldr	r3, [sp, #16]
   baf76:	4651      	mov	r1, sl
   baf78:	b1eb      	cbz	r3, bafb6 <_strtod_l+0x8e6>
   baf7a:	4b2d      	ldr	r3, [pc, #180]	; (bb030 <_strtod_l+0x960>)
   baf7c:	403b      	ands	r3, r7
   baf7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   baf82:	f04f 32ff 	mov.w	r2, #4294967295
   baf86:	d819      	bhi.n	bafbc <_strtod_l+0x8ec>
   baf88:	0d1b      	lsrs	r3, r3, #20
   baf8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baf8e:	fa02 f303 	lsl.w	r3, r2, r3
   baf92:	4299      	cmp	r1, r3
   baf94:	d117      	bne.n	bafc6 <_strtod_l+0x8f6>
   baf96:	4b29      	ldr	r3, [pc, #164]	; (bb03c <_strtod_l+0x96c>)
   baf98:	429f      	cmp	r7, r3
   baf9a:	d102      	bne.n	bafa2 <_strtod_l+0x8d2>
   baf9c:	3101      	adds	r1, #1
   baf9e:	f43f addf 	beq.w	bab60 <_strtod_l+0x490>
   bafa2:	4b23      	ldr	r3, [pc, #140]	; (bb030 <_strtod_l+0x960>)
   bafa4:	403b      	ands	r3, r7
   bafa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bafaa:	f04f 0a00 	mov.w	sl, #0
   bafae:	9b04      	ldr	r3, [sp, #16]
   bafb0:	2b00      	cmp	r3, #0
   bafb2:	d1a4      	bne.n	baefe <_strtod_l+0x82e>
   bafb4:	e5de      	b.n	bab74 <_strtod_l+0x4a4>
   bafb6:	f04f 33ff 	mov.w	r3, #4294967295
   bafba:	e7ea      	b.n	baf92 <_strtod_l+0x8c2>
   bafbc:	4613      	mov	r3, r2
   bafbe:	e7e8      	b.n	baf92 <_strtod_l+0x8c2>
   bafc0:	ea53 030a 	orrs.w	r3, r3, sl
   bafc4:	d08c      	beq.n	baee0 <_strtod_l+0x810>
   bafc6:	9b08      	ldr	r3, [sp, #32]
   bafc8:	b1db      	cbz	r3, bb002 <_strtod_l+0x932>
   bafca:	423b      	tst	r3, r7
   bafcc:	d0ef      	beq.n	bafae <_strtod_l+0x8de>
   bafce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bafd0:	9a04      	ldr	r2, [sp, #16]
   bafd2:	4650      	mov	r0, sl
   bafd4:	4659      	mov	r1, fp
   bafd6:	b1c3      	cbz	r3, bb00a <_strtod_l+0x93a>
   bafd8:	f7ff fb5b 	bl	ba692 <sulp>
   bafdc:	4602      	mov	r2, r0
   bafde:	460b      	mov	r3, r1
   bafe0:	ec51 0b18 	vmov	r0, r1, d8
   bafe4:	f7f9 f822 	bl	b402c <__adddf3>
   bafe8:	4682      	mov	sl, r0
   bafea:	468b      	mov	fp, r1
   bafec:	e7df      	b.n	bafae <_strtod_l+0x8de>
   bafee:	4013      	ands	r3, r2
   baff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   baff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   baff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   baffc:	f04f 3aff 	mov.w	sl, #4294967295
   bb000:	e7d5      	b.n	bafae <_strtod_l+0x8de>
   bb002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb004:	ea13 0f0a 	tst.w	r3, sl
   bb008:	e7e0      	b.n	bafcc <_strtod_l+0x8fc>
   bb00a:	f7ff fb42 	bl	ba692 <sulp>
   bb00e:	4602      	mov	r2, r0
   bb010:	460b      	mov	r3, r1
   bb012:	ec51 0b18 	vmov	r0, r1, d8
   bb016:	f7f9 f807 	bl	b4028 <__aeabi_dsub>
   bb01a:	2200      	movs	r2, #0
   bb01c:	2300      	movs	r3, #0
   bb01e:	4682      	mov	sl, r0
   bb020:	468b      	mov	fp, r1
   bb022:	f7f9 fc21 	bl	b4868 <__aeabi_dcmpeq>
   bb026:	2800      	cmp	r0, #0
   bb028:	d0c1      	beq.n	bafae <_strtod_l+0x8de>
   bb02a:	e611      	b.n	bac50 <_strtod_l+0x580>
   bb02c:	fffffc02 	.word	0xfffffc02
   bb030:	7ff00000 	.word	0x7ff00000
   bb034:	39500000 	.word	0x39500000
   bb038:	000fffff 	.word	0x000fffff
   bb03c:	7fefffff 	.word	0x7fefffff
   bb040:	000bd760 	.word	0x000bd760
   bb044:	4631      	mov	r1, r6
   bb046:	4628      	mov	r0, r5
   bb048:	f001 fa12 	bl	bc470 <__ratio>
   bb04c:	ec59 8b10 	vmov	r8, r9, d0
   bb050:	ee10 0a10 	vmov	r0, s0
   bb054:	2200      	movs	r2, #0
   bb056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb05a:	4649      	mov	r1, r9
   bb05c:	f7f9 fc18 	bl	b4890 <__aeabi_dcmple>
   bb060:	2800      	cmp	r0, #0
   bb062:	d07a      	beq.n	bb15a <_strtod_l+0xa8a>
   bb064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb066:	2b00      	cmp	r3, #0
   bb068:	d04a      	beq.n	bb100 <_strtod_l+0xa30>
   bb06a:	4b95      	ldr	r3, [pc, #596]	; (bb2c0 <_strtod_l+0xbf0>)
   bb06c:	2200      	movs	r2, #0
   bb06e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb072:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb2c0 <_strtod_l+0xbf0>
   bb076:	f04f 0800 	mov.w	r8, #0
   bb07a:	4b92      	ldr	r3, [pc, #584]	; (bb2c4 <_strtod_l+0xbf4>)
   bb07c:	403b      	ands	r3, r7
   bb07e:	930d      	str	r3, [sp, #52]	; 0x34
   bb080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb082:	4b91      	ldr	r3, [pc, #580]	; (bb2c8 <_strtod_l+0xbf8>)
   bb084:	429a      	cmp	r2, r3
   bb086:	f040 80b0 	bne.w	bb1ea <_strtod_l+0xb1a>
   bb08a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb08e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb092:	ec4b ab10 	vmov	d0, sl, fp
   bb096:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb09a:	f001 f911 	bl	bc2c0 <__ulp>
   bb09e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb0a2:	ec53 2b10 	vmov	r2, r3, d0
   bb0a6:	f7f9 f977 	bl	b4398 <__aeabi_dmul>
   bb0aa:	4652      	mov	r2, sl
   bb0ac:	465b      	mov	r3, fp
   bb0ae:	f7f8 ffbd 	bl	b402c <__adddf3>
   bb0b2:	460b      	mov	r3, r1
   bb0b4:	4983      	ldr	r1, [pc, #524]	; (bb2c4 <_strtod_l+0xbf4>)
   bb0b6:	4a85      	ldr	r2, [pc, #532]	; (bb2cc <_strtod_l+0xbfc>)
   bb0b8:	4019      	ands	r1, r3
   bb0ba:	4291      	cmp	r1, r2
   bb0bc:	4682      	mov	sl, r0
   bb0be:	d960      	bls.n	bb182 <_strtod_l+0xab2>
   bb0c0:	ee18 3a90 	vmov	r3, s17
   bb0c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb0c8:	4293      	cmp	r3, r2
   bb0ca:	d104      	bne.n	bb0d6 <_strtod_l+0xa06>
   bb0cc:	ee18 3a10 	vmov	r3, s16
   bb0d0:	3301      	adds	r3, #1
   bb0d2:	f43f ad45 	beq.w	bab60 <_strtod_l+0x490>
   bb0d6:	f8df b200 	ldr.w	fp, [pc, #512]	; bb2d8 <_strtod_l+0xc08>
   bb0da:	f04f 3aff 	mov.w	sl, #4294967295
   bb0de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb0e0:	4620      	mov	r0, r4
   bb0e2:	f000 fdbb 	bl	bbc5c <_Bfree>
   bb0e6:	9905      	ldr	r1, [sp, #20]
   bb0e8:	4620      	mov	r0, r4
   bb0ea:	f000 fdb7 	bl	bbc5c <_Bfree>
   bb0ee:	4631      	mov	r1, r6
   bb0f0:	4620      	mov	r0, r4
   bb0f2:	f000 fdb3 	bl	bbc5c <_Bfree>
   bb0f6:	4629      	mov	r1, r5
   bb0f8:	4620      	mov	r0, r4
   bb0fa:	f000 fdaf 	bl	bbc5c <_Bfree>
   bb0fe:	e61a      	b.n	bad36 <_strtod_l+0x666>
   bb100:	f1ba 0f00 	cmp.w	sl, #0
   bb104:	d11b      	bne.n	bb13e <_strtod_l+0xa6e>
   bb106:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb10a:	b9f3      	cbnz	r3, bb14a <_strtod_l+0xa7a>
   bb10c:	4b6c      	ldr	r3, [pc, #432]	; (bb2c0 <_strtod_l+0xbf0>)
   bb10e:	2200      	movs	r2, #0
   bb110:	4640      	mov	r0, r8
   bb112:	4649      	mov	r1, r9
   bb114:	f7f9 fbb2 	bl	b487c <__aeabi_dcmplt>
   bb118:	b9d0      	cbnz	r0, bb150 <_strtod_l+0xa80>
   bb11a:	4640      	mov	r0, r8
   bb11c:	4649      	mov	r1, r9
   bb11e:	4b6c      	ldr	r3, [pc, #432]	; (bb2d0 <_strtod_l+0xc00>)
   bb120:	2200      	movs	r2, #0
   bb122:	f7f9 f939 	bl	b4398 <__aeabi_dmul>
   bb126:	4680      	mov	r8, r0
   bb128:	4689      	mov	r9, r1
   bb12a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb12e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb132:	9315      	str	r3, [sp, #84]	; 0x54
   bb134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb138:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb13c:	e79d      	b.n	bb07a <_strtod_l+0x9aa>
   bb13e:	f1ba 0f01 	cmp.w	sl, #1
   bb142:	d102      	bne.n	bb14a <_strtod_l+0xa7a>
   bb144:	2f00      	cmp	r7, #0
   bb146:	f43f ad83 	beq.w	bac50 <_strtod_l+0x580>
   bb14a:	4b62      	ldr	r3, [pc, #392]	; (bb2d4 <_strtod_l+0xc04>)
   bb14c:	2200      	movs	r2, #0
   bb14e:	e78e      	b.n	bb06e <_strtod_l+0x99e>
   bb150:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb2d0 <_strtod_l+0xc00>
   bb154:	f04f 0800 	mov.w	r8, #0
   bb158:	e7e7      	b.n	bb12a <_strtod_l+0xa5a>
   bb15a:	4b5d      	ldr	r3, [pc, #372]	; (bb2d0 <_strtod_l+0xc00>)
   bb15c:	4640      	mov	r0, r8
   bb15e:	4649      	mov	r1, r9
   bb160:	2200      	movs	r2, #0
   bb162:	f7f9 f919 	bl	b4398 <__aeabi_dmul>
   bb166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb168:	4680      	mov	r8, r0
   bb16a:	4689      	mov	r9, r1
   bb16c:	b933      	cbnz	r3, bb17c <_strtod_l+0xaac>
   bb16e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb172:	900e      	str	r0, [sp, #56]	; 0x38
   bb174:	930f      	str	r3, [sp, #60]	; 0x3c
   bb176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb17a:	e7dd      	b.n	bb138 <_strtod_l+0xa68>
   bb17c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb180:	e7f9      	b.n	bb176 <_strtod_l+0xaa6>
   bb182:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb186:	9b04      	ldr	r3, [sp, #16]
   bb188:	2b00      	cmp	r3, #0
   bb18a:	d1a8      	bne.n	bb0de <_strtod_l+0xa0e>
   bb18c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb192:	0d1b      	lsrs	r3, r3, #20
   bb194:	051b      	lsls	r3, r3, #20
   bb196:	429a      	cmp	r2, r3
   bb198:	d1a1      	bne.n	bb0de <_strtod_l+0xa0e>
   bb19a:	4640      	mov	r0, r8
   bb19c:	4649      	mov	r1, r9
   bb19e:	f7f9 fc35 	bl	b4a0c <__aeabi_d2lz>
   bb1a2:	f7f9 f8cb 	bl	b433c <__aeabi_l2d>
   bb1a6:	4602      	mov	r2, r0
   bb1a8:	460b      	mov	r3, r1
   bb1aa:	4640      	mov	r0, r8
   bb1ac:	4649      	mov	r1, r9
   bb1ae:	f7f8 ff3b 	bl	b4028 <__aeabi_dsub>
   bb1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb1b8:	ea43 030a 	orr.w	r3, r3, sl
   bb1bc:	4313      	orrs	r3, r2
   bb1be:	4680      	mov	r8, r0
   bb1c0:	4689      	mov	r9, r1
   bb1c2:	d055      	beq.n	bb270 <_strtod_l+0xba0>
   bb1c4:	a336      	add	r3, pc, #216	; (adr r3, bb2a0 <_strtod_l+0xbd0>)
   bb1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1ca:	f7f9 fb57 	bl	b487c <__aeabi_dcmplt>
   bb1ce:	2800      	cmp	r0, #0
   bb1d0:	f47f acd0 	bne.w	bab74 <_strtod_l+0x4a4>
   bb1d4:	a334      	add	r3, pc, #208	; (adr r3, bb2a8 <_strtod_l+0xbd8>)
   bb1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1da:	4640      	mov	r0, r8
   bb1dc:	4649      	mov	r1, r9
   bb1de:	f7f9 fb6b 	bl	b48b8 <__aeabi_dcmpgt>
   bb1e2:	2800      	cmp	r0, #0
   bb1e4:	f43f af7b 	beq.w	bb0de <_strtod_l+0xa0e>
   bb1e8:	e4c4      	b.n	bab74 <_strtod_l+0x4a4>
   bb1ea:	9b04      	ldr	r3, [sp, #16]
   bb1ec:	b333      	cbz	r3, bb23c <_strtod_l+0xb6c>
   bb1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb1f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb1f4:	d822      	bhi.n	bb23c <_strtod_l+0xb6c>
   bb1f6:	a32e      	add	r3, pc, #184	; (adr r3, bb2b0 <_strtod_l+0xbe0>)
   bb1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1fc:	4640      	mov	r0, r8
   bb1fe:	4649      	mov	r1, r9
   bb200:	f7f9 fb46 	bl	b4890 <__aeabi_dcmple>
   bb204:	b1a0      	cbz	r0, bb230 <_strtod_l+0xb60>
   bb206:	4649      	mov	r1, r9
   bb208:	4640      	mov	r0, r8
   bb20a:	f7f9 fb5f 	bl	b48cc <__aeabi_d2uiz>
   bb20e:	2801      	cmp	r0, #1
   bb210:	bf38      	it	cc
   bb212:	2001      	movcc	r0, #1
   bb214:	f7f9 f846 	bl	b42a4 <__aeabi_ui2d>
   bb218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb21a:	4680      	mov	r8, r0
   bb21c:	4689      	mov	r9, r1
   bb21e:	bb23      	cbnz	r3, bb26a <_strtod_l+0xb9a>
   bb220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb224:	9010      	str	r0, [sp, #64]	; 0x40
   bb226:	9311      	str	r3, [sp, #68]	; 0x44
   bb228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb22c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb230:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb234:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb238:	1a9b      	subs	r3, r3, r2
   bb23a:	9309      	str	r3, [sp, #36]	; 0x24
   bb23c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb240:	eeb0 0a48 	vmov.f32	s0, s16
   bb244:	eef0 0a68 	vmov.f32	s1, s17
   bb248:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb24c:	f001 f838 	bl	bc2c0 <__ulp>
   bb250:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb254:	ec53 2b10 	vmov	r2, r3, d0
   bb258:	f7f9 f89e 	bl	b4398 <__aeabi_dmul>
   bb25c:	ec53 2b18 	vmov	r2, r3, d8
   bb260:	f7f8 fee4 	bl	b402c <__adddf3>
   bb264:	4682      	mov	sl, r0
   bb266:	468b      	mov	fp, r1
   bb268:	e78d      	b.n	bb186 <_strtod_l+0xab6>
   bb26a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb26e:	e7db      	b.n	bb228 <_strtod_l+0xb58>
   bb270:	a311      	add	r3, pc, #68	; (adr r3, bb2b8 <_strtod_l+0xbe8>)
   bb272:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb276:	f7f9 fb01 	bl	b487c <__aeabi_dcmplt>
   bb27a:	e7b2      	b.n	bb1e2 <_strtod_l+0xb12>
   bb27c:	2300      	movs	r3, #0
   bb27e:	930a      	str	r3, [sp, #40]	; 0x28
   bb280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb284:	6013      	str	r3, [r2, #0]
   bb286:	f7ff ba6b 	b.w	ba760 <_strtod_l+0x90>
   bb28a:	2a65      	cmp	r2, #101	; 0x65
   bb28c:	f43f ab5f 	beq.w	ba94e <_strtod_l+0x27e>
   bb290:	2a45      	cmp	r2, #69	; 0x45
   bb292:	f43f ab5c 	beq.w	ba94e <_strtod_l+0x27e>
   bb296:	2301      	movs	r3, #1
   bb298:	f7ff bb94 	b.w	ba9c4 <_strtod_l+0x2f4>
   bb29c:	f3af 8000 	nop.w
   bb2a0:	94a03595 	.word	0x94a03595
   bb2a4:	3fdfffff 	.word	0x3fdfffff
   bb2a8:	35afe535 	.word	0x35afe535
   bb2ac:	3fe00000 	.word	0x3fe00000
   bb2b0:	ffc00000 	.word	0xffc00000
   bb2b4:	41dfffff 	.word	0x41dfffff
   bb2b8:	94a03595 	.word	0x94a03595
   bb2bc:	3fcfffff 	.word	0x3fcfffff
   bb2c0:	3ff00000 	.word	0x3ff00000
   bb2c4:	7ff00000 	.word	0x7ff00000
   bb2c8:	7fe00000 	.word	0x7fe00000
   bb2cc:	7c9fffff 	.word	0x7c9fffff
   bb2d0:	3fe00000 	.word	0x3fe00000
   bb2d4:	bff00000 	.word	0xbff00000
   bb2d8:	7fefffff 	.word	0x7fefffff

000bb2dc <strtod>:
   bb2dc:	460a      	mov	r2, r1
   bb2de:	4601      	mov	r1, r0
   bb2e0:	4802      	ldr	r0, [pc, #8]	; (bb2ec <strtod+0x10>)
   bb2e2:	4b03      	ldr	r3, [pc, #12]	; (bb2f0 <strtod+0x14>)
   bb2e4:	6800      	ldr	r0, [r0, #0]
   bb2e6:	f7ff b9f3 	b.w	ba6d0 <_strtod_l>
   bb2ea:	bf00      	nop
   bb2ec:	2003e37c 	.word	0x2003e37c
   bb2f0:	2003e3e8 	.word	0x2003e3e8

000bb2f4 <_strtol_l.constprop.0>:
   bb2f4:	2b01      	cmp	r3, #1
   bb2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb2fa:	d001      	beq.n	bb300 <_strtol_l.constprop.0+0xc>
   bb2fc:	2b24      	cmp	r3, #36	; 0x24
   bb2fe:	d906      	bls.n	bb30e <_strtol_l.constprop.0+0x1a>
   bb300:	f7fb fe98 	bl	b7034 <__errno>
   bb304:	2316      	movs	r3, #22
   bb306:	6003      	str	r3, [r0, #0]
   bb308:	2000      	movs	r0, #0
   bb30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb30e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb3f4 <_strtol_l.constprop.0+0x100>
   bb312:	460d      	mov	r5, r1
   bb314:	462e      	mov	r6, r5
   bb316:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb31a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb31e:	f017 0708 	ands.w	r7, r7, #8
   bb322:	d1f7      	bne.n	bb314 <_strtol_l.constprop.0+0x20>
   bb324:	2c2d      	cmp	r4, #45	; 0x2d
   bb326:	d132      	bne.n	bb38e <_strtol_l.constprop.0+0x9a>
   bb328:	782c      	ldrb	r4, [r5, #0]
   bb32a:	2701      	movs	r7, #1
   bb32c:	1cb5      	adds	r5, r6, #2
   bb32e:	2b00      	cmp	r3, #0
   bb330:	d05b      	beq.n	bb3ea <_strtol_l.constprop.0+0xf6>
   bb332:	2b10      	cmp	r3, #16
   bb334:	d109      	bne.n	bb34a <_strtol_l.constprop.0+0x56>
   bb336:	2c30      	cmp	r4, #48	; 0x30
   bb338:	d107      	bne.n	bb34a <_strtol_l.constprop.0+0x56>
   bb33a:	782c      	ldrb	r4, [r5, #0]
   bb33c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb340:	2c58      	cmp	r4, #88	; 0x58
   bb342:	d14d      	bne.n	bb3e0 <_strtol_l.constprop.0+0xec>
   bb344:	786c      	ldrb	r4, [r5, #1]
   bb346:	2310      	movs	r3, #16
   bb348:	3502      	adds	r5, #2
   bb34a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb34e:	f108 38ff 	add.w	r8, r8, #4294967295
   bb352:	f04f 0c00 	mov.w	ip, #0
   bb356:	fbb8 f9f3 	udiv	r9, r8, r3
   bb35a:	4666      	mov	r6, ip
   bb35c:	fb03 8a19 	mls	sl, r3, r9, r8
   bb360:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb364:	f1be 0f09 	cmp.w	lr, #9
   bb368:	d816      	bhi.n	bb398 <_strtol_l.constprop.0+0xa4>
   bb36a:	4674      	mov	r4, lr
   bb36c:	42a3      	cmp	r3, r4
   bb36e:	dd24      	ble.n	bb3ba <_strtol_l.constprop.0+0xc6>
   bb370:	f1bc 0f00 	cmp.w	ip, #0
   bb374:	db1e      	blt.n	bb3b4 <_strtol_l.constprop.0+0xc0>
   bb376:	45b1      	cmp	r9, r6
   bb378:	d31c      	bcc.n	bb3b4 <_strtol_l.constprop.0+0xc0>
   bb37a:	d101      	bne.n	bb380 <_strtol_l.constprop.0+0x8c>
   bb37c:	45a2      	cmp	sl, r4
   bb37e:	db19      	blt.n	bb3b4 <_strtol_l.constprop.0+0xc0>
   bb380:	fb06 4603 	mla	r6, r6, r3, r4
   bb384:	f04f 0c01 	mov.w	ip, #1
   bb388:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb38c:	e7e8      	b.n	bb360 <_strtol_l.constprop.0+0x6c>
   bb38e:	2c2b      	cmp	r4, #43	; 0x2b
   bb390:	bf04      	itt	eq
   bb392:	782c      	ldrbeq	r4, [r5, #0]
   bb394:	1cb5      	addeq	r5, r6, #2
   bb396:	e7ca      	b.n	bb32e <_strtol_l.constprop.0+0x3a>
   bb398:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb39c:	f1be 0f19 	cmp.w	lr, #25
   bb3a0:	d801      	bhi.n	bb3a6 <_strtol_l.constprop.0+0xb2>
   bb3a2:	3c37      	subs	r4, #55	; 0x37
   bb3a4:	e7e2      	b.n	bb36c <_strtol_l.constprop.0+0x78>
   bb3a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb3aa:	f1be 0f19 	cmp.w	lr, #25
   bb3ae:	d804      	bhi.n	bb3ba <_strtol_l.constprop.0+0xc6>
   bb3b0:	3c57      	subs	r4, #87	; 0x57
   bb3b2:	e7db      	b.n	bb36c <_strtol_l.constprop.0+0x78>
   bb3b4:	f04f 3cff 	mov.w	ip, #4294967295
   bb3b8:	e7e6      	b.n	bb388 <_strtol_l.constprop.0+0x94>
   bb3ba:	f1bc 0f00 	cmp.w	ip, #0
   bb3be:	da05      	bge.n	bb3cc <_strtol_l.constprop.0+0xd8>
   bb3c0:	2322      	movs	r3, #34	; 0x22
   bb3c2:	6003      	str	r3, [r0, #0]
   bb3c4:	4646      	mov	r6, r8
   bb3c6:	b942      	cbnz	r2, bb3da <_strtol_l.constprop.0+0xe6>
   bb3c8:	4630      	mov	r0, r6
   bb3ca:	e79e      	b.n	bb30a <_strtol_l.constprop.0+0x16>
   bb3cc:	b107      	cbz	r7, bb3d0 <_strtol_l.constprop.0+0xdc>
   bb3ce:	4276      	negs	r6, r6
   bb3d0:	2a00      	cmp	r2, #0
   bb3d2:	d0f9      	beq.n	bb3c8 <_strtol_l.constprop.0+0xd4>
   bb3d4:	f1bc 0f00 	cmp.w	ip, #0
   bb3d8:	d000      	beq.n	bb3dc <_strtol_l.constprop.0+0xe8>
   bb3da:	1e69      	subs	r1, r5, #1
   bb3dc:	6011      	str	r1, [r2, #0]
   bb3de:	e7f3      	b.n	bb3c8 <_strtol_l.constprop.0+0xd4>
   bb3e0:	2430      	movs	r4, #48	; 0x30
   bb3e2:	2b00      	cmp	r3, #0
   bb3e4:	d1b1      	bne.n	bb34a <_strtol_l.constprop.0+0x56>
   bb3e6:	2308      	movs	r3, #8
   bb3e8:	e7af      	b.n	bb34a <_strtol_l.constprop.0+0x56>
   bb3ea:	2c30      	cmp	r4, #48	; 0x30
   bb3ec:	d0a5      	beq.n	bb33a <_strtol_l.constprop.0+0x46>
   bb3ee:	230a      	movs	r3, #10
   bb3f0:	e7ab      	b.n	bb34a <_strtol_l.constprop.0+0x56>
   bb3f2:	bf00      	nop
   bb3f4:	000bd789 	.word	0x000bd789

000bb3f8 <strtol>:
   bb3f8:	4613      	mov	r3, r2
   bb3fa:	460a      	mov	r2, r1
   bb3fc:	4601      	mov	r1, r0
   bb3fe:	4802      	ldr	r0, [pc, #8]	; (bb408 <strtol+0x10>)
   bb400:	6800      	ldr	r0, [r0, #0]
   bb402:	f7ff bf77 	b.w	bb2f4 <_strtol_l.constprop.0>
   bb406:	bf00      	nop
   bb408:	2003e37c 	.word	0x2003e37c

000bb40c <__register_exitproc>:
   bb40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb410:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb4cc <__register_exitproc+0xc0>
   bb414:	4606      	mov	r6, r0
   bb416:	f8d8 0000 	ldr.w	r0, [r8]
   bb41a:	461f      	mov	r7, r3
   bb41c:	460d      	mov	r5, r1
   bb41e:	4691      	mov	r9, r2
   bb420:	f000 fbc6 	bl	bbbb0 <__retarget_lock_acquire_recursive>
   bb424:	4b25      	ldr	r3, [pc, #148]	; (bb4bc <__register_exitproc+0xb0>)
   bb426:	681c      	ldr	r4, [r3, #0]
   bb428:	b934      	cbnz	r4, bb438 <__register_exitproc+0x2c>
   bb42a:	4c25      	ldr	r4, [pc, #148]	; (bb4c0 <__register_exitproc+0xb4>)
   bb42c:	601c      	str	r4, [r3, #0]
   bb42e:	4b25      	ldr	r3, [pc, #148]	; (bb4c4 <__register_exitproc+0xb8>)
   bb430:	b113      	cbz	r3, bb438 <__register_exitproc+0x2c>
   bb432:	681b      	ldr	r3, [r3, #0]
   bb434:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb438:	6863      	ldr	r3, [r4, #4]
   bb43a:	2b1f      	cmp	r3, #31
   bb43c:	dd07      	ble.n	bb44e <__register_exitproc+0x42>
   bb43e:	f8d8 0000 	ldr.w	r0, [r8]
   bb442:	f000 fbb7 	bl	bbbb4 <__retarget_lock_release_recursive>
   bb446:	f04f 30ff 	mov.w	r0, #4294967295
   bb44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb44e:	b34e      	cbz	r6, bb4a4 <__register_exitproc+0x98>
   bb450:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb454:	b988      	cbnz	r0, bb47a <__register_exitproc+0x6e>
   bb456:	4b1c      	ldr	r3, [pc, #112]	; (bb4c8 <__register_exitproc+0xbc>)
   bb458:	b923      	cbnz	r3, bb464 <__register_exitproc+0x58>
   bb45a:	f8d8 0000 	ldr.w	r0, [r8]
   bb45e:	f000 fba8 	bl	bbbb2 <__retarget_lock_release>
   bb462:	e7f0      	b.n	bb446 <__register_exitproc+0x3a>
   bb464:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb468:	f7fb fdb4 	bl	b6fd4 <malloc>
   bb46c:	2800      	cmp	r0, #0
   bb46e:	d0f4      	beq.n	bb45a <__register_exitproc+0x4e>
   bb470:	2300      	movs	r3, #0
   bb472:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb476:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb47a:	6863      	ldr	r3, [r4, #4]
   bb47c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb480:	2201      	movs	r2, #1
   bb482:	409a      	lsls	r2, r3
   bb484:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb488:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb48c:	4313      	orrs	r3, r2
   bb48e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb492:	2e02      	cmp	r6, #2
   bb494:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb498:	bf02      	ittt	eq
   bb49a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb49e:	4313      	orreq	r3, r2
   bb4a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb4a4:	6863      	ldr	r3, [r4, #4]
   bb4a6:	f8d8 0000 	ldr.w	r0, [r8]
   bb4aa:	1c5a      	adds	r2, r3, #1
   bb4ac:	3302      	adds	r3, #2
   bb4ae:	6062      	str	r2, [r4, #4]
   bb4b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb4b4:	f000 fb7e 	bl	bbbb4 <__retarget_lock_release_recursive>
   bb4b8:	2000      	movs	r0, #0
   bb4ba:	e7c6      	b.n	bb44a <__register_exitproc+0x3e>
   bb4bc:	2003e7e8 	.word	0x2003e7e8
   bb4c0:	2003e75c 	.word	0x2003e75c
   bb4c4:	00000000 	.word	0x00000000
   bb4c8:	000b6fd5 	.word	0x000b6fd5
   bb4cc:	2003e3e0 	.word	0x2003e3e0

000bb4d0 <rshift>:
   bb4d0:	6903      	ldr	r3, [r0, #16]
   bb4d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb4d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb4da:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb4de:	f100 0414 	add.w	r4, r0, #20
   bb4e2:	dd45      	ble.n	bb570 <rshift+0xa0>
   bb4e4:	f011 011f 	ands.w	r1, r1, #31
   bb4e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb4ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb4f0:	d10c      	bne.n	bb50c <rshift+0x3c>
   bb4f2:	f100 0710 	add.w	r7, r0, #16
   bb4f6:	4629      	mov	r1, r5
   bb4f8:	42b1      	cmp	r1, r6
   bb4fa:	d334      	bcc.n	bb566 <rshift+0x96>
   bb4fc:	1a9b      	subs	r3, r3, r2
   bb4fe:	009b      	lsls	r3, r3, #2
   bb500:	1eea      	subs	r2, r5, #3
   bb502:	4296      	cmp	r6, r2
   bb504:	bf38      	it	cc
   bb506:	2300      	movcc	r3, #0
   bb508:	4423      	add	r3, r4
   bb50a:	e015      	b.n	bb538 <rshift+0x68>
   bb50c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb510:	f1c1 0820 	rsb	r8, r1, #32
   bb514:	40cf      	lsrs	r7, r1
   bb516:	f105 0e04 	add.w	lr, r5, #4
   bb51a:	46a1      	mov	r9, r4
   bb51c:	4576      	cmp	r6, lr
   bb51e:	46f4      	mov	ip, lr
   bb520:	d815      	bhi.n	bb54e <rshift+0x7e>
   bb522:	1a9a      	subs	r2, r3, r2
   bb524:	0092      	lsls	r2, r2, #2
   bb526:	3a04      	subs	r2, #4
   bb528:	3501      	adds	r5, #1
   bb52a:	42ae      	cmp	r6, r5
   bb52c:	bf38      	it	cc
   bb52e:	2200      	movcc	r2, #0
   bb530:	18a3      	adds	r3, r4, r2
   bb532:	50a7      	str	r7, [r4, r2]
   bb534:	b107      	cbz	r7, bb538 <rshift+0x68>
   bb536:	3304      	adds	r3, #4
   bb538:	1b1a      	subs	r2, r3, r4
   bb53a:	42a3      	cmp	r3, r4
   bb53c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb540:	bf08      	it	eq
   bb542:	2300      	moveq	r3, #0
   bb544:	6102      	str	r2, [r0, #16]
   bb546:	bf08      	it	eq
   bb548:	6143      	streq	r3, [r0, #20]
   bb54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb54e:	f8dc c000 	ldr.w	ip, [ip]
   bb552:	fa0c fc08 	lsl.w	ip, ip, r8
   bb556:	ea4c 0707 	orr.w	r7, ip, r7
   bb55a:	f849 7b04 	str.w	r7, [r9], #4
   bb55e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb562:	40cf      	lsrs	r7, r1
   bb564:	e7da      	b.n	bb51c <rshift+0x4c>
   bb566:	f851 cb04 	ldr.w	ip, [r1], #4
   bb56a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb56e:	e7c3      	b.n	bb4f8 <rshift+0x28>
   bb570:	4623      	mov	r3, r4
   bb572:	e7e1      	b.n	bb538 <rshift+0x68>

000bb574 <__hexdig_fun>:
   bb574:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb578:	2b09      	cmp	r3, #9
   bb57a:	d802      	bhi.n	bb582 <__hexdig_fun+0xe>
   bb57c:	3820      	subs	r0, #32
   bb57e:	b2c0      	uxtb	r0, r0
   bb580:	4770      	bx	lr
   bb582:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb586:	2b05      	cmp	r3, #5
   bb588:	d801      	bhi.n	bb58e <__hexdig_fun+0x1a>
   bb58a:	3847      	subs	r0, #71	; 0x47
   bb58c:	e7f7      	b.n	bb57e <__hexdig_fun+0xa>
   bb58e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb592:	2b05      	cmp	r3, #5
   bb594:	d801      	bhi.n	bb59a <__hexdig_fun+0x26>
   bb596:	3827      	subs	r0, #39	; 0x27
   bb598:	e7f1      	b.n	bb57e <__hexdig_fun+0xa>
   bb59a:	2000      	movs	r0, #0
   bb59c:	4770      	bx	lr
	...

000bb5a0 <__gethex>:
   bb5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb5a4:	ed2d 8b02 	vpush	{d8}
   bb5a8:	b089      	sub	sp, #36	; 0x24
   bb5aa:	ee08 0a10 	vmov	s16, r0
   bb5ae:	9304      	str	r3, [sp, #16]
   bb5b0:	4bb4      	ldr	r3, [pc, #720]	; (bb884 <__gethex+0x2e4>)
   bb5b2:	681b      	ldr	r3, [r3, #0]
   bb5b4:	9301      	str	r3, [sp, #4]
   bb5b6:	4618      	mov	r0, r3
   bb5b8:	468b      	mov	fp, r1
   bb5ba:	4690      	mov	r8, r2
   bb5bc:	f7f9 fa1e 	bl	b49fc <strlen>
   bb5c0:	9b01      	ldr	r3, [sp, #4]
   bb5c2:	f8db 2000 	ldr.w	r2, [fp]
   bb5c6:	4403      	add	r3, r0
   bb5c8:	4682      	mov	sl, r0
   bb5ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb5ce:	9305      	str	r3, [sp, #20]
   bb5d0:	1c93      	adds	r3, r2, #2
   bb5d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb5d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb5da:	32fe      	adds	r2, #254	; 0xfe
   bb5dc:	18d1      	adds	r1, r2, r3
   bb5de:	461f      	mov	r7, r3
   bb5e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb5e4:	9100      	str	r1, [sp, #0]
   bb5e6:	2830      	cmp	r0, #48	; 0x30
   bb5e8:	d0f8      	beq.n	bb5dc <__gethex+0x3c>
   bb5ea:	f7ff ffc3 	bl	bb574 <__hexdig_fun>
   bb5ee:	4604      	mov	r4, r0
   bb5f0:	2800      	cmp	r0, #0
   bb5f2:	d13a      	bne.n	bb66a <__gethex+0xca>
   bb5f4:	9901      	ldr	r1, [sp, #4]
   bb5f6:	4652      	mov	r2, sl
   bb5f8:	4638      	mov	r0, r7
   bb5fa:	f7ff f816 	bl	ba62a <strncmp>
   bb5fe:	4605      	mov	r5, r0
   bb600:	2800      	cmp	r0, #0
   bb602:	d168      	bne.n	bb6d6 <__gethex+0x136>
   bb604:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb608:	eb07 060a 	add.w	r6, r7, sl
   bb60c:	f7ff ffb2 	bl	bb574 <__hexdig_fun>
   bb610:	2800      	cmp	r0, #0
   bb612:	d062      	beq.n	bb6da <__gethex+0x13a>
   bb614:	4633      	mov	r3, r6
   bb616:	7818      	ldrb	r0, [r3, #0]
   bb618:	2830      	cmp	r0, #48	; 0x30
   bb61a:	461f      	mov	r7, r3
   bb61c:	f103 0301 	add.w	r3, r3, #1
   bb620:	d0f9      	beq.n	bb616 <__gethex+0x76>
   bb622:	f7ff ffa7 	bl	bb574 <__hexdig_fun>
   bb626:	2301      	movs	r3, #1
   bb628:	fab0 f480 	clz	r4, r0
   bb62c:	0964      	lsrs	r4, r4, #5
   bb62e:	4635      	mov	r5, r6
   bb630:	9300      	str	r3, [sp, #0]
   bb632:	463a      	mov	r2, r7
   bb634:	4616      	mov	r6, r2
   bb636:	3201      	adds	r2, #1
   bb638:	7830      	ldrb	r0, [r6, #0]
   bb63a:	f7ff ff9b 	bl	bb574 <__hexdig_fun>
   bb63e:	2800      	cmp	r0, #0
   bb640:	d1f8      	bne.n	bb634 <__gethex+0x94>
   bb642:	9901      	ldr	r1, [sp, #4]
   bb644:	4652      	mov	r2, sl
   bb646:	4630      	mov	r0, r6
   bb648:	f7fe ffef 	bl	ba62a <strncmp>
   bb64c:	b980      	cbnz	r0, bb670 <__gethex+0xd0>
   bb64e:	b94d      	cbnz	r5, bb664 <__gethex+0xc4>
   bb650:	eb06 050a 	add.w	r5, r6, sl
   bb654:	462a      	mov	r2, r5
   bb656:	4616      	mov	r6, r2
   bb658:	3201      	adds	r2, #1
   bb65a:	7830      	ldrb	r0, [r6, #0]
   bb65c:	f7ff ff8a 	bl	bb574 <__hexdig_fun>
   bb660:	2800      	cmp	r0, #0
   bb662:	d1f8      	bne.n	bb656 <__gethex+0xb6>
   bb664:	1bad      	subs	r5, r5, r6
   bb666:	00ad      	lsls	r5, r5, #2
   bb668:	e004      	b.n	bb674 <__gethex+0xd4>
   bb66a:	2400      	movs	r4, #0
   bb66c:	4625      	mov	r5, r4
   bb66e:	e7e0      	b.n	bb632 <__gethex+0x92>
   bb670:	2d00      	cmp	r5, #0
   bb672:	d1f7      	bne.n	bb664 <__gethex+0xc4>
   bb674:	7833      	ldrb	r3, [r6, #0]
   bb676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb67a:	2b50      	cmp	r3, #80	; 0x50
   bb67c:	d13b      	bne.n	bb6f6 <__gethex+0x156>
   bb67e:	7873      	ldrb	r3, [r6, #1]
   bb680:	2b2b      	cmp	r3, #43	; 0x2b
   bb682:	d02c      	beq.n	bb6de <__gethex+0x13e>
   bb684:	2b2d      	cmp	r3, #45	; 0x2d
   bb686:	d02e      	beq.n	bb6e6 <__gethex+0x146>
   bb688:	1c71      	adds	r1, r6, #1
   bb68a:	f04f 0900 	mov.w	r9, #0
   bb68e:	7808      	ldrb	r0, [r1, #0]
   bb690:	f7ff ff70 	bl	bb574 <__hexdig_fun>
   bb694:	1e43      	subs	r3, r0, #1
   bb696:	b2db      	uxtb	r3, r3
   bb698:	2b18      	cmp	r3, #24
   bb69a:	d82c      	bhi.n	bb6f6 <__gethex+0x156>
   bb69c:	f1a0 0210 	sub.w	r2, r0, #16
   bb6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb6a4:	f7ff ff66 	bl	bb574 <__hexdig_fun>
   bb6a8:	1e43      	subs	r3, r0, #1
   bb6aa:	b2db      	uxtb	r3, r3
   bb6ac:	2b18      	cmp	r3, #24
   bb6ae:	d91d      	bls.n	bb6ec <__gethex+0x14c>
   bb6b0:	f1b9 0f00 	cmp.w	r9, #0
   bb6b4:	d000      	beq.n	bb6b8 <__gethex+0x118>
   bb6b6:	4252      	negs	r2, r2
   bb6b8:	4415      	add	r5, r2
   bb6ba:	f8cb 1000 	str.w	r1, [fp]
   bb6be:	b1e4      	cbz	r4, bb6fa <__gethex+0x15a>
   bb6c0:	9b00      	ldr	r3, [sp, #0]
   bb6c2:	2b00      	cmp	r3, #0
   bb6c4:	bf14      	ite	ne
   bb6c6:	2700      	movne	r7, #0
   bb6c8:	2706      	moveq	r7, #6
   bb6ca:	4638      	mov	r0, r7
   bb6cc:	b009      	add	sp, #36	; 0x24
   bb6ce:	ecbd 8b02 	vpop	{d8}
   bb6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb6d6:	463e      	mov	r6, r7
   bb6d8:	4625      	mov	r5, r4
   bb6da:	2401      	movs	r4, #1
   bb6dc:	e7ca      	b.n	bb674 <__gethex+0xd4>
   bb6de:	f04f 0900 	mov.w	r9, #0
   bb6e2:	1cb1      	adds	r1, r6, #2
   bb6e4:	e7d3      	b.n	bb68e <__gethex+0xee>
   bb6e6:	f04f 0901 	mov.w	r9, #1
   bb6ea:	e7fa      	b.n	bb6e2 <__gethex+0x142>
   bb6ec:	230a      	movs	r3, #10
   bb6ee:	fb03 0202 	mla	r2, r3, r2, r0
   bb6f2:	3a10      	subs	r2, #16
   bb6f4:	e7d4      	b.n	bb6a0 <__gethex+0x100>
   bb6f6:	4631      	mov	r1, r6
   bb6f8:	e7df      	b.n	bb6ba <__gethex+0x11a>
   bb6fa:	1bf3      	subs	r3, r6, r7
   bb6fc:	3b01      	subs	r3, #1
   bb6fe:	4621      	mov	r1, r4
   bb700:	2b07      	cmp	r3, #7
   bb702:	dc0b      	bgt.n	bb71c <__gethex+0x17c>
   bb704:	ee18 0a10 	vmov	r0, s16
   bb708:	f000 fa68 	bl	bbbdc <_Balloc>
   bb70c:	4604      	mov	r4, r0
   bb70e:	b940      	cbnz	r0, bb722 <__gethex+0x182>
   bb710:	4b5d      	ldr	r3, [pc, #372]	; (bb888 <__gethex+0x2e8>)
   bb712:	4602      	mov	r2, r0
   bb714:	21de      	movs	r1, #222	; 0xde
   bb716:	485d      	ldr	r0, [pc, #372]	; (bb88c <__gethex+0x2ec>)
   bb718:	f7fb fc94 	bl	b7044 <__assert_func>
   bb71c:	3101      	adds	r1, #1
   bb71e:	105b      	asrs	r3, r3, #1
   bb720:	e7ee      	b.n	bb700 <__gethex+0x160>
   bb722:	f100 0914 	add.w	r9, r0, #20
   bb726:	f04f 0b00 	mov.w	fp, #0
   bb72a:	f1ca 0301 	rsb	r3, sl, #1
   bb72e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb732:	f8cd b000 	str.w	fp, [sp]
   bb736:	9306      	str	r3, [sp, #24]
   bb738:	42b7      	cmp	r7, r6
   bb73a:	d340      	bcc.n	bb7be <__gethex+0x21e>
   bb73c:	9802      	ldr	r0, [sp, #8]
   bb73e:	9b00      	ldr	r3, [sp, #0]
   bb740:	f840 3b04 	str.w	r3, [r0], #4
   bb744:	eba0 0009 	sub.w	r0, r0, r9
   bb748:	1080      	asrs	r0, r0, #2
   bb74a:	0146      	lsls	r6, r0, #5
   bb74c:	6120      	str	r0, [r4, #16]
   bb74e:	4618      	mov	r0, r3
   bb750:	f000 fb36 	bl	bbdc0 <__hi0bits>
   bb754:	1a30      	subs	r0, r6, r0
   bb756:	f8d8 6000 	ldr.w	r6, [r8]
   bb75a:	42b0      	cmp	r0, r6
   bb75c:	dd63      	ble.n	bb826 <__gethex+0x286>
   bb75e:	1b87      	subs	r7, r0, r6
   bb760:	4639      	mov	r1, r7
   bb762:	4620      	mov	r0, r4
   bb764:	f000 feda 	bl	bc51c <__any_on>
   bb768:	4682      	mov	sl, r0
   bb76a:	b1a8      	cbz	r0, bb798 <__gethex+0x1f8>
   bb76c:	1e7b      	subs	r3, r7, #1
   bb76e:	1159      	asrs	r1, r3, #5
   bb770:	f003 021f 	and.w	r2, r3, #31
   bb774:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb778:	f04f 0a01 	mov.w	sl, #1
   bb77c:	fa0a f202 	lsl.w	r2, sl, r2
   bb780:	420a      	tst	r2, r1
   bb782:	d009      	beq.n	bb798 <__gethex+0x1f8>
   bb784:	4553      	cmp	r3, sl
   bb786:	dd05      	ble.n	bb794 <__gethex+0x1f4>
   bb788:	1eb9      	subs	r1, r7, #2
   bb78a:	4620      	mov	r0, r4
   bb78c:	f000 fec6 	bl	bc51c <__any_on>
   bb790:	2800      	cmp	r0, #0
   bb792:	d145      	bne.n	bb820 <__gethex+0x280>
   bb794:	f04f 0a02 	mov.w	sl, #2
   bb798:	4639      	mov	r1, r7
   bb79a:	4620      	mov	r0, r4
   bb79c:	f7ff fe98 	bl	bb4d0 <rshift>
   bb7a0:	443d      	add	r5, r7
   bb7a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb7a6:	42ab      	cmp	r3, r5
   bb7a8:	da4c      	bge.n	bb844 <__gethex+0x2a4>
   bb7aa:	ee18 0a10 	vmov	r0, s16
   bb7ae:	4621      	mov	r1, r4
   bb7b0:	f000 fa54 	bl	bbc5c <_Bfree>
   bb7b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb7b6:	2300      	movs	r3, #0
   bb7b8:	6013      	str	r3, [r2, #0]
   bb7ba:	27a3      	movs	r7, #163	; 0xa3
   bb7bc:	e785      	b.n	bb6ca <__gethex+0x12a>
   bb7be:	1e73      	subs	r3, r6, #1
   bb7c0:	9a05      	ldr	r2, [sp, #20]
   bb7c2:	9303      	str	r3, [sp, #12]
   bb7c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb7c8:	4293      	cmp	r3, r2
   bb7ca:	d019      	beq.n	bb800 <__gethex+0x260>
   bb7cc:	f1bb 0f20 	cmp.w	fp, #32
   bb7d0:	d107      	bne.n	bb7e2 <__gethex+0x242>
   bb7d2:	9b02      	ldr	r3, [sp, #8]
   bb7d4:	9a00      	ldr	r2, [sp, #0]
   bb7d6:	f843 2b04 	str.w	r2, [r3], #4
   bb7da:	9302      	str	r3, [sp, #8]
   bb7dc:	2300      	movs	r3, #0
   bb7de:	9300      	str	r3, [sp, #0]
   bb7e0:	469b      	mov	fp, r3
   bb7e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb7e6:	f7ff fec5 	bl	bb574 <__hexdig_fun>
   bb7ea:	9b00      	ldr	r3, [sp, #0]
   bb7ec:	f000 000f 	and.w	r0, r0, #15
   bb7f0:	fa00 f00b 	lsl.w	r0, r0, fp
   bb7f4:	4303      	orrs	r3, r0
   bb7f6:	9300      	str	r3, [sp, #0]
   bb7f8:	f10b 0b04 	add.w	fp, fp, #4
   bb7fc:	9b03      	ldr	r3, [sp, #12]
   bb7fe:	e00d      	b.n	bb81c <__gethex+0x27c>
   bb800:	9b03      	ldr	r3, [sp, #12]
   bb802:	9a06      	ldr	r2, [sp, #24]
   bb804:	4413      	add	r3, r2
   bb806:	42bb      	cmp	r3, r7
   bb808:	d3e0      	bcc.n	bb7cc <__gethex+0x22c>
   bb80a:	4618      	mov	r0, r3
   bb80c:	9901      	ldr	r1, [sp, #4]
   bb80e:	9307      	str	r3, [sp, #28]
   bb810:	4652      	mov	r2, sl
   bb812:	f7fe ff0a 	bl	ba62a <strncmp>
   bb816:	9b07      	ldr	r3, [sp, #28]
   bb818:	2800      	cmp	r0, #0
   bb81a:	d1d7      	bne.n	bb7cc <__gethex+0x22c>
   bb81c:	461e      	mov	r6, r3
   bb81e:	e78b      	b.n	bb738 <__gethex+0x198>
   bb820:	f04f 0a03 	mov.w	sl, #3
   bb824:	e7b8      	b.n	bb798 <__gethex+0x1f8>
   bb826:	da0a      	bge.n	bb83e <__gethex+0x29e>
   bb828:	1a37      	subs	r7, r6, r0
   bb82a:	4621      	mov	r1, r4
   bb82c:	ee18 0a10 	vmov	r0, s16
   bb830:	463a      	mov	r2, r7
   bb832:	f000 fc2f 	bl	bc094 <__lshift>
   bb836:	1bed      	subs	r5, r5, r7
   bb838:	4604      	mov	r4, r0
   bb83a:	f100 0914 	add.w	r9, r0, #20
   bb83e:	f04f 0a00 	mov.w	sl, #0
   bb842:	e7ae      	b.n	bb7a2 <__gethex+0x202>
   bb844:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb848:	42a8      	cmp	r0, r5
   bb84a:	dd72      	ble.n	bb932 <__gethex+0x392>
   bb84c:	1b45      	subs	r5, r0, r5
   bb84e:	42ae      	cmp	r6, r5
   bb850:	dc36      	bgt.n	bb8c0 <__gethex+0x320>
   bb852:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb856:	2b02      	cmp	r3, #2
   bb858:	d02a      	beq.n	bb8b0 <__gethex+0x310>
   bb85a:	2b03      	cmp	r3, #3
   bb85c:	d02c      	beq.n	bb8b8 <__gethex+0x318>
   bb85e:	2b01      	cmp	r3, #1
   bb860:	d11c      	bne.n	bb89c <__gethex+0x2fc>
   bb862:	42ae      	cmp	r6, r5
   bb864:	d11a      	bne.n	bb89c <__gethex+0x2fc>
   bb866:	2e01      	cmp	r6, #1
   bb868:	d112      	bne.n	bb890 <__gethex+0x2f0>
   bb86a:	9a04      	ldr	r2, [sp, #16]
   bb86c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb870:	6013      	str	r3, [r2, #0]
   bb872:	2301      	movs	r3, #1
   bb874:	6123      	str	r3, [r4, #16]
   bb876:	f8c9 3000 	str.w	r3, [r9]
   bb87a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb87c:	2762      	movs	r7, #98	; 0x62
   bb87e:	601c      	str	r4, [r3, #0]
   bb880:	e723      	b.n	bb6ca <__gethex+0x12a>
   bb882:	bf00      	nop
   bb884:	000bd920 	.word	0x000bd920
   bb888:	000bd889 	.word	0x000bd889
   bb88c:	000bd89a 	.word	0x000bd89a
   bb890:	1e71      	subs	r1, r6, #1
   bb892:	4620      	mov	r0, r4
   bb894:	f000 fe42 	bl	bc51c <__any_on>
   bb898:	2800      	cmp	r0, #0
   bb89a:	d1e6      	bne.n	bb86a <__gethex+0x2ca>
   bb89c:	ee18 0a10 	vmov	r0, s16
   bb8a0:	4621      	mov	r1, r4
   bb8a2:	f000 f9db 	bl	bbc5c <_Bfree>
   bb8a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb8a8:	2300      	movs	r3, #0
   bb8aa:	6013      	str	r3, [r2, #0]
   bb8ac:	2750      	movs	r7, #80	; 0x50
   bb8ae:	e70c      	b.n	bb6ca <__gethex+0x12a>
   bb8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb8b2:	2b00      	cmp	r3, #0
   bb8b4:	d1f2      	bne.n	bb89c <__gethex+0x2fc>
   bb8b6:	e7d8      	b.n	bb86a <__gethex+0x2ca>
   bb8b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb8ba:	2b00      	cmp	r3, #0
   bb8bc:	d1d5      	bne.n	bb86a <__gethex+0x2ca>
   bb8be:	e7ed      	b.n	bb89c <__gethex+0x2fc>
   bb8c0:	1e6f      	subs	r7, r5, #1
   bb8c2:	f1ba 0f00 	cmp.w	sl, #0
   bb8c6:	d131      	bne.n	bb92c <__gethex+0x38c>
   bb8c8:	b127      	cbz	r7, bb8d4 <__gethex+0x334>
   bb8ca:	4639      	mov	r1, r7
   bb8cc:	4620      	mov	r0, r4
   bb8ce:	f000 fe25 	bl	bc51c <__any_on>
   bb8d2:	4682      	mov	sl, r0
   bb8d4:	117b      	asrs	r3, r7, #5
   bb8d6:	2101      	movs	r1, #1
   bb8d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb8dc:	f007 071f 	and.w	r7, r7, #31
   bb8e0:	fa01 f707 	lsl.w	r7, r1, r7
   bb8e4:	421f      	tst	r7, r3
   bb8e6:	4629      	mov	r1, r5
   bb8e8:	4620      	mov	r0, r4
   bb8ea:	bf18      	it	ne
   bb8ec:	f04a 0a02 	orrne.w	sl, sl, #2
   bb8f0:	1b76      	subs	r6, r6, r5
   bb8f2:	f7ff fded 	bl	bb4d0 <rshift>
   bb8f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb8fa:	2702      	movs	r7, #2
   bb8fc:	f1ba 0f00 	cmp.w	sl, #0
   bb900:	d048      	beq.n	bb994 <__gethex+0x3f4>
   bb902:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb906:	2b02      	cmp	r3, #2
   bb908:	d015      	beq.n	bb936 <__gethex+0x396>
   bb90a:	2b03      	cmp	r3, #3
   bb90c:	d017      	beq.n	bb93e <__gethex+0x39e>
   bb90e:	2b01      	cmp	r3, #1
   bb910:	d109      	bne.n	bb926 <__gethex+0x386>
   bb912:	f01a 0f02 	tst.w	sl, #2
   bb916:	d006      	beq.n	bb926 <__gethex+0x386>
   bb918:	f8d9 0000 	ldr.w	r0, [r9]
   bb91c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb920:	f01a 0f01 	tst.w	sl, #1
   bb924:	d10e      	bne.n	bb944 <__gethex+0x3a4>
   bb926:	f047 0710 	orr.w	r7, r7, #16
   bb92a:	e033      	b.n	bb994 <__gethex+0x3f4>
   bb92c:	f04f 0a01 	mov.w	sl, #1
   bb930:	e7d0      	b.n	bb8d4 <__gethex+0x334>
   bb932:	2701      	movs	r7, #1
   bb934:	e7e2      	b.n	bb8fc <__gethex+0x35c>
   bb936:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb938:	f1c3 0301 	rsb	r3, r3, #1
   bb93c:	9315      	str	r3, [sp, #84]	; 0x54
   bb93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb940:	2b00      	cmp	r3, #0
   bb942:	d0f0      	beq.n	bb926 <__gethex+0x386>
   bb944:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb948:	f104 0314 	add.w	r3, r4, #20
   bb94c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb950:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb954:	f04f 0c00 	mov.w	ip, #0
   bb958:	4618      	mov	r0, r3
   bb95a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb95e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bb962:	d01c      	beq.n	bb99e <__gethex+0x3fe>
   bb964:	3201      	adds	r2, #1
   bb966:	6002      	str	r2, [r0, #0]
   bb968:	2f02      	cmp	r7, #2
   bb96a:	f104 0314 	add.w	r3, r4, #20
   bb96e:	d13f      	bne.n	bb9f0 <__gethex+0x450>
   bb970:	f8d8 2000 	ldr.w	r2, [r8]
   bb974:	3a01      	subs	r2, #1
   bb976:	42b2      	cmp	r2, r6
   bb978:	d10a      	bne.n	bb990 <__gethex+0x3f0>
   bb97a:	1171      	asrs	r1, r6, #5
   bb97c:	2201      	movs	r2, #1
   bb97e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb982:	f006 061f 	and.w	r6, r6, #31
   bb986:	fa02 f606 	lsl.w	r6, r2, r6
   bb98a:	421e      	tst	r6, r3
   bb98c:	bf18      	it	ne
   bb98e:	4617      	movne	r7, r2
   bb990:	f047 0720 	orr.w	r7, r7, #32
   bb994:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb996:	601c      	str	r4, [r3, #0]
   bb998:	9b04      	ldr	r3, [sp, #16]
   bb99a:	601d      	str	r5, [r3, #0]
   bb99c:	e695      	b.n	bb6ca <__gethex+0x12a>
   bb99e:	4299      	cmp	r1, r3
   bb9a0:	f843 cc04 	str.w	ip, [r3, #-4]
   bb9a4:	d8d8      	bhi.n	bb958 <__gethex+0x3b8>
   bb9a6:	68a3      	ldr	r3, [r4, #8]
   bb9a8:	459b      	cmp	fp, r3
   bb9aa:	db19      	blt.n	bb9e0 <__gethex+0x440>
   bb9ac:	6861      	ldr	r1, [r4, #4]
   bb9ae:	ee18 0a10 	vmov	r0, s16
   bb9b2:	3101      	adds	r1, #1
   bb9b4:	f000 f912 	bl	bbbdc <_Balloc>
   bb9b8:	4681      	mov	r9, r0
   bb9ba:	b918      	cbnz	r0, bb9c4 <__gethex+0x424>
   bb9bc:	4b1a      	ldr	r3, [pc, #104]	; (bba28 <__gethex+0x488>)
   bb9be:	4602      	mov	r2, r0
   bb9c0:	2184      	movs	r1, #132	; 0x84
   bb9c2:	e6a8      	b.n	bb716 <__gethex+0x176>
   bb9c4:	6922      	ldr	r2, [r4, #16]
   bb9c6:	3202      	adds	r2, #2
   bb9c8:	f104 010c 	add.w	r1, r4, #12
   bb9cc:	0092      	lsls	r2, r2, #2
   bb9ce:	300c      	adds	r0, #12
   bb9d0:	f7fe fdae 	bl	ba530 <memcpy>
   bb9d4:	4621      	mov	r1, r4
   bb9d6:	ee18 0a10 	vmov	r0, s16
   bb9da:	f000 f93f 	bl	bbc5c <_Bfree>
   bb9de:	464c      	mov	r4, r9
   bb9e0:	6923      	ldr	r3, [r4, #16]
   bb9e2:	1c5a      	adds	r2, r3, #1
   bb9e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb9e8:	6122      	str	r2, [r4, #16]
   bb9ea:	2201      	movs	r2, #1
   bb9ec:	615a      	str	r2, [r3, #20]
   bb9ee:	e7bb      	b.n	bb968 <__gethex+0x3c8>
   bb9f0:	6922      	ldr	r2, [r4, #16]
   bb9f2:	455a      	cmp	r2, fp
   bb9f4:	dd0b      	ble.n	bba0e <__gethex+0x46e>
   bb9f6:	2101      	movs	r1, #1
   bb9f8:	4620      	mov	r0, r4
   bb9fa:	f7ff fd69 	bl	bb4d0 <rshift>
   bb9fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bba02:	3501      	adds	r5, #1
   bba04:	42ab      	cmp	r3, r5
   bba06:	f6ff aed0 	blt.w	bb7aa <__gethex+0x20a>
   bba0a:	2701      	movs	r7, #1
   bba0c:	e7c0      	b.n	bb990 <__gethex+0x3f0>
   bba0e:	f016 061f 	ands.w	r6, r6, #31
   bba12:	d0fa      	beq.n	bba0a <__gethex+0x46a>
   bba14:	4453      	add	r3, sl
   bba16:	f1c6 0620 	rsb	r6, r6, #32
   bba1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bba1e:	f000 f9cf 	bl	bbdc0 <__hi0bits>
   bba22:	42b0      	cmp	r0, r6
   bba24:	dbe7      	blt.n	bb9f6 <__gethex+0x456>
   bba26:	e7f0      	b.n	bba0a <__gethex+0x46a>
   bba28:	000bd889 	.word	0x000bd889

000bba2c <L_shift>:
   bba2c:	f1c2 0208 	rsb	r2, r2, #8
   bba30:	0092      	lsls	r2, r2, #2
   bba32:	b570      	push	{r4, r5, r6, lr}
   bba34:	f1c2 0620 	rsb	r6, r2, #32
   bba38:	6843      	ldr	r3, [r0, #4]
   bba3a:	6804      	ldr	r4, [r0, #0]
   bba3c:	fa03 f506 	lsl.w	r5, r3, r6
   bba40:	432c      	orrs	r4, r5
   bba42:	40d3      	lsrs	r3, r2
   bba44:	6004      	str	r4, [r0, #0]
   bba46:	f840 3f04 	str.w	r3, [r0, #4]!
   bba4a:	4288      	cmp	r0, r1
   bba4c:	d3f4      	bcc.n	bba38 <L_shift+0xc>
   bba4e:	bd70      	pop	{r4, r5, r6, pc}

000bba50 <__match>:
   bba50:	b530      	push	{r4, r5, lr}
   bba52:	6803      	ldr	r3, [r0, #0]
   bba54:	3301      	adds	r3, #1
   bba56:	f811 4b01 	ldrb.w	r4, [r1], #1
   bba5a:	b914      	cbnz	r4, bba62 <__match+0x12>
   bba5c:	6003      	str	r3, [r0, #0]
   bba5e:	2001      	movs	r0, #1
   bba60:	bd30      	pop	{r4, r5, pc}
   bba62:	f813 2b01 	ldrb.w	r2, [r3], #1
   bba66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bba6a:	2d19      	cmp	r5, #25
   bba6c:	bf98      	it	ls
   bba6e:	3220      	addls	r2, #32
   bba70:	42a2      	cmp	r2, r4
   bba72:	d0f0      	beq.n	bba56 <__match+0x6>
   bba74:	2000      	movs	r0, #0
   bba76:	e7f3      	b.n	bba60 <__match+0x10>

000bba78 <__hexnan>:
   bba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bba7c:	680b      	ldr	r3, [r1, #0]
   bba7e:	115e      	asrs	r6, r3, #5
   bba80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bba84:	f013 031f 	ands.w	r3, r3, #31
   bba88:	b087      	sub	sp, #28
   bba8a:	bf18      	it	ne
   bba8c:	3604      	addne	r6, #4
   bba8e:	2500      	movs	r5, #0
   bba90:	1f37      	subs	r7, r6, #4
   bba92:	4690      	mov	r8, r2
   bba94:	6802      	ldr	r2, [r0, #0]
   bba96:	9301      	str	r3, [sp, #4]
   bba98:	4682      	mov	sl, r0
   bba9a:	f846 5c04 	str.w	r5, [r6, #-4]
   bba9e:	46b9      	mov	r9, r7
   bbaa0:	463c      	mov	r4, r7
   bbaa2:	9502      	str	r5, [sp, #8]
   bbaa4:	46ab      	mov	fp, r5
   bbaa6:	7851      	ldrb	r1, [r2, #1]
   bbaa8:	1c53      	adds	r3, r2, #1
   bbaaa:	9303      	str	r3, [sp, #12]
   bbaac:	b341      	cbz	r1, bbb00 <__hexnan+0x88>
   bbaae:	4608      	mov	r0, r1
   bbab0:	9205      	str	r2, [sp, #20]
   bbab2:	9104      	str	r1, [sp, #16]
   bbab4:	f7ff fd5e 	bl	bb574 <__hexdig_fun>
   bbab8:	2800      	cmp	r0, #0
   bbaba:	d14f      	bne.n	bbb5c <__hexnan+0xe4>
   bbabc:	9904      	ldr	r1, [sp, #16]
   bbabe:	9a05      	ldr	r2, [sp, #20]
   bbac0:	2920      	cmp	r1, #32
   bbac2:	d818      	bhi.n	bbaf6 <__hexnan+0x7e>
   bbac4:	9b02      	ldr	r3, [sp, #8]
   bbac6:	459b      	cmp	fp, r3
   bbac8:	dd13      	ble.n	bbaf2 <__hexnan+0x7a>
   bbaca:	454c      	cmp	r4, r9
   bbacc:	d206      	bcs.n	bbadc <__hexnan+0x64>
   bbace:	2d07      	cmp	r5, #7
   bbad0:	dc04      	bgt.n	bbadc <__hexnan+0x64>
   bbad2:	462a      	mov	r2, r5
   bbad4:	4649      	mov	r1, r9
   bbad6:	4620      	mov	r0, r4
   bbad8:	f7ff ffa8 	bl	bba2c <L_shift>
   bbadc:	4544      	cmp	r4, r8
   bbade:	d950      	bls.n	bbb82 <__hexnan+0x10a>
   bbae0:	2300      	movs	r3, #0
   bbae2:	f1a4 0904 	sub.w	r9, r4, #4
   bbae6:	f844 3c04 	str.w	r3, [r4, #-4]
   bbaea:	f8cd b008 	str.w	fp, [sp, #8]
   bbaee:	464c      	mov	r4, r9
   bbaf0:	461d      	mov	r5, r3
   bbaf2:	9a03      	ldr	r2, [sp, #12]
   bbaf4:	e7d7      	b.n	bbaa6 <__hexnan+0x2e>
   bbaf6:	2929      	cmp	r1, #41	; 0x29
   bbaf8:	d156      	bne.n	bbba8 <__hexnan+0x130>
   bbafa:	3202      	adds	r2, #2
   bbafc:	f8ca 2000 	str.w	r2, [sl]
   bbb00:	f1bb 0f00 	cmp.w	fp, #0
   bbb04:	d050      	beq.n	bbba8 <__hexnan+0x130>
   bbb06:	454c      	cmp	r4, r9
   bbb08:	d206      	bcs.n	bbb18 <__hexnan+0xa0>
   bbb0a:	2d07      	cmp	r5, #7
   bbb0c:	dc04      	bgt.n	bbb18 <__hexnan+0xa0>
   bbb0e:	462a      	mov	r2, r5
   bbb10:	4649      	mov	r1, r9
   bbb12:	4620      	mov	r0, r4
   bbb14:	f7ff ff8a 	bl	bba2c <L_shift>
   bbb18:	4544      	cmp	r4, r8
   bbb1a:	d934      	bls.n	bbb86 <__hexnan+0x10e>
   bbb1c:	f1a8 0204 	sub.w	r2, r8, #4
   bbb20:	4623      	mov	r3, r4
   bbb22:	f853 1b04 	ldr.w	r1, [r3], #4
   bbb26:	f842 1f04 	str.w	r1, [r2, #4]!
   bbb2a:	429f      	cmp	r7, r3
   bbb2c:	d2f9      	bcs.n	bbb22 <__hexnan+0xaa>
   bbb2e:	1b3b      	subs	r3, r7, r4
   bbb30:	f023 0303 	bic.w	r3, r3, #3
   bbb34:	3304      	adds	r3, #4
   bbb36:	3401      	adds	r4, #1
   bbb38:	3e03      	subs	r6, #3
   bbb3a:	42b4      	cmp	r4, r6
   bbb3c:	bf88      	it	hi
   bbb3e:	2304      	movhi	r3, #4
   bbb40:	4443      	add	r3, r8
   bbb42:	2200      	movs	r2, #0
   bbb44:	f843 2b04 	str.w	r2, [r3], #4
   bbb48:	429f      	cmp	r7, r3
   bbb4a:	d2fb      	bcs.n	bbb44 <__hexnan+0xcc>
   bbb4c:	683b      	ldr	r3, [r7, #0]
   bbb4e:	b91b      	cbnz	r3, bbb58 <__hexnan+0xe0>
   bbb50:	4547      	cmp	r7, r8
   bbb52:	d127      	bne.n	bbba4 <__hexnan+0x12c>
   bbb54:	2301      	movs	r3, #1
   bbb56:	603b      	str	r3, [r7, #0]
   bbb58:	2005      	movs	r0, #5
   bbb5a:	e026      	b.n	bbbaa <__hexnan+0x132>
   bbb5c:	3501      	adds	r5, #1
   bbb5e:	2d08      	cmp	r5, #8
   bbb60:	f10b 0b01 	add.w	fp, fp, #1
   bbb64:	dd06      	ble.n	bbb74 <__hexnan+0xfc>
   bbb66:	4544      	cmp	r4, r8
   bbb68:	d9c3      	bls.n	bbaf2 <__hexnan+0x7a>
   bbb6a:	2300      	movs	r3, #0
   bbb6c:	f844 3c04 	str.w	r3, [r4, #-4]
   bbb70:	2501      	movs	r5, #1
   bbb72:	3c04      	subs	r4, #4
   bbb74:	6822      	ldr	r2, [r4, #0]
   bbb76:	f000 000f 	and.w	r0, r0, #15
   bbb7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bbb7e:	6022      	str	r2, [r4, #0]
   bbb80:	e7b7      	b.n	bbaf2 <__hexnan+0x7a>
   bbb82:	2508      	movs	r5, #8
   bbb84:	e7b5      	b.n	bbaf2 <__hexnan+0x7a>
   bbb86:	9b01      	ldr	r3, [sp, #4]
   bbb88:	2b00      	cmp	r3, #0
   bbb8a:	d0df      	beq.n	bbb4c <__hexnan+0xd4>
   bbb8c:	f04f 32ff 	mov.w	r2, #4294967295
   bbb90:	f1c3 0320 	rsb	r3, r3, #32
   bbb94:	fa22 f303 	lsr.w	r3, r2, r3
   bbb98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bbb9c:	401a      	ands	r2, r3
   bbb9e:	f846 2c04 	str.w	r2, [r6, #-4]
   bbba2:	e7d3      	b.n	bbb4c <__hexnan+0xd4>
   bbba4:	3f04      	subs	r7, #4
   bbba6:	e7d1      	b.n	bbb4c <__hexnan+0xd4>
   bbba8:	2004      	movs	r0, #4
   bbbaa:	b007      	add	sp, #28
   bbbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbbb0 <__retarget_lock_acquire_recursive>:
   bbbb0:	4770      	bx	lr

000bbbb2 <__retarget_lock_release>:
   bbbb2:	4770      	bx	lr

000bbbb4 <__retarget_lock_release_recursive>:
   bbbb4:	4770      	bx	lr

000bbbb6 <__ascii_mbtowc>:
   bbbb6:	b082      	sub	sp, #8
   bbbb8:	b901      	cbnz	r1, bbbbc <__ascii_mbtowc+0x6>
   bbbba:	a901      	add	r1, sp, #4
   bbbbc:	b142      	cbz	r2, bbbd0 <__ascii_mbtowc+0x1a>
   bbbbe:	b14b      	cbz	r3, bbbd4 <__ascii_mbtowc+0x1e>
   bbbc0:	7813      	ldrb	r3, [r2, #0]
   bbbc2:	600b      	str	r3, [r1, #0]
   bbbc4:	7812      	ldrb	r2, [r2, #0]
   bbbc6:	1e10      	subs	r0, r2, #0
   bbbc8:	bf18      	it	ne
   bbbca:	2001      	movne	r0, #1
   bbbcc:	b002      	add	sp, #8
   bbbce:	4770      	bx	lr
   bbbd0:	4610      	mov	r0, r2
   bbbd2:	e7fb      	b.n	bbbcc <__ascii_mbtowc+0x16>
   bbbd4:	f06f 0001 	mvn.w	r0, #1
   bbbd8:	e7f8      	b.n	bbbcc <__ascii_mbtowc+0x16>
	...

000bbbdc <_Balloc>:
   bbbdc:	b570      	push	{r4, r5, r6, lr}
   bbbde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbbe0:	4604      	mov	r4, r0
   bbbe2:	460d      	mov	r5, r1
   bbbe4:	b976      	cbnz	r6, bbc04 <_Balloc+0x28>
   bbbe6:	2010      	movs	r0, #16
   bbbe8:	f7fb f9f4 	bl	b6fd4 <malloc>
   bbbec:	4602      	mov	r2, r0
   bbbee:	6260      	str	r0, [r4, #36]	; 0x24
   bbbf0:	b920      	cbnz	r0, bbbfc <_Balloc+0x20>
   bbbf2:	4b18      	ldr	r3, [pc, #96]	; (bbc54 <_Balloc+0x78>)
   bbbf4:	4818      	ldr	r0, [pc, #96]	; (bbc58 <_Balloc+0x7c>)
   bbbf6:	2166      	movs	r1, #102	; 0x66
   bbbf8:	f7fb fa24 	bl	b7044 <__assert_func>
   bbbfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbc00:	6006      	str	r6, [r0, #0]
   bbc02:	60c6      	str	r6, [r0, #12]
   bbc04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbc06:	68f3      	ldr	r3, [r6, #12]
   bbc08:	b183      	cbz	r3, bbc2c <_Balloc+0x50>
   bbc0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbc0c:	68db      	ldr	r3, [r3, #12]
   bbc0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbc12:	b9b8      	cbnz	r0, bbc44 <_Balloc+0x68>
   bbc14:	2101      	movs	r1, #1
   bbc16:	fa01 f605 	lsl.w	r6, r1, r5
   bbc1a:	1d72      	adds	r2, r6, #5
   bbc1c:	0092      	lsls	r2, r2, #2
   bbc1e:	4620      	mov	r0, r4
   bbc20:	f000 fc9d 	bl	bc55e <_calloc_r>
   bbc24:	b160      	cbz	r0, bbc40 <_Balloc+0x64>
   bbc26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bbc2a:	e00e      	b.n	bbc4a <_Balloc+0x6e>
   bbc2c:	2221      	movs	r2, #33	; 0x21
   bbc2e:	2104      	movs	r1, #4
   bbc30:	4620      	mov	r0, r4
   bbc32:	f000 fc94 	bl	bc55e <_calloc_r>
   bbc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbc38:	60f0      	str	r0, [r6, #12]
   bbc3a:	68db      	ldr	r3, [r3, #12]
   bbc3c:	2b00      	cmp	r3, #0
   bbc3e:	d1e4      	bne.n	bbc0a <_Balloc+0x2e>
   bbc40:	2000      	movs	r0, #0
   bbc42:	bd70      	pop	{r4, r5, r6, pc}
   bbc44:	6802      	ldr	r2, [r0, #0]
   bbc46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbc4a:	2300      	movs	r3, #0
   bbc4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbc50:	e7f7      	b.n	bbc42 <_Balloc+0x66>
   bbc52:	bf00      	nop
   bbc54:	000bd695 	.word	0x000bd695
   bbc58:	000bd934 	.word	0x000bd934

000bbc5c <_Bfree>:
   bbc5c:	b570      	push	{r4, r5, r6, lr}
   bbc5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbc60:	4605      	mov	r5, r0
   bbc62:	460c      	mov	r4, r1
   bbc64:	b976      	cbnz	r6, bbc84 <_Bfree+0x28>
   bbc66:	2010      	movs	r0, #16
   bbc68:	f7fb f9b4 	bl	b6fd4 <malloc>
   bbc6c:	4602      	mov	r2, r0
   bbc6e:	6268      	str	r0, [r5, #36]	; 0x24
   bbc70:	b920      	cbnz	r0, bbc7c <_Bfree+0x20>
   bbc72:	4b09      	ldr	r3, [pc, #36]	; (bbc98 <_Bfree+0x3c>)
   bbc74:	4809      	ldr	r0, [pc, #36]	; (bbc9c <_Bfree+0x40>)
   bbc76:	218a      	movs	r1, #138	; 0x8a
   bbc78:	f7fb f9e4 	bl	b7044 <__assert_func>
   bbc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbc80:	6006      	str	r6, [r0, #0]
   bbc82:	60c6      	str	r6, [r0, #12]
   bbc84:	b13c      	cbz	r4, bbc96 <_Bfree+0x3a>
   bbc86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbc88:	6862      	ldr	r2, [r4, #4]
   bbc8a:	68db      	ldr	r3, [r3, #12]
   bbc8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbc90:	6021      	str	r1, [r4, #0]
   bbc92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbc96:	bd70      	pop	{r4, r5, r6, pc}
   bbc98:	000bd695 	.word	0x000bd695
   bbc9c:	000bd934 	.word	0x000bd934

000bbca0 <__multadd>:
   bbca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbca4:	690d      	ldr	r5, [r1, #16]
   bbca6:	4607      	mov	r7, r0
   bbca8:	460c      	mov	r4, r1
   bbcaa:	461e      	mov	r6, r3
   bbcac:	f101 0c14 	add.w	ip, r1, #20
   bbcb0:	2000      	movs	r0, #0
   bbcb2:	f8dc 3000 	ldr.w	r3, [ip]
   bbcb6:	b299      	uxth	r1, r3
   bbcb8:	fb02 6101 	mla	r1, r2, r1, r6
   bbcbc:	0c1e      	lsrs	r6, r3, #16
   bbcbe:	0c0b      	lsrs	r3, r1, #16
   bbcc0:	fb02 3306 	mla	r3, r2, r6, r3
   bbcc4:	b289      	uxth	r1, r1
   bbcc6:	3001      	adds	r0, #1
   bbcc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbccc:	4285      	cmp	r5, r0
   bbcce:	f84c 1b04 	str.w	r1, [ip], #4
   bbcd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbcd6:	dcec      	bgt.n	bbcb2 <__multadd+0x12>
   bbcd8:	b30e      	cbz	r6, bbd1e <__multadd+0x7e>
   bbcda:	68a3      	ldr	r3, [r4, #8]
   bbcdc:	42ab      	cmp	r3, r5
   bbcde:	dc19      	bgt.n	bbd14 <__multadd+0x74>
   bbce0:	6861      	ldr	r1, [r4, #4]
   bbce2:	4638      	mov	r0, r7
   bbce4:	3101      	adds	r1, #1
   bbce6:	f7ff ff79 	bl	bbbdc <_Balloc>
   bbcea:	4680      	mov	r8, r0
   bbcec:	b928      	cbnz	r0, bbcfa <__multadd+0x5a>
   bbcee:	4602      	mov	r2, r0
   bbcf0:	4b0c      	ldr	r3, [pc, #48]	; (bbd24 <__multadd+0x84>)
   bbcf2:	480d      	ldr	r0, [pc, #52]	; (bbd28 <__multadd+0x88>)
   bbcf4:	21b5      	movs	r1, #181	; 0xb5
   bbcf6:	f7fb f9a5 	bl	b7044 <__assert_func>
   bbcfa:	6922      	ldr	r2, [r4, #16]
   bbcfc:	3202      	adds	r2, #2
   bbcfe:	f104 010c 	add.w	r1, r4, #12
   bbd02:	0092      	lsls	r2, r2, #2
   bbd04:	300c      	adds	r0, #12
   bbd06:	f7fe fc13 	bl	ba530 <memcpy>
   bbd0a:	4621      	mov	r1, r4
   bbd0c:	4638      	mov	r0, r7
   bbd0e:	f7ff ffa5 	bl	bbc5c <_Bfree>
   bbd12:	4644      	mov	r4, r8
   bbd14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbd18:	3501      	adds	r5, #1
   bbd1a:	615e      	str	r6, [r3, #20]
   bbd1c:	6125      	str	r5, [r4, #16]
   bbd1e:	4620      	mov	r0, r4
   bbd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbd24:	000bd889 	.word	0x000bd889
   bbd28:	000bd934 	.word	0x000bd934

000bbd2c <__s2b>:
   bbd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbd30:	460c      	mov	r4, r1
   bbd32:	4615      	mov	r5, r2
   bbd34:	461f      	mov	r7, r3
   bbd36:	2209      	movs	r2, #9
   bbd38:	3308      	adds	r3, #8
   bbd3a:	4606      	mov	r6, r0
   bbd3c:	fb93 f3f2 	sdiv	r3, r3, r2
   bbd40:	2100      	movs	r1, #0
   bbd42:	2201      	movs	r2, #1
   bbd44:	429a      	cmp	r2, r3
   bbd46:	db09      	blt.n	bbd5c <__s2b+0x30>
   bbd48:	4630      	mov	r0, r6
   bbd4a:	f7ff ff47 	bl	bbbdc <_Balloc>
   bbd4e:	b940      	cbnz	r0, bbd62 <__s2b+0x36>
   bbd50:	4602      	mov	r2, r0
   bbd52:	4b19      	ldr	r3, [pc, #100]	; (bbdb8 <__s2b+0x8c>)
   bbd54:	4819      	ldr	r0, [pc, #100]	; (bbdbc <__s2b+0x90>)
   bbd56:	21ce      	movs	r1, #206	; 0xce
   bbd58:	f7fb f974 	bl	b7044 <__assert_func>
   bbd5c:	0052      	lsls	r2, r2, #1
   bbd5e:	3101      	adds	r1, #1
   bbd60:	e7f0      	b.n	bbd44 <__s2b+0x18>
   bbd62:	9b08      	ldr	r3, [sp, #32]
   bbd64:	6143      	str	r3, [r0, #20]
   bbd66:	2d09      	cmp	r5, #9
   bbd68:	f04f 0301 	mov.w	r3, #1
   bbd6c:	6103      	str	r3, [r0, #16]
   bbd6e:	dd16      	ble.n	bbd9e <__s2b+0x72>
   bbd70:	f104 0909 	add.w	r9, r4, #9
   bbd74:	46c8      	mov	r8, r9
   bbd76:	442c      	add	r4, r5
   bbd78:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbd7c:	4601      	mov	r1, r0
   bbd7e:	3b30      	subs	r3, #48	; 0x30
   bbd80:	220a      	movs	r2, #10
   bbd82:	4630      	mov	r0, r6
   bbd84:	f7ff ff8c 	bl	bbca0 <__multadd>
   bbd88:	45a0      	cmp	r8, r4
   bbd8a:	d1f5      	bne.n	bbd78 <__s2b+0x4c>
   bbd8c:	f1a5 0408 	sub.w	r4, r5, #8
   bbd90:	444c      	add	r4, r9
   bbd92:	1b2d      	subs	r5, r5, r4
   bbd94:	1963      	adds	r3, r4, r5
   bbd96:	42bb      	cmp	r3, r7
   bbd98:	db04      	blt.n	bbda4 <__s2b+0x78>
   bbd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbd9e:	340a      	adds	r4, #10
   bbda0:	2509      	movs	r5, #9
   bbda2:	e7f6      	b.n	bbd92 <__s2b+0x66>
   bbda4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbda8:	4601      	mov	r1, r0
   bbdaa:	3b30      	subs	r3, #48	; 0x30
   bbdac:	220a      	movs	r2, #10
   bbdae:	4630      	mov	r0, r6
   bbdb0:	f7ff ff76 	bl	bbca0 <__multadd>
   bbdb4:	e7ee      	b.n	bbd94 <__s2b+0x68>
   bbdb6:	bf00      	nop
   bbdb8:	000bd889 	.word	0x000bd889
   bbdbc:	000bd934 	.word	0x000bd934

000bbdc0 <__hi0bits>:
   bbdc0:	0c03      	lsrs	r3, r0, #16
   bbdc2:	041b      	lsls	r3, r3, #16
   bbdc4:	b9d3      	cbnz	r3, bbdfc <__hi0bits+0x3c>
   bbdc6:	0400      	lsls	r0, r0, #16
   bbdc8:	2310      	movs	r3, #16
   bbdca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbdce:	bf04      	itt	eq
   bbdd0:	0200      	lsleq	r0, r0, #8
   bbdd2:	3308      	addeq	r3, #8
   bbdd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbdd8:	bf04      	itt	eq
   bbdda:	0100      	lsleq	r0, r0, #4
   bbddc:	3304      	addeq	r3, #4
   bbdde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbde2:	bf04      	itt	eq
   bbde4:	0080      	lsleq	r0, r0, #2
   bbde6:	3302      	addeq	r3, #2
   bbde8:	2800      	cmp	r0, #0
   bbdea:	db05      	blt.n	bbdf8 <__hi0bits+0x38>
   bbdec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbdf0:	f103 0301 	add.w	r3, r3, #1
   bbdf4:	bf08      	it	eq
   bbdf6:	2320      	moveq	r3, #32
   bbdf8:	4618      	mov	r0, r3
   bbdfa:	4770      	bx	lr
   bbdfc:	2300      	movs	r3, #0
   bbdfe:	e7e4      	b.n	bbdca <__hi0bits+0xa>

000bbe00 <__lo0bits>:
   bbe00:	6803      	ldr	r3, [r0, #0]
   bbe02:	f013 0207 	ands.w	r2, r3, #7
   bbe06:	4601      	mov	r1, r0
   bbe08:	d00b      	beq.n	bbe22 <__lo0bits+0x22>
   bbe0a:	07da      	lsls	r2, r3, #31
   bbe0c:	d423      	bmi.n	bbe56 <__lo0bits+0x56>
   bbe0e:	0798      	lsls	r0, r3, #30
   bbe10:	bf49      	itett	mi
   bbe12:	085b      	lsrmi	r3, r3, #1
   bbe14:	089b      	lsrpl	r3, r3, #2
   bbe16:	2001      	movmi	r0, #1
   bbe18:	600b      	strmi	r3, [r1, #0]
   bbe1a:	bf5c      	itt	pl
   bbe1c:	600b      	strpl	r3, [r1, #0]
   bbe1e:	2002      	movpl	r0, #2
   bbe20:	4770      	bx	lr
   bbe22:	b298      	uxth	r0, r3
   bbe24:	b9a8      	cbnz	r0, bbe52 <__lo0bits+0x52>
   bbe26:	0c1b      	lsrs	r3, r3, #16
   bbe28:	2010      	movs	r0, #16
   bbe2a:	b2da      	uxtb	r2, r3
   bbe2c:	b90a      	cbnz	r2, bbe32 <__lo0bits+0x32>
   bbe2e:	3008      	adds	r0, #8
   bbe30:	0a1b      	lsrs	r3, r3, #8
   bbe32:	071a      	lsls	r2, r3, #28
   bbe34:	bf04      	itt	eq
   bbe36:	091b      	lsreq	r3, r3, #4
   bbe38:	3004      	addeq	r0, #4
   bbe3a:	079a      	lsls	r2, r3, #30
   bbe3c:	bf04      	itt	eq
   bbe3e:	089b      	lsreq	r3, r3, #2
   bbe40:	3002      	addeq	r0, #2
   bbe42:	07da      	lsls	r2, r3, #31
   bbe44:	d403      	bmi.n	bbe4e <__lo0bits+0x4e>
   bbe46:	085b      	lsrs	r3, r3, #1
   bbe48:	f100 0001 	add.w	r0, r0, #1
   bbe4c:	d005      	beq.n	bbe5a <__lo0bits+0x5a>
   bbe4e:	600b      	str	r3, [r1, #0]
   bbe50:	4770      	bx	lr
   bbe52:	4610      	mov	r0, r2
   bbe54:	e7e9      	b.n	bbe2a <__lo0bits+0x2a>
   bbe56:	2000      	movs	r0, #0
   bbe58:	4770      	bx	lr
   bbe5a:	2020      	movs	r0, #32
   bbe5c:	4770      	bx	lr
	...

000bbe60 <__i2b>:
   bbe60:	b510      	push	{r4, lr}
   bbe62:	460c      	mov	r4, r1
   bbe64:	2101      	movs	r1, #1
   bbe66:	f7ff feb9 	bl	bbbdc <_Balloc>
   bbe6a:	4602      	mov	r2, r0
   bbe6c:	b928      	cbnz	r0, bbe7a <__i2b+0x1a>
   bbe6e:	4b05      	ldr	r3, [pc, #20]	; (bbe84 <__i2b+0x24>)
   bbe70:	4805      	ldr	r0, [pc, #20]	; (bbe88 <__i2b+0x28>)
   bbe72:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbe76:	f7fb f8e5 	bl	b7044 <__assert_func>
   bbe7a:	2301      	movs	r3, #1
   bbe7c:	6144      	str	r4, [r0, #20]
   bbe7e:	6103      	str	r3, [r0, #16]
   bbe80:	bd10      	pop	{r4, pc}
   bbe82:	bf00      	nop
   bbe84:	000bd889 	.word	0x000bd889
   bbe88:	000bd934 	.word	0x000bd934

000bbe8c <__multiply>:
   bbe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe90:	4691      	mov	r9, r2
   bbe92:	690a      	ldr	r2, [r1, #16]
   bbe94:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbe98:	429a      	cmp	r2, r3
   bbe9a:	bfb8      	it	lt
   bbe9c:	460b      	movlt	r3, r1
   bbe9e:	460c      	mov	r4, r1
   bbea0:	bfbc      	itt	lt
   bbea2:	464c      	movlt	r4, r9
   bbea4:	4699      	movlt	r9, r3
   bbea6:	6927      	ldr	r7, [r4, #16]
   bbea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbeac:	68a3      	ldr	r3, [r4, #8]
   bbeae:	6861      	ldr	r1, [r4, #4]
   bbeb0:	eb07 060a 	add.w	r6, r7, sl
   bbeb4:	42b3      	cmp	r3, r6
   bbeb6:	b085      	sub	sp, #20
   bbeb8:	bfb8      	it	lt
   bbeba:	3101      	addlt	r1, #1
   bbebc:	f7ff fe8e 	bl	bbbdc <_Balloc>
   bbec0:	b930      	cbnz	r0, bbed0 <__multiply+0x44>
   bbec2:	4602      	mov	r2, r0
   bbec4:	4b44      	ldr	r3, [pc, #272]	; (bbfd8 <__multiply+0x14c>)
   bbec6:	4845      	ldr	r0, [pc, #276]	; (bbfdc <__multiply+0x150>)
   bbec8:	f240 115d 	movw	r1, #349	; 0x15d
   bbecc:	f7fb f8ba 	bl	b7044 <__assert_func>
   bbed0:	f100 0514 	add.w	r5, r0, #20
   bbed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbed8:	462b      	mov	r3, r5
   bbeda:	2200      	movs	r2, #0
   bbedc:	4543      	cmp	r3, r8
   bbede:	d321      	bcc.n	bbf24 <__multiply+0x98>
   bbee0:	f104 0314 	add.w	r3, r4, #20
   bbee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbee8:	f109 0314 	add.w	r3, r9, #20
   bbeec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbef0:	9202      	str	r2, [sp, #8]
   bbef2:	1b3a      	subs	r2, r7, r4
   bbef4:	3a15      	subs	r2, #21
   bbef6:	f022 0203 	bic.w	r2, r2, #3
   bbefa:	3204      	adds	r2, #4
   bbefc:	f104 0115 	add.w	r1, r4, #21
   bbf00:	428f      	cmp	r7, r1
   bbf02:	bf38      	it	cc
   bbf04:	2204      	movcc	r2, #4
   bbf06:	9201      	str	r2, [sp, #4]
   bbf08:	9a02      	ldr	r2, [sp, #8]
   bbf0a:	9303      	str	r3, [sp, #12]
   bbf0c:	429a      	cmp	r2, r3
   bbf0e:	d80c      	bhi.n	bbf2a <__multiply+0x9e>
   bbf10:	2e00      	cmp	r6, #0
   bbf12:	dd03      	ble.n	bbf1c <__multiply+0x90>
   bbf14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbf18:	2b00      	cmp	r3, #0
   bbf1a:	d05a      	beq.n	bbfd2 <__multiply+0x146>
   bbf1c:	6106      	str	r6, [r0, #16]
   bbf1e:	b005      	add	sp, #20
   bbf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf24:	f843 2b04 	str.w	r2, [r3], #4
   bbf28:	e7d8      	b.n	bbedc <__multiply+0x50>
   bbf2a:	f8b3 a000 	ldrh.w	sl, [r3]
   bbf2e:	f1ba 0f00 	cmp.w	sl, #0
   bbf32:	d024      	beq.n	bbf7e <__multiply+0xf2>
   bbf34:	f104 0e14 	add.w	lr, r4, #20
   bbf38:	46a9      	mov	r9, r5
   bbf3a:	f04f 0c00 	mov.w	ip, #0
   bbf3e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbf42:	f8d9 1000 	ldr.w	r1, [r9]
   bbf46:	fa1f fb82 	uxth.w	fp, r2
   bbf4a:	b289      	uxth	r1, r1
   bbf4c:	fb0a 110b 	mla	r1, sl, fp, r1
   bbf50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbf54:	f8d9 2000 	ldr.w	r2, [r9]
   bbf58:	4461      	add	r1, ip
   bbf5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbf5e:	fb0a c20b 	mla	r2, sl, fp, ip
   bbf62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbf66:	b289      	uxth	r1, r1
   bbf68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbf6c:	4577      	cmp	r7, lr
   bbf6e:	f849 1b04 	str.w	r1, [r9], #4
   bbf72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbf76:	d8e2      	bhi.n	bbf3e <__multiply+0xb2>
   bbf78:	9a01      	ldr	r2, [sp, #4]
   bbf7a:	f845 c002 	str.w	ip, [r5, r2]
   bbf7e:	9a03      	ldr	r2, [sp, #12]
   bbf80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbf84:	3304      	adds	r3, #4
   bbf86:	f1b9 0f00 	cmp.w	r9, #0
   bbf8a:	d020      	beq.n	bbfce <__multiply+0x142>
   bbf8c:	6829      	ldr	r1, [r5, #0]
   bbf8e:	f104 0c14 	add.w	ip, r4, #20
   bbf92:	46ae      	mov	lr, r5
   bbf94:	f04f 0a00 	mov.w	sl, #0
   bbf98:	f8bc b000 	ldrh.w	fp, [ip]
   bbf9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbfa0:	fb09 220b 	mla	r2, r9, fp, r2
   bbfa4:	4492      	add	sl, r2
   bbfa6:	b289      	uxth	r1, r1
   bbfa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbfac:	f84e 1b04 	str.w	r1, [lr], #4
   bbfb0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbfb4:	f8be 1000 	ldrh.w	r1, [lr]
   bbfb8:	0c12      	lsrs	r2, r2, #16
   bbfba:	fb09 1102 	mla	r1, r9, r2, r1
   bbfbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbfc2:	4567      	cmp	r7, ip
   bbfc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbfc8:	d8e6      	bhi.n	bbf98 <__multiply+0x10c>
   bbfca:	9a01      	ldr	r2, [sp, #4]
   bbfcc:	50a9      	str	r1, [r5, r2]
   bbfce:	3504      	adds	r5, #4
   bbfd0:	e79a      	b.n	bbf08 <__multiply+0x7c>
   bbfd2:	3e01      	subs	r6, #1
   bbfd4:	e79c      	b.n	bbf10 <__multiply+0x84>
   bbfd6:	bf00      	nop
   bbfd8:	000bd889 	.word	0x000bd889
   bbfdc:	000bd934 	.word	0x000bd934

000bbfe0 <__pow5mult>:
   bbfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbfe4:	4615      	mov	r5, r2
   bbfe6:	f012 0203 	ands.w	r2, r2, #3
   bbfea:	4606      	mov	r6, r0
   bbfec:	460f      	mov	r7, r1
   bbfee:	d007      	beq.n	bc000 <__pow5mult+0x20>
   bbff0:	4c25      	ldr	r4, [pc, #148]	; (bc088 <__pow5mult+0xa8>)
   bbff2:	3a01      	subs	r2, #1
   bbff4:	2300      	movs	r3, #0
   bbff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbffa:	f7ff fe51 	bl	bbca0 <__multadd>
   bbffe:	4607      	mov	r7, r0
   bc000:	10ad      	asrs	r5, r5, #2
   bc002:	d03d      	beq.n	bc080 <__pow5mult+0xa0>
   bc004:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc006:	b97c      	cbnz	r4, bc028 <__pow5mult+0x48>
   bc008:	2010      	movs	r0, #16
   bc00a:	f7fa ffe3 	bl	b6fd4 <malloc>
   bc00e:	4602      	mov	r2, r0
   bc010:	6270      	str	r0, [r6, #36]	; 0x24
   bc012:	b928      	cbnz	r0, bc020 <__pow5mult+0x40>
   bc014:	4b1d      	ldr	r3, [pc, #116]	; (bc08c <__pow5mult+0xac>)
   bc016:	481e      	ldr	r0, [pc, #120]	; (bc090 <__pow5mult+0xb0>)
   bc018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc01c:	f7fb f812 	bl	b7044 <__assert_func>
   bc020:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc024:	6004      	str	r4, [r0, #0]
   bc026:	60c4      	str	r4, [r0, #12]
   bc028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc030:	b94c      	cbnz	r4, bc046 <__pow5mult+0x66>
   bc032:	f240 2171 	movw	r1, #625	; 0x271
   bc036:	4630      	mov	r0, r6
   bc038:	f7ff ff12 	bl	bbe60 <__i2b>
   bc03c:	2300      	movs	r3, #0
   bc03e:	f8c8 0008 	str.w	r0, [r8, #8]
   bc042:	4604      	mov	r4, r0
   bc044:	6003      	str	r3, [r0, #0]
   bc046:	f04f 0900 	mov.w	r9, #0
   bc04a:	07eb      	lsls	r3, r5, #31
   bc04c:	d50a      	bpl.n	bc064 <__pow5mult+0x84>
   bc04e:	4639      	mov	r1, r7
   bc050:	4622      	mov	r2, r4
   bc052:	4630      	mov	r0, r6
   bc054:	f7ff ff1a 	bl	bbe8c <__multiply>
   bc058:	4639      	mov	r1, r7
   bc05a:	4680      	mov	r8, r0
   bc05c:	4630      	mov	r0, r6
   bc05e:	f7ff fdfd 	bl	bbc5c <_Bfree>
   bc062:	4647      	mov	r7, r8
   bc064:	106d      	asrs	r5, r5, #1
   bc066:	d00b      	beq.n	bc080 <__pow5mult+0xa0>
   bc068:	6820      	ldr	r0, [r4, #0]
   bc06a:	b938      	cbnz	r0, bc07c <__pow5mult+0x9c>
   bc06c:	4622      	mov	r2, r4
   bc06e:	4621      	mov	r1, r4
   bc070:	4630      	mov	r0, r6
   bc072:	f7ff ff0b 	bl	bbe8c <__multiply>
   bc076:	6020      	str	r0, [r4, #0]
   bc078:	f8c0 9000 	str.w	r9, [r0]
   bc07c:	4604      	mov	r4, r0
   bc07e:	e7e4      	b.n	bc04a <__pow5mult+0x6a>
   bc080:	4638      	mov	r0, r7
   bc082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc086:	bf00      	nop
   bc088:	000bdaa8 	.word	0x000bdaa8
   bc08c:	000bd695 	.word	0x000bd695
   bc090:	000bd934 	.word	0x000bd934

000bc094 <__lshift>:
   bc094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc098:	460c      	mov	r4, r1
   bc09a:	6849      	ldr	r1, [r1, #4]
   bc09c:	6923      	ldr	r3, [r4, #16]
   bc09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc0a2:	68a3      	ldr	r3, [r4, #8]
   bc0a4:	4607      	mov	r7, r0
   bc0a6:	4691      	mov	r9, r2
   bc0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc0ac:	f108 0601 	add.w	r6, r8, #1
   bc0b0:	42b3      	cmp	r3, r6
   bc0b2:	db0b      	blt.n	bc0cc <__lshift+0x38>
   bc0b4:	4638      	mov	r0, r7
   bc0b6:	f7ff fd91 	bl	bbbdc <_Balloc>
   bc0ba:	4605      	mov	r5, r0
   bc0bc:	b948      	cbnz	r0, bc0d2 <__lshift+0x3e>
   bc0be:	4602      	mov	r2, r0
   bc0c0:	4b2a      	ldr	r3, [pc, #168]	; (bc16c <__lshift+0xd8>)
   bc0c2:	482b      	ldr	r0, [pc, #172]	; (bc170 <__lshift+0xdc>)
   bc0c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc0c8:	f7fa ffbc 	bl	b7044 <__assert_func>
   bc0cc:	3101      	adds	r1, #1
   bc0ce:	005b      	lsls	r3, r3, #1
   bc0d0:	e7ee      	b.n	bc0b0 <__lshift+0x1c>
   bc0d2:	2300      	movs	r3, #0
   bc0d4:	f100 0114 	add.w	r1, r0, #20
   bc0d8:	f100 0210 	add.w	r2, r0, #16
   bc0dc:	4618      	mov	r0, r3
   bc0de:	4553      	cmp	r3, sl
   bc0e0:	db37      	blt.n	bc152 <__lshift+0xbe>
   bc0e2:	6920      	ldr	r0, [r4, #16]
   bc0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc0e8:	f104 0314 	add.w	r3, r4, #20
   bc0ec:	f019 091f 	ands.w	r9, r9, #31
   bc0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc0f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc0f8:	d02f      	beq.n	bc15a <__lshift+0xc6>
   bc0fa:	f1c9 0e20 	rsb	lr, r9, #32
   bc0fe:	468a      	mov	sl, r1
   bc100:	f04f 0c00 	mov.w	ip, #0
   bc104:	681a      	ldr	r2, [r3, #0]
   bc106:	fa02 f209 	lsl.w	r2, r2, r9
   bc10a:	ea42 020c 	orr.w	r2, r2, ip
   bc10e:	f84a 2b04 	str.w	r2, [sl], #4
   bc112:	f853 2b04 	ldr.w	r2, [r3], #4
   bc116:	4298      	cmp	r0, r3
   bc118:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc11c:	d8f2      	bhi.n	bc104 <__lshift+0x70>
   bc11e:	1b03      	subs	r3, r0, r4
   bc120:	3b15      	subs	r3, #21
   bc122:	f023 0303 	bic.w	r3, r3, #3
   bc126:	3304      	adds	r3, #4
   bc128:	f104 0215 	add.w	r2, r4, #21
   bc12c:	4290      	cmp	r0, r2
   bc12e:	bf38      	it	cc
   bc130:	2304      	movcc	r3, #4
   bc132:	f841 c003 	str.w	ip, [r1, r3]
   bc136:	f1bc 0f00 	cmp.w	ip, #0
   bc13a:	d001      	beq.n	bc140 <__lshift+0xac>
   bc13c:	f108 0602 	add.w	r6, r8, #2
   bc140:	3e01      	subs	r6, #1
   bc142:	4638      	mov	r0, r7
   bc144:	612e      	str	r6, [r5, #16]
   bc146:	4621      	mov	r1, r4
   bc148:	f7ff fd88 	bl	bbc5c <_Bfree>
   bc14c:	4628      	mov	r0, r5
   bc14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc152:	f842 0f04 	str.w	r0, [r2, #4]!
   bc156:	3301      	adds	r3, #1
   bc158:	e7c1      	b.n	bc0de <__lshift+0x4a>
   bc15a:	3904      	subs	r1, #4
   bc15c:	f853 2b04 	ldr.w	r2, [r3], #4
   bc160:	f841 2f04 	str.w	r2, [r1, #4]!
   bc164:	4298      	cmp	r0, r3
   bc166:	d8f9      	bhi.n	bc15c <__lshift+0xc8>
   bc168:	e7ea      	b.n	bc140 <__lshift+0xac>
   bc16a:	bf00      	nop
   bc16c:	000bd889 	.word	0x000bd889
   bc170:	000bd934 	.word	0x000bd934

000bc174 <__mcmp>:
   bc174:	b530      	push	{r4, r5, lr}
   bc176:	6902      	ldr	r2, [r0, #16]
   bc178:	690c      	ldr	r4, [r1, #16]
   bc17a:	1b12      	subs	r2, r2, r4
   bc17c:	d10e      	bne.n	bc19c <__mcmp+0x28>
   bc17e:	f100 0314 	add.w	r3, r0, #20
   bc182:	3114      	adds	r1, #20
   bc184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc18c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc194:	42a5      	cmp	r5, r4
   bc196:	d003      	beq.n	bc1a0 <__mcmp+0x2c>
   bc198:	d305      	bcc.n	bc1a6 <__mcmp+0x32>
   bc19a:	2201      	movs	r2, #1
   bc19c:	4610      	mov	r0, r2
   bc19e:	bd30      	pop	{r4, r5, pc}
   bc1a0:	4283      	cmp	r3, r0
   bc1a2:	d3f3      	bcc.n	bc18c <__mcmp+0x18>
   bc1a4:	e7fa      	b.n	bc19c <__mcmp+0x28>
   bc1a6:	f04f 32ff 	mov.w	r2, #4294967295
   bc1aa:	e7f7      	b.n	bc19c <__mcmp+0x28>

000bc1ac <__mdiff>:
   bc1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1b0:	460c      	mov	r4, r1
   bc1b2:	4606      	mov	r6, r0
   bc1b4:	4611      	mov	r1, r2
   bc1b6:	4620      	mov	r0, r4
   bc1b8:	4690      	mov	r8, r2
   bc1ba:	f7ff ffdb 	bl	bc174 <__mcmp>
   bc1be:	1e05      	subs	r5, r0, #0
   bc1c0:	d110      	bne.n	bc1e4 <__mdiff+0x38>
   bc1c2:	4629      	mov	r1, r5
   bc1c4:	4630      	mov	r0, r6
   bc1c6:	f7ff fd09 	bl	bbbdc <_Balloc>
   bc1ca:	b930      	cbnz	r0, bc1da <__mdiff+0x2e>
   bc1cc:	4b3a      	ldr	r3, [pc, #232]	; (bc2b8 <__mdiff+0x10c>)
   bc1ce:	4602      	mov	r2, r0
   bc1d0:	f240 2132 	movw	r1, #562	; 0x232
   bc1d4:	4839      	ldr	r0, [pc, #228]	; (bc2bc <__mdiff+0x110>)
   bc1d6:	f7fa ff35 	bl	b7044 <__assert_func>
   bc1da:	2301      	movs	r3, #1
   bc1dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc1e4:	bfa4      	itt	ge
   bc1e6:	4643      	movge	r3, r8
   bc1e8:	46a0      	movge	r8, r4
   bc1ea:	4630      	mov	r0, r6
   bc1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc1f0:	bfa6      	itte	ge
   bc1f2:	461c      	movge	r4, r3
   bc1f4:	2500      	movge	r5, #0
   bc1f6:	2501      	movlt	r5, #1
   bc1f8:	f7ff fcf0 	bl	bbbdc <_Balloc>
   bc1fc:	b920      	cbnz	r0, bc208 <__mdiff+0x5c>
   bc1fe:	4b2e      	ldr	r3, [pc, #184]	; (bc2b8 <__mdiff+0x10c>)
   bc200:	4602      	mov	r2, r0
   bc202:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc206:	e7e5      	b.n	bc1d4 <__mdiff+0x28>
   bc208:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc20c:	6926      	ldr	r6, [r4, #16]
   bc20e:	60c5      	str	r5, [r0, #12]
   bc210:	f104 0914 	add.w	r9, r4, #20
   bc214:	f108 0514 	add.w	r5, r8, #20
   bc218:	f100 0e14 	add.w	lr, r0, #20
   bc21c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc224:	f108 0210 	add.w	r2, r8, #16
   bc228:	46f2      	mov	sl, lr
   bc22a:	2100      	movs	r1, #0
   bc22c:	f859 3b04 	ldr.w	r3, [r9], #4
   bc230:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc234:	fa1f f883 	uxth.w	r8, r3
   bc238:	fa11 f18b 	uxtah	r1, r1, fp
   bc23c:	0c1b      	lsrs	r3, r3, #16
   bc23e:	eba1 0808 	sub.w	r8, r1, r8
   bc242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc246:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc24a:	fa1f f888 	uxth.w	r8, r8
   bc24e:	1419      	asrs	r1, r3, #16
   bc250:	454e      	cmp	r6, r9
   bc252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc256:	f84a 3b04 	str.w	r3, [sl], #4
   bc25a:	d8e7      	bhi.n	bc22c <__mdiff+0x80>
   bc25c:	1b33      	subs	r3, r6, r4
   bc25e:	3b15      	subs	r3, #21
   bc260:	f023 0303 	bic.w	r3, r3, #3
   bc264:	3304      	adds	r3, #4
   bc266:	3415      	adds	r4, #21
   bc268:	42a6      	cmp	r6, r4
   bc26a:	bf38      	it	cc
   bc26c:	2304      	movcc	r3, #4
   bc26e:	441d      	add	r5, r3
   bc270:	4473      	add	r3, lr
   bc272:	469e      	mov	lr, r3
   bc274:	462e      	mov	r6, r5
   bc276:	4566      	cmp	r6, ip
   bc278:	d30e      	bcc.n	bc298 <__mdiff+0xec>
   bc27a:	f10c 0203 	add.w	r2, ip, #3
   bc27e:	1b52      	subs	r2, r2, r5
   bc280:	f022 0203 	bic.w	r2, r2, #3
   bc284:	3d03      	subs	r5, #3
   bc286:	45ac      	cmp	ip, r5
   bc288:	bf38      	it	cc
   bc28a:	2200      	movcc	r2, #0
   bc28c:	441a      	add	r2, r3
   bc28e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc292:	b17b      	cbz	r3, bc2b4 <__mdiff+0x108>
   bc294:	6107      	str	r7, [r0, #16]
   bc296:	e7a3      	b.n	bc1e0 <__mdiff+0x34>
   bc298:	f856 8b04 	ldr.w	r8, [r6], #4
   bc29c:	fa11 f288 	uxtah	r2, r1, r8
   bc2a0:	1414      	asrs	r4, r2, #16
   bc2a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc2a6:	b292      	uxth	r2, r2
   bc2a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc2ac:	f84e 2b04 	str.w	r2, [lr], #4
   bc2b0:	1421      	asrs	r1, r4, #16
   bc2b2:	e7e0      	b.n	bc276 <__mdiff+0xca>
   bc2b4:	3f01      	subs	r7, #1
   bc2b6:	e7ea      	b.n	bc28e <__mdiff+0xe2>
   bc2b8:	000bd889 	.word	0x000bd889
   bc2bc:	000bd934 	.word	0x000bd934

000bc2c0 <__ulp>:
   bc2c0:	b082      	sub	sp, #8
   bc2c2:	ed8d 0b00 	vstr	d0, [sp]
   bc2c6:	9b01      	ldr	r3, [sp, #4]
   bc2c8:	4912      	ldr	r1, [pc, #72]	; (bc314 <__ulp+0x54>)
   bc2ca:	4019      	ands	r1, r3
   bc2cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc2d0:	2900      	cmp	r1, #0
   bc2d2:	dd05      	ble.n	bc2e0 <__ulp+0x20>
   bc2d4:	2200      	movs	r2, #0
   bc2d6:	460b      	mov	r3, r1
   bc2d8:	ec43 2b10 	vmov	d0, r2, r3
   bc2dc:	b002      	add	sp, #8
   bc2de:	4770      	bx	lr
   bc2e0:	4249      	negs	r1, r1
   bc2e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc2e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc2ea:	f04f 0200 	mov.w	r2, #0
   bc2ee:	f04f 0300 	mov.w	r3, #0
   bc2f2:	da04      	bge.n	bc2fe <__ulp+0x3e>
   bc2f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc2f8:	fa41 f300 	asr.w	r3, r1, r0
   bc2fc:	e7ec      	b.n	bc2d8 <__ulp+0x18>
   bc2fe:	f1a0 0114 	sub.w	r1, r0, #20
   bc302:	291e      	cmp	r1, #30
   bc304:	bfda      	itte	le
   bc306:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc30a:	fa20 f101 	lsrle.w	r1, r0, r1
   bc30e:	2101      	movgt	r1, #1
   bc310:	460a      	mov	r2, r1
   bc312:	e7e1      	b.n	bc2d8 <__ulp+0x18>
   bc314:	7ff00000 	.word	0x7ff00000

000bc318 <__b2d>:
   bc318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc31a:	6905      	ldr	r5, [r0, #16]
   bc31c:	f100 0714 	add.w	r7, r0, #20
   bc320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc324:	1f2e      	subs	r6, r5, #4
   bc326:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc32a:	4620      	mov	r0, r4
   bc32c:	f7ff fd48 	bl	bbdc0 <__hi0bits>
   bc330:	f1c0 0320 	rsb	r3, r0, #32
   bc334:	280a      	cmp	r0, #10
   bc336:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc3b4 <__b2d+0x9c>
   bc33a:	600b      	str	r3, [r1, #0]
   bc33c:	dc14      	bgt.n	bc368 <__b2d+0x50>
   bc33e:	f1c0 0e0b 	rsb	lr, r0, #11
   bc342:	fa24 f10e 	lsr.w	r1, r4, lr
   bc346:	42b7      	cmp	r7, r6
   bc348:	ea41 030c 	orr.w	r3, r1, ip
   bc34c:	bf34      	ite	cc
   bc34e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc352:	2100      	movcs	r1, #0
   bc354:	3015      	adds	r0, #21
   bc356:	fa04 f000 	lsl.w	r0, r4, r0
   bc35a:	fa21 f10e 	lsr.w	r1, r1, lr
   bc35e:	ea40 0201 	orr.w	r2, r0, r1
   bc362:	ec43 2b10 	vmov	d0, r2, r3
   bc366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc368:	42b7      	cmp	r7, r6
   bc36a:	bf3a      	itte	cc
   bc36c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc370:	f1a5 0608 	subcc.w	r6, r5, #8
   bc374:	2100      	movcs	r1, #0
   bc376:	380b      	subs	r0, #11
   bc378:	d017      	beq.n	bc3aa <__b2d+0x92>
   bc37a:	f1c0 0c20 	rsb	ip, r0, #32
   bc37e:	fa04 f500 	lsl.w	r5, r4, r0
   bc382:	42be      	cmp	r6, r7
   bc384:	fa21 f40c 	lsr.w	r4, r1, ip
   bc388:	ea45 0504 	orr.w	r5, r5, r4
   bc38c:	bf8c      	ite	hi
   bc38e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc392:	2400      	movls	r4, #0
   bc394:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc398:	fa01 f000 	lsl.w	r0, r1, r0
   bc39c:	fa24 f40c 	lsr.w	r4, r4, ip
   bc3a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc3a4:	ea40 0204 	orr.w	r2, r0, r4
   bc3a8:	e7db      	b.n	bc362 <__b2d+0x4a>
   bc3aa:	ea44 030c 	orr.w	r3, r4, ip
   bc3ae:	460a      	mov	r2, r1
   bc3b0:	e7d7      	b.n	bc362 <__b2d+0x4a>
   bc3b2:	bf00      	nop
   bc3b4:	3ff00000 	.word	0x3ff00000

000bc3b8 <__d2b>:
   bc3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc3bc:	4689      	mov	r9, r1
   bc3be:	2101      	movs	r1, #1
   bc3c0:	ec57 6b10 	vmov	r6, r7, d0
   bc3c4:	4690      	mov	r8, r2
   bc3c6:	f7ff fc09 	bl	bbbdc <_Balloc>
   bc3ca:	4604      	mov	r4, r0
   bc3cc:	b930      	cbnz	r0, bc3dc <__d2b+0x24>
   bc3ce:	4602      	mov	r2, r0
   bc3d0:	4b25      	ldr	r3, [pc, #148]	; (bc468 <__d2b+0xb0>)
   bc3d2:	4826      	ldr	r0, [pc, #152]	; (bc46c <__d2b+0xb4>)
   bc3d4:	f240 310a 	movw	r1, #778	; 0x30a
   bc3d8:	f7fa fe34 	bl	b7044 <__assert_func>
   bc3dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc3e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc3e4:	bb35      	cbnz	r5, bc434 <__d2b+0x7c>
   bc3e6:	2e00      	cmp	r6, #0
   bc3e8:	9301      	str	r3, [sp, #4]
   bc3ea:	d028      	beq.n	bc43e <__d2b+0x86>
   bc3ec:	4668      	mov	r0, sp
   bc3ee:	9600      	str	r6, [sp, #0]
   bc3f0:	f7ff fd06 	bl	bbe00 <__lo0bits>
   bc3f4:	9900      	ldr	r1, [sp, #0]
   bc3f6:	b300      	cbz	r0, bc43a <__d2b+0x82>
   bc3f8:	9a01      	ldr	r2, [sp, #4]
   bc3fa:	f1c0 0320 	rsb	r3, r0, #32
   bc3fe:	fa02 f303 	lsl.w	r3, r2, r3
   bc402:	430b      	orrs	r3, r1
   bc404:	40c2      	lsrs	r2, r0
   bc406:	6163      	str	r3, [r4, #20]
   bc408:	9201      	str	r2, [sp, #4]
   bc40a:	9b01      	ldr	r3, [sp, #4]
   bc40c:	61a3      	str	r3, [r4, #24]
   bc40e:	2b00      	cmp	r3, #0
   bc410:	bf14      	ite	ne
   bc412:	2202      	movne	r2, #2
   bc414:	2201      	moveq	r2, #1
   bc416:	6122      	str	r2, [r4, #16]
   bc418:	b1d5      	cbz	r5, bc450 <__d2b+0x98>
   bc41a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc41e:	4405      	add	r5, r0
   bc420:	f8c9 5000 	str.w	r5, [r9]
   bc424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc428:	f8c8 0000 	str.w	r0, [r8]
   bc42c:	4620      	mov	r0, r4
   bc42e:	b003      	add	sp, #12
   bc430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc438:	e7d5      	b.n	bc3e6 <__d2b+0x2e>
   bc43a:	6161      	str	r1, [r4, #20]
   bc43c:	e7e5      	b.n	bc40a <__d2b+0x52>
   bc43e:	a801      	add	r0, sp, #4
   bc440:	f7ff fcde 	bl	bbe00 <__lo0bits>
   bc444:	9b01      	ldr	r3, [sp, #4]
   bc446:	6163      	str	r3, [r4, #20]
   bc448:	2201      	movs	r2, #1
   bc44a:	6122      	str	r2, [r4, #16]
   bc44c:	3020      	adds	r0, #32
   bc44e:	e7e3      	b.n	bc418 <__d2b+0x60>
   bc450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc458:	f8c9 0000 	str.w	r0, [r9]
   bc45c:	6918      	ldr	r0, [r3, #16]
   bc45e:	f7ff fcaf 	bl	bbdc0 <__hi0bits>
   bc462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc466:	e7df      	b.n	bc428 <__d2b+0x70>
   bc468:	000bd889 	.word	0x000bd889
   bc46c:	000bd934 	.word	0x000bd934

000bc470 <__ratio>:
   bc470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc474:	4688      	mov	r8, r1
   bc476:	4669      	mov	r1, sp
   bc478:	4681      	mov	r9, r0
   bc47a:	f7ff ff4d 	bl	bc318 <__b2d>
   bc47e:	a901      	add	r1, sp, #4
   bc480:	4640      	mov	r0, r8
   bc482:	ec55 4b10 	vmov	r4, r5, d0
   bc486:	f7ff ff47 	bl	bc318 <__b2d>
   bc48a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc48e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc492:	eba3 0c02 	sub.w	ip, r3, r2
   bc496:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc49a:	1a9b      	subs	r3, r3, r2
   bc49c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc4a0:	ec51 0b10 	vmov	r0, r1, d0
   bc4a4:	2b00      	cmp	r3, #0
   bc4a6:	bfd6      	itet	le
   bc4a8:	460a      	movle	r2, r1
   bc4aa:	462a      	movgt	r2, r5
   bc4ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc4b0:	468b      	mov	fp, r1
   bc4b2:	462f      	mov	r7, r5
   bc4b4:	bfd4      	ite	le
   bc4b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc4ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc4be:	4620      	mov	r0, r4
   bc4c0:	ee10 2a10 	vmov	r2, s0
   bc4c4:	465b      	mov	r3, fp
   bc4c6:	4639      	mov	r1, r7
   bc4c8:	f7f8 f890 	bl	b45ec <__aeabi_ddiv>
   bc4cc:	ec41 0b10 	vmov	d0, r0, r1
   bc4d0:	b003      	add	sp, #12
   bc4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc4d6 <__copybits>:
   bc4d6:	3901      	subs	r1, #1
   bc4d8:	b570      	push	{r4, r5, r6, lr}
   bc4da:	1149      	asrs	r1, r1, #5
   bc4dc:	6914      	ldr	r4, [r2, #16]
   bc4de:	3101      	adds	r1, #1
   bc4e0:	f102 0314 	add.w	r3, r2, #20
   bc4e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc4e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc4ec:	1f05      	subs	r5, r0, #4
   bc4ee:	42a3      	cmp	r3, r4
   bc4f0:	d30c      	bcc.n	bc50c <__copybits+0x36>
   bc4f2:	1aa3      	subs	r3, r4, r2
   bc4f4:	3b11      	subs	r3, #17
   bc4f6:	f023 0303 	bic.w	r3, r3, #3
   bc4fa:	3211      	adds	r2, #17
   bc4fc:	42a2      	cmp	r2, r4
   bc4fe:	bf88      	it	hi
   bc500:	2300      	movhi	r3, #0
   bc502:	4418      	add	r0, r3
   bc504:	2300      	movs	r3, #0
   bc506:	4288      	cmp	r0, r1
   bc508:	d305      	bcc.n	bc516 <__copybits+0x40>
   bc50a:	bd70      	pop	{r4, r5, r6, pc}
   bc50c:	f853 6b04 	ldr.w	r6, [r3], #4
   bc510:	f845 6f04 	str.w	r6, [r5, #4]!
   bc514:	e7eb      	b.n	bc4ee <__copybits+0x18>
   bc516:	f840 3b04 	str.w	r3, [r0], #4
   bc51a:	e7f4      	b.n	bc506 <__copybits+0x30>

000bc51c <__any_on>:
   bc51c:	f100 0214 	add.w	r2, r0, #20
   bc520:	6900      	ldr	r0, [r0, #16]
   bc522:	114b      	asrs	r3, r1, #5
   bc524:	4298      	cmp	r0, r3
   bc526:	b510      	push	{r4, lr}
   bc528:	db11      	blt.n	bc54e <__any_on+0x32>
   bc52a:	dd0a      	ble.n	bc542 <__any_on+0x26>
   bc52c:	f011 011f 	ands.w	r1, r1, #31
   bc530:	d007      	beq.n	bc542 <__any_on+0x26>
   bc532:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc536:	fa24 f001 	lsr.w	r0, r4, r1
   bc53a:	fa00 f101 	lsl.w	r1, r0, r1
   bc53e:	428c      	cmp	r4, r1
   bc540:	d10b      	bne.n	bc55a <__any_on+0x3e>
   bc542:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc546:	4293      	cmp	r3, r2
   bc548:	d803      	bhi.n	bc552 <__any_on+0x36>
   bc54a:	2000      	movs	r0, #0
   bc54c:	bd10      	pop	{r4, pc}
   bc54e:	4603      	mov	r3, r0
   bc550:	e7f7      	b.n	bc542 <__any_on+0x26>
   bc552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc556:	2900      	cmp	r1, #0
   bc558:	d0f5      	beq.n	bc546 <__any_on+0x2a>
   bc55a:	2001      	movs	r0, #1
   bc55c:	e7f6      	b.n	bc54c <__any_on+0x30>

000bc55e <_calloc_r>:
   bc55e:	b513      	push	{r0, r1, r4, lr}
   bc560:	434a      	muls	r2, r1
   bc562:	4611      	mov	r1, r2
   bc564:	9201      	str	r2, [sp, #4]
   bc566:	f7fa fd5d 	bl	b7024 <_malloc_r>
   bc56a:	4604      	mov	r4, r0
   bc56c:	b118      	cbz	r0, bc576 <_calloc_r+0x18>
   bc56e:	9a01      	ldr	r2, [sp, #4]
   bc570:	2100      	movs	r1, #0
   bc572:	f7fe f805 	bl	ba580 <memset>
   bc576:	4620      	mov	r0, r4
   bc578:	b002      	add	sp, #8
   bc57a:	bd10      	pop	{r4, pc}
   bc57c:	0000      	movs	r0, r0
	...

000bc580 <nan>:
   bc580:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc588 <nan+0x8>
   bc584:	4770      	bx	lr
   bc586:	bf00      	nop
   bc588:	00000000 	.word	0x00000000
   bc58c:	7ff80000 	.word	0x7ff80000

000bc590 <__ascii_wctomb>:
   bc590:	b149      	cbz	r1, bc5a6 <__ascii_wctomb+0x16>
   bc592:	2aff      	cmp	r2, #255	; 0xff
   bc594:	bf85      	ittet	hi
   bc596:	238a      	movhi	r3, #138	; 0x8a
   bc598:	6003      	strhi	r3, [r0, #0]
   bc59a:	700a      	strbls	r2, [r1, #0]
   bc59c:	f04f 30ff 	movhi.w	r0, #4294967295
   bc5a0:	bf98      	it	ls
   bc5a2:	2001      	movls	r0, #1
   bc5a4:	4770      	bx	lr
   bc5a6:	4608      	mov	r0, r1
   bc5a8:	4770      	bx	lr

000bc5aa <link_code_end>:
	...

000bc5ac <link_const_data_start>:
   bc5ac:	514d0400 	.word	0x514d0400
   bc5b0:	00045454 	.word	0x00045454
   bc5b4:	49514d06 	.word	0x49514d06
   bc5b8:	03706473 	.word	0x03706473
   bc5bc:	00000000 	.word	0x00000000
   bc5c0:	34fb0000 	.word	0x34fb0000
   bc5c4:	00805f9b 	.word	0x00805f9b
   bc5c8:	10008000 	.word	0x10008000
	...

000bc5d4 <dynalib_user>:
   bc5d4:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   bc5e4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bc5f4:	72697620 6c617574 73696400 6e6e6f63      virtual.disconn
   bc604:	65746365 32410064 73696420 203a2074     ected.A2 dist : 
   bc614:	64203341 00747369 00203a20 2e62616c     A3 dist. : .lab.
   bc624:	77656874 632e6c63 42006d6f 612f5241     thewcl.com.BAR/a
   bc634:	6e6f6772 53522f32 42004953 612f5241     rgon2/RSSI.BAR/a
   bc644:	6e6f6772 53522f33 61004953 61376566     rgon3/RSSI.afe7a
   bc654:	2d356363 39613333 3837342d 62622d66     cc5-33a9-478f-bb
   bc664:	382d3165 61343439 65383061 00343838     e1-8944aa08e884.

000bc674 <_ZTVN5spark10LogHandlerE>:
	...
   bc684:	000b4ac5 000b4aed                       .J...J..

000bc68c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bc694:	000b4b75 000b4ba9 000b8d19 000b8ebd     uK...K..........
   bc6a4:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   bc6b4:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   bc6c4:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   bc6d4:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
   bc6e4:	003e7525                                %u>.

000bc6e8 <_ZL4font>:
   bc6e8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bc6f8:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bc708:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bc718:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bc728:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bc738:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   bc748:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   bc758:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   bc768:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   bc778:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   bc788:	00000000 5f000000 07000000 14000700     ......._........
   bc798:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bc7a8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bc7b8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bc7c8:	08080800 00000808 20006060 02040810     ........``. ....
   bc7d8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bc7e8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bc7f8:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bc808:	00001e29 00000014 00003440 22140800     ).......@4....."
   bc818:	14141441 41001414 02081422 06095901     A......A"....Y..
   bc828:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bc838:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bc848:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bc858:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   bc868:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bc878:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bc888:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bc898:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bc8a8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bc8b8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bc8c8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bc8d8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bc8e8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bc8f8:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bc908:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bc918:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bc928:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bc938:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   bc948:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   bc958:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   bc968:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   bc978:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   bc988:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   bc998:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bc9a8:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   bc9b8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bc9c8:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   bc9d8:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   bc9e8:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   bc9f8:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bca08:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bca18:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bca28:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bca38:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   bca48:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   bca58:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   bca68:	00ff0000 ff101010 14141400 101000ff     ................
   bca78:	10ff00ff f010f010 fc141414 f7141400     ................
   bca88:	0000ff00 14ff00ff fc04f414 10171414     ................
   bca98:	1f10101f 14141f10 10001f14 00f01010     ................
   bcaa8:	1f000000 10101010 1010101f 0010f010     ................
   bcab8:	10ff0000 10101010 10101010 000010ff     ................
   bcac8:	0014ff00 ff00ff00 101f0000 fc000017     ................
   bcad8:	1414f404 14171017 f404f414 00ff0000     ................
   bcae8:	141414f7 14141414 14f700f7 14171414     ................
   bcaf8:	101f1010 1414141f 101014f4 00f010f0     ................
   bcb08:	1f101f00 1f000000 00000014 000014fc     ................
   bcb18:	10f010f0 ff10ff10 ff141414 10101014     ................
   bcb28:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   bcb38:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   bcb48:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   bcb58:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   bcb68:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   bcb78:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   bcb88:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   bcb98:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   bcba8:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   bcbb8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   bcbc8:	00000018 30001010 0101ff40 01011f00     .......0@.......
   bcbd8:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000bcbe8 <_ZTV12Adafruit_GFX>:
	...
   bcbf8:	000b56c1 000b7fcd 000b4ac5 000b50c7     .V.......J...P..
   bcc08:	000b50c9 000b50fb 000b50d7 000b50e9     .P...P...P...P..
   bcc18:	000b5009 000b50c7 000b52f3 000b52f1     .P...P...R...R..
   bcc28:	000b5113 000b5151 000b518b 000b51d1     .Q..QQ...Q...Q..
   bcc38:	000b51ed 000b5271                       .Q..qR..

000bcc40 <_ZTV16OledWingAdafruit>:
	...
   bcc48:	000b57d1 000b57f1 000b56c1 000b7fcd     .W...W...V......
   bcc58:	000b59b5 000b50c7 000b50c9 000b50fb     .Y...P...P...P..
   bcc68:	000b50d7 000b50e9 000b5009 000b50c7     .P...P...P...P..
   bcc78:	000b52f3 000b5b53 000b60fb 000b60ad     .R..S[...`...`..
   bcc88:	000b518b 000b51d1 000b51ed 000b5271     .Q...Q...Q..qR..

000bcc98 <_ZTVN8particle11SPISettingsE>:
	...
   bcca0:	000b4fb5 000b4f89 000b4f8b              .O...O...O..

000bccac <_ZL12splash1_data>:
   bccac:	00000000 00800100 00000000 00000000     ................
   bccbc:	00008003 00000000 07000000 000000c0     ................
   bcccc:	00000000 c0070000 00000000 00000000     ................
   bccdc:	00c00f00 00000000 00000000 0000e01f     ................
   bccec:	00000000 1f000000 000000e0 00000000     ................
   bccfc:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   bcd14:	0000f07f 00000000 7ff81f00 000000f0     ................
   bcd24:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bcd34:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bcd44:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bcd54:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bcd64:	00000000 fc030000 80ffff73 00000000     ........s.......
   bcd74:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bcd84:	000000ff 00000000 fc1ffe7f 00000000     ................
   bcd94:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bcda4:	0000e0ff 00000000 ff191f00 000000c0     ................
   bcdb4:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bcdc4:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bcdd4:	00000000 fcffff00 00000000 00000000     ................
   bcde4:	00feffff 00000000 ff000000 0000feff     ................
   bcdf4:	00000000 efff0100 000000fe 00000000     ................
   bce04:	fecfff01 00000000 03000000 00fe07ff     ................
   bce14:	00000000 fc030000 0000fe07 00000000     ................
   bce24:	03f00300 000000fe 00000000 fe008001     ................
	...
   bce3c:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bce54:	0000000c 07000000 00fc0080 00c00300     ................
   bce64:	80070000 0000fc01 0000c003 01800700     ................
   bce74:	030000fc 000000c0 e0018007 1e000000     ................
   bce84:	07000000 00e00180 001e0000 9ff7e37f     ................
   bce94:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bcea4:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bceb4:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bcec4:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bced4:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bcee4:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   bcef4:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bcf04:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bcf14:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bcf24:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bcf34:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bcf44:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bcf54:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bcf64:	5b6bfdff c0fd6adb                       ..k[.j..

000bcf6c <_ZL12splash2_data>:
   bcf6c:	00600000 00000000 00000000 00000000     ..`.............
   bcf7c:	0000e000 00000000 00000000 01000000     ................
   bcf8c:	000000e0 00000000 00000000 f0010000     ................
	...
   bcfa8:	00f00300 00000000 00000000 00000000     ................
   bcfb8:	0000f007 00000000 00000000 07000000     ................
   bcfc8:	000000f8 00000000 00000000 f80f0000     ................
   bcfd8:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bcfe8:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bcff8:	00c00300 010000fe ffff00e0 000000f8     ................
   bd008:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bd018:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bd028:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bd038:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bd048:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bd058:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bd068:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bd078:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bd088:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bd098:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bd0a8:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bd0b8:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bd0c8:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bd0d8:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bd0e8:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bd100:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bd110:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bd120:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bd130:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bd140:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bd14c <_ZTV16Adafruit_SSD1306>:
	...
   bd154:	000b5989 000b59a1 000b56c1 000b7fcd     .Y...Y...V......
   bd164:	000b59b5 000b50c7 000b50c9 000b50fb     .Y...P...P...P..
   bd174:	000b50d7 000b50e9 000b5009 000b50c7     .P...P...P...P..
   bd184:	000b52f3 000b5b53 000b60fb 000b60ad     .R..S[...`...`..
   bd194:	000b518b 000b51d1 000b51ed 000b5271     .Q...Q...Q..qR..

000bd1a4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bd1a4:	e0c08000 fefcf8f0                       ........

000bd1ac <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bd1ac:	07030100 7f3f1f0f                       ......?.

000bd1b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bd1b4:	a880d5ae                                ....

000bd1b8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bd1b8:	8d4000d3                                ..@.

000bd1bc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bd1bc:	c8a10020                                 ...

000bd1c0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bd1c0:	a6a440db                                 .@....

000bd1c6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bd1c6:	8f8102da                                ....

000bd1ca <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bd1ca:	                                         ...

000bd1cd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bd1cd:	                                         ...

000bd1d0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bd1d0:	21ff0022 00000000                       "..!....

000bd1d8 <_ZTVN5spark13EthernetClassE>:
	...
   bd1e0:	000b70c3 000b70b9 000b70af 000b70a5     .p...p...p...p..
   bd1f0:	000b7099 000b708d 000b9bf1 000b9bf9     .p...p..........
   bd200:	000b7081 000b7079 000b706f 000b7065     .p..yp..op..ep..
   bd210:	000b9c29                                )...

000bd214 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd214:	18100800 38302820 65737341 6f697472     .... (08Assertio
   bd224:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bd234:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bd244:	63736964 7265766f 20676e69 76726573     discovering serv
   bd254:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bd264:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bd274:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bd284:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bd294:	4e5f524f 00454e4f 6c696146 74206465     OR_NONE.Failed t
   bd2a4:	7061206f 646e6570 65657020 65432072     o append peer Ce
   bd2b4:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   bd2c4:	63656e6e 00646574 63736944 656e6e6f     nnected.Disconne
   bd2d4:	64657463 00000000                       cted....

000bd2dc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd2e4:	000b741d 000b7441 000b79df 000b744f     .t..At...y..Ot..
   bd2f4:	000b7421                                !t..

000bd2f8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd300:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   bd310:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   bd320:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   bd330:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   bd340:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
   bd350:	736c6961 00203d20 6c000a0d 6e66006e     ails = ....ln.fn
   bd360:	646f6300 65640065 6c696174 00000000     .code.detail....

000bd370 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd378:	000b8111 000b8137 000b80f5 000b9d43     ....7.......C...

000bd388 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd390:	000b85c1 000b85d9 000b8d19 000b8ebd     ................

000bd3a0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd3a8:	000b85ed 000b8601 000b8ef5 000b80fd     ................

000bd3b8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd3c0:	000b810f 000b8145 000b8c7d 000b80ff     ....E...}.......

000bd3d0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd3d8:	000b810d 000b8153 000b8529 000b8175     ....S...)...u...
   bd3e8:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   bd3f8:	007a2553 74637361 00656d69              S%z.asctime.

000bd404 <_ZTV9IPAddress>:
	...
   bd40c:	000b9205 000b91f5 000b91f7              ............

000bd418 <_ZTV9USBSerial>:
	...
   bd420:	000b9317 000b937f 000b9355 000b7fcd     ........U.......
   bd430:	000b9347 000b9319 000b9329 000b9379     G.......)...y...
   bd440:	000b9339 000b9311                       9.......

000bd448 <_ZTV11USARTSerial>:
	...
   bd450:	000b9421 000b948d 000b9465 000b7fcd     !.......e.......
   bd460:	000b9435 000b9451 000b9443 000b945f     5...Q...C..._...
   bd470:	000b9423 000b9427                       #...'...

000bd478 <_ZTV7TwoWire>:
	...
   bd480:	000b94d9 000b9523 000b94fb 000b94db     ....#...........
   bd490:	000b9503 000b950b 000b9513 000b951b     ................
   bd4a0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bd4b0:	203d2072 00006425                       r = %d..

000bd4b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4c0:	000b9621 000b9645 000b9b2f 000b9653     !...E.../...S...
   bd4d0:	000b9625                                %...

000bd4d4 <_ZTV9TCPClient>:
	...
   bd4dc:	000b9085 000b909d 000b959d 000b95b7     ................
   bd4ec:	000b99c5 000b95e1 000b983b 000b9615     ........;.......
   bd4fc:	000b98cd 000b970d 000b9869 000b9a79     ........i...y...
   bd50c:	000b9809 000b9617 000b95c9 000b9659     ............Y...
   bd51c:	000b96ed                                ....

000bd520 <_ZTVN5spark9WiFiClassE>:
	...
   bd528:	000b9b93 000b9b89 000b9b7f 000b9b35     ............5...
   bd538:	000b9b73 000b9b67 000b9bf1 000b9bf9     s...g...........
   bd548:	000b9b5b 000b9b53 000b9b49 000b9b3f     [...S...I...?...
   bd558:	000b9c29                                )...

000bd55c <_ZTVN5spark12NetworkClassE>:
	...
   bd564:	000b9bb1 000b9bbb 000b9bc5 000b9bcf     ................
   bd574:	000b9bd9 000b9be5 000b9bf1 000b9bf9     ................
   bd584:	000b9c01 000b9c0d 000b9c15 000b9c1f     ................
   bd594:	000b9c29 75007525 78343025               )...%u.u%04x.

000bd5a1 <_ZSt7nothrow>:
	...

000bd5a2 <_ZTSSt19_Sp_make_shared_tag>:
   bd5a2:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bd5b2:	5f646572 00676174                        red_tag...

000bd5bc <_ZTISt19_Sp_make_shared_tag>:
   bd5bc:	000bd5fc 000bd5a2                       ........

000bd5c4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd5c4:	000bd65c 000bd5d0 000bd680              \...........

000bd5d0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd5d0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bd5e0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bd5f0:	00000045                                E...

000bd5f4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd5f4:	00000000 000bd5c4 000ba315 000ba329     ............)...
   bd604:	000ba4bd 000ba4bd 000ba393 000ba2d5     ................
   bd614:	000ba37b 000ba33d 000ba307              {...=.......

000bd620 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd620:	000bd65c 000bd62c 000bd5c4              \...,.......

000bd62c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd62c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bd63c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bd64c:	456f666e 00000000                       nfoE....

000bd654 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd654:	00000000 000bd620 000ba3bd 000ba3d1     .... ...........
   bd664:	000ba4bd 000ba4bd 000ba393 000ba2d5     ................
   bd674:	000ba491 000ba41d 000ba3e5              ............

000bd680 <_ZTISt9type_info>:
   bd680:	000bd5fc 000bd688                       ........

000bd688 <_ZTSSt9type_info>:
   bd688:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bd698:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bd6a8:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bd6b8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bd6c8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bd6d8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bd6e8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bd6f8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bd708:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bd718:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bd728:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bd738 <fpi.1>:
   bd738:	00000035 fffffbce 000003cb 00000001     5...............
   bd748:	00000000                                ....

000bd74c <fpinan.0>:
   bd74c:	00000034 fffffbce 000003cb 00000001     4...............
   bd75c:	00000000                                ....

000bd760 <tinytens>:
   bd760:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bd770:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bd780:	64ac6f43 11680628                       Co.d(.h.

000bd788 <_ctype_>:
   bd788:	20202000 20202020 28282020 20282828     .         ((((( 
   bd798:	20202020 20202020 20202020 20202020                     
   bd7a8:	10108820 10101010 10101010 10101010      ...............
   bd7b8:	04040410 04040404 10040404 10101010     ................
   bd7c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bd7d8:	01010101 01010101 01010101 10101010     ................
   bd7e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bd7f8:	02020202 02020202 02020202 10101010     ................
   bd808:	00000020 00000000 00000000 00000000      ...............
	...
   bd888:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bd898:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bd8a8:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bd8b8:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bd8c8:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bd8d8:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bd8e8:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bd8f8:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bd908:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bd918:	78656874 0000632e                       thex.c..

000bd920 <_C_numeric_locale>:
   bd920:	000bd2c0 000bd35a 2003e3e4 4f500043     ....Z...... C.PO
   bd930:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bd940:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bd950:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bd960:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bd970:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bd980:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bd990:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bd9a0:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bd9b0:	00000063 00000000                       c.......

000bd9b8 <__mprec_bigtens>:
   bd9b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bd9c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bd9d8:	7f73bf3c 75154fdd                       <.s..O.u

000bd9e0 <__mprec_tens>:
   bd9e0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bd9f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bda00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bda10:	00000000 412e8480 00000000 416312d0     .......A......cA
   bda20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bda30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bda40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bda50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bda60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bda70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bda80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bda90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bdaa0:	79d99db4 44ea7843                       ...yCx.D

000bdaa8 <p05.0>:
   bdaa8:	00000005 00000019 0000007d              ........}...

000bdab4 <link_const_data_end>:
   bdab4:	000b4e9d 	.word	0x000b4e9d
   bdab8:	000b70cd 	.word	0x000b70cd
   bdabc:	000b7245 	.word	0x000b7245
   bdac0:	000b7fbd 	.word	0x000b7fbd
   bdac4:	000b8d09 	.word	0x000b8d09
   bdac8:	000b9069 	.word	0x000b9069
   bdacc:	000b90b1 	.word	0x000b90b1
   bdad0:	000b9b9d 	.word	0x000b9b9d
   bdad4:	000b9d01 	.word	0x000b9d01
