
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Capstone/capstoneMainArgon/target/5.3.0/argon/capstoneMainArgon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bb00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bfb20  000bfb20  0000fb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e4  2003e2dc  000bfb44  0001e2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000330  2003e4c0  2003e4c0  0002e4c0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bfd28  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bfd2c  000bfd2c  0001fd2c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bfd32  000bfd32  0001fd32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bfd56  000bfd56  0001fd56  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001a0ccd  00000000  00000000  0001fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001c7be  00000000  00000000  001c0a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000529a2  00000000  00000000  001dd1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003cf8  00000000  00000000  0022fb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d190  00000000  00000000  0023387f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00049e42  00000000  00000000  00240a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006352e  00000000  00000000  0028a851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00149bb9  00000000  00000000  002edd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bdb8  00000000  00000000  00437938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f007 faf7 	bl	bc040 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f007 fb19 	bl	bc090 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e2dc 	.word	0x2003e2dc
   b4a68:	000bfb44 	.word	0x000bfb44
   b4a6c:	2003e4c0 	.word	0x2003e4c0
   b4a70:	2003e4c0 	.word	0x2003e4c0
   b4a74:	2003e7f0 	.word	0x2003e7f0

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f006 f8c9 	bl	bac14 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bfafc 	.word	0x000bfafc
   b4a9c:	000bfb20 	.word	0x000bfb20

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 bf0e 	b.w	b58c0 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 fe51 	bl	b574c <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f006 b869 	b.w	bab84 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f003 b921 	b.w	b7cf8 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f003 b91f 	b.w	b7cf8 <malloc>

000b4aba <_ZdaPv>:
   b4aba:	f003 b925 	b.w	b7d08 <free>

000b4abe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4abe:	f003 b923 	b.w	b7d08 <free>
	...

000b4ac4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac6:	4a03      	ldr	r2, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x10>)
   b4ac8:	4903      	ldr	r1, [pc, #12]	; (b4ad8 <__cxa_pure_virtual+0x14>)
   b4aca:	200c      	movs	r0, #12
   b4acc:	f003 f848 	bl	b7b60 <panic_>
  while (1);
   b4ad0:	e7fe      	b.n	b4ad0 <__cxa_pure_virtual+0xc>
   b4ad2:	bf00      	nop
   b4ad4:	000b7755 	.word	0x000b7755
   b4ad8:	000be118 	.word	0x000be118

000b4adc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4adc:	7800      	ldrb	r0, [r0, #0]
   b4ade:	fab0 f080 	clz	r0, r0
   b4ae2:	0940      	lsrs	r0, r0, #5
   b4ae4:	4770      	bx	lr

000b4ae6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae6:	2301      	movs	r3, #1
   b4ae8:	7003      	strb	r3, [r0, #0]
   b4aea:	4770      	bx	lr

000b4aec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4aec:	4770      	bx	lr
	...

000b4af0 <_Z8callbackPcPhj>:
  display.setTextSize(1);
  display.setTextColor(WHITE); 
  display.setCursor(0,0);
}

void callback(char *topic, byte *payload, unsigned int length) {
   b4af0:	b5b0      	push	{r4, r5, r7, lr}

  //formats and extracts data from mqtt 
  char p[length + 1];
   b4af2:	f102 0308 	add.w	r3, r2, #8
void callback(char *topic, byte *payload, unsigned int length) {
   b4af6:	b088      	sub	sp, #32
  char p[length + 1];
   b4af8:	f023 0307 	bic.w	r3, r3, #7
void callback(char *topic, byte *payload, unsigned int length) {
   b4afc:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4afe:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char *topic, byte *payload, unsigned int length) {
   b4b02:	4614      	mov	r4, r2
   b4b04:	4605      	mov	r5, r0
  memcpy(p, payload, length);
   b4b06:	4668      	mov	r0, sp
   b4b08:	f007 fa9a 	bl	bc040 <memcpy>
  p[length] = NULL;
   b4b0c:	2300      	movs	r3, #0
  String s = p;
   b4b0e:	4669      	mov	r1, sp
   b4b10:	4638      	mov	r0, r7
  p[length] = NULL;
   b4b12:	f80d 3004 	strb.w	r3, [sp, r4]
  String s = p;
   b4b16:	f003 fad8 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
  int value = s.toFloat();
   b4b1a:	4638      	mov	r0, r7
   b4b1c:	f003 fb9e 	bl	b825c <_ZNK6String7toFloatEv>
   b4b20:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b24:	4629      	mov	r1, r5
   b4b26:	f107 0010 	add.w	r0, r7, #16
  int value = s.toFloat();
   b4b2a:	ee17 4a90 	vmov	r4, s15
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b2e:	f003 facc 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>

  if (callbackTopic.compareTo(A1_RSSI)) {
   b4b32:	4911      	ldr	r1, [pc, #68]	; (b4b78 <_Z8callbackPcPhj+0x88>)
   b4b34:	f107 0010 	add.w	r0, r7, #16
   b4b38:	f003 fb6e 	bl	b8218 <_ZNK6String9compareToERKS_>
   b4b3c:	b158      	cbz	r0, b4b56 <_Z8callbackPcPhj+0x66>
    Argon1_distance = value;
   b4b3e:	4b0f      	ldr	r3, [pc, #60]	; (b4b7c <_Z8callbackPcPhj+0x8c>)
  } else if (callbackTopic.compareTo(A2_RSSI)) {
    Argon2_distance = value;
  } else if (callbackTopic.compareTo(A3_RSSI)) {
    Argon3_distance = value;
   b4b40:	601c      	str	r4, [r3, #0]
  String callbackTopic = topic; //makes the mqtt topic of the data into an arduino string
   b4b42:	f107 0010 	add.w	r0, r7, #16
   b4b46:	f003 fa75 	bl	b8034 <_ZN6StringD1Ev>
  String s = p;
   b4b4a:	4638      	mov	r0, r7
   b4b4c:	f003 fa72 	bl	b8034 <_ZN6StringD1Ev>
  }

   b4b50:	3720      	adds	r7, #32
   b4b52:	46bd      	mov	sp, r7
   b4b54:	bdb0      	pop	{r4, r5, r7, pc}
  } else if (callbackTopic.compareTo(A2_RSSI)) {
   b4b56:	490a      	ldr	r1, [pc, #40]	; (b4b80 <_Z8callbackPcPhj+0x90>)
   b4b58:	f107 0010 	add.w	r0, r7, #16
   b4b5c:	f003 fb5c 	bl	b8218 <_ZNK6String9compareToERKS_>
   b4b60:	b108      	cbz	r0, b4b66 <_Z8callbackPcPhj+0x76>
    Argon2_distance = value;
   b4b62:	4b08      	ldr	r3, [pc, #32]	; (b4b84 <_Z8callbackPcPhj+0x94>)
   b4b64:	e7ec      	b.n	b4b40 <_Z8callbackPcPhj+0x50>
  } else if (callbackTopic.compareTo(A3_RSSI)) {
   b4b66:	4908      	ldr	r1, [pc, #32]	; (b4b88 <_Z8callbackPcPhj+0x98>)
   b4b68:	f107 0010 	add.w	r0, r7, #16
   b4b6c:	f003 fb54 	bl	b8218 <_ZNK6String9compareToERKS_>
   b4b70:	2800      	cmp	r0, #0
   b4b72:	d0e6      	beq.n	b4b42 <_Z8callbackPcPhj+0x52>
    Argon3_distance = value;
   b4b74:	4b05      	ldr	r3, [pc, #20]	; (b4b8c <_Z8callbackPcPhj+0x9c>)
   b4b76:	e7e3      	b.n	b4b40 <_Z8callbackPcPhj+0x50>
   b4b78:	2003e4c0 	.word	0x2003e4c0
   b4b7c:	2003e4f0 	.word	0x2003e4f0
   b4b80:	2003e4d0 	.word	0x2003e4d0
   b4b84:	2003e4f4 	.word	0x2003e4f4
   b4b88:	2003e4e0 	.word	0x2003e4e0
   b4b8c:	2003e4f8 	.word	0x2003e4f8

000b4b90 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4b90:	b570      	push	{r4, r5, r6, lr}
   b4b92:	4605      	mov	r5, r0
   b4b94:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4b96:	4616      	mov	r6, r2
   b4b98:	b942      	cbnz	r2, b4bac <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4b9a:	6803      	ldr	r3, [r0, #0]
   b4b9c:	b2c9      	uxtb	r1, r1
   b4b9e:	689b      	ldr	r3, [r3, #8]
   b4ba0:	4798      	blx	r3
        n += println();
   b4ba2:	4628      	mov	r0, r5
    }
   b4ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4ba8:	f004 bf57 	b.w	b9a5a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4bac:	2900      	cmp	r1, #0
   b4bae:	da0a      	bge.n	b4bc6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4bb0:	2a0a      	cmp	r2, #10
   b4bb2:	d108      	bne.n	b4bc6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4bb4:	212d      	movs	r1, #45	; 0x2d
   b4bb6:	f004 ff4d 	bl	b9a54 <_ZN5Print5printEc>
            val = -n;
   b4bba:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4bbc:	b2f2      	uxtb	r2, r6
   b4bbe:	4628      	mov	r0, r5
   b4bc0:	f004 ff61 	bl	b9a86 <_ZN5Print11printNumberEmh>
   b4bc4:	e7ed      	b.n	b4ba2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4bc6:	4621      	mov	r1, r4
   b4bc8:	e7f8      	b.n	b4bbc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>
	...

000b4bcc <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4bcc:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4bce:	f002 fdc9 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4bd2:	4b03      	ldr	r3, [pc, #12]	; (b4be0 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4bd4:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4bda:	f003 b875 	b.w	b7cc8 <spark_process>
   b4bde:	bf00      	nop
   b4be0:	2003e740 	.word	0x2003e740

000b4be4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4be4:	4b0a      	ldr	r3, [pc, #40]	; (b4c10 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4be6:	b510      	push	{r4, lr}
   b4be8:	4604      	mov	r4, r0
   b4bea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4bec:	f005 f94a 	bl	b9e84 <_ZN5spark10LogManager8instanceEv>
   b4bf0:	4621      	mov	r1, r4
   b4bf2:	f005 fb82 	bl	ba2fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4bf6:	f006 f92f 	bl	bae58 <_Z16_fetch_usbserialv>
   b4bfa:	f006 f921 	bl	bae40 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4bfe:	4620      	mov	r0, r4
   b4c00:	4b04      	ldr	r3, [pc, #16]	; (b4c14 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4c02:	f840 3b04 	str.w	r3, [r0], #4
   b4c06:	f005 fa13 	bl	ba030 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4c0a:	4620      	mov	r0, r4
   b4c0c:	bd10      	pop	{r4, pc}
   b4c0e:	bf00      	nop
   b4c10:	000be254 	.word	0x000be254
   b4c14:	000be23c 	.word	0x000be23c

000b4c18 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4c18:	b510      	push	{r4, lr}
   b4c1a:	4604      	mov	r4, r0
    }
   b4c1c:	f7ff ffe2 	bl	b4be4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4c20:	4620      	mov	r0, r4
   b4c22:	2124      	movs	r1, #36	; 0x24
   b4c24:	f7ff ff4b 	bl	b4abe <_ZdlPvj>
   b4c28:	4620      	mov	r0, r4
   b4c2a:	bd10      	pop	{r4, pc}

000b4c2c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4c2c:	b40e      	push	{r1, r2, r3}
   b4c2e:	b500      	push	{lr}
   b4c30:	b08c      	sub	sp, #48	; 0x30
   b4c32:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4c34:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4c38:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4c3c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c3e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4c42:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c44:	6801      	ldr	r1, [r0, #0]
   b4c46:	aa04      	add	r2, sp, #16
   b4c48:	201e      	movs	r0, #30
    attr.flags = 0;
   b4c4a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c4e:	f002 ff97 	bl	b7b80 <log_message_v>
}
   b4c52:	b00c      	add	sp, #48	; 0x30
   b4c54:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c58:	b003      	add	sp, #12
   b4c5a:	4770      	bx	lr

000b4c5c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
void scanResultCallback(const BleScanResult *scanResult, void *context) {
   b4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c60:	b08e      	sub	sp, #56	; 0x38
   b4c62:	4604      	mov	r4, r0
	BleUuid foundServiceUuid;
   b4c64:	a809      	add	r0, sp, #36	; 0x24
   b4c66:	f003 fbe9 	bl	b843c <_ZN8particle7BleUuidC1Ev>
	size_t svcCount = scanResult->advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4c6a:	a909      	add	r1, sp, #36	; 0x24
   b4c6c:	2201      	movs	r2, #1
   b4c6e:	f104 0008 	add.w	r0, r4, #8
   b4c72:	f004 fc79 	bl	b9568 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b4c76:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b4c7a:	9207      	str	r2, [sp, #28]
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b4c7c:	2100      	movs	r1, #0
   b4c7e:	4620      	mov	r0, r4
   b4c80:	f003 fba6 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
   b4c84:	2101      	movs	r1, #1
   b4c86:	9006      	str	r0, [sp, #24]
   b4c88:	4620      	mov	r0, r4
   b4c8a:	f003 fba1 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
   b4c8e:	2102      	movs	r1, #2
   b4c90:	4605      	mov	r5, r0
   b4c92:	4620      	mov	r0, r4
   b4c94:	f003 fb9c 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b4c98:	2103      	movs	r1, #3
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b4c9a:	4606      	mov	r6, r0
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	f003 fb97 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
   b4ca2:	2104      	movs	r1, #4
   b4ca4:	4607      	mov	r7, r0
   b4ca6:	4620      	mov	r0, r4
   b4ca8:	f003 fb92 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
   b4cac:	2105      	movs	r1, #5
   b4cae:	4680      	mov	r8, r0
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	f003 fb8d 	bl	b83d0 <_ZNK8particle10BleAddressixEh>
	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b4cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b4cba:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b4cbe:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b4cc2:	490a      	ldr	r1, [pc, #40]	; (b4cec <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x90>)
   b4cc4:	480a      	ldr	r0, [pc, #40]	; (b4cf0 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x94>)
   b4cc6:	9500      	str	r5, [sp, #0]
   b4cc8:	f7ff ffb0 	bl	b4c2c <_ZNK5spark6Logger4infoEPKcz>
	peripheralAddr = scanResult->address();
   b4ccc:	4621      	mov	r1, r4
   b4cce:	4809      	ldr	r0, [pc, #36]	; (b4cf4 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x98>)
   b4cd0:	f003 fb83 	bl	b83da <_ZN8particle10BleAddressaSERKS0_>
	rssi = scanResult->rssi();
   b4cd4:	4b08      	ldr	r3, [pc, #32]	; (b4cf8 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x9c>)
   b4cd6:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b4cda:	601a      	str	r2, [r3, #0]
	BLE.stopScanning();
   b4cdc:	f003 fd6c 	bl	b87b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ce0:	f003 fdcd 	bl	b887e <_ZNK8particle14BleLocalDevice12stopScanningEv>
}
   b4ce4:	b00e      	add	sp, #56	; 0x38
   b4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4cea:	bf00      	nop
   b4cec:	000be12d 	.word	0x000be12d
   b4cf0:	2003e6b8 	.word	0x2003e6b8
   b4cf4:	2003e64c 	.word	0x2003e64c
   b4cf8:	2003e654 	.word	0x2003e654

000b4cfc <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4cfc:	6803      	ldr	r3, [r0, #0]
   b4cfe:	b12b      	cbz	r3, b4d0c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4d00:	6842      	ldr	r2, [r0, #4]
   b4d02:	4293      	cmp	r3, r2
   b4d04:	d202      	bcs.n	b4d0c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4d06:	4618      	mov	r0, r3
   b4d08:	f007 b979 	b.w	bbffe <atoi>
   b4d0c:	2000      	movs	r0, #0
   b4d0e:	4770      	bx	lr

000b4d10 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4d10:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4d12:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4d14:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4d16:	b145      	cbz	r5, b4d2a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4d18:	6843      	ldr	r3, [r0, #4]
   b4d1a:	429d      	cmp	r5, r3
   b4d1c:	d205      	bcs.n	b4d2a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4d1e:	4628      	mov	r0, r5
   b4d20:	f7ff fe6c 	bl	b49fc <strlen>
   b4d24:	3001      	adds	r0, #1
   b4d26:	4405      	add	r5, r0
   b4d28:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	bd38      	pop	{r3, r4, r5, pc}

000b4d2e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d30:	4604      	mov	r4, r0
   b4d32:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4d34:	460d      	mov	r5, r1
   b4d36:	b921      	cbnz	r1, b4d42 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4d38:	6803      	ldr	r3, [r0, #0]
   b4d3a:	1c7a      	adds	r2, r7, #1
   b4d3c:	6042      	str	r2, [r0, #4]
   b4d3e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4d42:	4608      	mov	r0, r1
   b4d44:	f7ff fe5a 	bl	b49fc <strlen>
    if (len + l > buff_size)
   b4d48:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4d4a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4d4c:	19f2      	adds	r2, r6, r7
   b4d4e:	429a      	cmp	r2, r3
   b4d50:	d8f6      	bhi.n	b4d40 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4d52:	6820      	ldr	r0, [r4, #0]
   b4d54:	4632      	mov	r2, r6
   b4d56:	4629      	mov	r1, r5
   b4d58:	4438      	add	r0, r7
   b4d5a:	f007 f971 	bl	bc040 <memcpy>
    len += l;
   b4d5e:	6860      	ldr	r0, [r4, #4]
   b4d60:	4430      	add	r0, r6
   b4d62:	6060      	str	r0, [r4, #4]
   b4d64:	e7ec      	b.n	b4d40 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4d68 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4d68:	b538      	push	{r3, r4, r5, lr}
   b4d6a:	4604      	mov	r4, r0
   b4d6c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4d6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d72:	6825      	ldr	r5, [r4, #0]
   b4d74:	4a04      	ldr	r2, [pc, #16]	; (b4d88 <_ZN10BlynkParam3addEi+0x20>)
   b4d76:	1a09      	subs	r1, r1, r0
   b4d78:	4428      	add	r0, r5
   b4d7a:	f002 ffd5 	bl	b7d28 <snprintf>
   b4d7e:	6863      	ldr	r3, [r4, #4]
   b4d80:	3001      	adds	r0, #1
   b4d82:	4403      	add	r3, r0
   b4d84:	6063      	str	r3, [r4, #4]
    }
   b4d86:	bd38      	pop	{r3, r4, r5, pc}
   b4d88:	000be15a 	.word	0x000be15a

000b4d8c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4d8c:	b538      	push	{r3, r4, r5, lr}
   b4d8e:	4604      	mov	r4, r0
   b4d90:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4d92:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d96:	6825      	ldr	r5, [r4, #0]
   b4d98:	4a04      	ldr	r2, [pc, #16]	; (b4dac <_ZN10BlynkParam3addEl+0x20>)
   b4d9a:	1a09      	subs	r1, r1, r0
   b4d9c:	4428      	add	r0, r5
   b4d9e:	f002 ffc3 	bl	b7d28 <snprintf>
   b4da2:	6863      	ldr	r3, [r4, #4]
   b4da4:	3001      	adds	r0, #1
   b4da6:	4403      	add	r3, r0
   b4da8:	6063      	str	r3, [r4, #4]
    }
   b4daa:	bd38      	pop	{r3, r4, r5, pc}
   b4dac:	000be15d 	.word	0x000be15d

000b4db0 <_Z14format_displayv>:
void format_display() {
   b4db0:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4db2:	4c07      	ldr	r4, [pc, #28]	; (b4dd0 <_Z14format_displayv+0x20>)
   b4db4:	4620      	mov	r0, r4
   b4db6:	f002 f941 	bl	b703c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4dba:	2101      	movs	r1, #1
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	f001 faa6 	bl	b630e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4dc2:	2200      	movs	r2, #0
   b4dc4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4dc8:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
   b4dcc:	bd10      	pop	{r4, pc}
   b4dce:	bf00      	nop
   b4dd0:	2003e5b8 	.word	0x2003e5b8

000b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dd4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4dd6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dda:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ddc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4dde:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4de2:	42ae      	cmp	r6, r5
   b4de4:	d004      	beq.n	b4df0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4de6:	4628      	mov	r0, r5
   b4de8:	f003 f924 	bl	b8034 <_ZN6StringD1Ev>
   b4dec:	3514      	adds	r5, #20
   b4dee:	e7f8      	b.n	b4de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4df0:	6820      	ldr	r0, [r4, #0]
   b4df2:	f002 ff89 	bl	b7d08 <free>
    AllocatorT::free(data_);
}
   b4df6:	4620      	mov	r0, r4
   b4df8:	bd70      	pop	{r4, r5, r6, pc}

000b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4dfa:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4dfc:	2300      	movs	r3, #0
   b4dfe:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4e00:	6800      	ldr	r0, [r0, #0]
   b4e02:	f006 fb7b 	bl	bb4fc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4e0a:	f002 bc2e 	b.w	b766a <BlynkNoOpCbk>

000b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4e0e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e12:	4604      	mov	r4, r0
   b4e14:	460d      	mov	r5, r1
   b4e16:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4e18:	d916      	bls.n	b4e48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4e1a:	4290      	cmp	r0, r2
   b4e1c:	d215      	bcs.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4e1e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4e22:	1a75      	subs	r5, r6, r1
   b4e24:	f1a1 0714 	sub.w	r7, r1, #20
   b4e28:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e2a:	42b7      	cmp	r7, r6
   b4e2c:	d01c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e2e:	b12c      	cbz	r4, b4e3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e30:	4631      	mov	r1, r6
   b4e32:	4620      	mov	r0, r4
   b4e34:	f003 f97a 	bl	b812c <_ZN6StringC1EOS_>
   b4e38:	7c33      	ldrb	r3, [r6, #16]
   b4e3a:	7423      	strb	r3, [r4, #16]
   b4e3c:	4630      	mov	r0, r6
   b4e3e:	f003 f8f9 	bl	b8034 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e42:	3e14      	subs	r6, #20
   b4e44:	3c14      	subs	r4, #20
   b4e46:	e7f0      	b.n	b4e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e48:	d00e      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e4a:	42b5      	cmp	r5, r6
   b4e4c:	d00c      	beq.n	b4e68 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e4e:	b12c      	cbz	r4, b4e5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e50:	4629      	mov	r1, r5
   b4e52:	4620      	mov	r0, r4
   b4e54:	f003 f96a 	bl	b812c <_ZN6StringC1EOS_>
   b4e58:	7c2b      	ldrb	r3, [r5, #16]
   b4e5a:	7423      	strb	r3, [r4, #16]
   b4e5c:	4628      	mov	r0, r5
   b4e5e:	f003 f8e9 	bl	b8034 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e62:	3514      	adds	r5, #20
   b4e64:	3414      	adds	r4, #20
   b4e66:	e7f0      	b.n	b4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e6e:	2300      	movs	r3, #0
   b4e70:	e9c0 3300 	strd	r3, r3, [r0]
   b4e74:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e76:	684f      	ldr	r7, [r1, #4]
   b4e78:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e7a:	4604      	mov	r4, r0
   b4e7c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e7e:	dd23      	ble.n	b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e80:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e84:	fb08 f007 	mul.w	r0, r8, r7
   b4e88:	f002 ff36 	bl	b7cf8 <malloc>
            if (!d) {
   b4e8c:	4605      	mov	r5, r0
   b4e8e:	b1d8      	cbz	r0, b4ec8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e94:	fb08 1202 	mla	r2, r8, r2, r1
   b4e98:	f7ff ffb9 	bl	b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e9c:	6820      	ldr	r0, [r4, #0]
   b4e9e:	f002 ff33 	bl	b7d08 <free>
        data_ = d;
   b4ea2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4ea4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4ea6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4eaa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4eae:	45b8      	cmp	r8, r7
   b4eb0:	d008      	beq.n	b4ec4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4eb2:	4639      	mov	r1, r7
   b4eb4:	4628      	mov	r0, r5
   b4eb6:	f003 f953 	bl	b8160 <_ZN6StringC1ERKS_>
   b4eba:	7c3b      	ldrb	r3, [r7, #16]
   b4ebc:	742b      	strb	r3, [r5, #16]
   b4ebe:	3714      	adds	r7, #20
   b4ec0:	3514      	adds	r5, #20
   b4ec2:	e7f4      	b.n	b4eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4ec4:	6873      	ldr	r3, [r6, #4]
   b4ec6:	6063      	str	r3, [r4, #4]
}
   b4ec8:	4620      	mov	r0, r4
   b4eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4ed0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4ed4:	188f      	adds	r7, r1, r2
   b4ed6:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4ed8:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4eda:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4ede:	4606      	mov	r6, r0
   b4ee0:	4689      	mov	r9, r1
   b4ee2:	4690      	mov	r8, r2
    if (it >= param.end())
   b4ee4:	f080 80c2 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4ee8:	a805      	add	r0, sp, #20
   b4eea:	880d      	ldrh	r5, [r1, #0]
   b4eec:	f7ff ff10 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b4ef0:	6803      	ldr	r3, [r0, #0]
   b4ef2:	42bb      	cmp	r3, r7
   b4ef4:	f080 80ba 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4ef8:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4efa:	7803      	ldrb	r3, [r0, #0]
   b4efc:	2b41      	cmp	r3, #65	; 0x41
   b4efe:	d149      	bne.n	b4f94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4f00:	3001      	adds	r0, #1
   b4f02:	f007 f87c 	bl	bbffe <atoi>
   b4f06:	2805      	cmp	r0, #5
   b4f08:	dd37      	ble.n	b4f7a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4f0a:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4f0c:	f247 2376 	movw	r3, #29302	; 0x7276
   b4f10:	429d      	cmp	r5, r3
   b4f12:	f000 80d3 	beq.w	b50bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4f16:	d841      	bhi.n	b4f9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4f18:	f247 2361 	movw	r3, #29281	; 0x7261
   b4f1c:	429d      	cmp	r5, r3
   b4f1e:	f000 80a8 	beq.w	b5072 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4f22:	f247 2364 	movw	r3, #29284	; 0x7264
   b4f26:	429d      	cmp	r5, r3
   b4f28:	d06b      	beq.n	b5002 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4f2a:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4f2e:	429d      	cmp	r5, r3
   b4f30:	d141      	bne.n	b4fb6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4f32:	4d78      	ldr	r5, [pc, #480]	; (b5114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4f34:	4e78      	ldr	r6, [pc, #480]	; (b5118 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4f36:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b512c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4f3a:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4f3c:	42b8      	cmp	r0, r7
   b4f3e:	f080 8095 	bcs.w	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4f42:	7803      	ldrb	r3, [r0, #0]
   b4f44:	2b41      	cmp	r3, #65	; 0x41
   b4f46:	d14b      	bne.n	b4fe0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4f48:	3001      	adds	r0, #1
   b4f4a:	f007 f858 	bl	bbffe <atoi>
   b4f4e:	2805      	cmp	r0, #5
   b4f50:	dd39      	ble.n	b4fc6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4f52:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4f54:	a805      	add	r0, sp, #20
   b4f56:	f7ff fedb 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4f5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4f5e:	4629      	mov	r1, r5
   b4f60:	4648      	mov	r0, r9
   b4f62:	f7ff fd41 	bl	b49e8 <strcmp>
   b4f66:	4601      	mov	r1, r0
   b4f68:	2800      	cmp	r0, #0
   b4f6a:	d13d      	bne.n	b4fe8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	f006 fe29 	bl	bbbc4 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4f72:	a805      	add	r0, sp, #20
   b4f74:	f7ff fecc 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4f78:	e7df      	b.n	b4f3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4f7a:	9805      	ldr	r0, [sp, #20]
   b4f7c:	3001      	adds	r0, #1
   b4f7e:	f007 f83e 	bl	bbffe <atoi>
   b4f82:	2800      	cmp	r0, #0
   b4f84:	dbc1      	blt.n	b4f0a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4f86:	9805      	ldr	r0, [sp, #20]
   b4f88:	3001      	adds	r0, #1
   b4f8a:	f007 f838 	bl	bbffe <atoi>
   b4f8e:	300e      	adds	r0, #14
   b4f90:	b2c4      	uxtb	r4, r0
   b4f92:	e7bb      	b.n	b4f0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4f94:	a805      	add	r0, sp, #20
   b4f96:	f7ff feb1 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b4f9a:	e7f9      	b.n	b4f90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4f9c:	f247 7364 	movw	r3, #30564	; 0x7764
   b4fa0:	429d      	cmp	r5, r3
   b4fa2:	d04f      	beq.n	b5044 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4fa4:	f247 7376 	movw	r3, #30582	; 0x7776
   b4fa8:	429d      	cmp	r5, r3
   b4faa:	f000 8097 	beq.w	b50dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b4fae:	f247 7361 	movw	r3, #30561	; 0x7761
   b4fb2:	429d      	cmp	r5, r3
   b4fb4:	d06f      	beq.n	b5096 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4fb6:	2300      	movs	r3, #0
   b4fb8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4fbc:	2202      	movs	r2, #2
   b4fbe:	9200      	str	r2, [sp, #0]
   b4fc0:	8b72      	ldrh	r2, [r6, #26]
   b4fc2:	4619      	mov	r1, r3
   b4fc4:	e03a      	b.n	b503c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4fc6:	9805      	ldr	r0, [sp, #20]
   b4fc8:	3001      	adds	r0, #1
   b4fca:	f007 f818 	bl	bbffe <atoi>
   b4fce:	2800      	cmp	r0, #0
   b4fd0:	dbbf      	blt.n	b4f52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b4fd2:	9805      	ldr	r0, [sp, #20]
   b4fd4:	3001      	adds	r0, #1
   b4fd6:	f007 f812 	bl	bbffe <atoi>
   b4fda:	300e      	adds	r0, #14
   b4fdc:	b2c4      	uxtb	r4, r0
   b4fde:	e7b9      	b.n	b4f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4fe0:	a805      	add	r0, sp, #20
   b4fe2:	f7ff fe8b 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b4fe6:	e7f9      	b.n	b4fdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4fe8:	4631      	mov	r1, r6
   b4fea:	4648      	mov	r0, r9
   b4fec:	f7ff fcfc 	bl	b49e8 <strcmp>
   b4ff0:	b128      	cbz	r0, b4ffe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b4ff2:	4641      	mov	r1, r8
   b4ff4:	4648      	mov	r0, r9
   b4ff6:	f7ff fcf7 	bl	b49e8 <strcmp>
   b4ffa:	2800      	cmp	r0, #0
   b4ffc:	d1b9      	bne.n	b4f72 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b4ffe:	2101      	movs	r1, #1
   b5000:	e7b4      	b.n	b4f6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5002:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5004:	4945      	ldr	r1, [pc, #276]	; (b511c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b5006:	9307      	str	r3, [sp, #28]
   b5008:	a807      	add	r0, sp, #28
   b500a:	2310      	movs	r3, #16
   b500c:	2500      	movs	r5, #0
   b500e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5012:	f7ff fe8c 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5016:	a807      	add	r0, sp, #28
   b5018:	4621      	mov	r1, r4
   b501a:	f7ff fea5 	bl	b4d68 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b501e:	4620      	mov	r0, r4
   b5020:	f006 fdfa 	bl	bbc18 <digitalRead>
        rsp.add(analogRead(pin));
   b5024:	4601      	mov	r1, r0
   b5026:	a807      	add	r0, sp, #28
   b5028:	f7ff feb0 	bl	b4d8c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b502c:	9b08      	ldr	r3, [sp, #32]
   b502e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5032:	3b01      	subs	r3, #1
   b5034:	9300      	str	r3, [sp, #0]
   b5036:	9b07      	ldr	r3, [sp, #28]
   b5038:	462a      	mov	r2, r5
   b503a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b503c:	4630      	mov	r0, r6
   b503e:	f000 fa85 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b5042:	e013      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b5044:	a805      	add	r0, sp, #20
   b5046:	f7ff fe63 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b504a:	6803      	ldr	r3, [r0, #0]
   b504c:	429f      	cmp	r7, r3
   b504e:	d90d      	bls.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b5050:	b2a4      	uxth	r4, r4
   b5052:	2101      	movs	r1, #1
   b5054:	4620      	mov	r0, r4
   b5056:	f006 fdb5 	bl	bbbc4 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b505a:	a805      	add	r0, sp, #20
   b505c:	f7ff fe4e 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b5060:	1e01      	subs	r1, r0, #0
   b5062:	bf18      	it	ne
   b5064:	2101      	movne	r1, #1
   b5066:	4620      	mov	r0, r4
   b5068:	f006 fdbd 	bl	bbbe6 <digitalWrite>
    }
}
   b506c:	b00f      	add	sp, #60	; 0x3c
   b506e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5072:	ab0a      	add	r3, sp, #40	; 0x28
   b5074:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b5076:	a807      	add	r0, sp, #28
   b5078:	2310      	movs	r3, #16
   b507a:	4929      	ldr	r1, [pc, #164]	; (b5120 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b507c:	2500      	movs	r5, #0
   b507e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5082:	f7ff fe54 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5086:	a807      	add	r0, sp, #28
   b5088:	4621      	mov	r1, r4
   b508a:	f7ff fe6d 	bl	b4d68 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b508e:	4620      	mov	r0, r4
   b5090:	f006 fdd5 	bl	bbc3e <analogRead>
   b5094:	e7c6      	b.n	b5024 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b5096:	a805      	add	r0, sp, #20
   b5098:	f7ff fe3a 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b509c:	6803      	ldr	r3, [r0, #0]
   b509e:	429f      	cmp	r7, r3
   b50a0:	d9e4      	bls.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b50a2:	b2a4      	uxth	r4, r4
   b50a4:	2101      	movs	r1, #1
   b50a6:	4620      	mov	r0, r4
   b50a8:	f006 fd8c 	bl	bbbc4 <pinMode>
        analogWrite(pin, it.asInt());
   b50ac:	a805      	add	r0, sp, #20
   b50ae:	f7ff fe25 	bl	b4cfc <_ZNK10BlynkParam8iterator5asIntEv>
   b50b2:	4601      	mov	r1, r0
   b50b4:	4620      	mov	r0, r4
   b50b6:	f006 fdd9 	bl	bbc6c <_Z11analogWritetm>
    } break;
   b50ba:	e7d7      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b50bc:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b50be:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b50c2:	f002 fad3 	bl	b766c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b50c6:	4603      	mov	r3, r0
            handler(req);
   b50c8:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b50ca:	b123      	cbz	r3, b50d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b50cc:	4a15      	ldr	r2, [pc, #84]	; (b5124 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b50ce:	4293      	cmp	r3, r2
   b50d0:	d001      	beq.n	b50d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b50d2:	4798      	blx	r3
   b50d4:	e7ca      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b50d6:	f002 fac6 	bl	b7666 <BlynkWidgetRead>
        }
    }
   b50da:	e7c7      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b50dc:	a805      	add	r0, sp, #20
   b50de:	f7ff fe17 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b50e2:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b50e4:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b50e8:	eba3 0109 	sub.w	r1, r3, r9
   b50ec:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b50f0:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b50f2:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b50f6:	910c      	str	r1, [sp, #48]	; 0x30
   b50f8:	f002 fac2 	bl	b7680 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b50fc:	4603      	mov	r3, r0
            handler(req, param);
   b50fe:	a90a      	add	r1, sp, #40	; 0x28
   b5100:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5102:	b123      	cbz	r3, b510e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b5104:	4a08      	ldr	r2, [pc, #32]	; (b5128 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b5106:	4293      	cmp	r3, r2
   b5108:	d001      	beq.n	b510e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b510a:	4798      	blx	r3
   b510c:	e7ae      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b510e:	f002 faab 	bl	b7668 <BlynkWidgetWrite>
    } break;
   b5112:	e7ab      	b.n	b506c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b5114:	000be161 	.word	0x000be161
   b5118:	000be164 	.word	0x000be164
   b511c:	000be16c 	.word	0x000be16c
   b5120:	000be16f 	.word	0x000be16f
   b5124:	000b7667 	.word	0x000b7667
   b5128:	000b7669 	.word	0x000b7669
   b512c:	000be168 	.word	0x000be168

000b5130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5134:	b08c      	sub	sp, #48	; 0x30
   b5136:	af04      	add	r7, sp, #16
   b5138:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b513a:	2205      	movs	r2, #5
   b513c:	6800      	ldr	r0, [r0, #0]
   b513e:	1d39      	adds	r1, r7, #4
   b5140:	f004 fd05 	bl	b9b4e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5144:	b3a8      	cbz	r0, b51b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5146:	2805      	cmp	r0, #5
   b5148:	d004      	beq.n	b5154 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b514a:	2000      	movs	r0, #0
}
   b514c:	3720      	adds	r7, #32
   b514e:	46bd      	mov	sp, r7
   b5150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5154:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5158:	f002 fb9a 	bl	b7890 <inet_ntohs>
   b515c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5160:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b5164:	f002 fb94 	bl	b7890 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5168:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b516c:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5170:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b5172:	2b00      	cmp	r3, #0
   b5174:	d0e9      	beq.n	b514a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5176:	793b      	ldrb	r3, [r7, #4]
   b5178:	bb23      	cbnz	r3, b51c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b517a:	f002 fa72 	bl	b7662 <_Z11BlynkMillisv>
   b517e:	4602      	mov	r2, r0
   b5180:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b5182:	7f60      	ldrb	r0, [r4, #29]
   b5184:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5188:	b9c0      	cbnz	r0, b51bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b518a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b518e:	2901      	cmp	r1, #1
   b5190:	d114      	bne.n	b51bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b5192:	2b09      	cmp	r3, #9
   b5194:	d00f      	beq.n	b51b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5196:	2bc8      	cmp	r3, #200	; 0xc8
   b5198:	d001      	beq.n	b519e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b519a:	2b04      	cmp	r3, #4
   b519c:	d1d6      	bne.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b519e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b51a0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b51a2:	4620      	mov	r0, r4
                state = CONNECTED;
   b51a4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b51a6:	f000 fa81 	bl	b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b51aa:	f7ff fd0f 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b51ae:	f002 fa5c 	bl	b766a <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b51b2:	2001      	movs	r0, #1
   b51b4:	e7ca      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b51b6:	2303      	movs	r3, #3
   b51b8:	7763      	strb	r3, [r4, #29]
                break;
   b51ba:	e7c7      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b51bc:	1f58      	subs	r0, r3, #5
   b51be:	bf18      	it	ne
   b51c0:	2001      	movne	r0, #1
   b51c2:	e7c3      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b51c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b51c8:	d903      	bls.n	b51d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b51ca:	4620      	mov	r0, r4
   b51cc:	f7ff fe15 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b51d0:	e7ef      	b.n	b51b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b51d2:	f100 0308 	add.w	r3, r0, #8
   b51d6:	f023 0307 	bic.w	r3, r3, #7
   b51da:	466e      	mov	r6, sp
   b51dc:	ebad 0d03 	sub.w	sp, sp, r3
   b51e0:	ad04      	add	r5, sp, #16
   b51e2:	4602      	mov	r2, r0
   b51e4:	4629      	mov	r1, r5
   b51e6:	6820      	ldr	r0, [r4, #0]
   b51e8:	f004 fcb1 	bl	b9b4e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b51ec:	4580      	cmp	r8, r0
   b51ee:	f04f 0000 	mov.w	r0, #0
   b51f2:	d17f      	bne.n	b52f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b51f4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b51f8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b51fa:	f002 fa32 	bl	b7662 <_Z11BlynkMillisv>
    switch (hdr.type)
   b51fe:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5200:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b5202:	2b14      	cmp	r3, #20
   b5204:	f000 80a6 	beq.w	b5354 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5208:	d848      	bhi.n	b529c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b520a:	2b0f      	cmp	r3, #15
   b520c:	f000 80a2 	beq.w	b5354 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5210:	d807      	bhi.n	b5222 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b5212:	2b02      	cmp	r3, #2
   b5214:	d048      	beq.n	b52a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b5216:	2b06      	cmp	r3, #6
   b5218:	d051      	beq.n	b52be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b521a:	4620      	mov	r0, r4
   b521c:	f7ff fded 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5220:	e058      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b5222:	2b11      	cmp	r3, #17
   b5224:	d1f9      	bne.n	b521a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b5226:	2300      	movs	r3, #0
   b5228:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b522a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b522e:	442b      	add	r3, r5
        if (it >= param.end())
   b5230:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5232:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b5236:	d24d      	bcs.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b5238:	f107 000c 	add.w	r0, r7, #12
   b523c:	f8d5 8000 	ldr.w	r8, [r5]
   b5240:	f7ff fd66 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5244:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b5246:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b524a:	1b5d      	subs	r5, r3, r5
   b524c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b524e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b5252:	687b      	ldr	r3, [r7, #4]
   b5254:	61fd      	str	r5, [r7, #28]
   b5256:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b525a:	8363      	strh	r3, [r4, #26]
   b525c:	4b64      	ldr	r3, [pc, #400]	; (b53f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b525e:	4598      	cmp	r8, r3
   b5260:	f000 80bf 	beq.w	b53e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b5264:	f200 808c 	bhi.w	b5380 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5268:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b526c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5270:	4413      	add	r3, r2
   b5272:	4598      	cmp	r8, r3
   b5274:	f000 809d 	beq.w	b53b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5278:	d879      	bhi.n	b536e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b527a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b527e:	3b06      	subs	r3, #6
   b5280:	4598      	cmp	r8, r3
   b5282:	f000 809c 	beq.w	b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5286:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b528a:	3303      	adds	r3, #3
   b528c:	4598      	cmp	r8, r3
   b528e:	d16b      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b5290:	f107 0114 	add.w	r1, r7, #20
   b5294:	4638      	mov	r0, r7
   b5296:	f002 f9e7 	bl	b7668 <BlynkWidgetWrite>
   b529a:	e065      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b529c:	2b29      	cmp	r3, #41	; 0x29
   b529e:	d01b      	beq.n	b52d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b52a0:	2b37      	cmp	r3, #55	; 0x37
   b52a2:	d017      	beq.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b52a4:	2b1d      	cmp	r3, #29
   b52a6:	d1b8      	bne.n	b521a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b52a8:	7f63      	ldrb	r3, [r4, #29]
   b52aa:	b943      	cbnz	r3, b52be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b52ac:	2301      	movs	r3, #1
   b52ae:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b52b0:	4620      	mov	r0, r4
   b52b2:	f000 f9fb 	bl	b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b52b6:	f7ff fc89 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b52ba:	f002 f9d6 	bl	b766a <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b52be:	2300      	movs	r3, #0
   b52c0:	21c8      	movs	r1, #200	; 0xc8
   b52c2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b52c6:	9100      	str	r1, [sp, #0]
   b52c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b52cc:	4619      	mov	r1, r3
   b52ce:	4620      	mov	r0, r4
   b52d0:	f000 f93c 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b52d4:	2001      	movs	r0, #1
   b52d6:	e00d      	b.n	b52f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b52d8:	68a3      	ldr	r3, [r4, #8]
   b52da:	b91b      	cbnz	r3, b52e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b52dc:	2040      	movs	r0, #64	; 0x40
   b52de:	f002 fd0b 	bl	b7cf8 <malloc>
   b52e2:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b52e4:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b52e8:	44a8      	add	r8, r5
        if (it >= param.end())
   b52ea:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b52ec:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b52f0:	d302      	bcc.n	b52f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b52f2:	2000      	movs	r0, #0
   b52f4:	46b5      	mov	sp, r6
   b52f6:	e729      	b.n	b514c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b52f8:	4629      	mov	r1, r5
   b52fa:	2240      	movs	r2, #64	; 0x40
   b52fc:	68a0      	ldr	r0, [r4, #8]
   b52fe:	f006 ff30 	bl	bc162 <strncpy>
        redir_serv[63] = '\0';
   b5302:	68a3      	ldr	r3, [r4, #8]
   b5304:	2500      	movs	r5, #0
   b5306:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b530a:	f107 0014 	add.w	r0, r7, #20
   b530e:	f7ff fcff 	bl	b4d10 <_ZN10BlynkParam8iteratorppEv>
   b5312:	6803      	ldr	r3, [r0, #0]
   b5314:	4598      	cmp	r8, r3
   b5316:	d91b      	bls.n	b5350 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b5318:	6978      	ldr	r0, [r7, #20]
   b531a:	b120      	cbz	r0, b5326 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b531c:	69bb      	ldr	r3, [r7, #24]
   b531e:	4298      	cmp	r0, r3
   b5320:	d214      	bcs.n	b534c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b5322:	f006 fe70 	bl	bc006 <atol>
            redir_port = it.asLong();
   b5326:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b5328:	6820      	ldr	r0, [r4, #0]
   b532a:	f006 f8e7 	bl	bb4fc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b532e:	6823      	ldr	r3, [r4, #0]
   b5330:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b5332:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b5334:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b5336:	2300      	movs	r3, #0
   b5338:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b533a:	f002 f992 	bl	b7662 <_Z11BlynkMillisv>
   b533e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b5342:	3808      	subs	r0, #8
   b5344:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5348:	6160      	str	r0, [r4, #20]
   b534a:	e7c3      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b534c:	4628      	mov	r0, r5
   b534e:	e7ea      	b.n	b5326 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b5350:	2550      	movs	r5, #80	; 0x50
   b5352:	e7e9      	b.n	b5328 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b5354:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5356:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b535a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b535e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b5360:	4629      	mov	r1, r5
   b5362:	4620      	mov	r0, r4
   b5364:	f7ff fdb4 	bl	b4ed0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5368:	2300      	movs	r3, #0
   b536a:	8363      	strh	r3, [r4, #26]
   b536c:	e7b2      	b.n	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b536e:	4b21      	ldr	r3, [pc, #132]	; (b53f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5370:	4598      	cmp	r8, r3
   b5372:	d1f9      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5374:	f107 0114 	add.w	r1, r7, #20
   b5378:	4638      	mov	r0, r7
   b537a:	f002 f975 	bl	b7668 <BlynkWidgetWrite>
   b537e:	e7f3      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5380:	4b1d      	ldr	r3, [pc, #116]	; (b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b5382:	4598      	cmp	r8, r3
   b5384:	d021      	beq.n	b53ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5386:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b538a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b538e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b5392:	4598      	cmp	r8, r3
   b5394:	d01f      	beq.n	b53d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5396:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b539a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b539e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b53a2:	4598      	cmp	r8, r3
   b53a4:	d1e0      	bne.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b53a6:	f107 0114 	add.w	r1, r7, #20
   b53aa:	4638      	mov	r0, r7
   b53ac:	f002 f95c 	bl	b7668 <BlynkWidgetWrite>
   b53b0:	e7da      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b53b2:	f107 0114 	add.w	r1, r7, #20
   b53b6:	4638      	mov	r0, r7
   b53b8:	f002 f956 	bl	b7668 <BlynkWidgetWrite>
   b53bc:	e7d4      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b53be:	f107 0114 	add.w	r1, r7, #20
   b53c2:	4638      	mov	r0, r7
   b53c4:	f002 f950 	bl	b7668 <BlynkWidgetWrite>
   b53c8:	e7ce      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b53ca:	f107 0114 	add.w	r1, r7, #20
   b53ce:	4638      	mov	r0, r7
   b53d0:	f002 f94a 	bl	b7668 <BlynkWidgetWrite>
   b53d4:	e7c8      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b53d6:	f107 0114 	add.w	r1, r7, #20
   b53da:	4638      	mov	r0, r7
   b53dc:	f002 f944 	bl	b7668 <BlynkWidgetWrite>
   b53e0:	e7c2      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b53e2:	f107 0114 	add.w	r1, r7, #20
   b53e6:	4638      	mov	r0, r7
   b53e8:	f002 f93e 	bl	b7668 <BlynkWidgetWrite>
   b53ec:	e7bc      	b.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b53ee:	bf00      	nop
   b53f0:	00736676 	.word	0x00736676
   b53f4:	00676264 	.word	0x00676264
   b53f8:	6e6f6361 	.word	0x6e6f6361

000b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b53fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5400:	4604      	mov	r4, r0
   b5402:	b08c      	sub	sp, #48	; 0x30
   b5404:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5406:	f7ff fbe1 	bl	b4bcc <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b540a:	7f63      	ldrb	r3, [r4, #29]
   b540c:	2b02      	cmp	r3, #2
   b540e:	d01e      	beq.n	b544e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b5410:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b5412:	8b62      	ldrh	r2, [r4, #26]
   b5414:	3301      	adds	r3, #1
   b5416:	b2db      	uxtb	r3, r3
   b5418:	7723      	strb	r3, [r4, #28]
   b541a:	b9aa      	cbnz	r2, b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b541c:	2b02      	cmp	r3, #2
   b541e:	d813      	bhi.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b5420:	6820      	ldr	r0, [r4, #0]
   b5422:	f005 ff33 	bl	bb28c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b5426:	b1a8      	cbz	r0, b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b5428:	b925      	cbnz	r5, b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b542a:	6820      	ldr	r0, [r4, #0]
   b542c:	f006 f80c 	bl	bb448 <_ZN9TCPClient9availableEv>
   b5430:	2800      	cmp	r0, #0
   b5432:	dd0f      	ble.n	b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b5434:	4620      	mov	r0, r4
   b5436:	f7ff fe7b 	bl	b5130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b543a:	2800      	cmp	r0, #0
   b543c:	d1f5      	bne.n	b542a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b543e:	6820      	ldr	r0, [r4, #0]
   b5440:	f006 f85c 	bl	bb4fc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5444:	f002 f911 	bl	b766a <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5448:	7f23      	ldrb	r3, [r4, #28]
   b544a:	3b01      	subs	r3, #1
   b544c:	7723      	strb	r3, [r4, #28]
}
   b544e:	b00c      	add	sp, #48	; 0x30
   b5450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b5454:	f002 f905 	bl	b7662 <_Z11BlynkMillisv>
   b5458:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b545a:	6820      	ldr	r0, [r4, #0]
   b545c:	f005 ff16 	bl	bb28c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b5460:	7f67      	ldrb	r7, [r4, #29]
   b5462:	2f01      	cmp	r7, #1
   b5464:	4606      	mov	r6, r0
   b5466:	d124      	bne.n	b54b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5468:	b920      	cbnz	r0, b5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b546a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b546c:	4620      	mov	r0, r4
   b546e:	f7ff fcc4 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b5472:	e7e9      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5474:	68e3      	ldr	r3, [r4, #12]
   b5476:	f24f 6218 	movw	r2, #63000	; 0xf618
   b547a:	1aeb      	subs	r3, r5, r3
   b547c:	4293      	cmp	r3, r2
   b547e:	d8f5      	bhi.n	b546c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5480:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5484:	4293      	cmp	r3, r2
   b5486:	d803      	bhi.n	b5490 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5488:	6923      	ldr	r3, [r4, #16]
   b548a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b548c:	4293      	cmp	r3, r2
   b548e:	d9db      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5490:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5492:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5496:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5498:	4293      	cmp	r3, r2
   b549a:	d9d5      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b549c:	2300      	movs	r3, #0
   b549e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b54a2:	9300      	str	r3, [sp, #0]
   b54a4:	461a      	mov	r2, r3
   b54a6:	2106      	movs	r1, #6
   b54a8:	4620      	mov	r0, r4
   b54aa:	f000 f84f 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b54ae:	6165      	str	r5, [r4, #20]
                return false;
   b54b0:	e7ca      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b54b2:	2f00      	cmp	r7, #0
   b54b4:	d1c8      	bne.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b54b6:	6963      	ldr	r3, [r4, #20]
   b54b8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b54ba:	b140      	cbz	r0, b54ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b54bc:	f241 7270 	movw	r2, #6000	; 0x1770
   b54c0:	4293      	cmp	r3, r2
   b54c2:	d9c1      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b54c4:	6820      	ldr	r0, [r4, #0]
   b54c6:	f006 f819 	bl	bb4fc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b54ca:	7767      	strb	r7, [r4, #29]
            return false;
   b54cc:	e7bc      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b54ce:	f241 3288 	movw	r2, #5000	; 0x1388
   b54d2:	4293      	cmp	r3, r2
   b54d4:	d9b8      	bls.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b54d6:	6820      	ldr	r0, [r4, #0]
   b54d8:	f006 f810 	bl	bb4fc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b54dc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b54e0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b54e4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b54e8:	f1be 0f00 	cmp.w	lr, #0
   b54ec:	d01b      	beq.n	b5526 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b54ee:	4633      	mov	r3, r6
   b54f0:	4642      	mov	r2, r8
   b54f2:	4671      	mov	r1, lr
   b54f4:	4660      	mov	r0, ip
   b54f6:	f005 fe4b 	bl	bb190 <_ZN9TCPClient7connectEPKctm>
   b54fa:	2801      	cmp	r0, #1
   b54fc:	d1d7      	bne.n	b54ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b54fe:	6863      	ldr	r3, [r4, #4]
   b5500:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5502:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5504:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5506:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5508:	f7ff fa78 	bl	b49fc <strlen>
   b550c:	2200      	movs	r2, #0
   b550e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5512:	9b05      	ldr	r3, [sp, #20]
   b5514:	9000      	str	r0, [sp, #0]
   b5516:	462a      	mov	r2, r5
   b5518:	211d      	movs	r1, #29
   b551a:	4620      	mov	r0, r4
   b551c:	f000 f816 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b5520:	6923      	ldr	r3, [r4, #16]
   b5522:	6163      	str	r3, [r4, #20]
            return true;
   b5524:	e790      	b.n	b5448 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5526:	4b08      	ldr	r3, [pc, #32]	; (b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b5528:	9306      	str	r3, [sp, #24]
   b552a:	f10c 0720 	add.w	r7, ip, #32
   b552e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5530:	ae07      	add	r6, sp, #28
   b5532:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5534:	683b      	ldr	r3, [r7, #0]
   b5536:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b5538:	4642      	mov	r2, r8
   b553a:	4673      	mov	r3, lr
   b553c:	a906      	add	r1, sp, #24
   b553e:	4660      	mov	r0, ip
   b5540:	f005 ff06 	bl	bb350 <_ZN9TCPClient7connectE9IPAddresstm>
   b5544:	e7d9      	b.n	b54fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5546:	bf00      	nop
   b5548:	000bf450 	.word	0x000bf450

000b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5550:	b083      	sub	sp, #12
   b5552:	af00      	add	r7, sp, #0
   b5554:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5556:	6800      	ldr	r0, [r0, #0]
   b5558:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b555a:	4688      	mov	r8, r1
   b555c:	4616      	mov	r6, r2
   b555e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b5560:	46eb      	mov	fp, sp
   b5562:	f005 fe93 	bl	bb28c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5566:	2800      	cmp	r0, #0
   b5568:	f000 8081 	beq.w	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b556c:	f1b8 0f1d 	cmp.w	r8, #29
   b5570:	d804      	bhi.n	b557c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5572:	4b4d      	ldr	r3, [pc, #308]	; (b56a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5574:	fa23 f308 	lsr.w	r3, r3, r8
   b5578:	07db      	lsls	r3, r3, #31
   b557a:	d402      	bmi.n	b5582 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b557c:	7f63      	ldrb	r3, [r4, #29]
   b557e:	2b01      	cmp	r3, #1
   b5580:	d175      	bne.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5582:	b946      	cbnz	r6, b5596 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5584:	8b66      	ldrh	r6, [r4, #26]
   b5586:	b936      	cbnz	r6, b5596 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5588:	8b23      	ldrh	r3, [r4, #24]
   b558a:	3301      	adds	r3, #1
   b558c:	b29b      	uxth	r3, r3
   b558e:	2b00      	cmp	r3, #0
   b5590:	d072      	beq.n	b5678 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b5592:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5594:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5596:	f1a8 030c 	sub.w	r3, r8, #12
   b559a:	2b08      	cmp	r3, #8
   b559c:	d816      	bhi.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b559e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b55a2:	4293      	cmp	r3, r2
   b55a4:	bf38      	it	cc
   b55a6:	4613      	movcc	r3, r2
   b55a8:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b55ac:	f002 f859 	bl	b7662 <_Z11BlynkMillisv>
   b55b0:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b55b4:	2800      	cmp	r0, #0
   b55b6:	db61      	blt.n	b567c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b55b8:	2100      	movs	r1, #0
   b55ba:	4620      	mov	r0, r4
   b55bc:	f7ff ff1e 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b55c0:	f002 f84f 	bl	b7662 <_Z11BlynkMillisv>
   b55c4:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b55c8:	2800      	cmp	r0, #0
   b55ca:	daf5      	bge.n	b55b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b55cc:	f1b9 0f00 	cmp.w	r9, #0
   b55d0:	d05b      	beq.n	b568a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b55d2:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b55d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b55d6:	2a00      	cmp	r2, #0
   b55d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b55da:	bf08      	it	eq
   b55dc:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b55de:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b55e2:	f10a 0307 	add.w	r3, sl, #7
   b55e6:	f023 0307 	bic.w	r3, r3, #7
   b55ea:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b55ee:	4630      	mov	r0, r6
    hdr->type = cmd;
   b55f0:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b55f4:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b55f8:	f002 f952 	bl	b78a0 <inet_htons>
    hdr->length = htons(length+length2);
   b55fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b55fe:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5602:	18e8      	adds	r0, r5, r3
   b5604:	b280      	uxth	r0, r0
   b5606:	f002 f94b 	bl	b78a0 <inet_htons>
   b560a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b560e:	f1b9 0f00 	cmp.w	r9, #0
   b5612:	d03c      	beq.n	b568e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b5614:	2d00      	cmp	r5, #0
   b5616:	d03a      	beq.n	b568e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5618:	462a      	mov	r2, r5
   b561a:	4649      	mov	r1, r9
   b561c:	f10d 0005 	add.w	r0, sp, #5
   b5620:	f006 fd0e 	bl	bc040 <memcpy>
        pos += length;
   b5624:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5628:	b13b      	cbz	r3, b563a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b562c:	b12b      	cbz	r3, b563a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b562e:	461a      	mov	r2, r3
   b5630:	687b      	ldr	r3, [r7, #4]
   b5632:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b5634:	4418      	add	r0, r3
   b5636:	f006 fd03 	bl	bc040 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b563a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b563c:	4555      	cmp	r5, sl
   b563e:	d22a      	bcs.n	b5696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5640:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5644:	687b      	ldr	r3, [r7, #4]
   b5646:	6820      	ldr	r0, [r4, #0]
   b5648:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b564c:	bf28      	it	cs
   b564e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5652:	1959      	adds	r1, r3, r5
   b5654:	f005 fcf1 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
   b5658:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b565a:	2000      	movs	r0, #0
   b565c:	f001 ffff 	bl	b765e <_Z10BlynkDelaym>
        if (w == 0) {
   b5660:	b9be      	cbnz	r6, b5692 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b5662:	6820      	ldr	r0, [r4, #0]
   b5664:	f005 ff4a 	bl	bb4fc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5668:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b566a:	f001 fffe 	bl	b766a <BlynkNoOpCbk>
}
   b566e:	370c      	adds	r7, #12
   b5670:	46dd      	mov	sp, fp
   b5672:	46bd      	mov	sp, r7
   b5674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5678:	2301      	movs	r3, #1
   b567a:	e78a      	b.n	b5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b567c:	7f21      	ldrb	r1, [r4, #28]
   b567e:	2900      	cmp	r1, #0
   b5680:	d1a4      	bne.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5682:	4620      	mov	r0, r4
   b5684:	f7ff feba 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5688:	e7a0      	b.n	b55cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b568a:	2305      	movs	r3, #5
   b568c:	e7a2      	b.n	b55d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b568e:	2005      	movs	r0, #5
   b5690:	e7c9      	b.n	b5626 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b5692:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5694:	e7d2      	b.n	b563c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5696:	d003      	beq.n	b56a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5698:	4620      	mov	r0, r4
   b569a:	f7ff fbae 	bl	b4dfa <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b569e:	e7e6      	b.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b56a0:	f001 ffdf 	bl	b7662 <_Z11BlynkMillisv>
   b56a4:	6120      	str	r0, [r4, #16]
   b56a6:	e7e2      	b.n	b566e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b56a8:	20000045 	.word	0x20000045

000b56ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b56ac:	b530      	push	{r4, r5, lr}
   b56ae:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56b0:	ab08      	add	r3, sp, #32
   b56b2:	4604      	mov	r4, r0
   b56b4:	9305      	str	r3, [sp, #20]
   b56b6:	2500      	movs	r5, #0
   b56b8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b56ba:	a805      	add	r0, sp, #20
   b56bc:	490b      	ldr	r1, [pc, #44]	; (b56ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56be:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b56c2:	f7ff fb34 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        add(val);
   b56c6:	a805      	add	r0, sp, #20
   b56c8:	4909      	ldr	r1, [pc, #36]	; (b56f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b56ca:	f7ff fb30 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b56ce:	9b06      	ldr	r3, [sp, #24]
   b56d0:	9302      	str	r3, [sp, #8]
   b56d2:	9b05      	ldr	r3, [sp, #20]
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	2365      	movs	r3, #101	; 0x65
   b56d8:	9300      	str	r3, [sp, #0]
   b56da:	462a      	mov	r2, r5
   b56dc:	4b05      	ldr	r3, [pc, #20]	; (b56f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b56de:	2111      	movs	r1, #17
   b56e0:	4620      	mov	r0, r4
   b56e2:	f7ff ff33 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b56e6:	b019      	add	sp, #100	; 0x64
   b56e8:	bd30      	pop	{r4, r5, pc}
   b56ea:	bf00      	nop
   b56ec:	000be172 	.word	0x000be172
   b56f0:	000be177 	.word	0x000be177
   b56f4:	000be26c 	.word	0x000be26c

000b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b56f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56fa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b56fe:	ab08      	add	r3, sp, #32
   b5700:	2400      	movs	r4, #0
   b5702:	4605      	mov	r5, r0
   b5704:	460f      	mov	r7, r1
   b5706:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b5708:	a805      	add	r0, sp, #20
   b570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b570e:	490e      	ldr	r1, [pc, #56]	; (b5748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b5710:	4616      	mov	r6, r2
   b5712:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b5716:	f7ff fb0a 	bl	b4d2e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b571a:	4639      	mov	r1, r7
   b571c:	a805      	add	r0, sp, #20
   b571e:	f7ff fb23 	bl	b4d68 <_ZN10BlynkParam3addEi>
        add(last);
   b5722:	4631      	mov	r1, r6
   b5724:	a805      	add	r0, sp, #20
   b5726:	f7ff fb1f 	bl	b4d68 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b572a:	9b06      	ldr	r3, [sp, #24]
   b572c:	3b01      	subs	r3, #1
   b572e:	9300      	str	r3, [sp, #0]
   b5730:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5734:	9b05      	ldr	r3, [sp, #20]
   b5736:	4622      	mov	r2, r4
   b5738:	2114      	movs	r1, #20
   b573a:	4628      	mov	r0, r5
   b573c:	f7ff ff06 	bl	b554c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5740:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b5744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5746:	bf00      	nop
   b5748:	000be185 	.word	0x000be185

000b574c <loop>:
void loop() {
   b574c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  display.loop();
   b5750:	484a      	ldr	r0, [pc, #296]	; (b587c <loop+0x130>)
  if (!Argon1_distance) {
   b5752:	4f4b      	ldr	r7, [pc, #300]	; (b5880 <loop+0x134>)
  display.loop();
   b5754:	f000 fe53 	bl	b63fe <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b5758:	484a      	ldr	r0, [pc, #296]	; (b5884 <loop+0x138>)
   b575a:	2100      	movs	r1, #0
   b575c:	f7ff fe4e 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  format_display();
   b5760:	f7ff fb26 	bl	b4db0 <_Z14format_displayv>
  display.print("A1 : ");
   b5764:	4948      	ldr	r1, [pc, #288]	; (b5888 <loop+0x13c>)
   b5766:	4845      	ldr	r0, [pc, #276]	; (b587c <loop+0x130>)
   b5768:	f004 f970 	bl	b9a4c <_ZN5Print5printEPKc>
  if (!Argon1_distance) {
   b576c:	6839      	ldr	r1, [r7, #0]
   b576e:	2900      	cmp	r1, #0
   b5770:	d15a      	bne.n	b5828 <loop+0xdc>
    display.println("No data");
   b5772:	4946      	ldr	r1, [pc, #280]	; (b588c <loop+0x140>)
   b5774:	4841      	ldr	r0, [pc, #260]	; (b587c <loop+0x130>)
   b5776:	f004 f97c 	bl	b9a72 <_ZN5Print7printlnEPKc>
  if (!Argon2_distance) {
   b577a:	4e45      	ldr	r6, [pc, #276]	; (b5890 <loop+0x144>)
  display.print("A2 : ");
   b577c:	4945      	ldr	r1, [pc, #276]	; (b5894 <loop+0x148>)
   b577e:	483f      	ldr	r0, [pc, #252]	; (b587c <loop+0x130>)
   b5780:	f004 f964 	bl	b9a4c <_ZN5Print5printEPKc>
  if (!Argon2_distance) {
   b5784:	6831      	ldr	r1, [r6, #0]
   b5786:	2900      	cmp	r1, #0
   b5788:	d153      	bne.n	b5832 <loop+0xe6>
    display.println("No data");
   b578a:	4940      	ldr	r1, [pc, #256]	; (b588c <loop+0x140>)
   b578c:	483b      	ldr	r0, [pc, #236]	; (b587c <loop+0x130>)
   b578e:	f004 f970 	bl	b9a72 <_ZN5Print7printlnEPKc>
  if (!Argon3_distance) {
   b5792:	4d41      	ldr	r5, [pc, #260]	; (b5898 <loop+0x14c>)
  display.print("A3 : ");
   b5794:	4941      	ldr	r1, [pc, #260]	; (b589c <loop+0x150>)
   b5796:	4839      	ldr	r0, [pc, #228]	; (b587c <loop+0x130>)
   b5798:	f004 f958 	bl	b9a4c <_ZN5Print5printEPKc>
  if (!Argon3_distance) {
   b579c:	6829      	ldr	r1, [r5, #0]
   b579e:	2900      	cmp	r1, #0
   b57a0:	d14c      	bne.n	b583c <loop+0xf0>
    display.println("No data");
   b57a2:	493a      	ldr	r1, [pc, #232]	; (b588c <loop+0x140>)
   b57a4:	4835      	ldr	r0, [pc, #212]	; (b587c <loop+0x130>)
   b57a6:	f004 f964 	bl	b9a72 <_ZN5Print7printlnEPKc>
	rssi = 0;
   b57aa:	4c3d      	ldr	r4, [pc, #244]	; (b58a0 <loop+0x154>)
  display.display();
   b57ac:	4833      	ldr	r0, [pc, #204]	; (b587c <loop+0x130>)
	rssi = 0;
   b57ae:	f04f 0800 	mov.w	r8, #0
  display.display();
   b57b2:	f001 feb1 	bl	b7518 <_ZN16Adafruit_SSD13067displayEv>
	rssi = 0;
   b57b6:	f8c4 8000 	str.w	r8, [r4]
	BLE.scan(scanResultCallback, NULL);
   b57ba:	f002 fffd 	bl	b87b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57be:	4939      	ldr	r1, [pc, #228]	; (b58a4 <loop+0x158>)
   b57c0:	4642      	mov	r2, r8
   b57c2:	f003 ffaf 	bl	b9724 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
	if (rssi) {
   b57c6:	6823      	ldr	r3, [r4, #0]
   b57c8:	b1ab      	cbz	r3, b57f6 <loop+0xaa>
		if (client.isConnected()) {
   b57ca:	4837      	ldr	r0, [pc, #220]	; (b58a8 <loop+0x15c>)
   b57cc:	f000 ffa2 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b57d0:	b188      	cbz	r0, b57f6 <loop+0xaa>
			string_rssi = String(rssi);
   b57d2:	6821      	ldr	r1, [r4, #0]
   b57d4:	4c35      	ldr	r4, [pc, #212]	; (b58ac <loop+0x160>)
   b57d6:	220a      	movs	r2, #10
   b57d8:	4668      	mov	r0, sp
   b57da:	f002 fce6 	bl	b81aa <_ZN6StringC1Eih>
   b57de:	4669      	mov	r1, sp
   b57e0:	4620      	mov	r0, r4
   b57e2:	f002 fcc8 	bl	b8176 <_ZN6StringaSEOS_>
   b57e6:	4668      	mov	r0, sp
   b57e8:	f002 fc24 	bl	b8034 <_ZN6StringD1Ev>
			client.publish("BAR/argon3/RSSI", string_rssi);
   b57ec:	6822      	ldr	r2, [r4, #0]
   b57ee:	4930      	ldr	r1, [pc, #192]	; (b58b0 <loop+0x164>)
   b57f0:	482d      	ldr	r0, [pc, #180]	; (b58a8 <loop+0x15c>)
   b57f2:	f001 f90a 	bl	b6a0a <_ZN4MQTT7publishEPKcS1_>
	if (client.isConnected()) {
   b57f6:	482c      	ldr	r0, [pc, #176]	; (b58a8 <loop+0x15c>)
   b57f8:	f000 ff8c 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b57fc:	b318      	cbz	r0, b5846 <loop+0xfa>
		client.loop();
   b57fe:	482a      	ldr	r0, [pc, #168]	; (b58a8 <loop+0x15c>)
   b5800:	f001 f95f 	bl	b6ac2 <_ZN4MQTT4loopEv>
  Blynk.virtualWrite(V0, Argon1_distance);
   b5804:	683a      	ldr	r2, [r7, #0]
   b5806:	481f      	ldr	r0, [pc, #124]	; (b5884 <loop+0x138>)
   b5808:	2100      	movs	r1, #0
   b580a:	f7ff ff75 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V1, Argon2_distance);
   b580e:	6832      	ldr	r2, [r6, #0]
   b5810:	481c      	ldr	r0, [pc, #112]	; (b5884 <loop+0x138>)
   b5812:	2101      	movs	r1, #1
   b5814:	f7ff ff70 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
  Blynk.virtualWrite(V2, Argon3_distance);
   b5818:	682a      	ldr	r2, [r5, #0]
   b581a:	481a      	ldr	r0, [pc, #104]	; (b5884 <loop+0x138>)
   b581c:	2102      	movs	r1, #2
   b581e:	f7ff ff6b 	bl	b56f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
   b5822:	b004      	add	sp, #16
   b5824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    display.println(Argon1_distance);
   b5828:	4814      	ldr	r0, [pc, #80]	; (b587c <loop+0x130>)
   b582a:	220a      	movs	r2, #10
   b582c:	f7ff f9b0 	bl	b4b90 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b5830:	e7a3      	b.n	b577a <loop+0x2e>
    display.println(Argon2_distance);
   b5832:	4812      	ldr	r0, [pc, #72]	; (b587c <loop+0x130>)
   b5834:	220a      	movs	r2, #10
   b5836:	f7ff f9ab 	bl	b4b90 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b583a:	e7aa      	b.n	b5792 <loop+0x46>
    display.println(Argon3_distance);
   b583c:	480f      	ldr	r0, [pc, #60]	; (b587c <loop+0x130>)
   b583e:	220a      	movs	r2, #10
   b5840:	f7ff f9a6 	bl	b4b90 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b5844:	e7b1      	b.n	b57aa <loop+0x5e>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b5846:	4668      	mov	r0, sp
   b5848:	f002 fa46 	bl	b7cd8 <spark_deviceID>
		client.connect(System.deviceID());
   b584c:	9900      	ldr	r1, [sp, #0]
   b584e:	4816      	ldr	r0, [pc, #88]	; (b58a8 <loop+0x15c>)
   b5850:	f001 f850 	bl	b68f4 <_ZN4MQTT7connectEPKc>
   b5854:	4668      	mov	r0, sp
   b5856:	f002 fbed 	bl	b8034 <_ZN6StringD1Ev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b585a:	4b16      	ldr	r3, [pc, #88]	; (b58b4 <loop+0x168>)
    client.subscribe(A1_RSSI);
   b585c:	4812      	ldr	r0, [pc, #72]	; (b58a8 <loop+0x15c>)
   b585e:	6819      	ldr	r1, [r3, #0]
   b5860:	f001 fa77 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>
   b5864:	4b14      	ldr	r3, [pc, #80]	; (b58b8 <loop+0x16c>)
    client.subscribe(A2_RSSI);
   b5866:	4810      	ldr	r0, [pc, #64]	; (b58a8 <loop+0x15c>)
   b5868:	6819      	ldr	r1, [r3, #0]
   b586a:	f001 fa72 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>
   b586e:	4b13      	ldr	r3, [pc, #76]	; (b58bc <loop+0x170>)
    client.subscribe(A3_RSSI);
   b5870:	480d      	ldr	r0, [pc, #52]	; (b58a8 <loop+0x15c>)
   b5872:	6819      	ldr	r1, [r3, #0]
   b5874:	f001 fa6d 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>
   b5878:	e7c4      	b.n	b5804 <loop+0xb8>
   b587a:	bf00      	nop
   b587c:	2003e5b8 	.word	0x2003e5b8
   b5880:	2003e4f0 	.word	0x2003e4f0
   b5884:	2003e4fc 	.word	0x2003e4fc
   b5888:	000be188 	.word	0x000be188
   b588c:	000be18e 	.word	0x000be18e
   b5890:	2003e4f4 	.word	0x2003e4f4
   b5894:	000be196 	.word	0x000be196
   b5898:	2003e4f8 	.word	0x2003e4f8
   b589c:	000be19c 	.word	0x000be19c
   b58a0:	2003e654 	.word	0x2003e654
   b58a4:	000b4c5d 	.word	0x000b4c5d
   b58a8:	2003e558 	.word	0x2003e558
   b58ac:	2003e66c 	.word	0x2003e66c
   b58b0:	000be1a2 	.word	0x000be1a2
   b58b4:	2003e4c0 	.word	0x2003e4c0
   b58b8:	2003e4d0 	.word	0x2003e4d0
   b58bc:	2003e4e0 	.word	0x2003e4e0

000b58c0 <setup>:
void setup() {
   b58c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.setup();
   b58c2:	482b      	ldr	r0, [pc, #172]	; (b5970 <setup+0xb0>)
        this->authkey = auth;
   b58c4:	4c2b      	ldr	r4, [pc, #172]	; (b5974 <setup+0xb4>)
void setup() {
   b58c6:	b085      	sub	sp, #20
  display.setup();
   b58c8:	f000 fd70 	bl	b63ac <_ZN16OledWingAdafruit5setupEv>
	BLE.on();
   b58cc:	f002 ff74 	bl	b87b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d0:	f002 ff8e 	bl	b87f0 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.setAdvertisingInterval(20);
   b58d4:	f002 ff70 	bl	b87b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d8:	2114      	movs	r1, #20
   b58da:	f002 ff90 	bl	b87fe <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
   b58de:	4668      	mov	r0, sp
   b58e0:	f002 f9fa 	bl	b7cd8 <spark_deviceID>
  client.connect(System.deviceID());
   b58e4:	9900      	ldr	r1, [sp, #0]
   b58e6:	4824      	ldr	r0, [pc, #144]	; (b5978 <setup+0xb8>)
   b58e8:	f001 f804 	bl	b68f4 <_ZN4MQTT7connectEPKc>
   b58ec:	4668      	mov	r0, sp
   b58ee:	f002 fba1 	bl	b8034 <_ZN6StringD1Ev>
   b58f2:	4b22      	ldr	r3, [pc, #136]	; (b597c <setup+0xbc>)
  client.subscribe(A1_RSSI);
   b58f4:	4820      	ldr	r0, [pc, #128]	; (b5978 <setup+0xb8>)
   b58f6:	6819      	ldr	r1, [r3, #0]
   b58f8:	f001 fa2b 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>
   b58fc:	4b20      	ldr	r3, [pc, #128]	; (b5980 <setup+0xc0>)
  client.subscribe(A2_RSSI);
   b58fe:	481e      	ldr	r0, [pc, #120]	; (b5978 <setup+0xb8>)
   b5900:	6819      	ldr	r1, [r3, #0]
   b5902:	f001 fa26 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>
   b5906:	4b1f      	ldr	r3, [pc, #124]	; (b5984 <setup+0xc4>)
  client.subscribe(A3_RSSI);
   b5908:	481b      	ldr	r0, [pc, #108]	; (b5978 <setup+0xb8>)
   b590a:	6819      	ldr	r1, [r3, #0]
   b590c:	f001 fa21 	bl	b6d52 <_ZN4MQTT9subscribeEPKc>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5910:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5914:	f001 fea3 	bl	b765e <_Z10BlynkDelaym>
   b5918:	4b1b      	ldr	r3, [pc, #108]	; (b5988 <setup+0xc8>)
   b591a:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b591c:	f001 fea1 	bl	b7662 <_Z11BlynkMillisv>
   b5920:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b5924:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b5926:	4a19      	ldr	r2, [pc, #100]	; (b598c <setup+0xcc>)
   b5928:	635a      	str	r2, [r3, #52]	; 0x34
   b592a:	3808      	subs	r0, #8
   b592c:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b5930:	2250      	movs	r2, #80	; 0x50
   b5932:	6160      	str	r0, [r4, #20]
   b5934:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b5936:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5938:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b593c:	6820      	ldr	r0, [r4, #0]
   b593e:	f005 fddd 	bl	bb4fc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5942:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b5944:	f001 fe8d 	bl	b7662 <_Z11BlynkMillisv>
   b5948:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b594a:	7f63      	ldrb	r3, [r4, #29]
   b594c:	2b01      	cmp	r3, #1
   b594e:	d00c      	beq.n	b596a <setup+0xaa>
               (BlynkMillis() - started < timeout))
   b5950:	f001 fe87 	bl	b7662 <_Z11BlynkMillisv>
   b5954:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5956:	42b8      	cmp	r0, r7
   b5958:	d804      	bhi.n	b5964 <setup+0xa4>
            run();
   b595a:	2100      	movs	r1, #0
   b595c:	4620      	mov	r0, r4
   b595e:	f7ff fd4d 	bl	b53fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5962:	e7f2      	b.n	b594a <setup+0x8a>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5964:	7f63      	ldrb	r3, [r4, #29]
   b5966:	2b01      	cmp	r3, #1
   b5968:	d1e8      	bne.n	b593c <setup+0x7c>
}
   b596a:	b005      	add	sp, #20
   b596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b596e:	bf00      	nop
   b5970:	2003e5b8 	.word	0x2003e5b8
   b5974:	2003e4fc 	.word	0x2003e4fc
   b5978:	2003e558 	.word	0x2003e558
   b597c:	2003e4c0 	.word	0x2003e4c0
   b5980:	2003e4d0 	.word	0x2003e4d0
   b5984:	2003e4e0 	.word	0x2003e4e0
   b5988:	000be1b2 	.word	0x000be1b2
   b598c:	000be1d3 	.word	0x000be1d3

000b5990 <_GLOBAL__sub_I_Blynk>:
   b5990:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b5992:	4d3b      	ldr	r5, [pc, #236]	; (b5a80 <_GLOBAL__sub_I_Blynk+0xf0>)
   b5994:	b08e      	sub	sp, #56	; 0x38
   b5996:	4628      	mov	r0, r5
   b5998:	f005 fdfa 	bl	bb590 <_ZN9TCPClientC1Ev>
   b599c:	f105 001c 	add.w	r0, r5, #28
   b59a0:	f005 f9a4 	bl	bacec <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b59a4:	4b37      	ldr	r3, [pc, #220]	; (b5a84 <_GLOBAL__sub_I_Blynk+0xf4>)
   b59a6:	2400      	movs	r4, #0
   b59a8:	e9c3 5400 	strd	r5, r4, [r3]
   b59ac:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b59b0:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b59b4:	636c      	str	r4, [r5, #52]	; 0x34
   b59b6:	872c      	strh	r4, [r5, #56]	; 0x38
   b59b8:	619c      	str	r4, [r3, #24]
   b59ba:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b59bc:	4621      	mov	r1, r4
   b59be:	2001      	movs	r0, #1
   b59c0:	f002 f906 	bl	b7bd0 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b59c4:	f240 725b 	movw	r2, #1883	; 0x75b
   b59c8:	4b2f      	ldr	r3, [pc, #188]	; (b5a88 <_GLOBAL__sub_I_Blynk+0xf8>)
   b59ca:	9400      	str	r4, [sp, #0]
   b59cc:	492f      	ldr	r1, [pc, #188]	; (b5a8c <_GLOBAL__sub_I_Blynk+0xfc>)
   b59ce:	4830      	ldr	r0, [pc, #192]	; (b5a90 <_GLOBAL__sub_I_Blynk+0x100>)
   b59d0:	f000 fdc4 	bl	b655c <_ZN4MQTTC1EPKctPFvPcPhjEb>
String A1_RSSI = "BAR/argon1/RSSI";
   b59d4:	492f      	ldr	r1, [pc, #188]	; (b5a94 <_GLOBAL__sub_I_Blynk+0x104>)
   b59d6:	4830      	ldr	r0, [pc, #192]	; (b5a98 <_GLOBAL__sub_I_Blynk+0x108>)
   b59d8:	f002 fb77 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
String A2_RSSI = "BAR/argon2/RSSI";
   b59dc:	492f      	ldr	r1, [pc, #188]	; (b5a9c <_GLOBAL__sub_I_Blynk+0x10c>)
   b59de:	4830      	ldr	r0, [pc, #192]	; (b5aa0 <_GLOBAL__sub_I_Blynk+0x110>)
   b59e0:	f002 fb73 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
String A3_RSSI = "BAR/argon3/RSSI";
   b59e4:	492f      	ldr	r1, [pc, #188]	; (b5aa4 <_GLOBAL__sub_I_Blynk+0x114>)
   b59e6:	4830      	ldr	r0, [pc, #192]	; (b5aa8 <_GLOBAL__sub_I_Blynk+0x118>)
   b59e8:	f002 fb6f 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
OledWingAdafruit display;
   b59ec:	2107      	movs	r1, #7
   b59ee:	482f      	ldr	r0, [pc, #188]	; (b5aac <_GLOBAL__sub_I_Blynk+0x11c>)
   b59f0:	f000 fcae 	bl	b6350 <_ZN16OledWingAdafruitC1Ei>
        capacity_(0) {
   b59f4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b59f8:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b59fa:	f005 fa2d 	bl	bae58 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b59fe:	4c2c      	ldr	r4, [pc, #176]	; (b5ab0 <_GLOBAL__sub_I_Blynk+0x120>)
   b5a00:	4605      	mov	r5, r0
   b5a02:	a902      	add	r1, sp, #8
   b5a04:	a805      	add	r0, sp, #20
   b5a06:	f7ff fa30 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a0a:	4626      	mov	r6, r4
        stream_(&stream) {
   b5a0c:	a905      	add	r1, sp, #20
   b5a0e:	a808      	add	r0, sp, #32
   b5a10:	f7ff fa2b 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5a14:	4b27      	ldr	r3, [pc, #156]	; (b5ab4 <_GLOBAL__sub_I_Blynk+0x124>)
   b5a16:	f846 3b04 	str.w	r3, [r6], #4
   b5a1a:	a908      	add	r1, sp, #32
   b5a1c:	a80b      	add	r0, sp, #44	; 0x2c
   b5a1e:	f7ff fa24 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a22:	aa0b      	add	r2, sp, #44	; 0x2c
   b5a24:	211e      	movs	r1, #30
   b5a26:	4630      	mov	r0, r6
   b5a28:	f004 fd4a 	bl	ba4c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5a2c:	a80b      	add	r0, sp, #44	; 0x2c
   b5a2e:	f7ff f9d1 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5a32:	a808      	add	r0, sp, #32
   b5a34:	f7ff f9ce 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a38:	4b1f      	ldr	r3, [pc, #124]	; (b5ab8 <_GLOBAL__sub_I_Blynk+0x128>)
   b5a3a:	6023      	str	r3, [r4, #0]
   b5a3c:	6225      	str	r5, [r4, #32]
   b5a3e:	a805      	add	r0, sp, #20
   b5a40:	f7ff f9c8 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a44:	4b1d      	ldr	r3, [pc, #116]	; (b5abc <_GLOBAL__sub_I_Blynk+0x12c>)
   b5a46:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5a48:	f005 fa06 	bl	bae58 <_Z16_fetch_usbserialv>
   b5a4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a50:	f005 f9f2 	bl	bae38 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5a54:	f004 fa16 	bl	b9e84 <_ZN5spark10LogManager8instanceEv>
   b5a58:	4621      	mov	r1, r4
   b5a5a:	f004 fc07 	bl	ba26c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b5a5e:	a802      	add	r0, sp, #8
   b5a60:	f7ff f9b8 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b5a64:	4916      	ldr	r1, [pc, #88]	; (b5ac0 <_GLOBAL__sub_I_Blynk+0x130>)
   b5a66:	4817      	ldr	r0, [pc, #92]	; (b5ac4 <_GLOBAL__sub_I_Blynk+0x134>)
   b5a68:	f002 fda0 	bl	b85ac <_ZN8particle7BleUuidC1EPKc>
BleAddress peripheralAddr;
   b5a6c:	4816      	ldr	r0, [pc, #88]	; (b5ac8 <_GLOBAL__sub_I_Blynk+0x138>)
   b5a6e:	f002 fcda 	bl	b8426 <_ZN8particle10BleAddressC1Ev>
String string_rssi;
   b5a72:	4916      	ldr	r1, [pc, #88]	; (b5acc <_GLOBAL__sub_I_Blynk+0x13c>)
   b5a74:	4816      	ldr	r0, [pc, #88]	; (b5ad0 <_GLOBAL__sub_I_Blynk+0x140>)
   b5a76:	b00e      	add	sp, #56	; 0x38
   b5a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String string_rssi;
   b5a7c:	f002 bb25 	b.w	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
   b5a80:	2003e51c 	.word	0x2003e51c
   b5a84:	2003e4fc 	.word	0x2003e4fc
   b5a88:	000b4af1 	.word	0x000b4af1
   b5a8c:	000be1df 	.word	0x000be1df
   b5a90:	2003e558 	.word	0x2003e558
   b5a94:	000be1ee 	.word	0x000be1ee
   b5a98:	2003e4c0 	.word	0x2003e4c0
   b5a9c:	000be1fe 	.word	0x000be1fe
   b5aa0:	2003e4d0 	.word	0x2003e4d0
   b5aa4:	000be1a2 	.word	0x000be1a2
   b5aa8:	2003e4e0 	.word	0x2003e4e0
   b5aac:	2003e5b8 	.word	0x2003e5b8
   b5ab0:	2003e628 	.word	0x2003e628
   b5ab4:	000be23c 	.word	0x000be23c
   b5ab8:	000bf3d4 	.word	0x000bf3d4
   b5abc:	000be254 	.word	0x000be254
   b5ac0:	000be20e 	.word	0x000be20e
   b5ac4:	2003e658 	.word	0x2003e658
   b5ac8:	2003e64c 	.word	0x2003e64c
   b5acc:	000bf39f 	.word	0x000bf39f
   b5ad0:	2003e66c 	.word	0x2003e66c

000b5ad4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5ad4:	4770      	bx	lr

000b5ad6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5ad6:	b510      	push	{r4, lr}
  }
   b5ad8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5ada:	4604      	mov	r4, r0
  }
   b5adc:	f7fe ffef 	bl	b4abe <_ZdlPvj>
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	bd10      	pop	{r4, pc}

000b5ae4 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5ae4:	b40e      	push	{r1, r2, r3}
   b5ae6:	b503      	push	{r0, r1, lr}
   b5ae8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5aea:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5aec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5af0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5af2:	f003 ffe6 	bl	b9ac2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5af6:	b002      	add	sp, #8
   b5af8:	f85d eb04 	ldr.w	lr, [sp], #4
   b5afc:	b003      	add	sp, #12
   b5afe:	4770      	bx	lr

000b5b00 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b02:	4604      	mov	r4, r0
   b5b04:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5b06:	7922      	ldrb	r2, [r4, #4]
   b5b08:	68a3      	ldr	r3, [r4, #8]
   b5b0a:	b132      	cbz	r2, b5b1a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5b0c:	b9a3      	cbnz	r3, b5b38 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5b0e:	490b      	ldr	r1, [pc, #44]	; (b5b3c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5b10:	b002      	add	sp, #8
   b5b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5b16:	f003 bf99 	b.w	b9a4c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5b1a:	4a09      	ldr	r2, [pc, #36]	; (b5b40 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5b1c:	7b26      	ldrb	r6, [r4, #12]
   b5b1e:	4d09      	ldr	r5, [pc, #36]	; (b5b44 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5b20:	4909      	ldr	r1, [pc, #36]	; (b5b48 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5b22:	7b64      	ldrb	r4, [r4, #13]
   b5b24:	2e01      	cmp	r6, #1
   b5b26:	bf18      	it	ne
   b5b28:	4629      	movne	r1, r5
   b5b2a:	e9cd 1400 	strd	r1, r4, [sp]
   b5b2e:	4907      	ldr	r1, [pc, #28]	; (b5b4c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5b30:	f7ff ffd8 	bl	b5ae4 <_ZN5Print6printfEPKcz>
  }
   b5b34:	b002      	add	sp, #8
   b5b36:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5b38:	4a05      	ldr	r2, [pc, #20]	; (b5b50 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5b3a:	e7ef      	b.n	b5b1c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5b3c:	000be2e4 	.word	0x000be2e4
   b5b40:	000bf39f 	.word	0x000bf39f
   b5b44:	000be2e0 	.word	0x000be2e0
   b5b48:	000be2dc 	.word	0x000be2dc
   b5b4c:	000be2fa 	.word	0x000be2fa
   b5b50:	000be2d3 	.word	0x000be2d3

000b5b54 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b58:	b085      	sub	sp, #20
   b5b5a:	461f      	mov	r7, r3
   b5b5c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5b60:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5b64:	eba8 0902 	sub.w	r9, r8, r2
   b5b68:	eba7 0a01 	sub.w	sl, r7, r1
   b5b6c:	f1b9 0f00 	cmp.w	r9, #0
   b5b70:	bfb8      	it	lt
   b5b72:	f1c9 0900 	rsblt	r9, r9, #0
   b5b76:	f1ba 0f00 	cmp.w	sl, #0
   b5b7a:	bfb8      	it	lt
   b5b7c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5b80:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5b82:	4683      	mov	fp, r0
   b5b84:	460c      	mov	r4, r1
   b5b86:	4615      	mov	r5, r2
    if (steep) {
   b5b88:	dd04      	ble.n	b5b94 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5b8a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5b8c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5b8e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5b90:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5b92:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5b94:	42bc      	cmp	r4, r7
   b5b96:	dd05      	ble.n	b5ba4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5b98:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5b9a:	4645      	mov	r5, r8
   b5b9c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5b9e:	4622      	mov	r2, r4
   b5ba0:	463c      	mov	r4, r7
   b5ba2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5ba4:	1b3e      	subs	r6, r7, r4
   b5ba6:	b2b2      	uxth	r2, r6
   b5ba8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5baa:	eba8 0205 	sub.w	r2, r8, r5
   b5bae:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5bb2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5bb6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5bba:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5bbe:	4545      	cmp	r5, r8
   b5bc0:	bfb4      	ite	lt
   b5bc2:	2201      	movlt	r2, #1
   b5bc4:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5bc8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5bca:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5bcc:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5bce:	42bc      	cmp	r4, r7
   b5bd0:	dc1c      	bgt.n	b5c0c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5bd2:	f8db 2000 	ldr.w	r2, [fp]
   b5bd6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5bd8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5bda:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5bde:	bfc7      	ittee	gt
   b5be0:	4629      	movgt	r1, r5
   b5be2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5be4:	462a      	movle	r2, r5
   b5be6:	4621      	movle	r1, r4
   b5be8:	4658      	mov	r0, fp
   b5bea:	47c0      	blx	r8
        }
        err -= dy;
   b5bec:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5bee:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5bf0:	1ab6      	subs	r6, r6, r2
   b5bf2:	b2b1      	uxth	r1, r6
   b5bf4:	b236      	sxth	r6, r6
        if (err < 0) {
   b5bf6:	2e00      	cmp	r6, #0
   b5bf8:	da05      	bge.n	b5c06 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5bfa:	9a02      	ldr	r2, [sp, #8]
   b5bfc:	4415      	add	r5, r2
            err += dx;
   b5bfe:	9a00      	ldr	r2, [sp, #0]
   b5c00:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5c02:	b22d      	sxth	r5, r5
            err += dx;
   b5c04:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5c06:	3401      	adds	r4, #1
   b5c08:	b224      	sxth	r4, r4
   b5c0a:	e7e0      	b.n	b5bce <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5c0c:	b005      	add	sp, #20
   b5c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5c12 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5c12:	4770      	bx	lr

000b5c14 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5c14:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5c16:	6804      	ldr	r4, [r0, #0]
   b5c18:	6924      	ldr	r4, [r4, #16]
   b5c1a:	46a4      	mov	ip, r4
}
   b5c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5c20:	4760      	bx	ip

000b5c22 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5c22:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5c24:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5c26:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5c2a:	9502      	str	r5, [sp, #8]
   b5c2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5c2e:	46a4      	mov	ip, r4
}
   b5c30:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5c32:	4760      	bx	ip

000b5c34 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5c34:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5c36:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5c38:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5c3c:	9502      	str	r5, [sp, #8]
   b5c3e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5c40:	46a4      	mov	ip, r4
}
   b5c42:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5c44:	4760      	bx	ip

000b5c46 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c46:	b470      	push	{r4, r5, r6}
   b5c48:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5c4c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5c50:	6804      	ldr	r4, [r0, #0]
   b5c52:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5c56:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5c58:	46a4      	mov	ip, r4
}
   b5c5a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5c5c:	4760      	bx	ip

000b5c5e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5c5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c62:	461c      	mov	r4, r3
    startWrite();
   b5c64:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5c66:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5c6a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5c6c:	4605      	mov	r5, r0
   b5c6e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5c70:	3c01      	subs	r4, #1
   b5c72:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5c74:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5c76:	b224      	sxth	r4, r4
    startWrite();
   b5c78:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5c7a:	682b      	ldr	r3, [r5, #0]
   b5c7c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5c80:	9400      	str	r4, [sp, #0]
   b5c82:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5c84:	4628      	mov	r0, r5
   b5c86:	463b      	mov	r3, r7
   b5c88:	4632      	mov	r2, r6
   b5c8a:	4639      	mov	r1, r7
   b5c8c:	47a0      	blx	r4
    endWrite();
   b5c8e:	682b      	ldr	r3, [r5, #0]
   b5c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c92:	4628      	mov	r0, r5
}
   b5c94:	b002      	add	sp, #8
   b5c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5c9a:	4718      	bx	r3

000b5c9c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5ca0:	461d      	mov	r5, r3
    startWrite();
   b5ca2:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5ca4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5ca8:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5caa:	4604      	mov	r4, r0
   b5cac:	4617      	mov	r7, r2
   b5cae:	460e      	mov	r6, r1
    startWrite();
   b5cb0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5cb2:	e9cd 7800 	strd	r7, r8, [sp]
   b5cb6:	6822      	ldr	r2, [r4, #0]
   b5cb8:	1e6b      	subs	r3, r5, #1
   b5cba:	4433      	add	r3, r6
   b5cbc:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	b21b      	sxth	r3, r3
   b5cc2:	463a      	mov	r2, r7
   b5cc4:	4631      	mov	r1, r6
   b5cc6:	47a8      	blx	r5
    endWrite();
   b5cc8:	6823      	ldr	r3, [r4, #0]
   b5cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ccc:	4620      	mov	r0, r4
}
   b5cce:	b002      	add	sp, #8
   b5cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5cd4:	4718      	bx	r3

000b5cd6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5cd6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5cda:	461e      	mov	r6, r3
    startWrite();
   b5cdc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5cde:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5ce2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5ce4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5ce8:	460c      	mov	r4, r1
   b5cea:	4605      	mov	r5, r0
   b5cec:	4617      	mov	r7, r2
    startWrite();
   b5cee:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5cf0:	4426      	add	r6, r4
   b5cf2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5cf4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5cf6:	da0b      	bge.n	b5d10 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5cf8:	f8cd 8000 	str.w	r8, [sp]
   b5cfc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5d00:	4621      	mov	r1, r4
   b5d02:	464b      	mov	r3, r9
   b5d04:	463a      	mov	r2, r7
   b5d06:	4628      	mov	r0, r5
   b5d08:	3401      	adds	r4, #1
   b5d0a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5d0c:	b224      	sxth	r4, r4
   b5d0e:	e7f0      	b.n	b5cf2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d12:	4628      	mov	r0, r5
}
   b5d14:	b002      	add	sp, #8
   b5d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5d1a:	4718      	bx	r3

000b5d1c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5d1c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5d1e:	6802      	ldr	r2, [r0, #0]
   b5d20:	9101      	str	r1, [sp, #4]
   b5d22:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5d26:	9100      	str	r1, [sp, #0]
   b5d28:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5d2a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5d2e:	2200      	movs	r2, #0
   b5d30:	4611      	mov	r1, r2
   b5d32:	47a0      	blx	r4
}
   b5d34:	b002      	add	sp, #8
   b5d36:	bd10      	pop	{r4, pc}

000b5d38 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5d3c:	4299      	cmp	r1, r3
        uint16_t color) {
   b5d3e:	4616      	mov	r6, r2
   b5d40:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5d44:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d48:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5d4a:	4680      	mov	r8, r0
   b5d4c:	460d      	mov	r5, r1
   b5d4e:	461c      	mov	r4, r3
    if(x0 == x1){
   b5d50:	d113      	bne.n	b5d7a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5d52:	42be      	cmp	r6, r7
   b5d54:	bfc8      	it	gt
   b5d56:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d58:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5d5c:	bfc4      	itt	gt
   b5d5e:	463e      	movgt	r6, r7
   b5d60:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5d62:	1c7b      	adds	r3, r7, #1
   b5d64:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5d66:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d68:	b21b      	sxth	r3, r3
   b5d6a:	4632      	mov	r2, r6
   b5d6c:	4629      	mov	r1, r5
   b5d6e:	4640      	mov	r0, r8
   b5d70:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5d72:	b003      	add	sp, #12
   b5d74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d78:	4760      	bx	ip
    } else if(y0 == y1){
   b5d7a:	42be      	cmp	r6, r7
   b5d7c:	d10a      	bne.n	b5d94 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5d7e:	4299      	cmp	r1, r3
   b5d80:	bfc2      	ittt	gt
   b5d82:	460b      	movgt	r3, r1
   b5d84:	4625      	movgt	r5, r4
   b5d86:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d88:	1c63      	adds	r3, r4, #1
   b5d8a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5d8e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5d90:	1b5b      	subs	r3, r3, r5
   b5d92:	e7e9      	b.n	b5d68 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5d94:	6953      	ldr	r3, [r2, #20]
   b5d96:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5d98:	e9cd 7900 	strd	r7, r9, [sp]
   b5d9c:	f8d8 3000 	ldr.w	r3, [r8]
   b5da0:	4640      	mov	r0, r8
   b5da2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5da4:	4632      	mov	r2, r6
   b5da6:	4623      	mov	r3, r4
   b5da8:	4629      	mov	r1, r5
   b5daa:	47b8      	blx	r7
        endWrite();
   b5dac:	f8d8 3000 	ldr.w	r3, [r8]
   b5db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5db2:	4640      	mov	r0, r8
}
   b5db4:	b003      	add	sp, #12
   b5db6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5dba:	4718      	bx	r3

000b5dbc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5dbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5dc0:	461d      	mov	r5, r3
    startWrite();
   b5dc2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5dc4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5dc8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5dca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5dce:	4604      	mov	r4, r0
   b5dd0:	460f      	mov	r7, r1
   b5dd2:	4616      	mov	r6, r2
    startWrite();
   b5dd4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5dd6:	6823      	ldr	r3, [r4, #0]
   b5dd8:	f8cd 8000 	str.w	r8, [sp]
   b5ddc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5de0:	4632      	mov	r2, r6
   b5de2:	462b      	mov	r3, r5
   b5de4:	4639      	mov	r1, r7
   b5de6:	4620      	mov	r0, r4
   b5de8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5dea:	6823      	ldr	r3, [r4, #0]
   b5dec:	f8cd 8000 	str.w	r8, [sp]
   b5df0:	f109 32ff 	add.w	r2, r9, #4294967295
   b5df4:	4432      	add	r2, r6
   b5df6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5dfa:	4639      	mov	r1, r7
   b5dfc:	462b      	mov	r3, r5
   b5dfe:	4620      	mov	r0, r4
   b5e00:	b212      	sxth	r2, r2
   b5e02:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5e04:	6823      	ldr	r3, [r4, #0]
   b5e06:	f8cd 8000 	str.w	r8, [sp]
   b5e0a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5e0e:	4632      	mov	r2, r6
   b5e10:	464b      	mov	r3, r9
   b5e12:	4639      	mov	r1, r7
   b5e14:	4620      	mov	r0, r4
   b5e16:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5e18:	1e6b      	subs	r3, r5, #1
   b5e1a:	19d9      	adds	r1, r3, r7
   b5e1c:	6823      	ldr	r3, [r4, #0]
   b5e1e:	f8cd 8000 	str.w	r8, [sp]
   b5e22:	6a1d      	ldr	r5, [r3, #32]
   b5e24:	4620      	mov	r0, r4
   b5e26:	464b      	mov	r3, r9
   b5e28:	4632      	mov	r2, r6
   b5e2a:	b209      	sxth	r1, r1
   b5e2c:	47a8      	blx	r5
    endWrite();
   b5e2e:	6823      	ldr	r3, [r4, #0]
   b5e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e32:	4620      	mov	r0, r4
}
   b5e34:	b002      	add	sp, #8
   b5e36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5e3a:	4718      	bx	r3

000b5e3c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5e3c:	4770      	bx	lr

000b5e3e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5e3e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5e42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5e46:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5e48:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5e4a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5e4e:	bf59      	ittee	pl
   b5e50:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5e52:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5e54:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5e56:	81c3      	strhmi	r3, [r0, #14]
}
   b5e58:	4770      	bx	lr
	...

000b5e5c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5e5c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5e5e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5e60:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5e62:	4a07      	ldr	r2, [pc, #28]	; (b5e80 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5e64:	4d07      	ldr	r5, [pc, #28]	; (b5e84 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5e66:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5e68:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5e6a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5e6c:	f04f 31ff 	mov.w	r1, #4294967295
   b5e70:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5e74:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5e76:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5e78:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5e7a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5e7c:	6204      	str	r4, [r0, #32]
}
   b5e7e:	bd30      	pop	{r4, r5, pc}
   b5e80:	01000101 	.word	0x01000101
   b5e84:	000be820 	.word	0x000be820

000b5e88 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e8c:	b089      	sub	sp, #36	; 0x24
   b5e8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5e92:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e94:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5e98:	9304      	str	r3, [sp, #16]
   b5e9a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5e9e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5ea0:	9305      	str	r3, [sp, #20]
   b5ea2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5ea6:	4604      	mov	r4, r0
    startWrite();
   b5ea8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5eaa:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5eae:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5eb2:	bf48      	it	mi
   b5eb4:	f108 020e 	addmi.w	r2, r8, #14
   b5eb8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5ebc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5ebe:	4635      	mov	r5, r6
   b5ec0:	9b03      	ldr	r3, [sp, #12]
   b5ec2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5ec4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5ec8:	189a      	adds	r2, r3, r2
   b5eca:	9b05      	ldr	r3, [sp, #20]
   b5ecc:	428b      	cmp	r3, r1
   b5ece:	b212      	sxth	r2, r2
   b5ed0:	dd27      	ble.n	b5f22 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5ed2:	9b04      	ldr	r3, [sp, #16]
   b5ed4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5ed6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5eda:	9306      	str	r3, [sp, #24]
   b5edc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5ee0:	4580      	cmp	r8, r0
   b5ee2:	fa1f f189 	uxth.w	r1, r9
   b5ee6:	dd17      	ble.n	b5f18 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5ee8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5eea:	bf05      	ittet	eq
   b5eec:	9b06      	ldreq	r3, [sp, #24]
   b5eee:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5ef0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5ef2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5ef4:	bf18      	it	ne
   b5ef6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5ef8:	062b      	lsls	r3, r5, #24
   b5efa:	d50a      	bpl.n	b5f12 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5efc:	9b02      	ldr	r3, [sp, #8]
   b5efe:	6820      	ldr	r0, [r4, #0]
   b5f00:	9207      	str	r2, [sp, #28]
   b5f02:	4419      	add	r1, r3
   b5f04:	6983      	ldr	r3, [r0, #24]
   b5f06:	b209      	sxth	r1, r1
   b5f08:	461f      	mov	r7, r3
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	4653      	mov	r3, sl
   b5f0e:	47b8      	blx	r7
   b5f10:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5f12:	f109 0901 	add.w	r9, r9, #1
   b5f16:	e7e1      	b.n	b5edc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5f18:	9b01      	ldr	r3, [sp, #4]
   b5f1a:	3301      	adds	r3, #1
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	445e      	add	r6, fp
   b5f20:	e7ce      	b.n	b5ec0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5f22:	6823      	ldr	r3, [r4, #0]
   b5f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f26:	4620      	mov	r0, r4
}
   b5f28:	b009      	add	sp, #36	; 0x24
   b5f2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5f2e:	4718      	bx	r3

000b5f30 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f34:	ed2d 8b02 	vpush	{d8}
   b5f38:	b091      	sub	sp, #68	; 0x44
   b5f3a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5f3c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5f3e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5f42:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5f46:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5f4a:	9103      	str	r1, [sp, #12]
   b5f4c:	461f      	mov	r7, r3
   b5f4e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5f52:	9304      	str	r3, [sp, #16]
   b5f54:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5f56:	2a00      	cmp	r2, #0
   b5f58:	f040 80c5 	bne.w	b60e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5f5c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5f60:	428b      	cmp	r3, r1
   b5f62:	f340 814c 	ble.w	b61fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5f66:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5f6a:	42b3      	cmp	r3, r6
   b5f6c:	f340 8147 	ble.w	b61fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f70:	2306      	movs	r3, #6
   b5f72:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5f76:	2b00      	cmp	r3, #0
   b5f78:	f340 8141 	ble.w	b61fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5f7c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f80:	2b00      	cmp	r3, #0
   b5f82:	f340 813c 	ble.w	b61fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5f86:	7f03      	ldrb	r3, [r0, #28]
   b5f88:	b91b      	cbnz	r3, b5f92 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5f8a:	2faf      	cmp	r7, #175	; 0xaf
   b5f8c:	bf84      	itt	hi
   b5f8e:	3701      	addhi	r7, #1
   b5f90:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5f92:	f8db 3000 	ldr.w	r3, [fp]
   b5f96:	4658      	mov	r0, fp
   b5f98:	695b      	ldr	r3, [r3, #20]
   b5f9a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f9c:	2205      	movs	r2, #5
   b5f9e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5fa0:	2200      	movs	r2, #0
   b5fa2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5fa4:	4a98      	ldr	r2, [pc, #608]	; (b6208 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5fa6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5faa:	18d3      	adds	r3, r2, r3
   b5fac:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5fae:	b2b3      	uxth	r3, r6
   b5fb0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5fb2:	9a05      	ldr	r2, [sp, #20]
   b5fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5fb6:	5c9b      	ldrb	r3, [r3, r2]
   b5fb8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5fba:	b2ab      	uxth	r3, r5
   b5fbc:	930b      	str	r3, [sp, #44]	; 0x2c
   b5fbe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5fc2:	9308      	str	r3, [sp, #32]
   b5fc4:	9b03      	ldr	r3, [sp, #12]
   b5fc6:	fb02 f905 	mul.w	r9, r2, r5
   b5fca:	fa19 f983 	uxtah	r9, r9, r3
   b5fce:	fa0f f389 	sxth.w	r3, r9
   b5fd2:	ee08 3a10 	vmov	s16, r3
   b5fd6:	2308      	movs	r3, #8
   b5fd8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5fda:	9b03      	ldr	r3, [sp, #12]
   b5fdc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5fe0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5fe4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5fe8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5fea:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5fee:	07d2      	lsls	r2, r2, #31
   b5ff0:	d552      	bpl.n	b6098 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5ff2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5ff4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5ff8:	d13e      	bne.n	b6078 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5ffa:	2c01      	cmp	r4, #1
   b5ffc:	d13c      	bne.n	b6078 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5ffe:	699b      	ldr	r3, [r3, #24]
   b6000:	9906      	ldr	r1, [sp, #24]
   b6002:	461f      	mov	r7, r3
   b6004:	9b04      	ldr	r3, [sp, #16]
   b6006:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b6008:	b212      	sxth	r2, r2
   b600a:	4651      	mov	r1, sl
   b600c:	4658      	mov	r0, fp
   b600e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6010:	f109 0301 	add.w	r3, r9, #1
   b6014:	fa4f f983 	sxtb.w	r9, r3
   b6018:	9b07      	ldr	r3, [sp, #28]
   b601a:	085b      	lsrs	r3, r3, #1
   b601c:	9307      	str	r3, [sp, #28]
   b601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6020:	3b01      	subs	r3, #1
   b6022:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6026:	930a      	str	r3, [sp, #40]	; 0x28
   b6028:	d1de      	bne.n	b5fe8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b602a:	9f05      	ldr	r7, [sp, #20]
   b602c:	3701      	adds	r7, #1
   b602e:	b27b      	sxtb	r3, r7
   b6030:	9305      	str	r3, [sp, #20]
   b6032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6034:	3b01      	subs	r3, #1
   b6036:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b603a:	9309      	str	r3, [sp, #36]	; 0x24
   b603c:	d1b9      	bne.n	b5fb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b603e:	9b04      	ldr	r3, [sp, #16]
   b6040:	4543      	cmp	r3, r8
   b6042:	d00f      	beq.n	b6064 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6044:	2d01      	cmp	r5, #1
   b6046:	f8db 3000 	ldr.w	r3, [fp]
   b604a:	d13b      	bne.n	b60c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b604c:	2c01      	cmp	r4, #1
   b604e:	d139      	bne.n	b60c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6050:	9908      	ldr	r1, [sp, #32]
   b6052:	f8cd 8000 	str.w	r8, [sp]
   b6056:	3105      	adds	r1, #5
   b6058:	6a1c      	ldr	r4, [r3, #32]
   b605a:	4632      	mov	r2, r6
   b605c:	2308      	movs	r3, #8
   b605e:	b209      	sxth	r1, r1
   b6060:	4658      	mov	r0, fp
   b6062:	47a0      	blx	r4
        endWrite();
   b6064:	f8db 3000 	ldr.w	r3, [fp]
   b6068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b606a:	4658      	mov	r0, fp
}
   b606c:	b011      	add	sp, #68	; 0x44
   b606e:	ecbd 8b02 	vpop	{d8}
   b6072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6076:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6078:	9906      	ldr	r1, [sp, #24]
   b607a:	fb14 f202 	smulbb	r2, r4, r2
   b607e:	440a      	add	r2, r1
   b6080:	9904      	ldr	r1, [sp, #16]
   b6082:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6084:	9400      	str	r4, [sp, #0]
   b6086:	69db      	ldr	r3, [r3, #28]
   b6088:	ee18 1a10 	vmov	r1, s16
   b608c:	461f      	mov	r7, r3
   b608e:	b212      	sxth	r2, r2
   b6090:	462b      	mov	r3, r5
   b6092:	4658      	mov	r0, fp
   b6094:	47b8      	blx	r7
   b6096:	e7bb      	b.n	b6010 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6098:	9a04      	ldr	r2, [sp, #16]
   b609a:	4542      	cmp	r2, r8
   b609c:	d0b8      	beq.n	b6010 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b609e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b60a0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b60a4:	d107      	bne.n	b60b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b60a6:	2c01      	cmp	r4, #1
   b60a8:	d105      	bne.n	b60b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b60aa:	699b      	ldr	r3, [r3, #24]
   b60ac:	9906      	ldr	r1, [sp, #24]
   b60ae:	461f      	mov	r7, r3
   b60b0:	440a      	add	r2, r1
   b60b2:	4643      	mov	r3, r8
   b60b4:	e7a8      	b.n	b6008 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b60b6:	9906      	ldr	r1, [sp, #24]
   b60b8:	f8cd 8004 	str.w	r8, [sp, #4]
   b60bc:	fb14 f202 	smulbb	r2, r4, r2
   b60c0:	440a      	add	r2, r1
   b60c2:	e7df      	b.n	b6084 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b60c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b60c6:	f8cd 8004 	str.w	r8, [sp, #4]
   b60ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b60ce:	9a08      	ldr	r2, [sp, #32]
   b60d0:	00e4      	lsls	r4, r4, #3
   b60d2:	440a      	add	r2, r1
   b60d4:	4611      	mov	r1, r2
   b60d6:	9400      	str	r4, [sp, #0]
   b60d8:	69dc      	ldr	r4, [r3, #28]
   b60da:	4632      	mov	r2, r6
   b60dc:	462b      	mov	r3, r5
   b60de:	b209      	sxth	r1, r1
   b60e0:	4658      	mov	r0, fp
   b60e2:	47a0      	blx	r4
        endWrite();
   b60e4:	e7be      	b.n	b6064 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b60e6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b60e8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b60ea:	6812      	ldr	r2, [r2, #0]
   b60ec:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b60ee:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b60f0:	b2ff      	uxtb	r7, r7
   b60f2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b60f6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b60fa:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b60fc:	789a      	ldrb	r2, [r3, #2]
   b60fe:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6100:	78da      	ldrb	r2, [r3, #3]
   b6102:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6104:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6106:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b610a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b610e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6110:	d801      	bhi.n	b6116 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6112:	2c01      	cmp	r4, #1
   b6114:	d957      	bls.n	b61c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6116:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b611a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b611c:	fa0f f38a 	sxth.w	r3, sl
   b6120:	9307      	str	r3, [sp, #28]
        startWrite();
   b6122:	f8db 3000 	ldr.w	r3, [fp]
   b6126:	4658      	mov	r0, fp
   b6128:	695b      	ldr	r3, [r3, #20]
   b612a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b612c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b612e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6132:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6134:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6138:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b613a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b613c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b613e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6140:	429f      	cmp	r7, r3
   b6142:	d28f      	bcs.n	b6064 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6144:	9b07      	ldr	r3, [sp, #28]
   b6146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6148:	443b      	add	r3, r7
   b614a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b614e:	2200      	movs	r2, #0
   b6150:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6154:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6156:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b615a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b615e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6162:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6164:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6166:	9905      	ldr	r1, [sp, #20]
   b6168:	4291      	cmp	r1, r2
   b616a:	d241      	bcs.n	b61f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b616c:	1c5a      	adds	r2, r3, #1
   b616e:	b2d2      	uxtb	r2, r2
   b6170:	075b      	lsls	r3, r3, #29
   b6172:	920d      	str	r2, [sp, #52]	; 0x34
   b6174:	d107      	bne.n	b6186 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6176:	9b06      	ldr	r3, [sp, #24]
   b6178:	9906      	ldr	r1, [sp, #24]
   b617a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b617c:	3301      	adds	r3, #1
   b617e:	b29b      	uxth	r3, r3
   b6180:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6184:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6186:	f019 0f80 	tst.w	r9, #128	; 0x80
   b618a:	d012      	beq.n	b61b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b618c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b618e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6192:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6196:	d11a      	bne.n	b61ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6198:	2c01      	cmp	r4, #1
   b619a:	d118      	bne.n	b61ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b619c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b619e:	699b      	ldr	r3, [r3, #24]
   b61a0:	4411      	add	r1, r2
   b61a2:	9a05      	ldr	r2, [sp, #20]
   b61a4:	4411      	add	r1, r2
   b61a6:	461e      	mov	r6, r3
   b61a8:	4652      	mov	r2, sl
   b61aa:	9b04      	ldr	r3, [sp, #16]
   b61ac:	b209      	sxth	r1, r1
   b61ae:	4658      	mov	r0, fp
   b61b0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b61b2:	9e05      	ldr	r6, [sp, #20]
   b61b4:	3601      	adds	r6, #1
   b61b6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b61b8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b61bc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b61be:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b61c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b61c4:	e7ce      	b.n	b6164 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b61c6:	2300      	movs	r3, #0
   b61c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b61cc:	e7a9      	b.n	b6122 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b61ce:	9805      	ldr	r0, [sp, #20]
   b61d0:	9a08      	ldr	r2, [sp, #32]
   b61d2:	4402      	add	r2, r0
   b61d4:	fb02 1105 	mla	r1, r2, r5, r1
   b61d8:	9a04      	ldr	r2, [sp, #16]
   b61da:	e9cd 4200 	strd	r4, r2, [sp]
   b61de:	69db      	ldr	r3, [r3, #28]
   b61e0:	ee18 2a10 	vmov	r2, s16
   b61e4:	461e      	mov	r6, r3
   b61e6:	b209      	sxth	r1, r1
   b61e8:	462b      	mov	r3, r5
   b61ea:	4658      	mov	r0, fp
   b61ec:	47b0      	blx	r6
   b61ee:	e7e0      	b.n	b61b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b61f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b61f2:	3701      	adds	r7, #1
   b61f4:	4498      	add	r8, r3
   b61f6:	fa5f f888 	uxtb.w	r8, r8
   b61fa:	b2ff      	uxtb	r7, r7
   b61fc:	e79f      	b.n	b613e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b61fe:	b011      	add	sp, #68	; 0x44
   b6200:	ecbd 8b02 	vpop	{d8}
   b6204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6208:	000be317 	.word	0x000be317

000b620c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b620c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b620e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6210:	b085      	sub	sp, #20
   b6212:	4604      	mov	r4, r0
   b6214:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6216:	2a00      	cmp	r2, #0
   b6218:	d134      	bne.n	b6284 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b621a:	290a      	cmp	r1, #10
   b621c:	d108      	bne.n	b6230 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b621e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6220:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6222:	7e42      	ldrb	r2, [r0, #25]
   b6224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6228:	8263      	strh	r3, [r4, #18]
}
   b622a:	2001      	movs	r0, #1
   b622c:	b005      	add	sp, #20
   b622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6230:	290d      	cmp	r1, #13
   b6232:	d0fa      	beq.n	b622a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6234:	7ee1      	ldrb	r1, [r4, #27]
   b6236:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6238:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b623a:	b171      	cbz	r1, b625a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b623c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6240:	2106      	movs	r1, #6
   b6242:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6246:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b624a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b624c:	bfc1      	itttt	gt
   b624e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6252:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6254:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6258:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b625a:	8ae2      	ldrh	r2, [r4, #22]
   b625c:	9201      	str	r2, [sp, #4]
   b625e:	8aa2      	ldrh	r2, [r4, #20]
   b6260:	9200      	str	r2, [sp, #0]
   b6262:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6266:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b626a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b626e:	4620      	mov	r0, r4
   b6270:	f7ff fe5e 	bl	b5f30 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6274:	7e23      	ldrb	r3, [r4, #24]
   b6276:	8a22      	ldrh	r2, [r4, #16]
   b6278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b627c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6280:	8223      	strh	r3, [r4, #16]
   b6282:	e7d2      	b.n	b622a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6284:	290a      	cmp	r1, #10
   b6286:	d107      	bne.n	b6298 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6288:	2300      	movs	r3, #0
   b628a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b628c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b628e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6290:	8a43      	ldrh	r3, [r0, #18]
   b6292:	fb01 3302 	mla	r3, r1, r2, r3
   b6296:	e7c7      	b.n	b6228 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6298:	290d      	cmp	r1, #13
   b629a:	d0c6      	beq.n	b622a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b629c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b629e:	42a9      	cmp	r1, r5
   b62a0:	d3c3      	bcc.n	b622a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b62a2:	7a51      	ldrb	r1, [r2, #9]
   b62a4:	4299      	cmp	r1, r3
   b62a6:	d3c0      	bcc.n	b622a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b62a8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b62aa:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b62ac:	b2ed      	uxtb	r5, r5
   b62ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b62b2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b62b4:	b328      	cbz	r0, b6302 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b62b6:	78e9      	ldrb	r1, [r5, #3]
   b62b8:	b319      	cbz	r1, b6302 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b62ba:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b62bc:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b62be:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b62c0:	b191      	cbz	r1, b62e8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b62c2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b62c6:	4408      	add	r0, r1
   b62c8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b62cc:	fb06 1100 	mla	r1, r6, r0, r1
   b62d0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b62d4:	4281      	cmp	r1, r0
   b62d6:	dd07      	ble.n	b62e8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b62d8:	2000      	movs	r0, #0
   b62da:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b62dc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b62e0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b62e2:	fb02 1207 	mla	r2, r2, r7, r1
   b62e6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b62e8:	8ae2      	ldrh	r2, [r4, #22]
   b62ea:	9201      	str	r2, [sp, #4]
   b62ec:	8aa2      	ldrh	r2, [r4, #20]
   b62ee:	9200      	str	r2, [sp, #0]
   b62f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b62f4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b62f8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b62fc:	4620      	mov	r0, r4
   b62fe:	f7ff fe17 	bl	b5f30 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6302:	7929      	ldrb	r1, [r5, #4]
   b6304:	7e22      	ldrb	r2, [r4, #24]
   b6306:	8a23      	ldrh	r3, [r4, #16]
   b6308:	fb01 3302 	mla	r3, r1, r2, r3
   b630c:	e7b8      	b.n	b6280 <_ZN12Adafruit_GFX5writeEh+0x74>

000b630e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b630e:	2901      	cmp	r1, #1
   b6310:	bf38      	it	cc
   b6312:	2101      	movcc	r1, #1
   b6314:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6316:	7641      	strb	r1, [r0, #25]
}
   b6318:	4770      	bx	lr
	...

000b631c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b631c:	b510      	push	{r4, lr}
   b631e:	4b06      	ldr	r3, [pc, #24]	; (b6338 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6320:	6003      	str	r3, [r0, #0]
   b6322:	4604      	mov	r4, r0
	if (mutex) {
   b6324:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6326:	b108      	cbz	r0, b632c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6328:	f001 fa6a 	bl	b7800 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b632c:	4620      	mov	r0, r4
   b632e:	f000 fd13 	bl	b6d58 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6332:	4620      	mov	r0, r4
   b6334:	bd10      	pop	{r4, pc}
   b6336:	bf00      	nop
   b6338:	000be878 	.word	0x000be878

000b633c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b633c:	b510      	push	{r4, lr}
   b633e:	4604      	mov	r4, r0
}
   b6340:	f7ff ffec 	bl	b631c <_ZN16OledWingAdafruitD1Ev>
   b6344:	4620      	mov	r0, r4
   b6346:	2170      	movs	r1, #112	; 0x70
   b6348:	f7fe fbb9 	bl	b4abe <_ZdlPvj>
   b634c:	4620      	mov	r0, r4
   b634e:	bd10      	pop	{r4, pc}

000b6350 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6350:	b530      	push	{r4, r5, lr}
   b6352:	b085      	sub	sp, #20
   b6354:	4604      	mov	r4, r0
   b6356:	460d      	mov	r5, r1
   b6358:	f005 fd0a 	bl	bbd70 <_Z19__fetch_global_Wirev>
   b635c:	4a10      	ldr	r2, [pc, #64]	; (b63a0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b635e:	4911      	ldr	r1, [pc, #68]	; (b63a4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6360:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6364:	f04f 32ff 	mov.w	r2, #4294967295
   b6368:	2180      	movs	r1, #128	; 0x80
   b636a:	4603      	mov	r3, r0
   b636c:	9200      	str	r2, [sp, #0]
   b636e:	4620      	mov	r0, r4
   b6370:	2220      	movs	r2, #32
   b6372:	f000 fd69 	bl	b6e48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6376:	4b0c      	ldr	r3, [pc, #48]	; (b63a8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6378:	6023      	str	r3, [r4, #0]
   b637a:	2300      	movs	r3, #0
   b637c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6380:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6384:	f000 f854 	bl	b6430 <_ZN8DebounceC1Ev>
   b6388:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b638c:	f000 f850 	bl	b6430 <_ZN8DebounceC1Ev>
   b6390:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6394:	f000 f84c 	bl	b6430 <_ZN8DebounceC1Ev>
}
   b6398:	4620      	mov	r0, r4
   b639a:	b005      	add	sp, #20
   b639c:	bd30      	pop	{r4, r5, pc}
   b639e:	bf00      	nop
   b63a0:	00061a80 	.word	0x00061a80
   b63a4:	000186a0 	.word	0x000186a0
   b63a8:	000be878 	.word	0x000be878

000b63ac <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b63ac:	b513      	push	{r0, r1, r4, lr}
   b63ae:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b63b0:	3050      	adds	r0, #80	; 0x50
   b63b2:	f001 fa1d 	bl	b77f0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b63b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63b8:	07d9      	lsls	r1, r3, #31
   b63ba:	d505      	bpl.n	b63c8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b63bc:	2202      	movs	r2, #2
   b63be:	2104      	movs	r1, #4
   b63c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b63c4:	f000 f848 	bl	b6458 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b63c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63ca:	079a      	lsls	r2, r3, #30
   b63cc:	d505      	bpl.n	b63da <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b63ce:	2200      	movs	r2, #0
   b63d0:	2103      	movs	r1, #3
   b63d2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b63d6:	f000 f83f 	bl	b6458 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b63da:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b63dc:	075b      	lsls	r3, r3, #29
   b63de:	d505      	bpl.n	b63ec <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b63e0:	2202      	movs	r2, #2
   b63e2:	4611      	mov	r1, r2
   b63e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b63e8:	f000 f836 	bl	b6458 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b63ec:	2301      	movs	r3, #1
   b63ee:	9300      	str	r3, [sp, #0]
   b63f0:	223c      	movs	r2, #60	; 0x3c
   b63f2:	2102      	movs	r1, #2
   b63f4:	4620      	mov	r0, r4
   b63f6:	f000 fe2f 	bl	b7058 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b63fa:	b002      	add	sp, #8
   b63fc:	bd10      	pop	{r4, pc}

000b63fe <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b63fe:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6400:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6402:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6404:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6406:	d502      	bpl.n	b640e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6408:	3058      	adds	r0, #88	; 0x58
   b640a:	f000 f832 	bl	b6472 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b640e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6410:	079a      	lsls	r2, r3, #30
   b6412:	d503      	bpl.n	b641c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6414:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6418:	f000 f82b 	bl	b6472 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b641c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b641e:	075b      	lsls	r3, r3, #29
   b6420:	d505      	bpl.n	b642e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6422:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b642a:	f000 b822 	b.w	b6472 <_ZN8Debounce6updateEv>
}
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6430:	2100      	movs	r1, #0
   b6432:	220a      	movs	r2, #10
   b6434:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6438:	4770      	bx	lr

000b643a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b643a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b643c:	b510      	push	{r4, lr}
   b643e:	4604      	mov	r4, r0
    this->pin = pin;
   b6440:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6442:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6444:	b288      	uxth	r0, r1
   b6446:	f005 fbe7 	bl	bbc18 <digitalRead>
   b644a:	b108      	cbz	r0, b6450 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b644c:	2303      	movs	r3, #3
   b644e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6450:	f001 f988 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6454:	6020      	str	r0, [r4, #0]
#endif
}
   b6456:	bd10      	pop	{r4, pc}

000b6458 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6458:	b538      	push	{r3, r4, r5, lr}
   b645a:	460c      	mov	r4, r1
   b645c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b645e:	4611      	mov	r1, r2
   b6460:	b2a0      	uxth	r0, r4
   b6462:	f005 fbaf 	bl	bbbc4 <pinMode>
  
  this->attach(pin);
   b6466:	4621      	mov	r1, r4
   b6468:	4628      	mov	r0, r5
}
   b646a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b646e:	f7ff bfe4 	b.w	b643a <_ZN8Debounce6attachEi>

000b6472 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6472:	b538      	push	{r3, r4, r5, lr}
   b6474:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6476:	79c0      	ldrb	r0, [r0, #7]
   b6478:	f005 fbce 	bl	bbc18 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b647c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b647e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6480:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6484:	bf18      	it	ne
   b6486:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6488:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b648c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b648e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6490:	d00a      	beq.n	b64a8 <_ZN8Debounce6updateEv+0x36>
   b6492:	f001 f967 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6496:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6498:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b649a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b649e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b64a0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b64a2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b64a6:	bd38      	pop	{r3, r4, r5, pc}
   b64a8:	f001 f95c 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b64ac:	6823      	ldr	r3, [r4, #0]
   b64ae:	1ac0      	subs	r0, r0, r3
   b64b0:	88a3      	ldrh	r3, [r4, #4]
   b64b2:	4298      	cmp	r0, r3
   b64b4:	d3f4      	bcc.n	b64a0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b64b6:	79a3      	ldrb	r3, [r4, #6]
   b64b8:	f003 0301 	and.w	r3, r3, #1
   b64bc:	42ab      	cmp	r3, r5
   b64be:	d0ef      	beq.n	b64a0 <_ZN8Debounce6updateEv+0x2e>
   b64c0:	f001 f950 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b64c4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b64c6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b64c8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b64cc:	f043 0308 	orr.w	r3, r3, #8
   b64d0:	e7e5      	b.n	b649e <_ZN8Debounce6updateEv+0x2c>

000b64d2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b64d2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b64d6:	b510      	push	{r4, lr}
   b64d8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b64da:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b64dc:	b113      	cbz	r3, b64e4 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b64de:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b64e0:	f001 f996 	bl	b7810 <os_mutex_lock>
#endif
#endif
#endif
        }
   b64e4:	4620      	mov	r0, r4
   b64e6:	bd10      	pop	{r4, pc}

000b64e8 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b64e8:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b64ea:	6803      	ldr	r3, [r0, #0]
   b64ec:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b64f0:	4604      	mov	r4, r0
            if (mqtt->thread)
   b64f2:	b112      	cbz	r2, b64fa <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b64f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b64f6:	f001 f993 	bl	b7820 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b64fa:	4620      	mov	r0, r4
   b64fc:	bd10      	pop	{r4, pc}

000b64fe <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b64fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6500:	461f      	mov	r7, r3
   b6502:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6506:	4604      	mov	r4, r0
   b6508:	460d      	mov	r5, r1
   b650a:	4616      	mov	r6, r2
    if (thread) {
   b650c:	b12b      	cbz	r3, b651a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b650e:	2301      	movs	r3, #1
   b6510:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6514:	3058      	adds	r0, #88	; 0x58
   b6516:	f001 f96b 	bl	b77f0 <os_mutex_create>
    }
    this->callback = callback;
   b651a:	9b08      	ldr	r3, [sp, #32]
   b651c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b651e:	2300      	movs	r3, #0
   b6520:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6522:	b106      	cbz	r6, b6526 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6524:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6526:	b125      	cbz	r5, b6532 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6528:	4629      	mov	r1, r5
   b652a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b652e:	f001 fe2a 	bl	b8186 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6532:	9b06      	ldr	r3, [sp, #24]
   b6534:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6536:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6538:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b653a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b653e:	2bff      	cmp	r3, #255	; 0xff
   b6540:	bfb8      	it	lt
   b6542:	23ff      	movlt	r3, #255	; 0xff
   b6544:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6548:	b108      	cbz	r0, b654e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b654a:	f7fe fab6 	bl	b4aba <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b654e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6552:	f7fe fab0 	bl	b4ab6 <_Znaj>
   b6556:	61e0      	str	r0, [r4, #28]
}
   b6558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b655c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b655c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6560:	4604      	mov	r4, r0
            bool thread) {
   b6562:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6564:	4617      	mov	r7, r2
   b6566:	4698      	mov	r8, r3
   b6568:	460e      	mov	r6, r1
            bool thread) {
   b656a:	f005 f811 	bl	bb590 <_ZN9TCPClientC1Ev>
   b656e:	490d      	ldr	r1, [pc, #52]	; (b65a4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6570:	61e5      	str	r5, [r4, #28]
   b6572:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6576:	f001 fda8 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b657a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b657e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6580:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6584:	22ff      	movs	r2, #255	; 0xff
   b6586:	230f      	movs	r3, #15
   b6588:	e9cd 3200 	strd	r3, r2, [sp]
   b658c:	4620      	mov	r0, r4
            bool thread) {
   b658e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6592:	463b      	mov	r3, r7
   b6594:	462a      	mov	r2, r5
   b6596:	4631      	mov	r1, r6
   b6598:	f7ff ffb1 	bl	b64fe <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b659c:	4620      	mov	r0, r4
   b659e:	b004      	add	sp, #16
   b65a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b65a4:	000bf39f 	.word	0x000bf39f

000b65a8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b65a8:	b510      	push	{r4, lr}
   b65aa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b65ac:	4620      	mov	r0, r4
   b65ae:	f004 ff4b 	bl	bb448 <_ZN9TCPClient9availableEv>
   b65b2:	2800      	cmp	r0, #0
   b65b4:	d0fa      	beq.n	b65ac <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b65b6:	4620      	mov	r0, r4
   b65b8:	f004 fd54 	bl	bb064 <_ZN9TCPClient4readEv>
}
   b65bc:	b2c0      	uxtb	r0, r0
   b65be:	bd10      	pop	{r4, pc}

000b65c0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b65c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b65c4:	4605      	mov	r5, r0
   b65c6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b65c8:	f7ff ffee 	bl	b65a8 <_ZN4MQTT8readByteEv>
   b65cc:	69eb      	ldr	r3, [r5, #28]
   b65ce:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b65d0:	69eb      	ldr	r3, [r5, #28]
   b65d2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b65d6:	f04f 0901 	mov.w	r9, #1
   b65da:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b65de:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b65e0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b65e2:	4628      	mov	r0, r5
   b65e4:	f7ff ffe0 	bl	b65a8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b65e8:	4626      	mov	r6, r4
   b65ea:	69eb      	ldr	r3, [r5, #28]
   b65ec:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b65ee:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b65f2:	fb13 f309 	smulbb	r3, r3, r9
   b65f6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b65f8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b65fa:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b65fc:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b65fe:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6600:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b6604:	d4ed      	bmi.n	b65e2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b6606:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6608:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b660c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6610:	d11e      	bne.n	b6650 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6612:	4628      	mov	r0, r5
   b6614:	f7ff ffc8 	bl	b65a8 <_ZN4MQTT8readByteEv>
   b6618:	69eb      	ldr	r3, [r5, #28]
   b661a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b661c:	4628      	mov	r0, r5
   b661e:	f7ff ffc3 	bl	b65a8 <_ZN4MQTT8readByteEv>
   b6622:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6624:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6626:	b2b6      	uxth	r6, r6
   b6628:	69eb      	ldr	r3, [r5, #28]
   b662a:	b2a4      	uxth	r4, r4
   b662c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b662e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6630:	b2b6      	uxth	r6, r6
   b6632:	42be      	cmp	r6, r7
   b6634:	d20e      	bcs.n	b6654 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6636:	4628      	mov	r0, r5
   b6638:	f7ff ffb6 	bl	b65a8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b663c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6640:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6642:	bf84      	itt	hi
   b6644:	69eb      	ldrhi	r3, [r5, #28]
   b6646:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6648:	3401      	adds	r4, #1
   b664a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b664c:	3601      	adds	r6, #1
   b664e:	e7ef      	b.n	b6630 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6650:	2600      	movs	r6, #0
   b6652:	e7ed      	b.n	b6630 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6654:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6658:	42a3      	cmp	r3, r4
   b665a:	bf2c      	ite	cs
   b665c:	4620      	movcs	r0, r4
   b665e:	2000      	movcc	r0, #0
   b6660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6664 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6668:	4615      	mov	r5, r2
   b666a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b666c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b666e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6670:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6672:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6674:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6676:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b667a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b667e:	f103 0401 	add.w	r4, r3, #1
   b6682:	4403      	add	r3, r0
            digit |= 0x80;
   b6684:	bf88      	it	hi
   b6686:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b668a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b668e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6692:	b2e4      	uxtb	r4, r4
   b6694:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6698:	d81e      	bhi.n	b66d8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b669a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b669e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b66a2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b66a4:	4622      	mov	r2, r4
   b66a6:	a901      	add	r1, sp, #4
   b66a8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b66aa:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b66ae:	f005 fcc7 	bl	bc040 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b66b2:	1c72      	adds	r2, r6, #1
   b66b4:	4422      	add	r2, r4
   b66b6:	4641      	mov	r1, r8
   b66b8:	4638      	mov	r0, r7
   b66ba:	f004 fcbe 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
   b66be:	4605      	mov	r5, r0
   b66c0:	f001 f850 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b66c4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b66c6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b66c8:	4432      	add	r2, r6
   b66ca:	b2a8      	uxth	r0, r5
}
   b66cc:	1a13      	subs	r3, r2, r0
   b66ce:	4258      	negs	r0, r3
   b66d0:	4158      	adcs	r0, r3
   b66d2:	b002      	add	sp, #8
   b66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b66d8:	4623      	mov	r3, r4
   b66da:	e7ca      	b.n	b6672 <_ZN4MQTT5writeEhPht+0xe>

000b66dc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b66dc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b66de:	b5f0      	push	{r4, r5, r6, r7, lr}
   b66e0:	4605      	mov	r5, r0
    pos += 2;
   b66e2:	b298      	uxth	r0, r3
   b66e4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b66e6:	5cce      	ldrb	r6, [r1, r3]
   b66e8:	b29c      	uxth	r4, r3
   b66ea:	b156      	cbz	r6, b6702 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b66ec:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b66f0:	4584      	cmp	ip, r0
   b66f2:	f103 0701 	add.w	r7, r3, #1
   b66f6:	d904      	bls.n	b6702 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b66f8:	1c44      	adds	r4, r0, #1
   b66fa:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b66fc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b66fe:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6700:	e7f1      	b.n	b66e6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6702:	b299      	uxth	r1, r3
   b6704:	1a41      	subs	r1, r0, r1
   b6706:	440a      	add	r2, r1
   b6708:	0a21      	lsrs	r1, r4, #8
   b670a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b670e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6712:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6714 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6714:	b538      	push	{r3, r4, r5, lr}
   b6716:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6718:	f004 fdb8 	bl	bb28c <_ZN9TCPClient9connectedEv>
   b671c:	2800      	cmp	r0, #0
   b671e:	bf14      	ite	ne
   b6720:	2501      	movne	r5, #1
   b6722:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6724:	d102      	bne.n	b672c <_ZN4MQTT11isConnectedEv+0x18>
   b6726:	4620      	mov	r0, r4
   b6728:	f004 fee8 	bl	bb4fc <_ZN9TCPClient4stopEv>
    return rc;
}
   b672c:	4628      	mov	r0, r5
   b672e:	bd38      	pop	{r3, r4, r5, pc}

000b6730 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6734:	b088      	sub	sp, #32
   b6736:	4604      	mov	r4, r0
   b6738:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b673c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6740:	4689      	mov	r9, r1
   b6742:	4617      	mov	r7, r2
   b6744:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6746:	f7ff ffe5 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b674a:	4605      	mov	r5, r0
   b674c:	2800      	cmp	r0, #0
   b674e:	f040 80cd 	bne.w	b68ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6752:	4621      	mov	r1, r4
   b6754:	a801      	add	r0, sp, #4
   b6756:	f7ff febc 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b675a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b675c:	2900      	cmp	r1, #0
   b675e:	f040 8088 	bne.w	b6872 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6762:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6766:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6768:	462b      	mov	r3, r5
   b676a:	4620      	mov	r0, r4
   b676c:	f004 fd10 	bl	bb190 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6770:	2800      	cmp	r0, #0
   b6772:	d07a      	beq.n	b686a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6774:	2301      	movs	r3, #1
   b6776:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6778:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b677c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b677e:	2b04      	cmp	r3, #4
   b6780:	4b5b      	ldr	r3, [pc, #364]	; (b68f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6782:	f040 8081 	bne.w	b6888 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6786:	6818      	ldr	r0, [r3, #0]
   b6788:	8899      	ldrh	r1, [r3, #4]
   b678a:	799b      	ldrb	r3, [r3, #6]
   b678c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6790:	f88d 300e 	strb.w	r3, [sp, #14]
   b6794:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6796:	f8c2 0005 	str.w	r0, [r2, #5]
   b679a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b679e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b67a2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b67a6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b67a8:	230c      	movs	r3, #12
            if (willTopic) {
   b67aa:	f1b8 0f00 	cmp.w	r8, #0
   b67ae:	f000 8081 	beq.w	b68b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b67b2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b67b6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b67ba:	0140      	lsls	r0, r0, #5
   b67bc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b67c0:	f040 0006 	orr.w	r0, r0, #6
   b67c4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b67c6:	f1ba 0f00 	cmp.w	sl, #0
   b67ca:	d101      	bne.n	b67d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b67cc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b67d0:	b11f      	cbz	r7, b67da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b67d2:	2e00      	cmp	r6, #0
   b67d4:	d170      	bne.n	b68b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b67d6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b67da:	69e2      	ldr	r2, [r4, #28]
   b67dc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b67de:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b67e0:	69e1      	ldr	r1, [r4, #28]
   b67e2:	1c58      	adds	r0, r3, #1
   b67e4:	1212      	asrs	r2, r2, #8
   b67e6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b67e8:	1c9a      	adds	r2, r3, #2
   b67ea:	69e1      	ldr	r1, [r4, #28]
   b67ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b67ee:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b67f0:	3303      	adds	r3, #3
   b67f2:	69e2      	ldr	r2, [r4, #28]
   b67f4:	4649      	mov	r1, r9
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff ff70 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
   b67fc:	4603      	mov	r3, r0
            if (willTopic) {
   b67fe:	f1b8 0f00 	cmp.w	r8, #0
   b6802:	d00b      	beq.n	b681c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6804:	69e2      	ldr	r2, [r4, #28]
   b6806:	4641      	mov	r1, r8
   b6808:	4620      	mov	r0, r4
   b680a:	f7ff ff67 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b680e:	69e2      	ldr	r2, [r4, #28]
   b6810:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6812:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6814:	4620      	mov	r0, r4
   b6816:	f7ff ff61 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
   b681a:	4603      	mov	r3, r0
            if(user != NULL) {
   b681c:	b167      	cbz	r7, b6838 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b681e:	69e2      	ldr	r2, [r4, #28]
   b6820:	4639      	mov	r1, r7
   b6822:	4620      	mov	r0, r4
   b6824:	f7ff ff5a 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
   b6828:	4603      	mov	r3, r0
                if(pass != NULL) {
   b682a:	b12e      	cbz	r6, b6838 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b682c:	69e2      	ldr	r2, [r4, #28]
   b682e:	4631      	mov	r1, r6
   b6830:	4620      	mov	r0, r4
   b6832:	f7ff ff53 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
   b6836:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6838:	3b05      	subs	r3, #5
   b683a:	69e2      	ldr	r2, [r4, #28]
   b683c:	b29b      	uxth	r3, r3
   b683e:	2110      	movs	r1, #16
   b6840:	4620      	mov	r0, r4
   b6842:	f7ff ff0f 	bl	b6664 <_ZN4MQTT5writeEhPht>
   b6846:	f000 ff8d 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b684a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b684e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6852:	4620      	mov	r0, r4
   b6854:	f004 fdf8 	bl	bb448 <_ZN9TCPClient9availableEv>
   b6858:	bb88      	cbnz	r0, b68be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b685a:	f000 ff83 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b685e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6860:	1ac0      	subs	r0, r0, r3
   b6862:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6864:	4373      	muls	r3, r6
   b6866:	4298      	cmp	r0, r3
   b6868:	d9f3      	bls.n	b6852 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b686a:	4620      	mov	r0, r4
   b686c:	f004 fe46 	bl	bb4fc <_ZN9TCPClient4stopEv>
   b6870:	e035      	b.n	b68de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6872:	a802      	add	r0, sp, #8
   b6874:	f004 fa7e 	bl	bad74 <_ZN9IPAddressC1EPKh>
   b6878:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b687c:	462b      	mov	r3, r5
   b687e:	a902      	add	r1, sp, #8
   b6880:	4620      	mov	r0, r4
   b6882:	f004 fd65 	bl	bb350 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6886:	e773      	b.n	b6770 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6888:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b688c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6890:	7bdb      	ldrb	r3, [r3, #15]
   b6892:	f10d 0c08 	add.w	ip, sp, #8
   b6896:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b689a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b689e:	ab02      	add	r3, sp, #8
   b68a0:	cb03      	ldmia	r3!, {r0, r1}
   b68a2:	f8c2 0005 	str.w	r0, [r2, #5]
   b68a6:	f8c2 1009 	str.w	r1, [r2, #9]
   b68aa:	f89c 3000 	ldrb.w	r3, [ip]
   b68ae:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b68b0:	230e      	movs	r3, #14
   b68b2:	e77a      	b.n	b67aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b68b4:	2002      	movs	r0, #2
   b68b6:	e786      	b.n	b67c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b68b8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b68bc:	e78d      	b.n	b67da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b68be:	a902      	add	r1, sp, #8
   b68c0:	4620      	mov	r0, r4
   b68c2:	f7ff fe7d 	bl	b65c0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b68c6:	2804      	cmp	r0, #4
   b68c8:	d1cf      	bne.n	b686a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b68ca:	69e3      	ldr	r3, [r4, #28]
   b68cc:	78de      	ldrb	r6, [r3, #3]
   b68ce:	2e00      	cmp	r6, #0
   b68d0:	d1cb      	bne.n	b686a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b68d2:	f000 ff47 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b68d6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b68d8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b68da:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b68de:	a801      	add	r0, sp, #4
   b68e0:	f7ff fe02 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b68e4:	4628      	mov	r0, r5
   b68e6:	b008      	add	sp, #32
   b68e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b68ec:	2500      	movs	r5, #0
   b68ee:	e7f9      	b.n	b68e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b68f0:	000be0dc 	.word	0x000be0dc

000b68f4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b68f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b68f6:	2301      	movs	r3, #1
   b68f8:	2204      	movs	r2, #4
   b68fa:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b68fe:	2300      	movs	r3, #0
   b6900:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6904:	e9cd 3300 	strd	r3, r3, [sp]
   b6908:	461a      	mov	r2, r3
   b690a:	f7ff ff11 	bl	b6730 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b690e:	b007      	add	sp, #28
   b6910:	f85d fb04 	ldr.w	pc, [sp], #4

000b6914 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6918:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b691c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6920:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6924:	4604      	mov	r4, r0
   b6926:	468b      	mov	fp, r1
   b6928:	4616      	mov	r6, r2
   b692a:	461f      	mov	r7, r3
    if (isConnected()) {
   b692c:	f7ff fef2 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b6930:	4682      	mov	sl, r0
   b6932:	2800      	cmp	r0, #0
   b6934:	d051      	beq.n	b69da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6936:	4621      	mov	r1, r4
   b6938:	a801      	add	r0, sp, #4
   b693a:	f7ff fdca 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b693e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6942:	69e0      	ldr	r0, [r4, #28]
   b6944:	2100      	movs	r1, #0
   b6946:	f005 fba3 	bl	bc090 <memset>
        length = writeString(topic, buffer, length);
   b694a:	2305      	movs	r3, #5
   b694c:	69e2      	ldr	r2, [r4, #28]
   b694e:	4659      	mov	r1, fp
   b6950:	4620      	mov	r0, r4
   b6952:	f7ff fec3 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6956:	1e6b      	subs	r3, r5, #1
   b6958:	2b01      	cmp	r3, #1
   b695a:	d815      	bhi.n	b6988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b695c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b695e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6960:	3101      	adds	r1, #1
   b6962:	b289      	uxth	r1, r1
   b6964:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6966:	0a09      	lsrs	r1, r1, #8
   b6968:	5419      	strb	r1, [r3, r0]
   b696a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b696c:	69e3      	ldr	r3, [r4, #28]
   b696e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6970:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6972:	3002      	adds	r0, #2
   b6974:	5499      	strb	r1, [r3, r2]
   b6976:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6978:	f1b8 0f00 	cmp.w	r8, #0
   b697c:	d004      	beq.n	b6988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b697e:	8c23      	ldrh	r3, [r4, #32]
   b6980:	1c5a      	adds	r2, r3, #1
   b6982:	8422      	strh	r2, [r4, #32]
   b6984:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6988:	2100      	movs	r1, #0
   b698a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b698c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b698e:	69e2      	ldr	r2, [r4, #28]
   b6990:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6992:	d90a      	bls.n	b69aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6994:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6998:	459c      	cmp	ip, r3
   b699a:	d906      	bls.n	b69aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b699c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b69a0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b69a4:	3101      	adds	r1, #1
   b69a6:	b289      	uxth	r1, r1
   b69a8:	e7ef      	b.n	b698a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b69aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b69ae:	2900      	cmp	r1, #0
   b69b0:	bf0c      	ite	eq
   b69b2:	2130      	moveq	r1, #48	; 0x30
   b69b4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b69b6:	f1b9 0f00 	cmp.w	r9, #0
   b69ba:	d001      	beq.n	b69c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b69bc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b69c0:	2d02      	cmp	r5, #2
   b69c2:	d10e      	bne.n	b69e2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b69c4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b69c8:	3b05      	subs	r3, #5
   b69ca:	b29b      	uxth	r3, r3
   b69cc:	4620      	mov	r0, r4
   b69ce:	f7ff fe49 	bl	b6664 <_ZN4MQTT5writeEhPht>
   b69d2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b69d4:	a801      	add	r0, sp, #4
   b69d6:	f7ff fd87 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b69da:	4650      	mov	r0, sl
   b69dc:	b003      	add	sp, #12
   b69de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b69e2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b69e4:	bf08      	it	eq
   b69e6:	f041 0102 	orreq.w	r1, r1, #2
   b69ea:	e7ed      	b.n	b69c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b69ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b69ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b69ee:	9c08      	ldr	r4, [sp, #32]
   b69f0:	9403      	str	r4, [sp, #12]
   b69f2:	2400      	movs	r4, #0
   b69f4:	9402      	str	r4, [sp, #8]
   b69f6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b69fa:	9401      	str	r4, [sp, #4]
   b69fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6a00:	9400      	str	r4, [sp, #0]
   b6a02:	f7ff ff87 	bl	b6914 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6a06:	b004      	add	sp, #16
   b6a08:	bd10      	pop	{r4, pc}

000b6a0a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b6a0a:	b530      	push	{r4, r5, lr}
   b6a0c:	b087      	sub	sp, #28
   b6a0e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6a10:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6a12:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6a14:	9204      	str	r2, [sp, #16]
   b6a16:	f7fd fff1 	bl	b49fc <strlen>
   b6a1a:	2500      	movs	r5, #0
   b6a1c:	4603      	mov	r3, r0
   b6a1e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6a22:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6a26:	9500      	str	r5, [sp, #0]
   b6a28:	4620      	mov	r0, r4
   b6a2a:	f7ff ffdf 	bl	b69ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b6a2e:	b007      	add	sp, #28
   b6a30:	bd30      	pop	{r4, r5, pc}

000b6a32 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b6a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a34:	4604      	mov	r4, r0
   b6a36:	460e      	mov	r6, r1
    if (isConnected()) {
   b6a38:	f7ff fe6c 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b6a3c:	4605      	mov	r5, r0
   b6a3e:	b1c8      	cbz	r0, b6a74 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6a40:	4621      	mov	r1, r4
   b6a42:	a801      	add	r0, sp, #4
   b6a44:	f7ff fd45 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6a48:	69e3      	ldr	r3, [r4, #28]
   b6a4a:	2262      	movs	r2, #98	; 0x62
   b6a4c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6a4e:	69e3      	ldr	r3, [r4, #28]
   b6a50:	2202      	movs	r2, #2
   b6a52:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6a54:	69e3      	ldr	r3, [r4, #28]
   b6a56:	0a32      	lsrs	r2, r6, #8
   b6a58:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6a5a:	69e3      	ldr	r3, [r4, #28]
   b6a5c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6a5e:	69e1      	ldr	r1, [r4, #28]
   b6a60:	2204      	movs	r2, #4
   b6a62:	4620      	mov	r0, r4
   b6a64:	f004 fae9 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
   b6a68:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6a6a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6a6c:	bf18      	it	ne
   b6a6e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6a70:	f7ff fd3a 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6a74:	4628      	mov	r0, r5
   b6a76:	b002      	add	sp, #8
   b6a78:	bd70      	pop	{r4, r5, r6, pc}

000b6a7a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a7c:	4604      	mov	r4, r0
   b6a7e:	460e      	mov	r6, r1
    if (isConnected()) {
   b6a80:	f7ff fe48 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b6a84:	4605      	mov	r5, r0
   b6a86:	b1c8      	cbz	r0, b6abc <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6a88:	4621      	mov	r1, r4
   b6a8a:	a801      	add	r0, sp, #4
   b6a8c:	f7ff fd21 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6a90:	69e3      	ldr	r3, [r4, #28]
   b6a92:	2272      	movs	r2, #114	; 0x72
   b6a94:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6a96:	69e3      	ldr	r3, [r4, #28]
   b6a98:	2202      	movs	r2, #2
   b6a9a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6a9c:	69e3      	ldr	r3, [r4, #28]
   b6a9e:	0a32      	lsrs	r2, r6, #8
   b6aa0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6aa2:	69e3      	ldr	r3, [r4, #28]
   b6aa4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6aa6:	69e1      	ldr	r1, [r4, #28]
   b6aa8:	2204      	movs	r2, #4
   b6aaa:	4620      	mov	r0, r4
   b6aac:	f004 fac5 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
   b6ab0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6ab2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6ab4:	bf18      	it	ne
   b6ab6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6ab8:	f7ff fd16 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6abc:	4628      	mov	r0, r5
   b6abe:	b002      	add	sp, #8
   b6ac0:	bd70      	pop	{r4, r5, r6, pc}

000b6ac2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ac6:	ed2d 8b02 	vpush	{d8}
   b6aca:	b087      	sub	sp, #28
   b6acc:	af00      	add	r7, sp, #0
   b6ace:	4604      	mov	r4, r0
    if (isConnected()) {
   b6ad0:	f7ff fe20 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b6ad4:	4681      	mov	r9, r0
   b6ad6:	b1f8      	cbz	r0, b6b18 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6ad8:	4621      	mov	r1, r4
   b6ada:	f107 0014 	add.w	r0, r7, #20
   b6ade:	f7ff fcf8 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
   b6ae2:	f000 fe3f 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6ae6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6aec:	4353      	muls	r3, r2
   b6aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6af0:	1a82      	subs	r2, r0, r2
   b6af2:	429a      	cmp	r2, r3
   b6af4:	4606      	mov	r6, r0
   b6af6:	d803      	bhi.n	b6b00 <_ZN4MQTT4loopEv+0x3e>
   b6af8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b6afa:	1a82      	subs	r2, r0, r2
   b6afc:	4293      	cmp	r3, r2
   b6afe:	d221      	bcs.n	b6b44 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6b00:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6b04:	b17b      	cbz	r3, b6b26 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6b06:	4620      	mov	r0, r4
   b6b08:	f004 fcf8 	bl	bb4fc <_ZN9TCPClient4stopEv>
                return false;
   b6b0c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6b10:	f107 0014 	add.w	r0, r7, #20
   b6b14:	f7ff fce8 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6b18:	4648      	mov	r0, r9
   b6b1a:	371c      	adds	r7, #28
   b6b1c:	46bd      	mov	sp, r7
   b6b1e:	ecbd 8b02 	vpop	{d8}
   b6b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6b26:	69e2      	ldr	r2, [r4, #28]
   b6b28:	21c0      	movs	r1, #192	; 0xc0
   b6b2a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b6b2c:	69e2      	ldr	r2, [r4, #28]
   b6b2e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6b30:	69e1      	ldr	r1, [r4, #28]
   b6b32:	2202      	movs	r2, #2
   b6b34:	4620      	mov	r0, r4
   b6b36:	f004 fa80 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b6b3a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b6b3e:	2301      	movs	r3, #1
   b6b40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6b44:	4620      	mov	r0, r4
   b6b46:	f004 fc7f 	bl	bb448 <_ZN9TCPClient9availableEv>
   b6b4a:	2800      	cmp	r0, #0
   b6b4c:	d0e0      	beq.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6b4e:	f107 0113 	add.w	r1, r7, #19
   b6b52:	4620      	mov	r0, r4
   b6b54:	f7ff fd34 	bl	b65c0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6b58:	4683      	mov	fp, r0
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	d0d8      	beq.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6b5e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6b60:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6b62:	7819      	ldrb	r1, [r3, #0]
   b6b64:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6b68:	2a30      	cmp	r2, #48	; 0x30
   b6b6a:	d17f      	bne.n	b6c6c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6b6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6b70:	f1ba 0f00 	cmp.w	sl, #0
   b6b74:	d0cc      	beq.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6b76:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6b7a:	466a      	mov	r2, sp
   b6b7c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6b80:	eb03 020c 	add.w	r2, r3, ip
   b6b84:	7851      	ldrb	r1, [r2, #1]
   b6b86:	7895      	ldrb	r5, [r2, #2]
   b6b88:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b6b8c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b6b8e:	f105 0208 	add.w	r2, r5, #8
   b6b92:	4669      	mov	r1, sp
   b6b94:	08d2      	lsrs	r2, r2, #3
   b6b96:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b6b9a:	4695      	mov	sp, r2
   b6b9c:	f10c 0203 	add.w	r2, ip, #3
   b6ba0:	60fa      	str	r2, [r7, #12]
   b6ba2:	eb03 0e02 	add.w	lr, r3, r2
   b6ba6:	eb0d 0205 	add.w	r2, sp, r5
   b6baa:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b6bac:	f8c7 d008 	str.w	sp, [r7, #8]
   b6bb0:	607a      	str	r2, [r7, #4]
   b6bb2:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6bb6:	428a      	cmp	r2, r1
   b6bb8:	d006      	beq.n	b6bc8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b6bba:	460a      	mov	r2, r1
   b6bbc:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6bc0:	f802 8b01 	strb.w	r8, [r2], #1
   b6bc4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6bc6:	e7f4      	b.n	b6bb2 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6bc8:	2200      	movs	r2, #0
   b6bca:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6bcc:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bd0:	68f9      	ldr	r1, [r7, #12]
   b6bd2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6bd6:	ebab 020c 	sub.w	r2, fp, ip
   b6bda:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6bdc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6be0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6be4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6be6:	d125      	bne.n	b6c34 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6be8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6bec:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b6bee:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bf0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6bf4:	f10c 0105 	add.w	r1, ip, #5
   b6bf8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6bfa:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6bfc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6c00:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6c02:	69e3      	ldr	r3, [r4, #28]
   b6c04:	2240      	movs	r2, #64	; 0x40
   b6c06:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6c08:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6c0a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6c0e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6c12:	69e3      	ldr	r3, [r4, #28]
   b6c14:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6c18:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6c1a:	69e3      	ldr	r3, [r4, #28]
   b6c1c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6c20:	69e1      	ldr	r1, [r4, #28]
   b6c22:	2204      	movs	r2, #4
   b6c24:	4620      	mov	r0, r4
   b6c26:	f004 fa08 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6c2a:	6266      	str	r6, [r4, #36]	; 0x24
   b6c2c:	ee18 3a10 	vmov	r3, s16
   b6c30:	469d      	mov	sp, r3
   b6c32:	e76d      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6c34:	f1b8 0f04 	cmp.w	r8, #4
   b6c38:	d115      	bne.n	b6c66 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c3a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6c3e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c40:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c42:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6c46:	f10c 0105 	add.w	r1, ip, #5
   b6c4a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c4c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c4e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6c52:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6c54:	69e3      	ldr	r3, [r4, #28]
   b6c56:	2250      	movs	r2, #80	; 0x50
   b6c58:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6c5a:	69e3      	ldr	r3, [r4, #28]
   b6c5c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6c5e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6c62:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6c64:	e7d5      	b.n	b6c12 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6c66:	4419      	add	r1, r3
   b6c68:	47d0      	blx	sl
   b6c6a:	e7df      	b.n	b6c2c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6c6c:	2a50      	cmp	r2, #80	; 0x50
   b6c6e:	d108      	bne.n	b6c82 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6c70:	789a      	ldrb	r2, [r3, #2]
   b6c72:	78d9      	ldrb	r1, [r3, #3]
   b6c74:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6c78:	b289      	uxth	r1, r1
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	f7ff fed9 	bl	b6a32 <_ZN4MQTT14publishReleaseEt>
   b6c80:	e746      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6c82:	2a40      	cmp	r2, #64	; 0x40
   b6c84:	d112      	bne.n	b6cac <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6c86:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6c88:	2a00      	cmp	r2, #0
   b6c8a:	f43f af41 	beq.w	b6b10 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6c8e:	f1bb 0f04 	cmp.w	fp, #4
   b6c92:	f47f af3d 	bne.w	b6b10 <_ZN4MQTT4loopEv+0x4e>
   b6c96:	f011 0f06 	tst.w	r1, #6
   b6c9a:	f47f af39 	bne.w	b6b10 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6c9e:	7899      	ldrb	r1, [r3, #2]
   b6ca0:	78d8      	ldrb	r0, [r3, #3]
   b6ca2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6ca6:	b280      	uxth	r0, r0
   b6ca8:	4790      	blx	r2
   b6caa:	e731      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6cac:	2a60      	cmp	r2, #96	; 0x60
   b6cae:	d108      	bne.n	b6cc2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6cb0:	789a      	ldrb	r2, [r3, #2]
   b6cb2:	78d9      	ldrb	r1, [r3, #3]
   b6cb4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6cb8:	b289      	uxth	r1, r1
   b6cba:	4620      	mov	r0, r4
   b6cbc:	f7ff fedd 	bl	b6a7a <_ZN4MQTT15publishCompleteEt>
   b6cc0:	e726      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6cc2:	2a70      	cmp	r2, #112	; 0x70
   b6cc4:	d0df      	beq.n	b6c86 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6cc6:	2a90      	cmp	r2, #144	; 0x90
   b6cc8:	f43f af22 	beq.w	b6b10 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6ccc:	2ac0      	cmp	r2, #192	; 0xc0
   b6cce:	d10a      	bne.n	b6ce6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6cd0:	22d0      	movs	r2, #208	; 0xd0
   b6cd2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6cd4:	69e3      	ldr	r3, [r4, #28]
   b6cd6:	2200      	movs	r2, #0
   b6cd8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6cda:	69e1      	ldr	r1, [r4, #28]
   b6cdc:	2202      	movs	r2, #2
   b6cde:	4620      	mov	r0, r4
   b6ce0:	f004 f9ab 	bl	bb03a <_ZN9TCPClient5writeEPKhj>
   b6ce4:	e714      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6ce6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6ce8:	bf04      	itt	eq
   b6cea:	2300      	moveq	r3, #0
   b6cec:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6cf0:	e70e      	b.n	b6b10 <_ZN4MQTT4loopEv+0x4e>

000b6cf2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6cf4:	4604      	mov	r4, r0
   b6cf6:	460f      	mov	r7, r1
   b6cf8:	4616      	mov	r6, r2
    if (isConnected()) {
   b6cfa:	f7ff fd0b 	bl	b6714 <_ZN4MQTT11isConnectedEv>
   b6cfe:	4605      	mov	r5, r0
   b6d00:	b310      	cbz	r0, b6d48 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6d02:	4621      	mov	r1, r4
   b6d04:	a801      	add	r0, sp, #4
   b6d06:	f7ff fbe4 	bl	b64d2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6d0a:	8c23      	ldrh	r3, [r4, #32]
   b6d0c:	3301      	adds	r3, #1
   b6d0e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6d10:	b1eb      	cbz	r3, b6d4e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6d12:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6d14:	8c23      	ldrh	r3, [r4, #32]
   b6d16:	69e2      	ldr	r2, [r4, #28]
   b6d18:	0a1b      	lsrs	r3, r3, #8
   b6d1a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6d1c:	69e3      	ldr	r3, [r4, #28]
   b6d1e:	8c22      	ldrh	r2, [r4, #32]
   b6d20:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6d22:	69e2      	ldr	r2, [r4, #28]
   b6d24:	2307      	movs	r3, #7
   b6d26:	4639      	mov	r1, r7
   b6d28:	4620      	mov	r0, r4
   b6d2a:	f7ff fcd7 	bl	b66dc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6d2e:	69e3      	ldr	r3, [r4, #28]
   b6d30:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6d32:	3804      	subs	r0, #4
   b6d34:	b283      	uxth	r3, r0
   b6d36:	69e2      	ldr	r2, [r4, #28]
   b6d38:	2182      	movs	r1, #130	; 0x82
   b6d3a:	4620      	mov	r0, r4
   b6d3c:	f7ff fc92 	bl	b6664 <_ZN4MQTT5writeEhPht>
   b6d40:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6d42:	a801      	add	r0, sp, #4
   b6d44:	f7ff fbd0 	bl	b64e8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6d48:	4628      	mov	r0, r5
   b6d4a:	b003      	add	sp, #12
   b6d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6d4e:	2301      	movs	r3, #1
   b6d50:	e7df      	b.n	b6d12 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6d52 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6d52:	2200      	movs	r2, #0
   b6d54:	f7ff bfcd 	b.w	b6cf2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6d58 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6d58:	b510      	push	{r4, lr}
   b6d5a:	4b04      	ldr	r3, [pc, #16]	; (b6d6c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6d5c:	6003      	str	r3, [r0, #0]
   b6d5e:	4604      	mov	r4, r0
  if(buffer) {
   b6d60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6d62:	b108      	cbz	r0, b6d68 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6d64:	f000 ffd0 	bl	b7d08 <free>
    buffer = NULL;
  }
}
   b6d68:	4620      	mov	r0, r4
   b6d6a:	bd10      	pop	{r4, pc}
   b6d6c:	000bed84 	.word	0x000bed84

000b6d70 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6d70:	b510      	push	{r4, lr}
   b6d72:	4604      	mov	r4, r0
}
   b6d74:	f7ff fff0 	bl	b6d58 <_ZN16Adafruit_SSD1306D1Ev>
   b6d78:	4620      	mov	r0, r4
   b6d7a:	2150      	movs	r1, #80	; 0x50
   b6d7c:	f7fd fe9f 	bl	b4abe <_ZdlPvj>
   b6d80:	4620      	mov	r0, r4
   b6d82:	bd10      	pop	{r4, pc}

000b6d84 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6d84:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6d86:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6d88:	db4b      	blt.n	b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d8a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6d8e:	428c      	cmp	r4, r1
   b6d90:	dd47      	ble.n	b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d92:	2a00      	cmp	r2, #0
   b6d94:	db45      	blt.n	b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6d96:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6d9a:	4294      	cmp	r4, r2
   b6d9c:	dd41      	ble.n	b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6d9e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6da0:	2c02      	cmp	r4, #2
   b6da2:	d01f      	beq.n	b6de4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6da4:	2c03      	cmp	r4, #3
   b6da6:	d026      	beq.n	b6df6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6da8:	2c01      	cmp	r4, #1
   b6daa:	d104      	bne.n	b6db6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6dac:	8904      	ldrh	r4, [r0, #8]
   b6dae:	43d2      	mvns	r2, r2
   b6db0:	4414      	add	r4, r2
      break;
   b6db2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6db4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6db6:	2b01      	cmp	r3, #1
   b6db8:	d023      	beq.n	b6e02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6dba:	2b02      	cmp	r3, #2
   b6dbc:	d032      	beq.n	b6e24 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6dbe:	bb83      	cbnz	r3, b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6dc0:	2a00      	cmp	r2, #0
   b6dc2:	4613      	mov	r3, r2
   b6dc4:	8904      	ldrh	r4, [r0, #8]
   b6dc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6dc8:	bfb8      	it	lt
   b6dca:	1dd3      	addlt	r3, r2, #7
   b6dcc:	10db      	asrs	r3, r3, #3
   b6dce:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6dd2:	f002 0207 	and.w	r2, r2, #7
   b6dd6:	2301      	movs	r3, #1
   b6dd8:	4093      	lsls	r3, r2
   b6dda:	5c42      	ldrb	r2, [r0, r1]
   b6ddc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6de0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6de2:	e01e      	b.n	b6e22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6de4:	8904      	ldrh	r4, [r0, #8]
   b6de6:	3c01      	subs	r4, #1
   b6de8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6dea:	8944      	ldrh	r4, [r0, #10]
   b6dec:	43d2      	mvns	r2, r2
   b6dee:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6df0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6df2:	b212      	sxth	r2, r2
      break;
   b6df4:	e7df      	b.n	b6db6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6df6:	8944      	ldrh	r4, [r0, #10]
   b6df8:	3c01      	subs	r4, #1
   b6dfa:	1a64      	subs	r4, r4, r1
      break;
   b6dfc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6dfe:	b222      	sxth	r2, r4
      break;
   b6e00:	e7d9      	b.n	b6db6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6e02:	2a00      	cmp	r2, #0
   b6e04:	8904      	ldrh	r4, [r0, #8]
   b6e06:	4613      	mov	r3, r2
   b6e08:	bfb8      	it	lt
   b6e0a:	1dd3      	addlt	r3, r2, #7
   b6e0c:	10db      	asrs	r3, r3, #3
   b6e0e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6e12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6e14:	f002 0007 	and.w	r0, r2, #7
   b6e18:	2201      	movs	r2, #1
   b6e1a:	4082      	lsls	r2, r0
   b6e1c:	5c58      	ldrb	r0, [r3, r1]
   b6e1e:	4302      	orrs	r2, r0
   b6e20:	545a      	strb	r2, [r3, r1]
}
   b6e22:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6e24:	2a00      	cmp	r2, #0
   b6e26:	4613      	mov	r3, r2
   b6e28:	8904      	ldrh	r4, [r0, #8]
   b6e2a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6e2c:	bfb8      	it	lt
   b6e2e:	1dd3      	addlt	r3, r2, #7
   b6e30:	10db      	asrs	r3, r3, #3
   b6e32:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6e36:	f002 0207 	and.w	r2, r2, #7
   b6e3a:	2301      	movs	r3, #1
   b6e3c:	fa03 f202 	lsl.w	r2, r3, r2
   b6e40:	5c43      	ldrb	r3, [r0, r1]
   b6e42:	405a      	eors	r2, r3
   b6e44:	e7cc      	b.n	b6de0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6e48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b6e48:	b570      	push	{r4, r5, r6, lr}
   b6e4a:	4604      	mov	r4, r0
   b6e4c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6e4e:	2600      	movs	r6, #0
   b6e50:	f7ff f804 	bl	b5e5c <_ZN12Adafruit_GFXC1Ess>
   b6e54:	4b11      	ldr	r3, [pc, #68]	; (b6e9c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b6e56:	6023      	str	r3, [r4, #0]
   b6e58:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b6e5a:	b915      	cbnz	r5, b6e62 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b6e5c:	f004 ff88 	bl	bbd70 <_Z19__fetch_global_Wirev>
   b6e60:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6e62:	23ff      	movs	r3, #255	; 0xff
   b6e64:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6e68:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b6e6c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6e70:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b6e74:	4b0a      	ldr	r3, [pc, #40]	; (b6ea0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b6e76:	63a3      	str	r3, [r4, #56]	; 0x38
   b6e78:	2301      	movs	r3, #1
   b6e7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6e7e:	9b05      	ldr	r3, [sp, #20]
   b6e80:	64a3      	str	r3, [r4, #72]	; 0x48
   b6e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6e86:	9b06      	ldr	r3, [sp, #24]
   b6e88:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6e8a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6e8e:	6426      	str	r6, [r4, #64]	; 0x40
   b6e90:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6e94:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6e96:	4620      	mov	r0, r4
   b6e98:	bd70      	pop	{r4, r5, r6, pc}
   b6e9a:	bf00      	nop
   b6e9c:	000bed84 	.word	0x000bed84
   b6ea0:	000be8d0 	.word	0x000be8d0

000b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ea6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6ea8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6eaa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6eac:	b190      	cbz	r0, b6ed4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6eae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6eb2:	f004 f8ab 	bl	bb00c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6eb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6eb8:	6803      	ldr	r3, [r0, #0]
   b6eba:	2100      	movs	r1, #0
   b6ebc:	689b      	ldr	r3, [r3, #8]
   b6ebe:	4798      	blx	r3
    WIRE_WRITE(c);
   b6ec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ec2:	6803      	ldr	r3, [r0, #0]
   b6ec4:	4629      	mov	r1, r5
   b6ec6:	689b      	ldr	r3, [r3, #8]
   b6ec8:	4798      	blx	r3
    wire->endTransmission();
   b6eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6ecc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6ed0:	f004 b8a3 	b.w	bb01a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6ed4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6ed8:	4601      	mov	r1, r0
   b6eda:	b298      	uxth	r0, r3
   b6edc:	f004 fe83 	bl	bbbe6 <digitalWrite>
  if(spi) {
   b6ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6ee2:	b120      	cbz	r0, b6eee <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6ee4:	4629      	mov	r1, r5
}
   b6ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6eea:	f001 b83f 	b.w	b7f6c <_ZN8SPIClass8transferEh>
   b6eee:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6ef0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6ef2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6ef6:	ea05 0107 	and.w	r1, r5, r7
   b6efa:	b280      	uxth	r0, r0
   b6efc:	f004 fe73 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6f00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f04:	2101      	movs	r1, #1
   b6f06:	b280      	uxth	r0, r0
   b6f08:	f004 fe6d 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6f0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f10:	2100      	movs	r1, #0
   b6f12:	b280      	uxth	r0, r0
   b6f14:	f004 fe67 	bl	bbbe6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f18:	3e01      	subs	r6, #1
   b6f1a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6f1e:	d1e8      	bne.n	b6ef2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f22 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6f22:	b538      	push	{r3, r4, r5, lr}
   b6f24:	4604      	mov	r4, r0
  TRANSACTION_START
   b6f26:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6f28:	460d      	mov	r5, r1
  TRANSACTION_START
   b6f2a:	b180      	cbz	r0, b6f4e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6f2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6f2e:	f004 f85f 	bl	baff0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6f32:	2d00      	cmp	r5, #0
   b6f34:	4620      	mov	r0, r4
   b6f36:	bf14      	ite	ne
   b6f38:	21a7      	movne	r1, #167	; 0xa7
   b6f3a:	21a6      	moveq	r1, #166	; 0xa6
   b6f3c:	f7ff ffb2 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6f40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f42:	b188      	cbz	r0, b6f68 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6f44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6f4a:	f004 b851 	b.w	baff0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6f50:	b118      	cbz	r0, b6f5a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6f52:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6f56:	f000 ff9b 	bl	b7e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6f5a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f5e:	2100      	movs	r1, #0
   b6f60:	b280      	uxth	r0, r0
   b6f62:	f004 fe40 	bl	bbbe6 <digitalWrite>
   b6f66:	e7e4      	b.n	b6f32 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6f68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f6c:	2101      	movs	r1, #1
   b6f6e:	b280      	uxth	r0, r0
   b6f70:	f004 fe39 	bl	bbbe6 <digitalWrite>
   b6f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6f76:	b118      	cbz	r0, b6f80 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6f7c:	f000 bf6e 	b.w	b7e5c <_ZN8SPIClass14endTransactionEv>
}
   b6f80:	bd38      	pop	{r3, r4, r5, pc}

000b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6f82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6f86:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6f88:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6f8a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6f8c:	188f      	adds	r7, r1, r2
   b6f8e:	b340      	cbz	r0, b6fe2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6f90:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6f94:	f004 f83a 	bl	bb00c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6f98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f9a:	6803      	ldr	r3, [r0, #0]
   b6f9c:	2100      	movs	r1, #0
   b6f9e:	689b      	ldr	r3, [r3, #8]
   b6fa0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6fa2:	2601      	movs	r6, #1
    while(n--) {
   b6fa4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6fa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6fa8:	d017      	beq.n	b6fda <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6faa:	2e1f      	cmp	r6, #31
   b6fac:	d90c      	bls.n	b6fc8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6fae:	f004 f834 	bl	bb01a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6fb2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6fb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6fb8:	f004 f828 	bl	bb00c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6fbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6fbe:	6803      	ldr	r3, [r0, #0]
   b6fc0:	2100      	movs	r1, #0
   b6fc2:	689b      	ldr	r3, [r3, #8]
   b6fc4:	4798      	blx	r3
        bytesOut = 1;
   b6fc6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6fc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6fca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6fce:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6fd0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6fd2:	689b      	ldr	r3, [r3, #8]
   b6fd4:	4798      	blx	r3
      bytesOut++;
   b6fd6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6fd8:	e7e4      	b.n	b6fa4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6fda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6fde:	f004 b81c 	b.w	bb01a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6fe2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6fe6:	4601      	mov	r1, r0
   b6fe8:	b298      	uxth	r0, r3
   b6fea:	f004 fdfc 	bl	bbbe6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6fee:	42bd      	cmp	r5, r7
   b6ff0:	d022      	beq.n	b7038 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6ff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6ff4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6ff8:	b118      	cbz	r0, b7002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6ffa:	4649      	mov	r1, r9
   b6ffc:	f000 ffb6 	bl	b7f6c <_ZN8SPIClass8transferEh>
   b7000:	e7f5      	b.n	b6fee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b7002:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7004:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7008:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b700c:	ea09 0108 	and.w	r1, r9, r8
   b7010:	b280      	uxth	r0, r0
   b7012:	f004 fde8 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7016:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b701a:	2101      	movs	r1, #1
   b701c:	b280      	uxth	r0, r0
   b701e:	f004 fde2 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7022:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7026:	2100      	movs	r1, #0
   b7028:	b280      	uxth	r0, r0
   b702a:	f004 fddc 	bl	bbbe6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b702e:	3e01      	subs	r6, #1
   b7030:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7034:	d1e8      	bne.n	b7008 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7036:	e7da      	b.n	b6fee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b703c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b703c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7040:	1dda      	adds	r2, r3, #7
   b7042:	bf48      	it	mi
   b7044:	f103 020e 	addmi.w	r2, r3, #14
   b7048:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b704c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b704e:	10d2      	asrs	r2, r2, #3
   b7050:	435a      	muls	r2, r3
   b7052:	2100      	movs	r1, #0
   b7054:	f005 b81c 	b.w	bc090 <memset>

000b7058 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b705c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b705e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7060:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7064:	4604      	mov	r4, r0
   b7066:	460f      	mov	r7, r1
   b7068:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b706a:	b1c3      	cbz	r3, b709e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b706c:	4620      	mov	r0, r4
   b706e:	f7ff ffe5 	bl	b703c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7072:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b7076:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b707a:	2820      	cmp	r0, #32
   b707c:	dc21      	bgt.n	b70c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b707e:	2320      	movs	r3, #32
   b7080:	2201      	movs	r2, #1
   b7082:	3820      	subs	r0, #32
   b7084:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b7088:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b708c:	2373      	movs	r3, #115	; 0x73
   b708e:	3973      	subs	r1, #115	; 0x73
   b7090:	9300      	str	r3, [sp, #0]
   b7092:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7096:	4b89      	ldr	r3, [pc, #548]	; (b72bc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b7098:	f340 024f 	sbfx	r2, r0, #1, #16
   b709c:	e021      	b.n	b70e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b709e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b70a2:	1dd8      	adds	r0, r3, #7
   b70a4:	bf48      	it	mi
   b70a6:	f103 000e 	addmi.w	r0, r3, #14
   b70aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b70ae:	10c0      	asrs	r0, r0, #3
   b70b0:	4358      	muls	r0, r3
   b70b2:	f000 fe21 	bl	b7cf8 <malloc>
   b70b6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b70b8:	2800      	cmp	r0, #0
   b70ba:	d1d7      	bne.n	b706c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b70bc:	b004      	add	sp, #16
   b70be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b70c2:	3840      	subs	r0, #64	; 0x40
   b70c4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b70c8:	fa02 f280 	sxtah	r2, r2, r0
   b70cc:	2340      	movs	r3, #64	; 0x40
   b70ce:	2001      	movs	r0, #1
   b70d0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b70d4:	2352      	movs	r3, #82	; 0x52
   b70d6:	3952      	subs	r1, #82	; 0x52
   b70d8:	9300      	str	r3, [sp, #0]
   b70da:	4b79      	ldr	r3, [pc, #484]	; (b72c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b70dc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b70e0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b70e2:	4620      	mov	r0, r4
   b70e4:	f341 014f 	sbfx	r1, r1, #1, #16
   b70e8:	f7fe fece 	bl	b5e88 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b70ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b70ee:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b70f2:	2800      	cmp	r0, #0
   b70f4:	d078      	beq.n	b71e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b70f6:	2d00      	cmp	r5, #0
   b70f8:	d174      	bne.n	b71e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b70fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b70fe:	2b20      	cmp	r3, #32
   b7100:	bf0c      	ite	eq
   b7102:	253c      	moveq	r5, #60	; 0x3c
   b7104:	253d      	movne	r5, #61	; 0x3d
   b7106:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b710a:	f1b8 0f00 	cmp.w	r8, #0
   b710e:	d001      	beq.n	b7114 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b7110:	f003 ff72 	bl	baff8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b7114:	b1fe      	cbz	r6, b7156 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b7116:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b711a:	2800      	cmp	r0, #0
   b711c:	db1b      	blt.n	b7156 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b711e:	2101      	movs	r1, #1
   b7120:	b280      	uxth	r0, r0
   b7122:	f004 fd4f 	bl	bbbc4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b7126:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b712a:	2101      	movs	r1, #1
   b712c:	b280      	uxth	r0, r0
   b712e:	f004 fd5a 	bl	bbbe6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7132:	2001      	movs	r0, #1
   b7134:	f003 fce4 	bl	bab00 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7138:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b713c:	2100      	movs	r1, #0
   b713e:	b280      	uxth	r0, r0
   b7140:	f004 fd51 	bl	bbbe6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7144:	200a      	movs	r0, #10
   b7146:	f003 fcdb 	bl	bab00 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b714a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b714e:	2101      	movs	r1, #1
   b7150:	b280      	uxth	r0, r0
   b7152:	f004 fd48 	bl	bbbe6 <digitalWrite>
  TRANSACTION_START
   b7156:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7158:	2800      	cmp	r0, #0
   b715a:	d074      	beq.n	b7246 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b715c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b715e:	f003 ff47 	bl	baff0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7162:	2204      	movs	r2, #4
   b7164:	4957      	ldr	r1, [pc, #348]	; (b72c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7166:	4620      	mov	r0, r4
   b7168:	f7ff ff0b 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b716c:	8961      	ldrh	r1, [r4, #10]
   b716e:	3901      	subs	r1, #1
   b7170:	b2c9      	uxtb	r1, r1
   b7172:	4620      	mov	r0, r4
   b7174:	f7ff fe96 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b7178:	4953      	ldr	r1, [pc, #332]	; (b72c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b717a:	2204      	movs	r2, #4
   b717c:	4620      	mov	r0, r4
   b717e:	f7ff ff00 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b7182:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7186:	2b01      	cmp	r3, #1
   b7188:	bf0c      	ite	eq
   b718a:	2110      	moveq	r1, #16
   b718c:	2114      	movne	r1, #20
   b718e:	4620      	mov	r0, r4
   b7190:	f7ff fe88 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b7194:	2204      	movs	r2, #4
   b7196:	494d      	ldr	r1, [pc, #308]	; (b72cc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b7198:	4620      	mov	r0, r4
   b719a:	f7ff fef2 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b719e:	68a3      	ldr	r3, [r4, #8]
   b71a0:	4a4b      	ldr	r2, [pc, #300]	; (b72d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b71a2:	4293      	cmp	r3, r2
   b71a4:	d15c      	bne.n	b7260 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b71a6:	494b      	ldr	r1, [pc, #300]	; (b72d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b71a8:	2204      	movs	r2, #4
   b71aa:	4620      	mov	r0, r4
   b71ac:	f7ff fee9 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b71b0:	21d9      	movs	r1, #217	; 0xd9
   b71b2:	4620      	mov	r0, r4
   b71b4:	f7ff fe76 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b71b8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b71bc:	2b01      	cmp	r3, #1
   b71be:	bf0c      	ite	eq
   b71c0:	2122      	moveq	r1, #34	; 0x22
   b71c2:	21f1      	movne	r1, #241	; 0xf1
   b71c4:	4620      	mov	r0, r4
   b71c6:	f7ff fe6d 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b71ca:	4620      	mov	r0, r4
   b71cc:	4942      	ldr	r1, [pc, #264]	; (b72d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b71ce:	2206      	movs	r2, #6
   b71d0:	f7ff fed7 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b71d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b71d6:	2800      	cmp	r0, #0
   b71d8:	d063      	beq.n	b72a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b71da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b71dc:	f003 ff08 	bl	baff0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b71e0:	2001      	movs	r0, #1
   b71e2:	e76b      	b.n	b70bc <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b71e4:	b26d      	sxtb	r5, r5
   b71e6:	e78e      	b.n	b7106 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b71e8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b71ec:	2101      	movs	r1, #1
   b71ee:	b280      	uxth	r0, r0
   b71f0:	f004 fce8 	bl	bbbc4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b71f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b71f8:	2101      	movs	r1, #1
   b71fa:	b280      	uxth	r0, r0
   b71fc:	f004 fce2 	bl	bbbc4 <pinMode>
    SSD1306_DESELECT
   b7200:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7204:	2101      	movs	r1, #1
   b7206:	b280      	uxth	r0, r0
   b7208:	f004 fced 	bl	bbbe6 <digitalWrite>
    if(spi) { // Hardware SPI
   b720c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b720e:	b13d      	cbz	r5, b7220 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b7210:	f1b8 0f00 	cmp.w	r8, #0
   b7214:	f43f af7e 	beq.w	b7114 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b7218:	4628      	mov	r0, r5
   b721a:	f000 fe0b 	bl	b7e34 <_ZN8SPIClass5beginEv>
   b721e:	e779      	b.n	b7114 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b7220:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7224:	2101      	movs	r1, #1
   b7226:	b280      	uxth	r0, r0
   b7228:	f004 fccc 	bl	bbbc4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b722c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7230:	2101      	movs	r1, #1
   b7232:	b280      	uxth	r0, r0
   b7234:	f004 fcc6 	bl	bbbc4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7238:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b723c:	4629      	mov	r1, r5
   b723e:	b280      	uxth	r0, r0
   b7240:	f004 fcd1 	bl	bbbe6 <digitalWrite>
   b7244:	e766      	b.n	b7114 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b7246:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7248:	b118      	cbz	r0, b7252 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b724a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b724e:	f000 fe1f 	bl	b7e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7252:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7256:	2100      	movs	r1, #0
   b7258:	b280      	uxth	r0, r0
   b725a:	f004 fcc4 	bl	bbbe6 <digitalWrite>
   b725e:	e780      	b.n	b7162 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7260:	4a1e      	ldr	r2, [pc, #120]	; (b72dc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7262:	4293      	cmp	r3, r2
   b7264:	d10e      	bne.n	b7284 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b7266:	491e      	ldr	r1, [pc, #120]	; (b72e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b7268:	2203      	movs	r2, #3
   b726a:	4620      	mov	r0, r4
   b726c:	f7ff fe89 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b7270:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7274:	2b01      	cmp	r3, #1
   b7276:	bf0c      	ite	eq
   b7278:	219f      	moveq	r1, #159	; 0x9f
   b727a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b727c:	4620      	mov	r0, r4
   b727e:	f7ff fe11 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b7282:	e795      	b.n	b71b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b7284:	4a17      	ldr	r2, [pc, #92]	; (b72e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b7286:	4293      	cmp	r3, r2
   b7288:	d192      	bne.n	b71b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b728a:	4917      	ldr	r1, [pc, #92]	; (b72e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b728c:	2203      	movs	r2, #3
   b728e:	4620      	mov	r0, r4
   b7290:	f7ff fe77 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7294:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7298:	2b01      	cmp	r3, #1
   b729a:	bf0c      	ite	eq
   b729c:	2110      	moveq	r1, #16
   b729e:	21af      	movne	r1, #175	; 0xaf
   b72a0:	e7ec      	b.n	b727c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b72a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b72a6:	2101      	movs	r1, #1
   b72a8:	b280      	uxth	r0, r0
   b72aa:	f004 fc9c 	bl	bbbe6 <digitalWrite>
   b72ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b72b0:	2800      	cmp	r0, #0
   b72b2:	d095      	beq.n	b71e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b72b4:	f000 fdd2 	bl	b7e5c <_ZN8SPIClass14endTransactionEv>
   b72b8:	e792      	b.n	b71e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b72ba:	bf00      	nop
   b72bc:	000beb9c 	.word	0x000beb9c
   b72c0:	000be8dc 	.word	0x000be8dc
   b72c4:	000bede4 	.word	0x000bede4
   b72c8:	000bede8 	.word	0x000bede8
   b72cc:	000bedec 	.word	0x000bedec
   b72d0:	00200080 	.word	0x00200080
   b72d4:	000bedf6 	.word	0x000bedf6
   b72d8:	000bedf0 	.word	0x000bedf0
   b72dc:	00400080 	.word	0x00400080
   b72e0:	000bedfa 	.word	0x000bedfa
   b72e4:	00100060 	.word	0x00100060
   b72e8:	000bedfd 	.word	0x000bedfd

000b72ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72ec:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b72ee:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72f0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b72f4:	db3d      	blt.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b72f6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b72fa:	4294      	cmp	r4, r2
   b72fc:	dd39      	ble.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b72fe:	2900      	cmp	r1, #0
      w += x;
   b7300:	bfbe      	ittt	lt
   b7302:	185b      	addlt	r3, r3, r1
   b7304:	b21b      	sxthlt	r3, r3
      x  = 0;
   b7306:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b7308:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b730c:	18ce      	adds	r6, r1, r3
   b730e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b7310:	bfc4      	itt	gt
   b7312:	1a63      	subgt	r3, r4, r1
   b7314:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b7316:	2b00      	cmp	r3, #0
   b7318:	dd2b      	ble.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b731a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b731c:	10d6      	asrs	r6, r2, #3
   b731e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b7322:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b7324:	f002 0007 	and.w	r0, r2, #7
   b7328:	2201      	movs	r2, #1
   b732a:	4082      	lsls	r2, r0
      switch(color) {
   b732c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b732e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b7330:	d016      	beq.n	b7360 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b7332:	2d02      	cmp	r5, #2
   b7334:	d00b      	beq.n	b734e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b7336:	b9e5      	cbnz	r5, b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7338:	43d2      	mvns	r2, r2
   b733a:	b2d2      	uxtb	r2, r2
   b733c:	440b      	add	r3, r1
   b733e:	4299      	cmp	r1, r3
   b7340:	d017      	beq.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7342:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7346:	4010      	ands	r0, r2
   b7348:	f801 0c01 	strb.w	r0, [r1, #-1]
   b734c:	e7f7      	b.n	b733e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b734e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7350:	4299      	cmp	r1, r3
   b7352:	d00e      	beq.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7354:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7358:	4050      	eors	r0, r2
   b735a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b735e:	e7f7      	b.n	b7350 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7360:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b7362:	4299      	cmp	r1, r3
   b7364:	d005      	beq.n	b7372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7366:	f811 0b01 	ldrb.w	r0, [r1], #1
   b736a:	4310      	orrs	r0, r2
   b736c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7370:	e7f7      	b.n	b7362 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b7372:	bd70      	pop	{r4, r5, r6, pc}

000b7374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7374:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7376:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7378:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b737c:	db76      	blt.n	b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b737e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b7382:	42b1      	cmp	r1, r6
   b7384:	da72      	bge.n	b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b7386:	2a00      	cmp	r2, #0
      __h += __y;
   b7388:	bfbe      	ittt	lt
   b738a:	189b      	addlt	r3, r3, r2
   b738c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b738e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7390:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7394:	18d7      	adds	r7, r2, r3
   b7396:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b7398:	bfc4      	itt	gt
   b739a:	1aa3      	subgt	r3, r4, r2
   b739c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b739e:	2b00      	cmp	r3, #0
   b73a0:	dd64      	ble.n	b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b73a2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b73a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b73a8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b73ac:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b73b0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b73b2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b73b6:	d023      	beq.n	b7400 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b73b8:	f1c2 0208 	rsb	r2, r2, #8
   b73bc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b73be:	492d      	ldr	r1, [pc, #180]	; (b7474 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b73c0:	4293      	cmp	r3, r2
   b73c2:	bf3c      	itt	cc
   b73c4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b73c8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b73cc:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b73ce:	bf3c      	itt	cc
   b73d0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b73d4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b73d8:	2d01      	cmp	r5, #1
   b73da:	d007      	beq.n	b73ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b73dc:	2d02      	cmp	r5, #2
   b73de:	d02e      	beq.n	b743e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b73e0:	b94d      	cbnz	r5, b73f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b73e2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b73e6:	ea2c 0101 	bic.w	r1, ip, r1
   b73ea:	e003      	b.n	b73f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b73ec:	f817 c006 	ldrb.w	ip, [r7, r6]
   b73f0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b73f4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b73f6:	4293      	cmp	r3, r2
   b73f8:	d338      	bcc.n	b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b73fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b73fe:	440c      	add	r4, r1
        h -= mod;
   b7400:	1a9a      	subs	r2, r3, r2
   b7402:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b7404:	2a07      	cmp	r2, #7
   b7406:	d90e      	bls.n	b7426 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b7408:	2d02      	cmp	r5, #2
   b740a:	d11d      	bne.n	b7448 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b740c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b740e:	7821      	ldrb	r1, [r4, #0]
   b7410:	43c9      	mvns	r1, r1
   b7412:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b7414:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b7416:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b741a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b741c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b741e:	440c      	add	r4, r1
            } while(h >= 8);
   b7420:	d8f5      	bhi.n	b740e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b7422:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b7426:	b30a      	cbz	r2, b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b7428:	4b13      	ldr	r3, [pc, #76]	; (b7478 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b742a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b742c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b742e:	d01a      	beq.n	b7466 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b7430:	2d02      	cmp	r5, #2
   b7432:	d01c      	beq.n	b746e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b7434:	b9d5      	cbnz	r5, b746c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b7436:	7822      	ldrb	r2, [r4, #0]
   b7438:	ea22 0303 	bic.w	r3, r2, r3
   b743c:	e015      	b.n	b746a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b743e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7442:	ea81 010c 	eor.w	r1, r1, ip
   b7446:	e7d5      	b.n	b73f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7448:	1e29      	subs	r1, r5, #0
   b744a:	bf18      	it	ne
   b744c:	2101      	movne	r1, #1
   b744e:	4249      	negs	r1, r1
   b7450:	b2c9      	uxtb	r1, r1
   b7452:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b7454:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b7456:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7458:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b745c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b745e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7460:	4434      	add	r4, r6
            } while(h >= 8);
   b7462:	d8f7      	bhi.n	b7454 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b7464:	e7dd      	b.n	b7422 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b7466:	7822      	ldrb	r2, [r4, #0]
   b7468:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b746a:	7023      	strb	r3, [r4, #0]
}
   b746c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b746e:	7822      	ldrb	r2, [r4, #0]
   b7470:	4053      	eors	r3, r2
   b7472:	e7fa      	b.n	b746a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b7474:	000bedd4 	.word	0x000bedd4
   b7478:	000beddc 	.word	0x000beddc

000b747c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b747c:	b470      	push	{r4, r5, r6}
   b747e:	4614      	mov	r4, r2
  switch(rotation) {
   b7480:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7482:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b7486:	2a02      	cmp	r2, #2
   b7488:	d00d      	beq.n	b74a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b748a:	2a03      	cmp	r2, #3
   b748c:	d018      	beq.n	b74c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b748e:	2a01      	cmp	r2, #1
   b7490:	d111      	bne.n	b74b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b7492:	8902      	ldrh	r2, [r0, #8]
   b7494:	43e4      	mvns	r4, r4
   b7496:	4414      	add	r4, r2
   b7498:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b749a:	9603      	str	r6, [sp, #12]
   b749c:	460a      	mov	r2, r1
   b749e:	4621      	mov	r1, r4
}
   b74a0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b74a2:	f7ff bf67 	b.w	b7374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b74a6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b74a8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b74aa:	43e4      	mvns	r4, r4
    x -= (w-1);
   b74ac:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b74ae:	4414      	add	r4, r2
    x -= (w-1);
   b74b0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b74b2:	b224      	sxth	r4, r4
    x -= (w-1);
   b74b4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b74b6:	9603      	str	r6, [sp, #12]
   b74b8:	4622      	mov	r2, r4
}
   b74ba:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b74bc:	f7ff bf16 	b.w	b72ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b74c0:	8945      	ldrh	r5, [r0, #10]
   b74c2:	4419      	add	r1, r3
   b74c4:	1a69      	subs	r1, r5, r1
   b74c6:	b209      	sxth	r1, r1
    break;
   b74c8:	e7e7      	b.n	b749a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b74ca <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b74ca:	b430      	push	{r4, r5}
   b74cc:	4614      	mov	r4, r2
  switch(rotation) {
   b74ce:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b74d0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b74d4:	2a02      	cmp	r2, #2
   b74d6:	d00d      	beq.n	b74f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b74d8:	2a03      	cmp	r2, #3
   b74da:	d018      	beq.n	b750e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b74dc:	2a01      	cmp	r2, #1
   b74de:	d111      	bne.n	b7504 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b74e0:	18e2      	adds	r2, r4, r3
   b74e2:	8904      	ldrh	r4, [r0, #8]
   b74e4:	1aa4      	subs	r4, r4, r2
   b74e6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b74e8:	9502      	str	r5, [sp, #8]
   b74ea:	460a      	mov	r2, r1
   b74ec:	4621      	mov	r1, r4
}
   b74ee:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b74f0:	f7ff befc 	b.w	b72ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b74f4:	8902      	ldrh	r2, [r0, #8]
   b74f6:	43c9      	mvns	r1, r1
   b74f8:	4411      	add	r1, r2
    y -= (h-1);
   b74fa:	18e2      	adds	r2, r4, r3
   b74fc:	8944      	ldrh	r4, [r0, #10]
   b74fe:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b7500:	b209      	sxth	r1, r1
    y -= (h-1);
   b7502:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b7504:	9502      	str	r5, [sp, #8]
   b7506:	4622      	mov	r2, r4
}
   b7508:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b750a:	f7ff bf33 	b.w	b7374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b750e:	8942      	ldrh	r2, [r0, #10]
   b7510:	43c9      	mvns	r1, r1
   b7512:	4411      	add	r1, r2
   b7514:	b209      	sxth	r1, r1
    break;
   b7516:	e7e7      	b.n	b74e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b7518 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b7518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b751c:	4604      	mov	r4, r0
  TRANSACTION_START
   b751e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7520:	2800      	cmp	r0, #0
   b7522:	d042      	beq.n	b75aa <_ZN16Adafruit_SSD13067displayEv+0x92>
   b7524:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7526:	f003 fd63 	bl	baff0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b752a:	4947      	ldr	r1, [pc, #284]	; (b7648 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b752c:	2205      	movs	r2, #5
   b752e:	4620      	mov	r0, r4
   b7530:	f7ff fd27 	bl	b6f82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b7534:	8921      	ldrh	r1, [r4, #8]
   b7536:	3901      	subs	r1, #1
   b7538:	4620      	mov	r0, r4
   b753a:	b2c9      	uxtb	r1, r1
   b753c:	f7ff fcb2 	bl	b6ea4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7540:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7544:	1dde      	adds	r6, r3, #7
   b7546:	bf48      	it	mi
   b7548:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b754c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7550:	8923      	ldrh	r3, [r4, #8]
   b7552:	10f6      	asrs	r6, r6, #3
   b7554:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b7558:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b755c:	2800      	cmp	r0, #0
   b755e:	d03a      	beq.n	b75d6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b7560:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7564:	f003 fd52 	bl	bb00c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b7568:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b756a:	6803      	ldr	r3, [r0, #0]
   b756c:	2140      	movs	r1, #64	; 0x40
   b756e:	689b      	ldr	r3, [r3, #8]
   b7570:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7572:	2701      	movs	r7, #1
    while(count--) {
   b7574:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b7576:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b7578:	d024      	beq.n	b75c4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b757a:	2f1f      	cmp	r7, #31
   b757c:	d90c      	bls.n	b7598 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b757e:	f003 fd4c 	bl	bb01a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7582:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7588:	f003 fd40 	bl	bb00c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b758c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b758e:	6803      	ldr	r3, [r0, #0]
   b7590:	2140      	movs	r1, #64	; 0x40
   b7592:	689b      	ldr	r3, [r3, #8]
   b7594:	4798      	blx	r3
        bytesOut = 1;
   b7596:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b7598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b759a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b759e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b75a0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b75a2:	689b      	ldr	r3, [r3, #8]
   b75a4:	4798      	blx	r3
      bytesOut++;
   b75a6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b75a8:	e7e4      	b.n	b7574 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b75aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b75ac:	b118      	cbz	r0, b75b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b75ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b75b2:	f000 fc6d 	bl	b7e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b75b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b75ba:	2100      	movs	r1, #0
   b75bc:	b280      	uxth	r0, r0
   b75be:	f004 fb12 	bl	bbbe6 <digitalWrite>
   b75c2:	e7b2      	b.n	b752a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b75c4:	f003 fd29 	bl	bb01a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b75c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b75ca:	b378      	cbz	r0, b762c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b75cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b75ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b75d2:	f003 bd0d 	b.w	baff0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b75d6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b75da:	2101      	movs	r1, #1
   b75dc:	b280      	uxth	r0, r0
   b75de:	f004 fb02 	bl	bbbe6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b75e2:	42ae      	cmp	r6, r5
   b75e4:	d0f0      	beq.n	b75c8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b75e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b75e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b75ec:	b118      	cbz	r0, b75f6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b75ee:	4649      	mov	r1, r9
   b75f0:	f000 fcbc 	bl	b7f6c <_ZN8SPIClass8transferEh>
   b75f4:	e7f5      	b.n	b75e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b75f6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b75f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b75fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7600:	ea09 0108 	and.w	r1, r9, r8
   b7604:	b280      	uxth	r0, r0
   b7606:	f004 faee 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b760a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b760e:	2101      	movs	r1, #1
   b7610:	b280      	uxth	r0, r0
   b7612:	f004 fae8 	bl	bbbe6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7616:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b761a:	2100      	movs	r1, #0
   b761c:	b280      	uxth	r0, r0
   b761e:	f004 fae2 	bl	bbbe6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7622:	3f01      	subs	r7, #1
   b7624:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7628:	d1e8      	bne.n	b75fc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b762a:	e7da      	b.n	b75e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b762c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7630:	2101      	movs	r1, #1
   b7632:	b280      	uxth	r0, r0
   b7634:	f004 fad7 	bl	bbbe6 <digitalWrite>
   b7638:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b763a:	b118      	cbz	r0, b7644 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b763c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b7640:	f000 bc0c 	b.w	b7e5c <_ZN8SPIClass14endTransactionEv>
}
   b7644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7648:	000bee00 	.word	0x000bee00

000b764c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b764c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b764e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7650:	4604      	mov	r4, r0
      if (_M_manager)
   b7652:	b113      	cbz	r3, b765a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7654:	2203      	movs	r2, #3
   b7656:	4601      	mov	r1, r0
   b7658:	4798      	blx	r3
    }
   b765a:	4620      	mov	r0, r4
   b765c:	bd10      	pop	{r4, pc}

000b765e <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b765e:	f003 ba4f 	b.w	bab00 <delay>

000b7662 <_Z11BlynkMillisv>:
   b7662:	f000 b87f 	b.w	b7764 <HAL_Timer_Get_Milli_Seconds>

000b7666 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b7666:	4770      	bx	lr

000b7668 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b7668:	4770      	bx	lr

000b766a <BlynkNoOpCbk>:
{}
   b766a:	4770      	bx	lr

000b766c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b766c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b766e:	bf5a      	itte	pl
   b7670:	4b02      	ldrpl	r3, [pc, #8]	; (b767c <GetReadHandler+0x10>)
   b7672:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b7676:	2000      	movmi	r0, #0
#endif
}
   b7678:	4770      	bx	lr
   b767a:	bf00      	nop
   b767c:	000bee08 	.word	0x000bee08

000b7680 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b7680:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b7682:	bf5a      	itte	pl
   b7684:	4b02      	ldrpl	r3, [pc, #8]	; (b7690 <GetWriteHandler+0x10>)
   b7686:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b768a:	2000      	movmi	r0, #0
#endif
}
   b768c:	4770      	bx	lr
   b768e:	bf00      	nop
   b7690:	000bf008 	.word	0x000bf008

000b7694 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7694:	b508      	push	{r3, lr}
   b7696:	4b02      	ldr	r3, [pc, #8]	; (b76a0 <netdb_freeaddrinfo+0xc>)
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	689b      	ldr	r3, [r3, #8]
   b769c:	9301      	str	r3, [sp, #4]
   b769e:	bd08      	pop	{r3, pc}
   b76a0:	00030268 	.word	0x00030268

000b76a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b76a4:	b508      	push	{r3, lr}
   b76a6:	4b02      	ldr	r3, [pc, #8]	; (b76b0 <netdb_getaddrinfo+0xc>)
   b76a8:	681b      	ldr	r3, [r3, #0]
   b76aa:	68db      	ldr	r3, [r3, #12]
   b76ac:	9301      	str	r3, [sp, #4]
   b76ae:	bd08      	pop	{r3, pc}
   b76b0:	00030268 	.word	0x00030268

000b76b4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b76b4:	b508      	push	{r3, lr}
   b76b6:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <hal_pin_validate_function+0xc>)
   b76b8:	681b      	ldr	r3, [r3, #0]
   b76ba:	685b      	ldr	r3, [r3, #4]
   b76bc:	9301      	str	r3, [sp, #4]
   b76be:	bd08      	pop	{r3, pc}
   b76c0:	0003022c 	.word	0x0003022c

000b76c4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b76c4:	b508      	push	{r3, lr}
   b76c6:	4b02      	ldr	r3, [pc, #8]	; (b76d0 <hal_gpio_mode+0xc>)
   b76c8:	681b      	ldr	r3, [r3, #0]
   b76ca:	689b      	ldr	r3, [r3, #8]
   b76cc:	9301      	str	r3, [sp, #4]
   b76ce:	bd08      	pop	{r3, pc}
   b76d0:	0003022c 	.word	0x0003022c

000b76d4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b02      	ldr	r3, [pc, #8]	; (b76e0 <hal_gpio_get_mode+0xc>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	68db      	ldr	r3, [r3, #12]
   b76dc:	9301      	str	r3, [sp, #4]
   b76de:	bd08      	pop	{r3, pc}
   b76e0:	0003022c 	.word	0x0003022c

000b76e4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b02      	ldr	r3, [pc, #8]	; (b76f0 <hal_gpio_write+0xc>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	691b      	ldr	r3, [r3, #16]
   b76ec:	9301      	str	r3, [sp, #4]
   b76ee:	bd08      	pop	{r3, pc}
   b76f0:	0003022c 	.word	0x0003022c

000b76f4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b76f4:	b508      	push	{r3, lr}
   b76f6:	4b02      	ldr	r3, [pc, #8]	; (b7700 <hal_gpio_read+0xc>)
   b76f8:	681b      	ldr	r3, [r3, #0]
   b76fa:	695b      	ldr	r3, [r3, #20]
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	bd08      	pop	{r3, pc}
   b7700:	0003022c 	.word	0x0003022c

000b7704 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b7704:	b508      	push	{r3, lr}
   b7706:	4b02      	ldr	r3, [pc, #8]	; (b7710 <HAL_DAC_Write+0xc>)
   b7708:	681b      	ldr	r3, [r3, #0]
   b770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b770c:	9301      	str	r3, [sp, #4]
   b770e:	bd08      	pop	{r3, pc}
   b7710:	0003022c 	.word	0x0003022c

000b7714 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7714:	b508      	push	{r3, lr}
   b7716:	4b02      	ldr	r3, [pc, #8]	; (b7720 <hal_adc_read+0xc>)
   b7718:	681b      	ldr	r3, [r3, #0]
   b771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b771c:	9301      	str	r3, [sp, #4]
   b771e:	bd08      	pop	{r3, pc}
   b7720:	0003022c 	.word	0x0003022c

000b7724 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b02      	ldr	r3, [pc, #8]	; (b7730 <hal_pwm_write_ext+0xc>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	bd08      	pop	{r3, pc}
   b7730:	0003022c 	.word	0x0003022c

000b7734 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b02      	ldr	r3, [pc, #8]	; (b7740 <if_index_to_name+0xc>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	695b      	ldr	r3, [r3, #20]
   b773c:	9301      	str	r3, [sp, #4]
   b773e:	bd08      	pop	{r3, pc}
   b7740:	0003026c 	.word	0x0003026c

000b7744 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7744:	b508      	push	{r3, lr}
   b7746:	4b02      	ldr	r3, [pc, #8]	; (b7750 <HAL_RNG_GetRandomNumber+0xc>)
   b7748:	681b      	ldr	r3, [r3, #0]
   b774a:	685b      	ldr	r3, [r3, #4]
   b774c:	9301      	str	r3, [sp, #4]
   b774e:	bd08      	pop	{r3, pc}
   b7750:	00030218 	.word	0x00030218

000b7754 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <HAL_Delay_Microseconds+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	68db      	ldr	r3, [r3, #12]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	00030218 	.word	0x00030218

000b7764 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	695b      	ldr	r3, [r3, #20]
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	00030218 	.word	0x00030218

000b7774 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <hal_ble_stack_init+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	689b      	ldr	r3, [r3, #8]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030278 	.word	0x00030278

000b7784 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_ble_gap_set_advertising_parameters+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	00030278 	.word	0x00030278

000b7794 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b02      	ldr	r3, [pc, #8]	; (b77a0 <hal_ble_gap_get_advertising_parameters+0xc>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b779c:	9301      	str	r3, [sp, #4]
   b779e:	bd08      	pop	{r3, pc}
   b77a0:	00030278 	.word	0x00030278

000b77a4 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b77a4:	b508      	push	{r3, lr}
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <hal_ble_gap_start_scan+0xc>)
   b77a8:	681b      	ldr	r3, [r3, #0]
   b77aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b77ac:	9301      	str	r3, [sp, #4]
   b77ae:	bd08      	pop	{r3, pc}
   b77b0:	00030278 	.word	0x00030278

000b77b4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b77b4:	b508      	push	{r3, lr}
   b77b6:	4b03      	ldr	r3, [pc, #12]	; (b77c4 <hal_ble_gap_stop_scan+0x10>)
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b77be:	9301      	str	r3, [sp, #4]
   b77c0:	bd08      	pop	{r3, pc}
   b77c2:	0000      	.short	0x0000
   b77c4:	00030278 	.word	0x00030278

000b77c8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b77c8:	b508      	push	{r3, lr}
   b77ca:	4b03      	ldr	r3, [pc, #12]	; (b77d8 <hal_ble_gap_disconnect+0x10>)
   b77cc:	681b      	ldr	r3, [r3, #0]
   b77ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b77d2:	9301      	str	r3, [sp, #4]
   b77d4:	bd08      	pop	{r3, pc}
   b77d6:	0000      	.short	0x0000
   b77d8:	00030278 	.word	0x00030278

000b77dc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b77dc:	b508      	push	{r3, lr}
   b77de:	4b03      	ldr	r3, [pc, #12]	; (b77ec <hal_ble_set_callback_on_periph_link_events+0x10>)
   b77e0:	681b      	ldr	r3, [r3, #0]
   b77e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b77e6:	9301      	str	r3, [sp, #4]
   b77e8:	bd08      	pop	{r3, pc}
   b77ea:	0000      	.short	0x0000
   b77ec:	00030278 	.word	0x00030278

000b77f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b77f0:	b508      	push	{r3, lr}
   b77f2:	4b02      	ldr	r3, [pc, #8]	; (b77fc <os_mutex_create+0xc>)
   b77f4:	681b      	ldr	r3, [r3, #0]
   b77f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77f8:	9301      	str	r3, [sp, #4]
   b77fa:	bd08      	pop	{r3, pc}
   b77fc:	00030248 	.word	0x00030248

000b7800 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b7800:	b508      	push	{r3, lr}
   b7802:	4b02      	ldr	r3, [pc, #8]	; (b780c <os_mutex_destroy+0xc>)
   b7804:	681b      	ldr	r3, [r3, #0]
   b7806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7808:	9301      	str	r3, [sp, #4]
   b780a:	bd08      	pop	{r3, pc}
   b780c:	00030248 	.word	0x00030248

000b7810 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b7810:	b508      	push	{r3, lr}
   b7812:	4b02      	ldr	r3, [pc, #8]	; (b781c <os_mutex_lock+0xc>)
   b7814:	681b      	ldr	r3, [r3, #0]
   b7816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7818:	9301      	str	r3, [sp, #4]
   b781a:	bd08      	pop	{r3, pc}
   b781c:	00030248 	.word	0x00030248

000b7820 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b7820:	b508      	push	{r3, lr}
   b7822:	4b02      	ldr	r3, [pc, #8]	; (b782c <os_mutex_unlock+0xc>)
   b7824:	681b      	ldr	r3, [r3, #0]
   b7826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7828:	9301      	str	r3, [sp, #4]
   b782a:	bd08      	pop	{r3, pc}
   b782c:	00030248 	.word	0x00030248

000b7830 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7830:	b508      	push	{r3, lr}
   b7832:	4b02      	ldr	r3, [pc, #8]	; (b783c <os_mutex_recursive_create+0xc>)
   b7834:	681b      	ldr	r3, [r3, #0]
   b7836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7838:	9301      	str	r3, [sp, #4]
   b783a:	bd08      	pop	{r3, pc}
   b783c:	00030248 	.word	0x00030248

000b7840 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7840:	b508      	push	{r3, lr}
   b7842:	4b02      	ldr	r3, [pc, #8]	; (b784c <os_mutex_recursive_destroy+0xc>)
   b7844:	681b      	ldr	r3, [r3, #0]
   b7846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7848:	9301      	str	r3, [sp, #4]
   b784a:	bd08      	pop	{r3, pc}
   b784c:	00030248 	.word	0x00030248

000b7850 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7850:	b508      	push	{r3, lr}
   b7852:	4b02      	ldr	r3, [pc, #8]	; (b785c <os_mutex_recursive_lock+0xc>)
   b7854:	681b      	ldr	r3, [r3, #0]
   b7856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7858:	9301      	str	r3, [sp, #4]
   b785a:	bd08      	pop	{r3, pc}
   b785c:	00030248 	.word	0x00030248

000b7860 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7860:	b508      	push	{r3, lr}
   b7862:	4b02      	ldr	r3, [pc, #8]	; (b786c <os_mutex_recursive_unlock+0xc>)
   b7864:	681b      	ldr	r3, [r3, #0]
   b7866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7868:	9301      	str	r3, [sp, #4]
   b786a:	bd08      	pop	{r3, pc}
   b786c:	00030248 	.word	0x00030248

000b7870 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7870:	b508      	push	{r3, lr}
   b7872:	4b02      	ldr	r3, [pc, #8]	; (b787c <inet_inet_ntop+0xc>)
   b7874:	681b      	ldr	r3, [r3, #0]
   b7876:	695b      	ldr	r3, [r3, #20]
   b7878:	9301      	str	r3, [sp, #4]
   b787a:	bd08      	pop	{r3, pc}
   b787c:	00030264 	.word	0x00030264

000b7880 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7880:	b508      	push	{r3, lr}
   b7882:	4b02      	ldr	r3, [pc, #8]	; (b788c <inet_htonl+0xc>)
   b7884:	681b      	ldr	r3, [r3, #0]
   b7886:	6a1b      	ldr	r3, [r3, #32]
   b7888:	9301      	str	r3, [sp, #4]
   b788a:	bd08      	pop	{r3, pc}
   b788c:	00030264 	.word	0x00030264

000b7890 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b7890:	b508      	push	{r3, lr}
   b7892:	4b02      	ldr	r3, [pc, #8]	; (b789c <inet_ntohs+0xc>)
   b7894:	681b      	ldr	r3, [r3, #0]
   b7896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7898:	9301      	str	r3, [sp, #4]
   b789a:	bd08      	pop	{r3, pc}
   b789c:	00030264 	.word	0x00030264

000b78a0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b78a0:	b508      	push	{r3, lr}
   b78a2:	4b02      	ldr	r3, [pc, #8]	; (b78ac <inet_htons+0xc>)
   b78a4:	681b      	ldr	r3, [r3, #0]
   b78a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78a8:	9301      	str	r3, [sp, #4]
   b78aa:	bd08      	pop	{r3, pc}
   b78ac:	00030264 	.word	0x00030264

000b78b0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b78b0:	b508      	push	{r3, lr}
   b78b2:	4b02      	ldr	r3, [pc, #8]	; (b78bc <hal_usart_end+0xc>)
   b78b4:	681b      	ldr	r3, [r3, #0]
   b78b6:	689b      	ldr	r3, [r3, #8]
   b78b8:	9301      	str	r3, [sp, #4]
   b78ba:	bd08      	pop	{r3, pc}
   b78bc:	0003023c 	.word	0x0003023c

000b78c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b78c0:	b508      	push	{r3, lr}
   b78c2:	4b02      	ldr	r3, [pc, #8]	; (b78cc <hal_usart_write+0xc>)
   b78c4:	681b      	ldr	r3, [r3, #0]
   b78c6:	68db      	ldr	r3, [r3, #12]
   b78c8:	9301      	str	r3, [sp, #4]
   b78ca:	bd08      	pop	{r3, pc}
   b78cc:	0003023c 	.word	0x0003023c

000b78d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b78d0:	b508      	push	{r3, lr}
   b78d2:	4b02      	ldr	r3, [pc, #8]	; (b78dc <hal_usart_available+0xc>)
   b78d4:	681b      	ldr	r3, [r3, #0]
   b78d6:	691b      	ldr	r3, [r3, #16]
   b78d8:	9301      	str	r3, [sp, #4]
   b78da:	bd08      	pop	{r3, pc}
   b78dc:	0003023c 	.word	0x0003023c

000b78e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b78e0:	b508      	push	{r3, lr}
   b78e2:	4b02      	ldr	r3, [pc, #8]	; (b78ec <hal_usart_read+0xc>)
   b78e4:	681b      	ldr	r3, [r3, #0]
   b78e6:	695b      	ldr	r3, [r3, #20]
   b78e8:	9301      	str	r3, [sp, #4]
   b78ea:	bd08      	pop	{r3, pc}
   b78ec:	0003023c 	.word	0x0003023c

000b78f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b78f0:	b508      	push	{r3, lr}
   b78f2:	4b02      	ldr	r3, [pc, #8]	; (b78fc <hal_usart_peek+0xc>)
   b78f4:	681b      	ldr	r3, [r3, #0]
   b78f6:	699b      	ldr	r3, [r3, #24]
   b78f8:	9301      	str	r3, [sp, #4]
   b78fa:	bd08      	pop	{r3, pc}
   b78fc:	0003023c 	.word	0x0003023c

000b7900 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7900:	b508      	push	{r3, lr}
   b7902:	4b02      	ldr	r3, [pc, #8]	; (b790c <hal_usart_flush+0xc>)
   b7904:	681b      	ldr	r3, [r3, #0]
   b7906:	69db      	ldr	r3, [r3, #28]
   b7908:	9301      	str	r3, [sp, #4]
   b790a:	bd08      	pop	{r3, pc}
   b790c:	0003023c 	.word	0x0003023c

000b7910 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7910:	b508      	push	{r3, lr}
   b7912:	4b02      	ldr	r3, [pc, #8]	; (b791c <hal_usart_is_enabled+0xc>)
   b7914:	681b      	ldr	r3, [r3, #0]
   b7916:	6a1b      	ldr	r3, [r3, #32]
   b7918:	9301      	str	r3, [sp, #4]
   b791a:	bd08      	pop	{r3, pc}
   b791c:	0003023c 	.word	0x0003023c

000b7920 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7920:	b508      	push	{r3, lr}
   b7922:	4b02      	ldr	r3, [pc, #8]	; (b792c <hal_usart_available_data_for_write+0xc>)
   b7924:	681b      	ldr	r3, [r3, #0]
   b7926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7928:	9301      	str	r3, [sp, #4]
   b792a:	bd08      	pop	{r3, pc}
   b792c:	0003023c 	.word	0x0003023c

000b7930 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7930:	b508      	push	{r3, lr}
   b7932:	4b02      	ldr	r3, [pc, #8]	; (b793c <hal_usart_begin_config+0xc>)
   b7934:	681b      	ldr	r3, [r3, #0]
   b7936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7938:	9301      	str	r3, [sp, #4]
   b793a:	bd08      	pop	{r3, pc}
   b793c:	0003023c 	.word	0x0003023c

000b7940 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7940:	b508      	push	{r3, lr}
   b7942:	4b02      	ldr	r3, [pc, #8]	; (b794c <hal_usart_init_ex+0xc>)
   b7944:	681b      	ldr	r3, [r3, #0]
   b7946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7948:	9301      	str	r3, [sp, #4]
   b794a:	bd08      	pop	{r3, pc}
   b794c:	0003023c 	.word	0x0003023c

000b7950 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7950:	b508      	push	{r3, lr}
   b7952:	4b02      	ldr	r3, [pc, #8]	; (b795c <hal_i2c_set_speed+0xc>)
   b7954:	681b      	ldr	r3, [r3, #0]
   b7956:	681b      	ldr	r3, [r3, #0]
   b7958:	9301      	str	r3, [sp, #4]
   b795a:	bd08      	pop	{r3, pc}
   b795c:	00030228 	.word	0x00030228

000b7960 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7960:	b508      	push	{r3, lr}
   b7962:	4b02      	ldr	r3, [pc, #8]	; (b796c <hal_i2c_begin+0xc>)
   b7964:	681b      	ldr	r3, [r3, #0]
   b7966:	68db      	ldr	r3, [r3, #12]
   b7968:	9301      	str	r3, [sp, #4]
   b796a:	bd08      	pop	{r3, pc}
   b796c:	00030228 	.word	0x00030228

000b7970 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <hal_i2c_begin_transmission+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	699b      	ldr	r3, [r3, #24]
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030228 	.word	0x00030228

000b7980 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <hal_i2c_end_transmission+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	69db      	ldr	r3, [r3, #28]
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030228 	.word	0x00030228

000b7990 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <hal_i2c_write+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	6a1b      	ldr	r3, [r3, #32]
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	00030228 	.word	0x00030228

000b79a0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b02      	ldr	r3, [pc, #8]	; (b79ac <hal_i2c_available+0xc>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79a8:	9301      	str	r3, [sp, #4]
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	00030228 	.word	0x00030228

000b79b0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b79b0:	b508      	push	{r3, lr}
   b79b2:	4b02      	ldr	r3, [pc, #8]	; (b79bc <hal_i2c_read+0xc>)
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	bd08      	pop	{r3, pc}
   b79bc:	00030228 	.word	0x00030228

000b79c0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <hal_i2c_peek+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030228 	.word	0x00030228

000b79d0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <hal_i2c_flush+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030228 	.word	0x00030228

000b79e0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <hal_i2c_is_enabled+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030228 	.word	0x00030228

000b79f0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <hal_i2c_init+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030228 	.word	0x00030228

000b7a00 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <sock_setsockopt+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	699b      	ldr	r3, [r3, #24]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030238 	.word	0x00030238

000b7a10 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <sock_close+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	69db      	ldr	r3, [r3, #28]
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030238 	.word	0x00030238

000b7a20 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <sock_connect+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	6a1b      	ldr	r3, [r3, #32]
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030238 	.word	0x00030238

000b7a30 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <sock_recv+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030238 	.word	0x00030238

000b7a40 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <sock_send+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	00030238 	.word	0x00030238

000b7a50 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <sock_socket+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	00030238 	.word	0x00030238

000b7a60 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <hal_spi_begin+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	681b      	ldr	r3, [r3, #0]
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	00030230 	.word	0x00030230

000b7a70 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <hal_spi_transfer+0xc>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	695b      	ldr	r3, [r3, #20]
   b7a78:	9301      	str	r3, [sp, #4]
   b7a7a:	bd08      	pop	{r3, pc}
   b7a7c:	00030230 	.word	0x00030230

000b7a80 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7a80:	b508      	push	{r3, lr}
   b7a82:	4b02      	ldr	r3, [pc, #8]	; (b7a8c <hal_spi_init+0xc>)
   b7a84:	681b      	ldr	r3, [r3, #0]
   b7a86:	69db      	ldr	r3, [r3, #28]
   b7a88:	9301      	str	r3, [sp, #4]
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	00030230 	.word	0x00030230

000b7a90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7a90:	b508      	push	{r3, lr}
   b7a92:	4b02      	ldr	r3, [pc, #8]	; (b7a9c <hal_spi_is_enabled+0xc>)
   b7a94:	681b      	ldr	r3, [r3, #0]
   b7a96:	6a1b      	ldr	r3, [r3, #32]
   b7a98:	9301      	str	r3, [sp, #4]
   b7a9a:	bd08      	pop	{r3, pc}
   b7a9c:	00030230 	.word	0x00030230

000b7aa0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7aa0:	b508      	push	{r3, lr}
   b7aa2:	4b02      	ldr	r3, [pc, #8]	; (b7aac <hal_spi_info+0xc>)
   b7aa4:	681b      	ldr	r3, [r3, #0]
   b7aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	bd08      	pop	{r3, pc}
   b7aac:	00030230 	.word	0x00030230

000b7ab0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7ab0:	b508      	push	{r3, lr}
   b7ab2:	4b02      	ldr	r3, [pc, #8]	; (b7abc <hal_spi_set_settings+0xc>)
   b7ab4:	681b      	ldr	r3, [r3, #0]
   b7ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ab8:	9301      	str	r3, [sp, #4]
   b7aba:	bd08      	pop	{r3, pc}
   b7abc:	00030230 	.word	0x00030230

000b7ac0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b02      	ldr	r3, [pc, #8]	; (b7acc <hal_spi_acquire+0xc>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ac8:	9301      	str	r3, [sp, #4]
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	00030230 	.word	0x00030230

000b7ad0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7ad0:	b508      	push	{r3, lr}
   b7ad2:	4b02      	ldr	r3, [pc, #8]	; (b7adc <hal_spi_release+0xc>)
   b7ad4:	681b      	ldr	r3, [r3, #0]
   b7ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ad8:	9301      	str	r3, [sp, #4]
   b7ada:	bd08      	pop	{r3, pc}
   b7adc:	00030230 	.word	0x00030230

000b7ae0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7ae0:	b508      	push	{r3, lr}
   b7ae2:	4b02      	ldr	r3, [pc, #8]	; (b7aec <HAL_USB_USART_Init+0xc>)
   b7ae4:	681b      	ldr	r3, [r3, #0]
   b7ae6:	681b      	ldr	r3, [r3, #0]
   b7ae8:	9301      	str	r3, [sp, #4]
   b7aea:	bd08      	pop	{r3, pc}
   b7aec:	0003024c 	.word	0x0003024c

000b7af0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7af0:	b508      	push	{r3, lr}
   b7af2:	4b02      	ldr	r3, [pc, #8]	; (b7afc <HAL_USB_USART_Begin+0xc>)
   b7af4:	681b      	ldr	r3, [r3, #0]
   b7af6:	685b      	ldr	r3, [r3, #4]
   b7af8:	9301      	str	r3, [sp, #4]
   b7afa:	bd08      	pop	{r3, pc}
   b7afc:	0003024c 	.word	0x0003024c

000b7b00 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7b00:	b508      	push	{r3, lr}
   b7b02:	4b02      	ldr	r3, [pc, #8]	; (b7b0c <HAL_USB_USART_End+0xc>)
   b7b04:	681b      	ldr	r3, [r3, #0]
   b7b06:	689b      	ldr	r3, [r3, #8]
   b7b08:	9301      	str	r3, [sp, #4]
   b7b0a:	bd08      	pop	{r3, pc}
   b7b0c:	0003024c 	.word	0x0003024c

000b7b10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4b02      	ldr	r3, [pc, #8]	; (b7b1c <HAL_USB_USART_Available_Data+0xc>)
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	691b      	ldr	r3, [r3, #16]
   b7b18:	9301      	str	r3, [sp, #4]
   b7b1a:	bd08      	pop	{r3, pc}
   b7b1c:	0003024c 	.word	0x0003024c

000b7b20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7b20:	b508      	push	{r3, lr}
   b7b22:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7b24:	681b      	ldr	r3, [r3, #0]
   b7b26:	695b      	ldr	r3, [r3, #20]
   b7b28:	9301      	str	r3, [sp, #4]
   b7b2a:	bd08      	pop	{r3, pc}
   b7b2c:	0003024c 	.word	0x0003024c

000b7b30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b30:	b508      	push	{r3, lr}
   b7b32:	4b02      	ldr	r3, [pc, #8]	; (b7b3c <HAL_USB_USART_Receive_Data+0xc>)
   b7b34:	681b      	ldr	r3, [r3, #0]
   b7b36:	699b      	ldr	r3, [r3, #24]
   b7b38:	9301      	str	r3, [sp, #4]
   b7b3a:	bd08      	pop	{r3, pc}
   b7b3c:	0003024c 	.word	0x0003024c

000b7b40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b40:	b508      	push	{r3, lr}
   b7b42:	4b02      	ldr	r3, [pc, #8]	; (b7b4c <HAL_USB_USART_Send_Data+0xc>)
   b7b44:	681b      	ldr	r3, [r3, #0]
   b7b46:	69db      	ldr	r3, [r3, #28]
   b7b48:	9301      	str	r3, [sp, #4]
   b7b4a:	bd08      	pop	{r3, pc}
   b7b4c:	0003024c 	.word	0x0003024c

000b7b50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7b50:	b508      	push	{r3, lr}
   b7b52:	4b02      	ldr	r3, [pc, #8]	; (b7b5c <HAL_USB_USART_Flush_Data+0xc>)
   b7b54:	681b      	ldr	r3, [r3, #0]
   b7b56:	6a1b      	ldr	r3, [r3, #32]
   b7b58:	9301      	str	r3, [sp, #4]
   b7b5a:	bd08      	pop	{r3, pc}
   b7b5c:	0003024c 	.word	0x0003024c

000b7b60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b60:	b508      	push	{r3, lr}
   b7b62:	4b02      	ldr	r3, [pc, #8]	; (b7b6c <panic_+0xc>)
   b7b64:	681b      	ldr	r3, [r3, #0]
   b7b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b68:	9301      	str	r3, [sp, #4]
   b7b6a:	bd08      	pop	{r3, pc}
   b7b6c:	00030260 	.word	0x00030260

000b7b70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7b70:	b508      	push	{r3, lr}
   b7b72:	4b02      	ldr	r3, [pc, #8]	; (b7b7c <log_message+0xc>)
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7b78:	9301      	str	r3, [sp, #4]
   b7b7a:	bd08      	pop	{r3, pc}
   b7b7c:	00030260 	.word	0x00030260

000b7b80 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7b80:	b508      	push	{r3, lr}
   b7b82:	4b02      	ldr	r3, [pc, #8]	; (b7b8c <log_message_v+0xc>)
   b7b84:	681b      	ldr	r3, [r3, #0]
   b7b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7b88:	9301      	str	r3, [sp, #4]
   b7b8a:	bd08      	pop	{r3, pc}
   b7b8c:	00030260 	.word	0x00030260

000b7b90 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7b90:	b508      	push	{r3, lr}
   b7b92:	4b02      	ldr	r3, [pc, #8]	; (b7b9c <log_level_name+0xc>)
   b7b94:	681b      	ldr	r3, [r3, #0]
   b7b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7b98:	9301      	str	r3, [sp, #4]
   b7b9a:	bd08      	pop	{r3, pc}
   b7b9c:	00030260 	.word	0x00030260

000b7ba0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7ba0:	b508      	push	{r3, lr}
   b7ba2:	4b02      	ldr	r3, [pc, #8]	; (b7bac <log_set_callbacks+0xc>)
   b7ba4:	681b      	ldr	r3, [r3, #0]
   b7ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7ba8:	9301      	str	r3, [sp, #4]
   b7baa:	bd08      	pop	{r3, pc}
   b7bac:	00030260 	.word	0x00030260

000b7bb0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7bb0:	b508      	push	{r3, lr}
   b7bb2:	4b02      	ldr	r3, [pc, #8]	; (b7bbc <set_system_mode+0xc>)
   b7bb4:	681b      	ldr	r3, [r3, #0]
   b7bb6:	685b      	ldr	r3, [r3, #4]
   b7bb8:	9301      	str	r3, [sp, #4]
   b7bba:	bd08      	pop	{r3, pc}
   b7bbc:	00030220 	.word	0x00030220

000b7bc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7bc0:	b508      	push	{r3, lr}
   b7bc2:	4b02      	ldr	r3, [pc, #8]	; (b7bcc <system_delay_ms+0xc>)
   b7bc4:	681b      	ldr	r3, [r3, #0]
   b7bc6:	695b      	ldr	r3, [r3, #20]
   b7bc8:	9301      	str	r3, [sp, #4]
   b7bca:	bd08      	pop	{r3, pc}
   b7bcc:	00030220 	.word	0x00030220

000b7bd0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7bd0:	b508      	push	{r3, lr}
   b7bd2:	4b02      	ldr	r3, [pc, #8]	; (b7bdc <system_thread_set_state+0xc>)
   b7bd4:	681b      	ldr	r3, [r3, #0]
   b7bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bd8:	9301      	str	r3, [sp, #4]
   b7bda:	bd08      	pop	{r3, pc}
   b7bdc:	00030220 	.word	0x00030220

000b7be0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7be0:	b508      	push	{r3, lr}
   b7be2:	4b03      	ldr	r3, [pc, #12]	; (b7bf0 <system_ctrl_set_app_request_handler+0x10>)
   b7be4:	681b      	ldr	r3, [r3, #0]
   b7be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7bea:	9301      	str	r3, [sp, #4]
   b7bec:	bd08      	pop	{r3, pc}
   b7bee:	0000      	.short	0x0000
   b7bf0:	00030220 	.word	0x00030220

000b7bf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7bf4:	b508      	push	{r3, lr}
   b7bf6:	4b03      	ldr	r3, [pc, #12]	; (b7c04 <system_ctrl_set_result+0x10>)
   b7bf8:	681b      	ldr	r3, [r3, #0]
   b7bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7bfe:	9301      	str	r3, [sp, #4]
   b7c00:	bd08      	pop	{r3, pc}
   b7c02:	0000      	.short	0x0000
   b7c04:	00030220 	.word	0x00030220

000b7c08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <network_connect+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	685b      	ldr	r3, [r3, #4]
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	00030240 	.word	0x00030240

000b7c18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <network_connecting+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	689b      	ldr	r3, [r3, #8]
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	00030240 	.word	0x00030240

000b7c28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <network_disconnect+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	68db      	ldr	r3, [r3, #12]
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030240 	.word	0x00030240

000b7c38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <network_ready+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	691b      	ldr	r3, [r3, #16]
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030240 	.word	0x00030240

000b7c48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <network_on+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	695b      	ldr	r3, [r3, #20]
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030240 	.word	0x00030240

000b7c58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <network_off+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	699b      	ldr	r3, [r3, #24]
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030240 	.word	0x00030240

000b7c68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <network_listen+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	69db      	ldr	r3, [r3, #28]
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030240 	.word	0x00030240

000b7c78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <network_listening+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	6a1b      	ldr	r3, [r3, #32]
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030240 	.word	0x00030240

000b7c88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <network_set_listen_timeout+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030240 	.word	0x00030240

000b7c98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <network_get_listen_timeout+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	00030240 	.word	0x00030240

000b7ca8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <network_is_on+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	00030240 	.word	0x00030240

000b7cb8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <network_is_off+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	00030240 	.word	0x00030240

000b7cc8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <spark_process+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	689b      	ldr	r3, [r3, #8]
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	00030244 	.word	0x00030244

000b7cd8 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <spark_deviceID+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	69db      	ldr	r3, [r3, #28]
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	00030244 	.word	0x00030244

000b7ce8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	00030244 	.word	0x00030244

000b7cf8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <malloc+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	681b      	ldr	r3, [r3, #0]
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	0003021c 	.word	0x0003021c

000b7d08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <free+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	685b      	ldr	r3, [r3, #4]
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	0003021c 	.word	0x0003021c

000b7d18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <realloc+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	689b      	ldr	r3, [r3, #8]
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	0003021c 	.word	0x0003021c

000b7d28 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <snprintf+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	69db      	ldr	r3, [r3, #28]
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	0003021c 	.word	0x0003021c

000b7d38 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <vsnprintf+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	0003021c 	.word	0x0003021c

000b7d48 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <abort+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	0003021c 	.word	0x0003021c

000b7d58 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <_malloc_r+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	0003021c 	.word	0x0003021c

000b7d68 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <__errno+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	0003021c 	.word	0x0003021c

000b7d78 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7d78:	b508      	push	{r3, lr}
   b7d7a:	4b02      	ldr	r3, [pc, #8]	; (b7d84 <__assert_func+0xc>)
   b7d7c:	681b      	ldr	r3, [r3, #0]
   b7d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d80:	9301      	str	r3, [sp, #4]
   b7d82:	bd08      	pop	{r3, pc}
   b7d84:	0003021c 	.word	0x0003021c

000b7d88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7d88:	b508      	push	{r3, lr}
   b7d8a:	4b02      	ldr	r3, [pc, #8]	; (b7d94 <newlib_impure_ptr_callback+0xc>)
   b7d8c:	681b      	ldr	r3, [r3, #0]
   b7d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d90:	9301      	str	r3, [sp, #4]
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	0003021c 	.word	0x0003021c

000b7d98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d98:	2200      	movs	r2, #0
   b7d9a:	6840      	ldr	r0, [r0, #4]
   b7d9c:	4611      	mov	r1, r2
   b7d9e:	f7ff bf6b 	b.w	b7c78 <network_listening>

000b7da2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7da2:	2200      	movs	r2, #0
   b7da4:	6840      	ldr	r0, [r0, #4]
   b7da6:	4611      	mov	r1, r2
   b7da8:	f7ff bf76 	b.w	b7c98 <network_get_listen_timeout>

000b7dac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7dac:	6840      	ldr	r0, [r0, #4]
   b7dae:	2200      	movs	r2, #0
   b7db0:	f7ff bf6a 	b.w	b7c88 <network_set_listen_timeout>

000b7db4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7db4:	6840      	ldr	r0, [r0, #4]
   b7db6:	2200      	movs	r2, #0
   b7db8:	f081 0101 	eor.w	r1, r1, #1
   b7dbc:	f7ff bf54 	b.w	b7c68 <network_listen>

000b7dc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7dc0:	2300      	movs	r3, #0
   b7dc2:	6840      	ldr	r0, [r0, #4]
   b7dc4:	461a      	mov	r2, r3
   b7dc6:	4619      	mov	r1, r3
   b7dc8:	f7ff bf46 	b.w	b7c58 <network_off>

000b7dcc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7dcc:	2300      	movs	r3, #0
   b7dce:	6840      	ldr	r0, [r0, #4]
   b7dd0:	461a      	mov	r2, r3
   b7dd2:	4619      	mov	r1, r3
   b7dd4:	f7ff bf38 	b.w	b7c48 <network_on>

000b7dd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7dd8:	2200      	movs	r2, #0
   b7dda:	6840      	ldr	r0, [r0, #4]
   b7ddc:	4611      	mov	r1, r2
   b7dde:	f7ff bf2b 	b.w	b7c38 <network_ready>

000b7de2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7de2:	2200      	movs	r2, #0
   b7de4:	6840      	ldr	r0, [r0, #4]
   b7de6:	4611      	mov	r1, r2
   b7de8:	f7ff bf16 	b.w	b7c18 <network_connecting>

000b7dec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7dec:	6840      	ldr	r0, [r0, #4]
   b7dee:	2200      	movs	r2, #0
   b7df0:	2102      	movs	r1, #2
   b7df2:	f7ff bf19 	b.w	b7c28 <network_disconnect>

000b7df6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7df6:	2300      	movs	r3, #0
   b7df8:	6840      	ldr	r0, [r0, #4]
   b7dfa:	461a      	mov	r2, r3
   b7dfc:	f7ff bf04 	b.w	b7c08 <network_connect>

000b7e00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7e00:	4b02      	ldr	r3, [pc, #8]	; (b7e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7e02:	2203      	movs	r2, #3
   b7e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7e06:	4a02      	ldr	r2, [pc, #8]	; (b7e10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7e08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7e0a:	4770      	bx	lr
   b7e0c:	2003e688 	.word	0x2003e688
   b7e10:	000bf210 	.word	0x000bf210

000b7e14 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7e14:	2100      	movs	r1, #0
   b7e16:	f7ff be5b 	b.w	b7ad0 <hal_spi_release>

000b7e1a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7e1a:	2100      	movs	r1, #0
   b7e1c:	f7ff be50 	b.w	b7ac0 <hal_spi_acquire>

000b7e20 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7e20:	b510      	push	{r4, lr}
   b7e22:	4604      	mov	r4, r0
   b7e24:	4608      	mov	r0, r1
{
    _spi = spi;
   b7e26:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7e28:	f7ff fe2a 	bl	b7a80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7e2c:	2300      	movs	r3, #0
   b7e2e:	6063      	str	r3, [r4, #4]
}
   b7e30:	4620      	mov	r0, r4
   b7e32:	bd10      	pop	{r4, pc}

000b7e34 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7e34:	b513      	push	{r0, r1, r4, lr}
   b7e36:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7e38:	7800      	ldrb	r0, [r0, #0]
   b7e3a:	f7ff ffee 	bl	b7e1a <_ZN8SPIClass4lockEv.isra.0>
   b7e3e:	b958      	cbnz	r0, b7e58 <_ZN8SPIClass5beginEv+0x24>
   b7e40:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7e42:	9001      	str	r0, [sp, #4]
   b7e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7e48:	f7ff fe0a 	bl	b7a60 <hal_spi_begin>
        unlock();
   b7e4c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7e4e:	b002      	add	sp, #8
   b7e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e54:	f7ff bfde 	b.w	b7e14 <_ZN8SPIClass6unlockEv.isra.0>
   b7e58:	b002      	add	sp, #8
   b7e5a:	bd10      	pop	{r4, pc}

000b7e5c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7e5c:	7800      	ldrb	r0, [r0, #0]
   b7e5e:	f7ff bfd9 	b.w	b7e14 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7e64 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7e64:	0840      	lsrs	r0, r0, #1
{
   b7e66:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7e68:	6018      	str	r0, [r3, #0]
   b7e6a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7e6c:	6818      	ldr	r0, [r3, #0]
   b7e6e:	4288      	cmp	r0, r1
   b7e70:	b2e5      	uxtb	r5, r4
   b7e72:	d906      	bls.n	b7e82 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7e74:	3401      	adds	r4, #1
   b7e76:	2c08      	cmp	r4, #8
   b7e78:	d002      	beq.n	b7e80 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7e7a:	0840      	lsrs	r0, r0, #1
   b7e7c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7e7e:	e7f5      	b.n	b7e6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7e80:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7e82:	4b02      	ldr	r3, [pc, #8]	; (b7e8c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7e84:	5d5b      	ldrb	r3, [r3, r5]
   b7e86:	7013      	strb	r3, [r2, #0]
}
   b7e88:	bd30      	pop	{r4, r5, pc}
   b7e8a:	bf00      	nop
   b7e8c:	000bf244 	.word	0x000bf244

000b7e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e94:	4606      	mov	r6, r0
   b7e96:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7e98:	7800      	ldrb	r0, [r0, #0]
{
   b7e9a:	460c      	mov	r4, r1
    CHECK(lock());
   b7e9c:	f7ff ffbd 	bl	b7e1a <_ZN8SPIClass4lockEv.isra.0>
   b7ea0:	2800      	cmp	r0, #0
   b7ea2:	db1b      	blt.n	b7edc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7ea4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7ea6:	2214      	movs	r2, #20
   b7ea8:	2100      	movs	r1, #0
   b7eaa:	a809      	add	r0, sp, #36	; 0x24
   b7eac:	f004 f8f0 	bl	bc090 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7eb0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	a909      	add	r1, sp, #36	; 0x24
   b7eb6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7eb8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7ebc:	f7ff fdf0 	bl	b7aa0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7ec0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7ec4:	b113      	cbz	r3, b7ecc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7ec6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7eca:	b155      	cbz	r5, b7ee2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7ecc:	2700      	movs	r7, #0
   b7ece:	46b9      	mov	r9, r7
   b7ed0:	46b8      	mov	r8, r7
   b7ed2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7ed4:	7923      	ldrb	r3, [r4, #4]
   b7ed6:	b15d      	cbz	r5, b7ef0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7ed8:	b1c3      	cbz	r3, b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7eda:	2000      	movs	r0, #0
}
   b7edc:	b00f      	add	sp, #60	; 0x3c
   b7ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7ee2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7ee6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7eea:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7eee:	e7f1      	b.n	b7ed4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7ef0:	2b00      	cmp	r3, #0
   b7ef2:	d135      	bne.n	b7f60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7ef4:	68a3      	ldr	r3, [r4, #8]
   b7ef6:	4543      	cmp	r3, r8
   b7ef8:	d108      	bne.n	b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7efa:	f88d 9020 	strb.w	r9, [sp, #32]
   b7efe:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7f02:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7f06:	89a3      	ldrh	r3, [r4, #12]
   b7f08:	429a      	cmp	r2, r3
   b7f0a:	d0e6      	beq.n	b7eda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7f0c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7f0e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7f10:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7f14:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7f16:	ab04      	add	r3, sp, #16
   b7f18:	f10d 020f 	add.w	r2, sp, #15
   b7f1c:	f7ff ffa2 	bl	b7e64 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7f20:	7921      	ldrb	r1, [r4, #4]
   b7f22:	b985      	cbnz	r5, b7f46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7f24:	b989      	cbnz	r1, b7f4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7f26:	68a3      	ldr	r3, [r4, #8]
   b7f28:	4543      	cmp	r3, r8
   b7f2a:	d30e      	bcc.n	b7f4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7f2c:	f88d 9020 	strb.w	r9, [sp, #32]
   b7f30:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7f34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7f38:	89a3      	ldrh	r3, [r4, #12]
   b7f3a:	429a      	cmp	r2, r3
   b7f3c:	d105      	bne.n	b7f4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7f3e:	9b04      	ldr	r3, [sp, #16]
   b7f40:	4543      	cmp	r3, r8
   b7f42:	d102      	bne.n	b7f4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7f44:	e7c9      	b.n	b7eda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7f46:	2900      	cmp	r1, #0
   b7f48:	d1f9      	bne.n	b7f3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7f4a:	2300      	movs	r3, #0
   b7f4c:	9301      	str	r3, [sp, #4]
   b7f4e:	7b63      	ldrb	r3, [r4, #13]
   b7f50:	9300      	str	r3, [sp, #0]
   b7f52:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7f56:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7f58:	7830      	ldrb	r0, [r6, #0]
   b7f5a:	f7ff fda9 	bl	b7ab0 <hal_spi_set_settings>
   b7f5e:	e7bc      	b.n	b7eda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7f60:	e9cd 5500 	strd	r5, r5, [sp]
   b7f64:	462b      	mov	r3, r5
   b7f66:	462a      	mov	r2, r5
   b7f68:	2101      	movs	r1, #1
   b7f6a:	e7f5      	b.n	b7f58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7f6c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7f6c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7f6e:	7800      	ldrb	r0, [r0, #0]
   b7f70:	f7ff fd7e 	bl	b7a70 <hal_spi_transfer>
}
   b7f74:	b2c0      	uxtb	r0, r0
   b7f76:	bd08      	pop	{r3, pc}

000b7f78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7f78:	4b05      	ldr	r3, [pc, #20]	; (b7f90 <_GLOBAL__sub_I_System+0x18>)
   b7f7a:	2202      	movs	r2, #2
   b7f7c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7f7e:	4b05      	ldr	r3, [pc, #20]	; (b7f94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7f80:	4a05      	ldr	r2, [pc, #20]	; (b7f98 <_GLOBAL__sub_I_System+0x20>)
   b7f82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7f84:	2000      	movs	r0, #0
   b7f86:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7f8a:	f7ff be11 	b.w	b7bb0 <set_system_mode>
   b7f8e:	bf00      	nop
   b7f90:	2003e69c 	.word	0x2003e69c
   b7f94:	2003e690 	.word	0x2003e690
   b7f98:	ffff0000 	.word	0xffff0000

000b7f9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7f9c:	b510      	push	{r4, lr}
   b7f9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7fa0:	f7fc fd2c 	bl	b49fc <strlen>
   b7fa4:	3801      	subs	r0, #1
   b7fa6:	1823      	adds	r3, r4, r0
   b7fa8:	4620      	mov	r0, r4
	while(i<j){
   b7faa:	4283      	cmp	r3, r0
   b7fac:	d906      	bls.n	b7fbc <_Z11str_reversePc+0x20>
		c = *i;
   b7fae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7fb0:	7819      	ldrb	r1, [r3, #0]
   b7fb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7fb6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7fba:	e7f6      	b.n	b7faa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7fbc:	bd10      	pop	{r4, pc}

000b7fbe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7fbe:	b570      	push	{r4, r5, r6, lr}
   b7fc0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7fc2:	1e91      	subs	r1, r2, #2
   b7fc4:	2922      	cmp	r1, #34	; 0x22
   b7fc6:	d81d      	bhi.n	b8004 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7fc8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7fca:	b930      	cbnz	r0, b7fda <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7fcc:	4423      	add	r3, r4
            *ptr++ = '0';
   b7fce:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7fd0:	429d      	cmp	r5, r3
   b7fd2:	d210      	bcs.n	b7ff6 <ultoa+0x38>
            *ptr++ = '0';
   b7fd4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7fd8:	e7fa      	b.n	b7fd0 <ultoa+0x12>
            result.quot = a/radix;
   b7fda:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7fde:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7fe2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7fe4:	2809      	cmp	r0, #9
                *ptr += '0';
   b7fe6:	bf94      	ite	ls
   b7fe8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7fea:	3157      	addhi	r1, #87	; 0x57
   b7fec:	b2c9      	uxtb	r1, r1
   b7fee:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7ff2:	4630      	mov	r0, r6
	while(a){
   b7ff4:	e7e9      	b.n	b7fca <ultoa+0xc>

	*ptr = '\0';
   b7ff6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7ff8:	4620      	mov	r0, r4
	*ptr = '\0';
   b7ffa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7ffc:	f7ff ffce 	bl	b7f9c <_Z11str_reversePc>
	return buffer;
   b8000:	4620      	mov	r0, r4
}
   b8002:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8004:	2000      	movs	r0, #0
   b8006:	e7fc      	b.n	b8002 <ultoa+0x44>

000b8008 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8008:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b800a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b800c:	460c      	mov	r4, r1
   b800e:	4615      	mov	r5, r2
	if(a<0){
   b8010:	da0e      	bge.n	b8030 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8016:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b801a:	bf14      	ite	ne
   b801c:	4258      	negne	r0, r3
   b801e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8020:	2301      	movs	r3, #1
		*buffer = '-';
   b8022:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8024:	462a      	mov	r2, r5
   b8026:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8028:	f7ff ffc9 	bl	b7fbe <ultoa>
	}
	return buffer;
}
   b802c:	4620      	mov	r0, r4
   b802e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8030:	2301      	movs	r3, #1
   b8032:	e7f9      	b.n	b8028 <itoa+0x20>

000b8034 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8034:	b510      	push	{r4, lr}
   b8036:	4604      	mov	r4, r0
{
	free(buffer);
   b8038:	6800      	ldr	r0, [r0, #0]
   b803a:	f7ff fe65 	bl	b7d08 <free>
}
   b803e:	4620      	mov	r0, r4
   b8040:	bd10      	pop	{r4, pc}

000b8042 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8042:	b510      	push	{r4, lr}
   b8044:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8046:	6800      	ldr	r0, [r0, #0]
   b8048:	b108      	cbz	r0, b804e <_ZN6String10invalidateEv+0xc>
   b804a:	f7ff fe5d 	bl	b7d08 <free>
	buffer = NULL;
   b804e:	2300      	movs	r3, #0
	capacity = len = 0;
   b8050:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8054:	6023      	str	r3, [r4, #0]
}
   b8056:	bd10      	pop	{r4, pc}

000b8058 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8058:	b538      	push	{r3, r4, r5, lr}
   b805a:	4604      	mov	r4, r0
   b805c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b805e:	6800      	ldr	r0, [r0, #0]
   b8060:	3101      	adds	r1, #1
   b8062:	f7ff fe59 	bl	b7d18 <realloc>
	if (newbuffer) {
   b8066:	b110      	cbz	r0, b806e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8068:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b806c:	2001      	movs	r0, #1
	}
	return 0;
}
   b806e:	bd38      	pop	{r3, r4, r5, pc}

000b8070 <_ZN6String7reserveEj>:
{
   b8070:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8072:	6803      	ldr	r3, [r0, #0]
{
   b8074:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8076:	b123      	cbz	r3, b8082 <_ZN6String7reserveEj+0x12>
   b8078:	6843      	ldr	r3, [r0, #4]
   b807a:	428b      	cmp	r3, r1
   b807c:	d301      	bcc.n	b8082 <_ZN6String7reserveEj+0x12>
   b807e:	2001      	movs	r0, #1
}
   b8080:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8082:	4620      	mov	r0, r4
   b8084:	f7ff ffe8 	bl	b8058 <_ZN6String12changeBufferEj>
   b8088:	2800      	cmp	r0, #0
   b808a:	d0f9      	beq.n	b8080 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b808c:	68a3      	ldr	r3, [r4, #8]
   b808e:	2b00      	cmp	r3, #0
   b8090:	d1f5      	bne.n	b807e <_ZN6String7reserveEj+0xe>
   b8092:	6822      	ldr	r2, [r4, #0]
   b8094:	7013      	strb	r3, [r2, #0]
   b8096:	e7f2      	b.n	b807e <_ZN6String7reserveEj+0xe>

000b8098 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8098:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b809a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b809c:	4611      	mov	r1, r2
   b809e:	9201      	str	r2, [sp, #4]
{
   b80a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b80a2:	f7ff ffe5 	bl	b8070 <_ZN6String7reserveEj>
   b80a6:	9a01      	ldr	r2, [sp, #4]
   b80a8:	b928      	cbnz	r0, b80b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b80aa:	4620      	mov	r0, r4
   b80ac:	f7ff ffc9 	bl	b8042 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b80b0:	4620      	mov	r0, r4
   b80b2:	b003      	add	sp, #12
   b80b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b80b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b80b8:	4629      	mov	r1, r5
   b80ba:	6820      	ldr	r0, [r4, #0]
   b80bc:	f003 ffc0 	bl	bc040 <memcpy>
	buffer[len] = 0;
   b80c0:	6822      	ldr	r2, [r4, #0]
   b80c2:	68a3      	ldr	r3, [r4, #8]
   b80c4:	2100      	movs	r1, #0
   b80c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b80c8:	e7f2      	b.n	b80b0 <_ZN6String4copyEPKcj+0x18>

000b80ca <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b80ca:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b80cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b80ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b80d2:	4604      	mov	r4, r0
	len = 0;
   b80d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b80d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b80d8:	b141      	cbz	r1, b80ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b80da:	4608      	mov	r0, r1
   b80dc:	9101      	str	r1, [sp, #4]
   b80de:	f7fc fc8d 	bl	b49fc <strlen>
   b80e2:	9901      	ldr	r1, [sp, #4]
   b80e4:	4602      	mov	r2, r0
   b80e6:	4620      	mov	r0, r4
   b80e8:	f7ff ffd6 	bl	b8098 <_ZN6String4copyEPKcj>
}
   b80ec:	4620      	mov	r0, r4
   b80ee:	b002      	add	sp, #8
   b80f0:	bd10      	pop	{r4, pc}

000b80f2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b80f2:	b538      	push	{r3, r4, r5, lr}
   b80f4:	4605      	mov	r5, r0
	if (buffer) {
   b80f6:	6800      	ldr	r0, [r0, #0]
{
   b80f8:	460c      	mov	r4, r1
	if (buffer) {
   b80fa:	b168      	cbz	r0, b8118 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b80fc:	686a      	ldr	r2, [r5, #4]
   b80fe:	688b      	ldr	r3, [r1, #8]
   b8100:	429a      	cmp	r2, r3
   b8102:	d307      	bcc.n	b8114 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8104:	6809      	ldr	r1, [r1, #0]
   b8106:	f004 f810 	bl	bc12a <strcpy>
			len = rhs.len;
   b810a:	68a3      	ldr	r3, [r4, #8]
   b810c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b810e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8110:	60a3      	str	r3, [r4, #8]
}
   b8112:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8114:	f7ff fdf8 	bl	b7d08 <free>
	buffer = rhs.buffer;
   b8118:	6823      	ldr	r3, [r4, #0]
   b811a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b811c:	6863      	ldr	r3, [r4, #4]
   b811e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8120:	68a3      	ldr	r3, [r4, #8]
   b8122:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8124:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8126:	e9c4 3300 	strd	r3, r3, [r4]
   b812a:	e7f1      	b.n	b8110 <_ZN6String4moveERS_+0x1e>

000b812c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b812c:	b510      	push	{r4, lr}
	buffer = NULL;
   b812e:	2300      	movs	r3, #0
	capacity = 0;
   b8130:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8134:	4604      	mov	r4, r0
	len = 0;
   b8136:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8138:	7303      	strb	r3, [r0, #12]
	move(rval);
   b813a:	f7ff ffda 	bl	b80f2 <_ZN6String4moveERS_>
}
   b813e:	4620      	mov	r0, r4
   b8140:	bd10      	pop	{r4, pc}

000b8142 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8142:	4288      	cmp	r0, r1
{
   b8144:	b510      	push	{r4, lr}
   b8146:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8148:	d005      	beq.n	b8156 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b814a:	680b      	ldr	r3, [r1, #0]
   b814c:	b12b      	cbz	r3, b815a <_ZN6StringaSERKS_+0x18>
   b814e:	688a      	ldr	r2, [r1, #8]
   b8150:	4619      	mov	r1, r3
   b8152:	f7ff ffa1 	bl	b8098 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8156:	4620      	mov	r0, r4
   b8158:	bd10      	pop	{r4, pc}
	else invalidate();
   b815a:	f7ff ff72 	bl	b8042 <_ZN6String10invalidateEv>
   b815e:	e7fa      	b.n	b8156 <_ZN6StringaSERKS_+0x14>

000b8160 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8160:	b510      	push	{r4, lr}
	buffer = NULL;
   b8162:	2300      	movs	r3, #0
String::String(const String &value)
   b8164:	4604      	mov	r4, r0
	capacity = 0;
   b8166:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b816a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b816c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b816e:	f7ff ffe8 	bl	b8142 <_ZN6StringaSERKS_>
}
   b8172:	4620      	mov	r0, r4
   b8174:	bd10      	pop	{r4, pc}

000b8176 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8176:	4288      	cmp	r0, r1
{
   b8178:	b510      	push	{r4, lr}
   b817a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b817c:	d001      	beq.n	b8182 <_ZN6StringaSEOS_+0xc>
   b817e:	f7ff ffb8 	bl	b80f2 <_ZN6String4moveERS_>
	return *this;
}
   b8182:	4620      	mov	r0, r4
   b8184:	bd10      	pop	{r4, pc}

000b8186 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8186:	b513      	push	{r0, r1, r4, lr}
   b8188:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b818a:	b159      	cbz	r1, b81a4 <_ZN6StringaSEPKc+0x1e>
   b818c:	4608      	mov	r0, r1
   b818e:	9101      	str	r1, [sp, #4]
   b8190:	f7fc fc34 	bl	b49fc <strlen>
   b8194:	9901      	ldr	r1, [sp, #4]
   b8196:	4602      	mov	r2, r0
   b8198:	4620      	mov	r0, r4
   b819a:	f7ff ff7d 	bl	b8098 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b819e:	4620      	mov	r0, r4
   b81a0:	b002      	add	sp, #8
   b81a2:	bd10      	pop	{r4, pc}
	else invalidate();
   b81a4:	f7ff ff4d 	bl	b8042 <_ZN6String10invalidateEv>
   b81a8:	e7f9      	b.n	b819e <_ZN6StringaSEPKc+0x18>

000b81aa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b81aa:	b510      	push	{r4, lr}
   b81ac:	4604      	mov	r4, r0
   b81ae:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b81b0:	2300      	movs	r3, #0
	capacity = 0;
   b81b2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b81b6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b81b8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b81ba:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b81bc:	a901      	add	r1, sp, #4
   b81be:	f7ff ff23 	bl	b8008 <itoa>
	*this = buf;
   b81c2:	a901      	add	r1, sp, #4
   b81c4:	4620      	mov	r0, r4
   b81c6:	f7ff ffde 	bl	b8186 <_ZN6StringaSEPKc>
}
   b81ca:	4620      	mov	r0, r4
   b81cc:	b00a      	add	sp, #40	; 0x28
   b81ce:	bd10      	pop	{r4, pc}

000b81d0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b81d0:	b570      	push	{r4, r5, r6, lr}
   b81d2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b81d4:	460e      	mov	r6, r1
   b81d6:	b909      	cbnz	r1, b81dc <_ZN6String6concatEPKcj+0xc>
   b81d8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b81da:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b81dc:	b16a      	cbz	r2, b81fa <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b81de:	6884      	ldr	r4, [r0, #8]
   b81e0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81e2:	4621      	mov	r1, r4
   b81e4:	f7ff ff44 	bl	b8070 <_ZN6String7reserveEj>
   b81e8:	2800      	cmp	r0, #0
   b81ea:	d0f5      	beq.n	b81d8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b81ec:	6828      	ldr	r0, [r5, #0]
   b81ee:	68ab      	ldr	r3, [r5, #8]
   b81f0:	4631      	mov	r1, r6
   b81f2:	4418      	add	r0, r3
   b81f4:	f003 ff99 	bl	bc12a <strcpy>
	len = newlen;
   b81f8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b81fa:	2001      	movs	r0, #1
   b81fc:	e7ed      	b.n	b81da <_ZN6String6concatEPKcj+0xa>

000b81fe <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b81fe:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8200:	2300      	movs	r3, #0
	buf[0] = c;
   b8202:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8206:	2201      	movs	r2, #1
   b8208:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b820a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b820e:	f7ff ffdf 	bl	b81d0 <_ZN6String6concatEPKcj>
}
   b8212:	b003      	add	sp, #12
   b8214:	f85d fb04 	ldr.w	pc, [sp], #4

000b8218 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b8218:	6802      	ldr	r2, [r0, #0]
{
   b821a:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b821c:	6809      	ldr	r1, [r1, #0]
   b821e:	b162      	cbz	r2, b823a <_ZNK6String9compareToERKS_+0x22>
   b8220:	b941      	cbnz	r1, b8234 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b8222:	6880      	ldr	r0, [r0, #8]
   b8224:	b160      	cbz	r0, b8240 <_ZNK6String9compareToERKS_+0x28>
   b8226:	7810      	ldrb	r0, [r2, #0]
   b8228:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b822a:	6898      	ldr	r0, [r3, #8]
   b822c:	b140      	cbz	r0, b8240 <_ZNK6String9compareToERKS_+0x28>
   b822e:	7809      	ldrb	r1, [r1, #0]
   b8230:	4248      	negs	r0, r1
   b8232:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8234:	4610      	mov	r0, r2
   b8236:	f7fc bbd7 	b.w	b49e8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b823a:	2900      	cmp	r1, #0
   b823c:	d1f5      	bne.n	b822a <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b823e:	4608      	mov	r0, r1
}
   b8240:	4770      	bx	lr

000b8242 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b8242:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b8244:	6882      	ldr	r2, [r0, #8]
   b8246:	688b      	ldr	r3, [r1, #8]
   b8248:	429a      	cmp	r2, r3
   b824a:	d105      	bne.n	b8258 <_ZNK6String6equalsERKS_+0x16>
   b824c:	f7ff ffe4 	bl	b8218 <_ZNK6String9compareToERKS_>
   b8250:	fab0 f080 	clz	r0, r0
   b8254:	0940      	lsrs	r0, r0, #5
}
   b8256:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b8258:	2000      	movs	r0, #0
   b825a:	e7fc      	b.n	b8256 <_ZNK6String6equalsERKS_+0x14>

000b825c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b825c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b825e:	6800      	ldr	r0, [r0, #0]
   b8260:	b140      	cbz	r0, b8274 <_ZNK6String7toFloatEv+0x18>
   b8262:	f003 fec9 	bl	bbff8 <atof>
   b8266:	ec51 0b10 	vmov	r0, r1, d0
   b826a:	f7fc fb4f 	bl	b490c <__aeabi_d2f>
   b826e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b8272:	bd08      	pop	{r3, pc}
	return 0;
   b8274:	ed9f 0a01 	vldr	s0, [pc, #4]	; b827c <_ZNK6String7toFloatEv+0x20>
   b8278:	e7fb      	b.n	b8272 <_ZNK6String7toFloatEv+0x16>
   b827a:	bf00      	nop
   b827c:	00000000 	.word	0x00000000

000b8280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b8280:	4770      	bx	lr
	...

000b8284 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b8284:	4b06      	ldr	r3, [pc, #24]	; (b82a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8286:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8288:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b828a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b828e:	d005      	beq.n	b829c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8290:	4608      	mov	r0, r1
   b8292:	f003 fd99 	bl	bbdc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b8296:	2800      	cmp	r0, #0
   b8298:	bf08      	it	eq
   b829a:	2400      	moveq	r4, #0
      }
   b829c:	4620      	mov	r0, r4
   b829e:	bd10      	pop	{r4, pc}
   b82a0:	000bf340 	.word	0x000bf340

000b82a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b82a4:	b510      	push	{r4, lr}
   b82a6:	2130      	movs	r1, #48	; 0x30
   b82a8:	4604      	mov	r4, r0
   b82aa:	f7fc fc08 	bl	b4abe <_ZdlPvj>
   b82ae:	4620      	mov	r0, r4
   b82b0:	bd10      	pop	{r4, pc}

000b82b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b82b2:	2130      	movs	r1, #48	; 0x30
   b82b4:	f7fc bc03 	b.w	b4abe <_ZdlPvj>

000b82b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b82b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82ba:	2500      	movs	r5, #0
   b82bc:	1cec      	adds	r4, r5, #3
   b82be:	428c      	cmp	r4, r1
   b82c0:	d80d      	bhi.n	b82de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b82c2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b82c4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b82c6:	5d87      	ldrb	r7, [r0, r6]
   b82c8:	4297      	cmp	r7, r2
   b82ca:	d105      	bne.n	b82d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b82cc:	4426      	add	r6, r4
   b82ce:	42b1      	cmp	r1, r6
   b82d0:	d305      	bcc.n	b82de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b82d2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b82d4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b82d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b82d8:	3401      	adds	r4, #1
   b82da:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82dc:	e7ee      	b.n	b82bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b82de:	2000      	movs	r0, #0
   b82e0:	e7f9      	b.n	b82d6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b82e2 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataOS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82e2:	b410      	push	{r4}
   b82e4:	460c      	mov	r4, r1
	    return __source._M_access<_Functor*>();
   b82e6:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b82e8:	6820      	ldr	r0, [r4, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b82ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   b82ee:	e9d3 2100 	ldrd	r2, r1, [r3]
   b82f2:	4710      	bx	r2

000b82f4 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b82f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82f6:	b538      	push	{r3, r4, r5, lr}
   b82f8:	4604      	mov	r4, r0
	switch (__op)
   b82fa:	d102      	bne.n	b8302 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b82fc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b82fe:	6023      	str	r3, [r4, #0]
	}
   b8300:	e003      	b.n	b830a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b8302:	2a02      	cmp	r2, #2
   b8304:	d003      	beq.n	b830e <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b8306:	2a03      	cmp	r2, #3
   b8308:	d00d      	beq.n	b8326 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b830a:	2000      	movs	r0, #0
   b830c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b830e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8310:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8312:	f7fc fbce 	bl	b4ab2 <_Znwj>
   b8316:	4603      	mov	r3, r0
   b8318:	2800      	cmp	r0, #0
   b831a:	d0f0      	beq.n	b82fe <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b831c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8320:	e883 0003 	stmia.w	r3, {r0, r1}
   b8324:	e7eb      	b.n	b82fe <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8326:	6800      	ldr	r0, [r0, #0]
   b8328:	2800      	cmp	r0, #0
   b832a:	d0ee      	beq.n	b830a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b832c:	2108      	movs	r1, #8
   b832e:	f7fc fbc6 	bl	b4abe <_ZdlPvj>
   b8332:	e7ea      	b.n	b830a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b8334 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b8334:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b8336:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b8338:	4604      	mov	r4, r0
	if (_M_manager)
   b833a:	b12b      	cbz	r3, b8348 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b833c:	2203      	movs	r2, #3
   b833e:	4601      	mov	r1, r0
   b8340:	4798      	blx	r3
	    _M_manager = nullptr;
   b8342:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b8344:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b8348:	bd10      	pop	{r4, pc}

000b834a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b834a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b834c:	6843      	ldr	r3, [r0, #4]
   b834e:	3b01      	subs	r3, #1
    {
   b8350:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8352:	6043      	str	r3, [r0, #4]
   b8354:	b963      	cbnz	r3, b8370 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8356:	6803      	ldr	r3, [r0, #0]
   b8358:	689b      	ldr	r3, [r3, #8]
   b835a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b835c:	68a3      	ldr	r3, [r4, #8]
   b835e:	3b01      	subs	r3, #1
   b8360:	60a3      	str	r3, [r4, #8]
   b8362:	b92b      	cbnz	r3, b8370 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8364:	6823      	ldr	r3, [r4, #0]
   b8366:	4620      	mov	r0, r4
   b8368:	68db      	ldr	r3, [r3, #12]
    }
   b836a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b836e:	4718      	bx	r3
    }
   b8370:	bd10      	pop	{r4, pc}

000b8372 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8372:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8376:	b2da      	uxtb	r2, r3
   b8378:	2a09      	cmp	r2, #9
   b837a:	d801      	bhi.n	b8380 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b837c:	4618      	mov	r0, r3
   b837e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8380:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8384:	2b05      	cmp	r3, #5
   b8386:	d801      	bhi.n	b838c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8388:	3857      	subs	r0, #87	; 0x57
   b838a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b838c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8390:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8392:	bf94      	ite	ls
   b8394:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8396:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b839a:	4770      	bx	lr

000b839c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b839c:	b510      	push	{r4, lr}
            locked_(false) {
   b839e:	2300      	movs	r3, #0
   b83a0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b83a2:	4b04      	ldr	r3, [pc, #16]	; (b83b4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b83a4:	4604      	mov	r4, r0
   b83a6:	6818      	ldr	r0, [r3, #0]
   b83a8:	f7ff fa52 	bl	b7850 <os_mutex_recursive_lock>
        locked_ = true;
   b83ac:	2301      	movs	r3, #1
   b83ae:	7023      	strb	r3, [r4, #0]
    }
   b83b0:	4620      	mov	r0, r4
   b83b2:	bd10      	pop	{r4, pc}
   b83b4:	2003e6a4 	.word	0x2003e6a4

000b83b8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b83b8:	b510      	push	{r4, lr}
        if (locked_) {
   b83ba:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b83bc:	4604      	mov	r4, r0
        if (locked_) {
   b83be:	b11b      	cbz	r3, b83c8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b83c0:	4b02      	ldr	r3, [pc, #8]	; (b83cc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b83c2:	6818      	ldr	r0, [r3, #0]
   b83c4:	f7ff fa4c 	bl	b7860 <os_mutex_recursive_unlock>
    }
   b83c8:	4620      	mov	r0, r4
   b83ca:	bd10      	pop	{r4, pc}
   b83cc:	2003e6a4 	.word	0x2003e6a4

000b83d0 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b83d0:	2905      	cmp	r1, #5
    return address_.addr[i];
   b83d2:	bf94      	ite	ls
   b83d4:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b83d6:	2000      	movhi	r0, #0
}
   b83d8:	4770      	bx	lr

000b83da <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b83da:	680a      	ldr	r2, [r1, #0]
   b83dc:	6002      	str	r2, [r0, #0]
   b83de:	684a      	ldr	r2, [r1, #4]
   b83e0:	6042      	str	r2, [r0, #4]
}
   b83e2:	4770      	bx	lr

000b83e4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b83e4:	b082      	sub	sp, #8
   b83e6:	4603      	mov	r3, r0
    address_ = addr;
   b83e8:	6808      	ldr	r0, [r1, #0]
   b83ea:	6849      	ldr	r1, [r1, #4]
   b83ec:	466a      	mov	r2, sp
   b83ee:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b83f0:	466a      	mov	r2, sp
   b83f2:	ca03      	ldmia	r2!, {r0, r1}
   b83f4:	6018      	str	r0, [r3, #0]
}
   b83f6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b83f8:	6059      	str	r1, [r3, #4]
}
   b83fa:	b002      	add	sp, #8
   b83fc:	4770      	bx	lr

000b83fe <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b83fe:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8400:	7982      	ldrb	r2, [r0, #6]
   b8402:	798b      	ldrb	r3, [r1, #6]
   b8404:	429a      	cmp	r2, r3
   b8406:	d106      	bne.n	b8416 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8408:	2206      	movs	r2, #6
   b840a:	f003 fe09 	bl	bc020 <memcmp>
   b840e:	fab0 f080 	clz	r0, r0
   b8412:	0940      	lsrs	r0, r0, #5
}
   b8414:	bd08      	pop	{r3, pc}
    return false;
   b8416:	2000      	movs	r0, #0
   b8418:	e7fc      	b.n	b8414 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b841a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b841a:	f04f 33ff 	mov.w	r3, #4294967295
   b841e:	6003      	str	r3, [r0, #0]
   b8420:	8083      	strh	r3, [r0, #4]
}
   b8422:	2000      	movs	r0, #0
   b8424:	4770      	bx	lr

000b8426 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8426:	b508      	push	{r3, lr}
   b8428:	4602      	mov	r2, r0
        : address_{} {
   b842a:	2100      	movs	r1, #0
   b842c:	6001      	str	r1, [r0, #0]
   b842e:	6041      	str	r1, [r0, #4]
    clear();
   b8430:	f7ff fff3 	bl	b841a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8434:	7191      	strb	r1, [r2, #6]
}
   b8436:	4610      	mov	r0, r2
   b8438:	bd08      	pop	{r3, pc}
	...

000b843c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b843c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b843e:	2301      	movs	r3, #1
   b8440:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8442:	4b05      	ldr	r3, [pc, #20]	; (b8458 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8444:	4602      	mov	r2, r0
   b8446:	f103 0110 	add.w	r1, r3, #16
   b844a:	f853 4b04 	ldr.w	r4, [r3], #4
   b844e:	f842 4b04 	str.w	r4, [r2], #4
   b8452:	428b      	cmp	r3, r1
   b8454:	d1f9      	bne.n	b844a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8456:	bd10      	pop	{r4, pc}
   b8458:	000be0f2 	.word	0x000be0f2

000b845c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b845c:	b510      	push	{r4, lr}
    if (uuid128) {
   b845e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8460:	4604      	mov	r4, r0
    if (uuid128) {
   b8462:	b1b1      	cbz	r1, b8492 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8464:	2a01      	cmp	r2, #1
   b8466:	f101 0210 	add.w	r2, r1, #16
   b846a:	d10a      	bne.n	b8482 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b846c:	4601      	mov	r1, r0
   b846e:	f853 0b04 	ldr.w	r0, [r3], #4
   b8472:	f841 0b04 	str.w	r0, [r1], #4
   b8476:	4293      	cmp	r3, r2
   b8478:	d1f9      	bne.n	b846e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b847a:	2301      	movs	r3, #1
   b847c:	6123      	str	r3, [r4, #16]
}
   b847e:	4620      	mov	r0, r4
   b8480:	bd10      	pop	{r4, pc}
   b8482:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8484:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8488:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b848c:	429a      	cmp	r2, r3
   b848e:	d1f9      	bne.n	b8484 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8490:	e7f3      	b.n	b847a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8492:	2210      	movs	r2, #16
   b8494:	f003 fdfc 	bl	bc090 <memset>
   b8498:	e7f1      	b.n	b847e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b849a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b849a:	b538      	push	{r3, r4, r5, lr}
   b849c:	4604      	mov	r4, r0
   b849e:	460d      	mov	r5, r1
        : BleUuid() {
   b84a0:	f7ff ffcc 	bl	b843c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b84a4:	2300      	movs	r3, #0
   b84a6:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b84a8:	81a5      	strh	r5, [r4, #12]
}
   b84aa:	4620      	mov	r0, r4
   b84ac:	bd38      	pop	{r3, r4, r5, pc}

000b84ae <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b84ae:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b84b0:	6902      	ldr	r2, [r0, #16]
   b84b2:	690b      	ldr	r3, [r1, #16]
   b84b4:	429a      	cmp	r2, r3
   b84b6:	d106      	bne.n	b84c6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b84b8:	2210      	movs	r2, #16
   b84ba:	f003 fdb1 	bl	bc020 <memcmp>
   b84be:	fab0 f080 	clz	r0, r0
   b84c2:	0940      	lsrs	r0, r0, #5
}
   b84c4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b84c6:	2000      	movs	r0, #0
   b84c8:	e7fc      	b.n	b84c4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b84cc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b84cc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b84ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b84d2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84d4:	4b34      	ldr	r3, [pc, #208]	; (b85a8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b84d6:	460c      	mov	r4, r1
   b84d8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84da:	4602      	mov	r2, r0
   b84dc:	f103 0110 	add.w	r1, r3, #16
   b84e0:	f853 0b04 	ldr.w	r0, [r3], #4
   b84e4:	f842 0b04 	str.w	r0, [r2], #4
   b84e8:	428b      	cmp	r3, r1
   b84ea:	d1f9      	bne.n	b84e0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b84ec:	b344      	cbz	r4, b8540 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b84ee:	2124      	movs	r1, #36	; 0x24
   b84f0:	4620      	mov	r0, r4
   b84f2:	f003 fe49 	bl	bc188 <strnlen>
   b84f6:	2804      	cmp	r0, #4
   b84f8:	f04f 0500 	mov.w	r5, #0
   b84fc:	d123      	bne.n	b8546 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b84fe:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8502:	af01      	add	r7, sp, #4
   b8504:	1ca5      	adds	r5, r4, #2
   b8506:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8508:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b850c:	f7ff ff31 	bl	b8372 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8510:	f1b0 0800 	subs.w	r8, r0, #0
   b8514:	db12      	blt.n	b853c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8516:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b851a:	f7ff ff2a 	bl	b8372 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b851e:	2800      	cmp	r0, #0
   b8520:	db0c      	blt.n	b853c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8522:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8524:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8528:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b852a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b852e:	d1eb      	bne.n	b8508 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8530:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8534:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8536:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b853a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b853c:	2300      	movs	r3, #0
   b853e:	6133      	str	r3, [r6, #16]
}
   b8540:	b002      	add	sp, #8
   b8542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8546:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b854a:	2124      	movs	r1, #36	; 0x24
   b854c:	4620      	mov	r0, r4
   b854e:	f003 fe1b 	bl	bc188 <strnlen>
   b8552:	42a8      	cmp	r0, r5
   b8554:	d807      	bhi.n	b8566 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8556:	4642      	mov	r2, r8
   b8558:	2100      	movs	r1, #0
   b855a:	4630      	mov	r0, r6
}
   b855c:	b002      	add	sp, #8
   b855e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8562:	f003 bd95 	b.w	bc090 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8566:	f1b8 0f00 	cmp.w	r8, #0
   b856a:	d0e9      	beq.n	b8540 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b856c:	5d60      	ldrb	r0, [r4, r5]
   b856e:	f7ff ff00 	bl	b8372 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8572:	0603      	lsls	r3, r0, #24
   b8574:	d415      	bmi.n	b85a2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8576:	0100      	lsls	r0, r0, #4
   b8578:	f108 38ff 	add.w	r8, r8, #4294967295
   b857c:	b2c7      	uxtb	r7, r0
   b857e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8582:	2124      	movs	r1, #36	; 0x24
   b8584:	4620      	mov	r0, r4
   b8586:	f003 fdff 	bl	bc188 <strnlen>
   b858a:	3501      	adds	r5, #1
   b858c:	42a8      	cmp	r0, r5
   b858e:	d908      	bls.n	b85a2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8590:	5d60      	ldrb	r0, [r4, r5]
   b8592:	f7ff feee 	bl	b8372 <_ZN8particle11hexToNibbleEc>
   b8596:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8598:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b859a:	bfa4      	itt	ge
   b859c:	4338      	orrge	r0, r7
   b859e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b85a2:	3501      	adds	r5, #1
   b85a4:	e7d1      	b.n	b854a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b85a6:	bf00      	nop
   b85a8:	000be0f2 	.word	0x000be0f2

000b85ac <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b85ac:	b513      	push	{r0, r1, r4, lr}
   b85ae:	4604      	mov	r4, r0
   b85b0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b85b2:	f7ff ff43 	bl	b843c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b85b6:	4620      	mov	r0, r4
   b85b8:	9901      	ldr	r1, [sp, #4]
   b85ba:	f7ff ff87 	bl	b84cc <_ZN8particle7BleUuid9constructEPKc>
}
   b85be:	4620      	mov	r0, r4
   b85c0:	b002      	add	sp, #8
   b85c2:	bd10      	pop	{r4, pc}

000b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b85c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b85c6:	4605      	mov	r5, r0
   b85c8:	4616      	mov	r6, r2
   b85ca:	461f      	mov	r7, r3
   b85cc:	460a      	mov	r2, r1
   b85ce:	ab01      	add	r3, sp, #4
   b85d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b85d4:	f7ff fe70 	bl	b82b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b85d8:	f030 0402 	bics.w	r4, r0, #2
   b85dc:	d00c      	beq.n	b85f8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b85de:	1e84      	subs	r4, r0, #2
   b85e0:	42bc      	cmp	r4, r7
   b85e2:	bf28      	it	cs
   b85e4:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b85e6:	b13e      	cbz	r6, b85f8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b85e8:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b85ea:	682b      	ldr	r3, [r5, #0]
   b85ec:	3102      	adds	r1, #2
   b85ee:	4622      	mov	r2, r4
   b85f0:	4419      	add	r1, r3
   b85f2:	4630      	mov	r0, r6
   b85f4:	f003 fd24 	bl	bc040 <memcpy>
}
   b85f8:	4620      	mov	r0, r4
   b85fa:	b003      	add	sp, #12
   b85fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b85fe <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b85fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8600:	4613      	mov	r3, r2
   b8602:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b8604:	9201      	str	r2, [sp, #4]
   b8606:	460a      	mov	r2, r1
   b8608:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b860a:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b860c:	f7ff ffda 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b8610:	b940      	cbnz	r0, b8624 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b8612:	9b01      	ldr	r3, [sp, #4]
   b8614:	4622      	mov	r2, r4
   b8616:	2109      	movs	r1, #9
   b8618:	4628      	mov	r0, r5
}
   b861a:	b003      	add	sp, #12
   b861c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b8620:	f7ff bfd0 	b.w	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b8624:	b003      	add	sp, #12
   b8626:	bd30      	pop	{r4, r5, pc}

000b8628 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b8628:	b5f0      	push	{r4, r5, r6, r7, lr}
   b862a:	460c      	mov	r4, r1
   b862c:	b089      	sub	sp, #36	; 0x24
    String name;
   b862e:	490c      	ldr	r1, [pc, #48]	; (b8660 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b8630:	4605      	mov	r5, r0
    String name;
   b8632:	f7ff fd4a 	bl	b80ca <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b8636:	221f      	movs	r2, #31
   b8638:	4669      	mov	r1, sp
   b863a:	4620      	mov	r0, r4
   b863c:	f7ff ffdf 	bl	b85fe <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b8640:	4606      	mov	r6, r0
   b8642:	b150      	cbz	r0, b865a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b8644:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b8646:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b8648:	f814 1b01 	ldrb.w	r1, [r4], #1
   b864c:	4628      	mov	r0, r5
   b864e:	f7ff fdd6 	bl	b81fe <_ZN6String6concatEc>
   b8652:	b110      	cbz	r0, b865a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b8654:	3701      	adds	r7, #1
   b8656:	42be      	cmp	r6, r7
   b8658:	d1f6      	bne.n	b8648 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b865a:	4628      	mov	r0, r5
   b865c:	b009      	add	sp, #36	; 0x24
   b865e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8660:	000bf39f 	.word	0x000bf39f

000b8664 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b8664:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b8666:	2302      	movs	r3, #2
   b8668:	aa01      	add	r2, sp, #4
   b866a:	2119      	movs	r1, #25
   b866c:	f7ff ffaa 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b8670:	b108      	cbz	r0, b8676 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b8672:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b8676:	b003      	add	sp, #12
   b8678:	f85d fb04 	ldr.w	pc, [sp], #4

000b867c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b867c:	b510      	push	{r4, lr}
    return data_ + size_;
   b867e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8682:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8686:	4293      	cmp	r3, r2
   b8688:	4618      	mov	r0, r3
   b868a:	d006      	beq.n	b869a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b868c:	6804      	ldr	r4, [r0, #0]
   b868e:	8824      	ldrh	r4, [r4, #0]
   b8690:	428c      	cmp	r4, r1
   b8692:	f103 0308 	add.w	r3, r3, #8
   b8696:	d1f6      	bne.n	b8686 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b8698:	bd10      	pop	{r4, pc}
        return nullptr;
   b869a:	2000      	movs	r0, #0
   b869c:	e7fc      	b.n	b8698 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b86a0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b86a0:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b86a2:	2500      	movs	r5, #0
   b86a4:	6005      	str	r5, [r0, #0]
   b86a6:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b86a8:	2030      	movs	r0, #48	; 0x30
   b86aa:	f7fc fa02 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b86ae:	4604      	mov	r4, r0
   b86b0:	b188      	cbz	r0, b86d6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b86b2:	2301      	movs	r3, #1
   b86b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b86b8:	4b09      	ldr	r3, [pc, #36]	; (b86e0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b86ba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b86bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b86c0:	8183      	strh	r3, [r0, #12]
   b86c2:	300e      	adds	r0, #14
   b86c4:	f7ff feaf 	bl	b8426 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b86c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b86cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b86d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b86d4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b86d6:	6074      	str	r4, [r6, #4]
   b86d8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b86da:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b86dc:	4630      	mov	r0, r6
   b86de:	bd70      	pop	{r4, r5, r6, pc}
   b86e0:	000bf32c 	.word	0x000bf32c

000b86e4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b86e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86e6:	460d      	mov	r5, r1
   b86e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b86ea:	a801      	add	r0, sp, #4
   b86ec:	f7ff fe56 	bl	b839c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b86f0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b86f2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b86f6:	6023      	str	r3, [r4, #0]
   b86f8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b86fc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b86fe:	a801      	add	r0, sp, #4
   b8700:	f7ff fe5a 	bl	b83b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8704:	4620      	mov	r0, r4
   b8706:	b003      	add	sp, #12
   b8708:	bd30      	pop	{r4, r5, pc}

000b870a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b870a:	b530      	push	{r4, r5, lr}
   b870c:	4605      	mov	r5, r0
   b870e:	b087      	sub	sp, #28
   b8710:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8712:	a801      	add	r0, sp, #4
   b8714:	f7ff fe42 	bl	b839c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8718:	682a      	ldr	r2, [r5, #0]
   b871a:	6823      	ldr	r3, [r4, #0]
   b871c:	8812      	ldrh	r2, [r2, #0]
   b871e:	881b      	ldrh	r3, [r3, #0]
   b8720:	429a      	cmp	r2, r3
   b8722:	d10d      	bne.n	b8740 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8724:	4629      	mov	r1, r5
   b8726:	a802      	add	r0, sp, #8
   b8728:	f7ff ffdc 	bl	b86e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b872c:	4621      	mov	r1, r4
   b872e:	a804      	add	r0, sp, #16
   b8730:	f7ff ffd8 	bl	b86e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b8734:	a904      	add	r1, sp, #16
   b8736:	a802      	add	r0, sp, #8
   b8738:	f7ff fe61 	bl	b83fe <_ZNK8particle10BleAddresseqERKS0_>
   b873c:	4604      	mov	r4, r0
   b873e:	b900      	cbnz	r0, b8742 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8740:	2400      	movs	r4, #0
    WiringBleLock lk;
   b8742:	a801      	add	r0, sp, #4
   b8744:	f7ff fe38 	bl	b83b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8748:	4620      	mov	r0, r4
   b874a:	b007      	add	sp, #28
   b874c:	bd30      	pop	{r4, r5, pc}
	...

000b8750 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8750:	b510      	push	{r4, lr}
   b8752:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8754:	2064      	movs	r0, #100	; 0x64
   b8756:	f7fc f9ac 	bl	b4ab2 <_Znwj>
   b875a:	b168      	cbz	r0, b8778 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b875c:	2300      	movs	r3, #0
   b875e:	e9c0 3300 	strd	r3, r3, [r0]
   b8762:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8766:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b876a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b876e:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b8770:	62c3      	str	r3, [r0, #44]	; 0x2c
   b8772:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8774:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8776:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8778:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b877a:	b920      	cbnz	r0, b8786 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b877c:	4a0a      	ldr	r2, [pc, #40]	; (b87a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b877e:	490b      	ldr	r1, [pc, #44]	; (b87ac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8780:	200a      	movs	r0, #10
   b8782:	f7ff f9ed 	bl	b7b60 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8786:	2000      	movs	r0, #0
   b8788:	f7fe fff4 	bl	b7774 <hal_ble_stack_init>
   b878c:	b120      	cbz	r0, b8798 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b878e:	4a06      	ldr	r2, [pc, #24]	; (b87a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8790:	4907      	ldr	r1, [pc, #28]	; (b87b0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8792:	200a      	movs	r0, #10
   b8794:	f7ff f9e4 	bl	b7b60 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8798:	6821      	ldr	r1, [r4, #0]
   b879a:	4806      	ldr	r0, [pc, #24]	; (b87b4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b879c:	2200      	movs	r2, #0
   b879e:	f7ff f81d 	bl	b77dc <hal_ble_set_callback_on_periph_link_events>
}
   b87a2:	4620      	mov	r0, r4
   b87a4:	bd10      	pop	{r4, pc}
   b87a6:	bf00      	nop
   b87a8:	000b7755 	.word	0x000b7755
   b87ac:	000bf24c 	.word	0x000bf24c
   b87b0:	000bf28a 	.word	0x000bf28a
   b87b4:	000b90bd 	.word	0x000b90bd

000b87b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b87b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b87ba:	4c0a      	ldr	r4, [pc, #40]	; (b87e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b87bc:	7823      	ldrb	r3, [r4, #0]
   b87be:	f3bf 8f5b 	dmb	ish
   b87c2:	07db      	lsls	r3, r3, #31
   b87c4:	d40c      	bmi.n	b87e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b87c6:	4620      	mov	r0, r4
   b87c8:	f7fc f988 	bl	b4adc <__cxa_guard_acquire>
   b87cc:	b140      	cbz	r0, b87e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b87ce:	4806      	ldr	r0, [pc, #24]	; (b87e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b87d0:	f7ff ffbe 	bl	b8750 <_ZN8particle14BleLocalDeviceC1Ev>
   b87d4:	4620      	mov	r0, r4
   b87d6:	f7fc f986 	bl	b4ae6 <__cxa_guard_release>
   b87da:	4804      	ldr	r0, [pc, #16]	; (b87ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b87dc:	f003 fc06 	bl	bbfec <atexit>
    return instance;
}
   b87e0:	4801      	ldr	r0, [pc, #4]	; (b87e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b87e2:	bd10      	pop	{r4, pc}
   b87e4:	2003e6a0 	.word	0x2003e6a0
   b87e8:	2003e6a8 	.word	0x2003e6a8
   b87ec:	000b89c1 	.word	0x000b89c1

000b87f0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b87f0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b87f2:	2000      	movs	r0, #0
   b87f4:	f7fe ffbe 	bl	b7774 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b87f8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b87fc:	bd08      	pop	{r3, pc}

000b87fe <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b87fe:	b530      	push	{r4, r5, lr}
   b8800:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b8802:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b8804:	230c      	movs	r3, #12
   b8806:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b880a:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b880c:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b880e:	4621      	mov	r1, r4
   b8810:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b8812:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b8816:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b881a:	f7fe ffbb 	bl	b7794 <hal_ble_gap_get_advertising_parameters>
   b881e:	2800      	cmp	r0, #0
   b8820:	db05      	blt.n	b882e <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b8822:	4621      	mov	r1, r4
   b8824:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b8826:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b882a:	f7fe ffab 	bl	b7784 <hal_ble_gap_set_advertising_parameters>
}
   b882e:	b005      	add	sp, #20
   b8830:	bd30      	pop	{r4, r5, pc}

000b8832 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b8832:	b510      	push	{r4, lr}
   b8834:	4604      	mov	r4, r0
    ::free(ptr);
   b8836:	6940      	ldr	r0, [r0, #20]
   b8838:	f7ff fa66 	bl	b7d08 <free>
   b883c:	68a0      	ldr	r0, [r4, #8]
   b883e:	f7ff fa63 	bl	b7d08 <free>
   b8842:	4620      	mov	r0, r4
   b8844:	bd10      	pop	{r4, pc}

000b8846 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b8846:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b8848:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b884c:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b8850:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8854:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b8858:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b885c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b8860:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b8864:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b8868:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b886c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b8870:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8874:	6202      	str	r2, [r0, #32]
   b8876:	6302      	str	r2, [r0, #48]	; 0x30
   b8878:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b887c:	4770      	bx	lr

000b887e <_ZNK8particle14BleLocalDevice12stopScanningEv>:
    BleScanDelegator scanner;
    return scanner.setScanFilter(filter).start();
}

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
   b887e:	2000      	movs	r0, #0
   b8880:	f7fe bf98 	b.w	b77b4 <hal_ble_gap_stop_scan>

000b8884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8884:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8886:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b888a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b888c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8890:	42ae      	cmp	r6, r5
   b8892:	d004      	beq.n	b889e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8894:	4628      	mov	r0, r5
   b8896:	f7ff fbcd 	bl	b8034 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b889a:	3510      	adds	r5, #16
   b889c:	e7f8      	b.n	b8890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b889e:	6820      	ldr	r0, [r4, #0]
   b88a0:	f7ff fa32 	bl	b7d08 <free>
}
   b88a4:	4620      	mov	r0, r4
   b88a6:	bd70      	pop	{r4, r5, r6, pc}

000b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b88a8:	b510      	push	{r4, lr}
   b88aa:	4604      	mov	r4, r0
    ::free(ptr);
   b88ac:	6800      	ldr	r0, [r0, #0]
   b88ae:	f7ff fa2b 	bl	b7d08 <free>
}
   b88b2:	4620      	mov	r0, r4
   b88b4:	bd10      	pop	{r4, pc}

000b88b6 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b88b6:	b570      	push	{r4, r5, r6, lr}
   b88b8:	4604      	mov	r4, r0
    ::free(ptr);
   b88ba:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b88bc:	f7ff fa24 	bl	b7d08 <free>
   b88c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b88c2:	f7ff fa21 	bl	b7d08 <free>
    }
    ~BleScanFilter() = default;
   b88c6:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b88ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b88ce:	f7ff ffeb 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b88d2:	4628      	mov	r0, r5
   b88d4:	f7ff ffd6 	bl	b8884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b88d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b88dc:	f7fe feb6 	bl	b764c <_ZNSt14_Function_baseD1Ev>
   b88e0:	f104 0018 	add.w	r0, r4, #24
   b88e4:	f7fe feb2 	bl	b764c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b88e8:	e9d4 5300 	ldrd	r5, r3, [r4]
   b88ec:	2624      	movs	r6, #36	; 0x24
   b88ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b88f2:	42ae      	cmp	r6, r5
   b88f4:	d004      	beq.n	b8900 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b88f6:	4628      	mov	r0, r5
   b88f8:	f7ff ff9b 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b88fc:	3524      	adds	r5, #36	; 0x24
   b88fe:	e7f8      	b.n	b88f2 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b8900:	6820      	ldr	r0, [r4, #0]
   b8902:	f7ff fa01 	bl	b7d08 <free>
   b8906:	4620      	mov	r0, r4
   b8908:	bd70      	pop	{r4, r5, r6, pc}

000b890a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b890a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b890c:	1e14      	subs	r4, r2, #0
   b890e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8910:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8912:	db02      	blt.n	b891a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8914:	1862      	adds	r2, r4, r1
   b8916:	429a      	cmp	r2, r3
   b8918:	dd00      	ble.n	b891c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b891a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b891c:	682a      	ldr	r2, [r5, #0]
   b891e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8920:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8922:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8924:	1a52      	subs	r2, r2, r1
   b8926:	f003 fb99 	bl	bc05c <memmove>
    size_ -= n;
   b892a:	686a      	ldr	r2, [r5, #4]
   b892c:	1b12      	subs	r2, r2, r4
   b892e:	606a      	str	r2, [r5, #4]
}
   b8930:	bd38      	pop	{r3, r4, r5, pc}

000b8932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8932:	680b      	ldr	r3, [r1, #0]
   b8934:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8936:	b113      	cbz	r3, b893e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8938:	685a      	ldr	r2, [r3, #4]
   b893a:	3201      	adds	r2, #1
   b893c:	605a      	str	r2, [r3, #4]
      }
   b893e:	4770      	bx	lr

000b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8940:	b510      	push	{r4, lr}
   b8942:	f851 3b04 	ldr.w	r3, [r1], #4
   b8946:	4604      	mov	r4, r0
   b8948:	f840 3b04 	str.w	r3, [r0], #4
   b894c:	f7ff fff1 	bl	b8932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8950:	4620      	mov	r0, r4
   b8952:	bd10      	pop	{r4, pc}

000b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8954:	b510      	push	{r4, lr}
   b8956:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8958:	6800      	ldr	r0, [r0, #0]
   b895a:	b108      	cbz	r0, b8960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b895c:	f7ff fcf5 	bl	b834a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8960:	4620      	mov	r0, r4
   b8962:	bd10      	pop	{r4, pc}

000b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8964:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8966:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b896a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b896c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8970:	42ae      	cmp	r6, r5
   b8972:	d004      	beq.n	b897e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b8974:	1d28      	adds	r0, r5, #4
   b8976:	f7ff ffed 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b897a:	3508      	adds	r5, #8
   b897c:	e7f8      	b.n	b8970 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b897e:	6820      	ldr	r0, [r4, #0]
   b8980:	f7ff f9c2 	bl	b7d08 <free>
}
   b8984:	4620      	mov	r0, r4
   b8986:	bd70      	pop	{r4, r5, r6, pc}

000b8988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8988:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b898a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b898e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8990:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8994:	42ae      	cmp	r6, r5
   b8996:	d004      	beq.n	b89a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8998:	1d28      	adds	r0, r5, #4
   b899a:	f7ff ffdb 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b899e:	3508      	adds	r5, #8
   b89a0:	e7f8      	b.n	b8994 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b89a2:	6820      	ldr	r0, [r4, #0]
   b89a4:	f7ff f9b0 	bl	b7d08 <free>
}
   b89a8:	4620      	mov	r0, r4
   b89aa:	bd70      	pop	{r4, r5, r6, pc}

000b89ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b89ac:	b510      	push	{r4, lr}
   b89ae:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b89b0:	3024      	adds	r0, #36	; 0x24
   b89b2:	f7ff ffe9 	bl	b8988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b89b6:	f104 0018 	add.w	r0, r4, #24
   b89ba:	f7ff ffd3 	bl	b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b89be:	bd10      	pop	{r4, pc}

000b89c0 <__tcf_0>:
    static BleLocalDevice instance;
   b89c0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b89c2:	4b17      	ldr	r3, [pc, #92]	; (b8a20 <__tcf_0+0x60>)
   b89c4:	681c      	ldr	r4, [r3, #0]
   b89c6:	b354      	cbz	r4, b8a1e <__tcf_0+0x5e>
   b89c8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b89cc:	f7fe fe3e 	bl	b764c <_ZNSt14_Function_baseD1Ev>
   b89d0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89d4:	f7fe fe3a 	bl	b764c <_ZNSt14_Function_baseD1Ev>
   b89d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b89dc:	f7fe fe36 	bl	b764c <_ZNSt14_Function_baseD1Ev>
   b89e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b89e4:	f7fe fe32 	bl	b764c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b89e8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b89ec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b89f0:	42ae      	cmp	r6, r5
   b89f2:	d004      	beq.n	b89fe <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b89f4:	1d28      	adds	r0, r5, #4
   b89f6:	f7ff ffad 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89fa:	3508      	adds	r5, #8
   b89fc:	e7f8      	b.n	b89f0 <__tcf_0+0x30>
    ::free(ptr);
   b89fe:	69a0      	ldr	r0, [r4, #24]
   b8a00:	f7ff f982 	bl	b7d08 <free>
    ~BleLocalDeviceImpl() = default;
   b8a04:	f104 000c 	add.w	r0, r4, #12
   b8a08:	f7ff ffbe 	bl	b8988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8a0c:	4620      	mov	r0, r4
   b8a0e:	f7ff ffa9 	bl	b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8a12:	4620      	mov	r0, r4
   b8a14:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8a1a:	f7fc b850 	b.w	b4abe <_ZdlPvj>
   b8a1e:	bd70      	pop	{r4, r5, r6, pc}
   b8a20:	2003e6a8 	.word	0x2003e6a8

000b8a24 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b8a24:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8a26:	b510      	push	{r4, lr}
      if (_M_empty())
   b8a28:	b90a      	cbnz	r2, b8a2e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8a2a:	f003 f9c9 	bl	bbdc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b8a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8a32:	68c3      	ldr	r3, [r0, #12]
   b8a34:	4718      	bx	r3

000b8a36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b8a3a:	2300      	movs	r3, #0
   b8a3c:	e9c0 3300 	strd	r3, r3, [r0]
   b8a40:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a42:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b8a46:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a48:	4605      	mov	r5, r0
   b8a4a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a4c:	dd4a      	ble.n	b8ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b8a4e:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b8a52:	f7ff f951 	bl	b7cf8 <malloc>
            if (!d) {
   b8a56:	4606      	mov	r6, r0
   b8a58:	2800      	cmp	r0, #0
   b8a5a:	d043      	beq.n	b8ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b8a5c:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b8a60:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b8a62:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b8a66:	d916      	bls.n	b8a96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b8a68:	4550      	cmp	r0, sl
   b8a6a:	d215      	bcs.n	b8a98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b8a6c:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b8a70:	f1a4 0910 	sub.w	r9, r4, #16
   b8a74:	ebaa 0404 	sub.w	r4, sl, r4
   b8a78:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b8a7a:	45d1      	cmp	r9, sl
   b8a7c:	d01d      	beq.n	b8aba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b8a7e:	b11c      	cbz	r4, b8a88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b8a80:	4651      	mov	r1, sl
   b8a82:	4620      	mov	r0, r4
   b8a84:	f7ff fb52 	bl	b812c <_ZN6StringC1EOS_>
                end->~T();
   b8a88:	4650      	mov	r0, sl
   b8a8a:	f7ff fad3 	bl	b8034 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8a8e:	f1aa 0a10 	sub.w	sl, sl, #16
   b8a92:	3c10      	subs	r4, #16
   b8a94:	e7f1      	b.n	b8a7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b8a96:	d010      	beq.n	b8aba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b8a98:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b8a9a:	45a2      	cmp	sl, r4
   b8a9c:	d00d      	beq.n	b8aba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8a9e:	f1b9 0f00 	cmp.w	r9, #0
   b8aa2:	d003      	beq.n	b8aac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b8aa4:	4621      	mov	r1, r4
   b8aa6:	4648      	mov	r0, r9
   b8aa8:	f7ff fb40 	bl	b812c <_ZN6StringC1EOS_>
                p->~T();
   b8aac:	4620      	mov	r0, r4
   b8aae:	f7ff fac1 	bl	b8034 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8ab2:	3410      	adds	r4, #16
   b8ab4:	f109 0910 	add.w	r9, r9, #16
   b8ab8:	e7ef      	b.n	b8a9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b8aba:	6828      	ldr	r0, [r5, #0]
   b8abc:	f7ff f924 	bl	b7d08 <free>
        capacity_ = n;
   b8ac0:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b8ac4:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8ac6:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8aca:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8ace:	45a0      	cmp	r8, r4
   b8ad0:	d006      	beq.n	b8ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b8ad2:	4621      	mov	r1, r4
   b8ad4:	4630      	mov	r0, r6
   b8ad6:	f7ff fb43 	bl	b8160 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b8ada:	3410      	adds	r4, #16
   b8adc:	3610      	adds	r6, #16
   b8ade:	e7f6      	b.n	b8ace <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8ae0:	687b      	ldr	r3, [r7, #4]
   b8ae2:	606b      	str	r3, [r5, #4]
}
   b8ae4:	4628      	mov	r0, r5
   b8ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8aea <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b8aea:	b530      	push	{r4, r5, lr}
   b8aec:	b08d      	sub	sp, #52	; 0x34
   b8aee:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8af0:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b8af4:	a801      	add	r0, sp, #4
   b8af6:	f7ff ff9e 	bl	b8a36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b8afa:	9b02      	ldr	r3, [sp, #8]
   b8afc:	2b00      	cmp	r3, #0
   b8afe:	dd2f      	ble.n	b8b60 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8b00:	f104 0114 	add.w	r1, r4, #20
   b8b04:	a804      	add	r0, sp, #16
   b8b06:	f7ff fd8f 	bl	b8628 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b8b0a:	f104 0108 	add.w	r1, r4, #8
   b8b0e:	a808      	add	r0, sp, #32
   b8b10:	f7ff fd8a 	bl	b8628 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8b16:	9b06      	ldr	r3, [sp, #24]
   b8b18:	4313      	orrs	r3, r2
   b8b1a:	d01f      	beq.n	b8b5c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8b1c:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8b20:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8b24:	42ac      	cmp	r4, r5
   b8b26:	d019      	beq.n	b8b5c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b8b28:	a904      	add	r1, sp, #16
   b8b2a:	4620      	mov	r0, r4
   b8b2c:	f7ff fb89 	bl	b8242 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b30:	b160      	cbz	r0, b8b4c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8b32:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8b34:	a808      	add	r0, sp, #32
   b8b36:	f7ff fa7d 	bl	b8034 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b8b3a:	a804      	add	r0, sp, #16
   b8b3c:	f7ff fa7a 	bl	b8034 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b8b40:	a801      	add	r0, sp, #4
   b8b42:	f7ff fe9f 	bl	b8884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b8b46:	4620      	mov	r0, r4
   b8b48:	b00d      	add	sp, #52	; 0x34
   b8b4a:	bd30      	pop	{r4, r5, pc}
   b8b4c:	4620      	mov	r0, r4
   b8b4e:	a908      	add	r1, sp, #32
   b8b50:	f7ff fb77 	bl	b8242 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8b54:	3410      	adds	r4, #16
   b8b56:	2800      	cmp	r0, #0
   b8b58:	d0e4      	beq.n	b8b24 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b8b5a:	e7ea      	b.n	b8b32 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b8b5c:	2400      	movs	r4, #0
   b8b5e:	e7e9      	b.n	b8b34 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b8b60:	2401      	movs	r4, #1
   b8b62:	e7ed      	b.n	b8b40 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b8b64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b8b66:	2300      	movs	r3, #0
   b8b68:	e9c0 3300 	strd	r3, r3, [r0]
   b8b6c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b6e:	684f      	ldr	r7, [r1, #4]
   b8b70:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b72:	4605      	mov	r5, r0
   b8b74:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8b76:	dd3e      	ble.n	b8bf6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b8b78:	00f8      	lsls	r0, r7, #3
   b8b7a:	f7ff f8bd 	bl	b7cf8 <malloc>
            if (!d) {
   b8b7e:	4604      	mov	r4, r0
   b8b80:	b3c8      	cbz	r0, b8bf6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b8b82:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b8b86:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b8b88:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b8b8c:	d910      	bls.n	b8bb0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8b8e:	429c      	cmp	r4, r3
   b8b90:	d20f      	bcs.n	b8bb2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b8b92:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b8b94:	1a1a      	subs	r2, r3, r0
   b8b96:	f1a0 0c08 	sub.w	ip, r0, #8
   b8b9a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8b9c:	459c      	cmp	ip, r3
   b8b9e:	d018      	beq.n	b8bd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8ba0:	b11a      	cbz	r2, b8baa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8ba2:	6819      	ldr	r1, [r3, #0]
   b8ba4:	6011      	str	r1, [r2, #0]
   b8ba6:	6859      	ldr	r1, [r3, #4]
   b8ba8:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b8baa:	3b08      	subs	r3, #8
   b8bac:	3a08      	subs	r2, #8
   b8bae:	e7f5      	b.n	b8b9c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8bb0:	d00f      	beq.n	b8bd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b8bb2:	4601      	mov	r1, r0
   b8bb4:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b8bb6:	428b      	cmp	r3, r1
   b8bb8:	d00b      	beq.n	b8bd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b8bba:	b13a      	cbz	r2, b8bcc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8bbc:	f8d1 c000 	ldr.w	ip, [r1]
   b8bc0:	f8c2 c000 	str.w	ip, [r2]
   b8bc4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8bc8:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8bcc:	3108      	adds	r1, #8
   b8bce:	3208      	adds	r2, #8
   b8bd0:	e7f1      	b.n	b8bb6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8bd2:	f7ff f899 	bl	b7d08 <free>
        data_ = d;
   b8bd6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8bd8:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bda:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8bde:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8be2:	4298      	cmp	r0, r3
   b8be4:	d006      	beq.n	b8bf4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b8be6:	681a      	ldr	r2, [r3, #0]
   b8be8:	6022      	str	r2, [r4, #0]
   b8bea:	685a      	ldr	r2, [r3, #4]
   b8bec:	6062      	str	r2, [r4, #4]
   b8bee:	3308      	adds	r3, #8
   b8bf0:	3408      	adds	r4, #8
   b8bf2:	e7f6      	b.n	b8be2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8bf4:	6069      	str	r1, [r5, #4]
}
   b8bf6:	4628      	mov	r0, r5
   b8bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bfa <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bfa:	b570      	push	{r4, r5, r6, lr}
   b8bfc:	4604      	mov	r4, r0
        capacity_(0) {
   b8bfe:	2000      	movs	r0, #0
   b8c00:	e9c4 0000 	strd	r0, r0, [r4]
   b8c04:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8c06:	684e      	ldr	r6, [r1, #4]
   b8c08:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8c0a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8c0c:	dd12      	ble.n	b8c34 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8c0e:	0071      	lsls	r1, r6, #1
   b8c10:	f7ff f882 	bl	b7d18 <realloc>
            if (!d) {
   b8c14:	b170      	cbz	r0, b8c34 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b8c16:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8c18:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8c1a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8c1e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8c22:	429a      	cmp	r2, r3
   b8c24:	d004      	beq.n	b8c30 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b8c26:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8c2a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8c2e:	e7f8      	b.n	b8c22 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8c30:	686b      	ldr	r3, [r5, #4]
   b8c32:	6063      	str	r3, [r4, #4]
}
   b8c34:	4620      	mov	r0, r4
   b8c36:	bd70      	pop	{r4, r5, r6, pc}

000b8c38 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b8c38:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c3a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c3c:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c3e:	b923      	cbnz	r3, b8c4a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c40:	6803      	ldr	r3, [r0, #0]
   b8c42:	6818      	ldr	r0, [r3, #0]
   b8c44:	b108      	cbz	r0, b8c4a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b8c46:	f7ff f85f 	bl	b7d08 <free>
            func_();
        }
    }
   b8c4a:	4620      	mov	r0, r4
   b8c4c:	bd10      	pop	{r4, pc}

000b8c4e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b8c4e:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8c50:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8c52:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8c54:	b923      	cbnz	r3, b8c60 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b8c56:	6803      	ldr	r3, [r0, #0]
   b8c58:	6818      	ldr	r0, [r3, #0]
   b8c5a:	b108      	cbz	r0, b8c60 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b8c5c:	f7ff f854 	bl	b7d08 <free>
    }
   b8c60:	4620      	mov	r0, r4
   b8c62:	bd10      	pop	{r4, pc}

000b8c64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b8c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b8c68:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b8c6c:	b08f      	sub	sp, #60	; 0x3c
   b8c6e:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b8c70:	f1b8 0f00 	cmp.w	r8, #0
   b8c74:	d072      	beq.n	b8d5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b8c76:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b8c78:	2d00      	cmp	r5, #0
   b8c7a:	d06f      	beq.n	b8d5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b8c7c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c80:	231f      	movs	r3, #31
   b8c82:	2200      	movs	r2, #0
   b8c84:	21ff      	movs	r1, #255	; 0xff
   b8c86:	4648      	mov	r0, r9
   b8c88:	f7ff fc9c 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b8c8c:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c8e:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b8c90:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c92:	2200      	movs	r2, #0
   b8c94:	4619      	mov	r1, r3
   b8c96:	4638      	mov	r0, r7
   b8c98:	f7ff fc94 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8c9c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8c9e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8ca0:	d006      	beq.n	b8cb0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8ca2:	42ae      	cmp	r6, r5
   b8ca4:	d030      	beq.n	b8d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b8ca6:	2400      	movs	r4, #0
    }
   b8ca8:	4620      	mov	r0, r4
   b8caa:	b00f      	add	sp, #60	; 0x3c
   b8cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8cb0:	4620      	mov	r0, r4
   b8cb2:	f7ff f821 	bl	b7cf8 <malloc>
            dismissed_(false) {
   b8cb6:	ab03      	add	r3, sp, #12
   b8cb8:	9304      	str	r3, [sp, #16]
   b8cba:	2300      	movs	r3, #0
   b8cbc:	4604      	mov	r4, r0
   b8cbe:	9003      	str	r0, [sp, #12]
   b8cc0:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8cc4:	b970      	cbnz	r0, b8ce4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b8cc6:	2320      	movs	r3, #32
   b8cc8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8ccc:	4b24      	ldr	r3, [pc, #144]	; (b8d60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8cce:	9300      	str	r3, [sp, #0]
   b8cd0:	4924      	ldr	r1, [pc, #144]	; (b8d64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8cd2:	4603      	mov	r3, r0
   b8cd4:	aa06      	add	r2, sp, #24
   b8cd6:	2032      	movs	r0, #50	; 0x32
   b8cd8:	f7fe ff4a 	bl	b7b70 <log_message>
                    return false;
   b8cdc:	a804      	add	r0, sp, #16
   b8cde:	f7ff ffab 	bl	b8c38 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8ce2:	e7e1      	b.n	b8ca8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8ce4:	4602      	mov	r2, r0
   b8ce6:	21ff      	movs	r1, #255	; 0xff
   b8ce8:	462b      	mov	r3, r5
   b8cea:	4648      	mov	r0, r9
   b8cec:	f7ff fc6a 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8cf0:	9803      	ldr	r0, [sp, #12]
   b8cf2:	462a      	mov	r2, r5
   b8cf4:	4641      	mov	r1, r8
   b8cf6:	f003 f993 	bl	bc020 <memcmp>
   b8cfa:	b118      	cbz	r0, b8d04 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8cfc:	a804      	add	r0, sp, #16
   b8cfe:	f7ff ff9b 	bl	b8c38 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8d02:	e7ce      	b.n	b8ca2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8d04:	2401      	movs	r4, #1
   b8d06:	e7e9      	b.n	b8cdc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8d08:	4628      	mov	r0, r5
   b8d0a:	f7fe fff5 	bl	b7cf8 <malloc>
   b8d0e:	2400      	movs	r4, #0
   b8d10:	ab03      	add	r3, sp, #12
   b8d12:	4606      	mov	r6, r0
   b8d14:	9003      	str	r0, [sp, #12]
   b8d16:	9304      	str	r3, [sp, #16]
   b8d18:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8d1c:	b978      	cbnz	r0, b8d3e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8d1e:	2320      	movs	r3, #32
   b8d20:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8d24:	4b0e      	ldr	r3, [pc, #56]	; (b8d60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8d26:	9300      	str	r3, [sp, #0]
   b8d28:	490e      	ldr	r1, [pc, #56]	; (b8d64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8d2a:	4603      	mov	r3, r0
   b8d2c:	aa06      	add	r2, sp, #24
   b8d2e:	2032      	movs	r0, #50	; 0x32
   b8d30:	f7fe ff1e 	bl	b7b70 <log_message>
                    return false;
   b8d34:	4634      	mov	r4, r6
   b8d36:	a804      	add	r0, sp, #16
   b8d38:	f7ff ff89 	bl	b8c4e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b8d3c:	e7b4      	b.n	b8ca8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b8d3e:	4602      	mov	r2, r0
   b8d40:	21ff      	movs	r1, #255	; 0xff
   b8d42:	462b      	mov	r3, r5
   b8d44:	4638      	mov	r0, r7
   b8d46:	f7ff fc3d 	bl	b85c4 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b8d4a:	9803      	ldr	r0, [sp, #12]
   b8d4c:	462a      	mov	r2, r5
   b8d4e:	4641      	mov	r1, r8
   b8d50:	f003 f966 	bl	bc020 <memcmp>
   b8d54:	2800      	cmp	r0, #0
   b8d56:	d1ee      	bne.n	b8d36 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b8d58:	2401      	movs	r4, #1
   b8d5a:	e7ec      	b.n	b8d36 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b8d5c:	2401      	movs	r4, #1
   b8d5e:	e7a3      	b.n	b8ca8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b8d60:	000bf2cc 	.word	0x000bf2cc
   b8d64:	000bf263 	.word	0x000bf263

000b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8d68:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8d6a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8d6c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8d6e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8d70:	dd03      	ble.n	b8d7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8d72:	f7fe ffd1 	bl	b7d18 <realloc>
            if (!d) {
   b8d76:	b918      	cbnz	r0, b8d80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8d78:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8d7a:	f7fe ffc5 	bl	b7d08 <free>
        T* d = nullptr;
   b8d7e:	2000      	movs	r0, #0
        data_ = d;
   b8d80:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8d82:	60a5      	str	r5, [r4, #8]
        return true;
   b8d84:	2001      	movs	r0, #1
   b8d86:	e7f7      	b.n	b8d78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8d88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8d88:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8d8a:	6883      	ldr	r3, [r0, #8]
   b8d8c:	428b      	cmp	r3, r1
   b8d8e:	da02      	bge.n	b8d96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8d90:	f7ff ffea 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8d94:	bd08      	pop	{r3, pc}
    return true;
   b8d96:	2001      	movs	r0, #1
   b8d98:	e7fc      	b.n	b8d94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8d9a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8d9c:	2300      	movs	r3, #0
   b8d9e:	e9c0 3300 	strd	r3, r3, [r0]
   b8da2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8da4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8da6:	6849      	ldr	r1, [r1, #4]
   b8da8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8daa:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8dac:	dd10      	ble.n	b8dd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b8dae:	f7ff ffdb 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8db2:	b168      	cbz	r0, b8dd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8db4:	e9d5 3100 	ldrd	r3, r1, [r5]
   b8db8:	6822      	ldr	r2, [r4, #0]
   b8dba:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b8dbc:	4299      	cmp	r1, r3
   b8dbe:	d005      	beq.n	b8dcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b8dc0:	b10a      	cbz	r2, b8dc6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b8dc2:	7818      	ldrb	r0, [r3, #0]
   b8dc4:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b8dc6:	3301      	adds	r3, #1
   b8dc8:	3201      	adds	r2, #1
   b8dca:	e7f7      	b.n	b8dbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b8dcc:	686b      	ldr	r3, [r5, #4]
   b8dce:	6063      	str	r3, [r4, #4]
}
   b8dd0:	4620      	mov	r0, r4
   b8dd2:	bd38      	pop	{r3, r4, r5, pc}

000b8dd4 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b8dd4:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b8dd6:	680b      	ldr	r3, [r1, #0]
   b8dd8:	6003      	str	r3, [r0, #0]
   b8dda:	684b      	ldr	r3, [r1, #4]
   b8ddc:	6043      	str	r3, [r0, #4]
   b8dde:	4604      	mov	r4, r0
   b8de0:	460d      	mov	r5, r1
class BleAdvertisingData {
   b8de2:	3008      	adds	r0, #8
   b8de4:	3108      	adds	r1, #8
   b8de6:	f7ff ffd8 	bl	b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8dea:	f105 0114 	add.w	r1, r5, #20
   b8dee:	f104 0014 	add.w	r0, r4, #20
   b8df2:	f7ff ffd2 	bl	b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8df6:	f895 3020 	ldrb.w	r3, [r5, #32]
   b8dfa:	f884 3020 	strb.w	r3, [r4, #32]
   b8dfe:	4620      	mov	r0, r4
   b8e00:	bd38      	pop	{r3, r4, r5, pc}

000b8e02 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8e02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8e04:	4604      	mov	r4, r0
   b8e06:	a801      	add	r0, sp, #4
   b8e08:	f7ff ffc7 	bl	b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b8e0c:	9b01      	ldr	r3, [sp, #4]
   b8e0e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e10:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8e12:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e14:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8e16:	6062      	str	r2, [r4, #4]
   b8e18:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e1a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e1c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8e1e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e20:	9001      	str	r0, [sp, #4]
   b8e22:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8e24:	f7fe ff70 	bl	b7d08 <free>
   b8e28:	b004      	add	sp, #16
   b8e2a:	bd10      	pop	{r4, pc}

000b8e2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e30:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e32:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e34:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e36:	4419      	add	r1, r3
   b8e38:	6883      	ldr	r3, [r0, #8]
   b8e3a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8e3c:	4604      	mov	r4, r0
   b8e3e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e40:	dc12      	bgt.n	b8e68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8e42:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e44:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8e46:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8e48:	1bd2      	subs	r2, r2, r7
   b8e4a:	4631      	mov	r1, r6
   b8e4c:	1970      	adds	r0, r6, r5
   b8e4e:	f003 f905 	bl	bc05c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8e52:	462a      	mov	r2, r5
   b8e54:	4641      	mov	r1, r8
   b8e56:	4630      	mov	r0, r6
   b8e58:	f003 f8f2 	bl	bc040 <memcpy>
    size_ += n;
   b8e5c:	6863      	ldr	r3, [r4, #4]
   b8e5e:	442b      	add	r3, r5
   b8e60:	6063      	str	r3, [r4, #4]
    return true;
   b8e62:	2001      	movs	r0, #1
}
   b8e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8e68:	f7ff ff7e 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8e6c:	2800      	cmp	r0, #0
   b8e6e:	d1e8      	bne.n	b8e42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8e70:	e7f8      	b.n	b8e64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8e72 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8e72:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8e74:	460a      	mov	r2, r1
   b8e76:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8e78:	b510      	push	{r4, lr}
   b8e7a:	4604      	mov	r4, r0
    size_ = 0;
   b8e7c:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b8e7e:	b102      	cbz	r2, b8e82 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b8e80:	b90b      	cbnz	r3, b8e86 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b8e82:	2000      	movs	r0, #0
}
   b8e84:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8e86:	2bff      	cmp	r3, #255	; 0xff
   b8e88:	bf28      	it	cs
   b8e8a:	23ff      	movcs	r3, #255	; 0xff
   b8e8c:	f7ff ffce 	bl	b8e2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b8e90:	2800      	cmp	r0, #0
   b8e92:	d0f7      	beq.n	b8e84 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8e94:	6860      	ldr	r0, [r4, #4]
   b8e96:	e7f5      	b.n	b8e84 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8e98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e9a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e9c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8ea0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8ea2:	4604      	mov	r4, r0
   b8ea4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ea6:	da0b      	bge.n	b8ec0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8ea8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8eaa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8eac:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8eae:	1b52      	subs	r2, r2, r5
   b8eb0:	1c48      	adds	r0, r1, #1
   b8eb2:	f003 f8d3 	bl	bc05c <memmove>
    new(p) T(std::move(value));
   b8eb6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8eb8:	6863      	ldr	r3, [r4, #4]
   b8eba:	3301      	adds	r3, #1
   b8ebc:	6063      	str	r3, [r4, #4]
}
   b8ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ec0:	3101      	adds	r1, #1
   b8ec2:	f7ff ff51 	bl	b8d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8ec6:	2800      	cmp	r0, #0
   b8ec8:	d1ee      	bne.n	b8ea8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8eca:	e7f8      	b.n	b8ebe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8ecc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8ece:	6841      	ldr	r1, [r0, #4]
   b8ed0:	f7ff bfe2 	b.w	b8e98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8ed4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8ed8:	4604      	mov	r4, r0
   b8eda:	461d      	mov	r5, r3
   b8edc:	460f      	mov	r7, r1
   b8ede:	ab01      	add	r3, sp, #4
   b8ee0:	4690      	mov	r8, r2
   b8ee2:	460a      	mov	r2, r1
   b8ee4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8ee8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8eec:	f7ff f9e4 	bl	b82b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8ef0:	1cae      	adds	r6, r5, #2
   b8ef2:	6863      	ldr	r3, [r4, #4]
   b8ef4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8ef6:	f1b9 0f00 	cmp.w	r9, #0
   b8efa:	d126      	bne.n	b8f4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8efc:	b328      	cbz	r0, b8f4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8efe:	4433      	add	r3, r6
   b8f00:	1a1b      	subs	r3, r3, r0
   b8f02:	2bff      	cmp	r3, #255	; 0xff
   b8f04:	d809      	bhi.n	b8f1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8f06:	9901      	ldr	r1, [sp, #4]
   b8f08:	4620      	mov	r0, r4
   b8f0a:	f7ff fcfe 	bl	b890a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8f0e:	6861      	ldr	r1, [r4, #4]
   b8f10:	4620      	mov	r0, r4
   b8f12:	4431      	add	r1, r6
   b8f14:	f7ff ff38 	bl	b8d88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8f18:	b918      	cbnz	r0, b8f22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8f1a:	6860      	ldr	r0, [r4, #4]
}
   b8f1c:	b003      	add	sp, #12
   b8f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8f22:	1c6a      	adds	r2, r5, #1
   b8f24:	9901      	ldr	r1, [sp, #4]
   b8f26:	b2d2      	uxtb	r2, r2
   b8f28:	4620      	mov	r0, r4
   b8f2a:	f7ff ffb5 	bl	b8e98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8f2e:	9901      	ldr	r1, [sp, #4]
   b8f30:	463a      	mov	r2, r7
   b8f32:	3101      	adds	r1, #1
   b8f34:	4620      	mov	r0, r4
   b8f36:	f7ff ffaf 	bl	b8e98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8f3a:	9901      	ldr	r1, [sp, #4]
   b8f3c:	462b      	mov	r3, r5
   b8f3e:	4642      	mov	r2, r8
   b8f40:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8f42:	4620      	mov	r0, r4
   b8f44:	f7ff ff72 	bl	b8e2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8f48:	e7e7      	b.n	b8f1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8f4a:	18f1      	adds	r1, r6, r3
   b8f4c:	29ff      	cmp	r1, #255	; 0xff
   b8f4e:	d8e4      	bhi.n	b8f1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8f50:	4620      	mov	r0, r4
   b8f52:	f7ff ff19 	bl	b8d88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8f56:	2800      	cmp	r0, #0
   b8f58:	d0df      	beq.n	b8f1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8f5a:	1c69      	adds	r1, r5, #1
   b8f5c:	b2c9      	uxtb	r1, r1
   b8f5e:	4620      	mov	r0, r4
   b8f60:	f7ff ffb4 	bl	b8ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8f64:	4639      	mov	r1, r7
   b8f66:	4620      	mov	r0, r4
   b8f68:	f7ff ffb0 	bl	b8ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8f6c:	6861      	ldr	r1, [r4, #4]
   b8f6e:	462b      	mov	r3, r5
   b8f70:	4642      	mov	r2, r8
   b8f72:	e7e6      	b.n	b8f42 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8f74 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8f74:	b430      	push	{r4, r5}
   b8f76:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8f7a:	b11a      	cbz	r2, b8f84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8f7c:	9502      	str	r5, [sp, #8]
}
   b8f7e:	bc30      	pop	{r4, r5}
   b8f80:	f7ff bfa8 	b.w	b8ed4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8f84:	6840      	ldr	r0, [r0, #4]
}
   b8f86:	bc30      	pop	{r4, r5}
   b8f88:	4770      	bx	lr

000b8f8a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8f8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8f8c:	2300      	movs	r3, #0
   b8f8e:	e9c0 3300 	strd	r3, r3, [r0]
   b8f92:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f94:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f96:	9300      	str	r3, [sp, #0]
   b8f98:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8f9a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8f9e:	4619      	mov	r1, r3
   b8fa0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8fa4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8fa6:	f7ff ffe5 	bl	b8f74 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8faa:	4620      	mov	r0, r4
   b8fac:	b004      	add	sp, #16
   b8fae:	bd10      	pop	{r4, pc}

000b8fb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8fb0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fb4:	4604      	mov	r4, r0
   b8fb6:	460d      	mov	r5, r1
   b8fb8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8fba:	d914      	bls.n	b8fe6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8fbc:	4290      	cmp	r0, r2
   b8fbe:	d213      	bcs.n	b8fe8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8fc0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8fc4:	1a75      	subs	r5, r6, r1
   b8fc6:	f1a1 0708 	sub.w	r7, r1, #8
   b8fca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8fcc:	42b7      	cmp	r7, r6
   b8fce:	d018      	beq.n	b9002 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8fd0:	b11c      	cbz	r4, b8fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8fd2:	4631      	mov	r1, r6
   b8fd4:	4620      	mov	r0, r4
   b8fd6:	f7ff fcb3 	bl	b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8fda:	1d30      	adds	r0, r6, #4
   b8fdc:	f7ff fcba 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8fe0:	3e08      	subs	r6, #8
   b8fe2:	3c08      	subs	r4, #8
   b8fe4:	e7f2      	b.n	b8fcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8fe6:	d00c      	beq.n	b9002 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8fe8:	42b5      	cmp	r5, r6
   b8fea:	d00a      	beq.n	b9002 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8fec:	b11c      	cbz	r4, b8ff6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8fee:	4629      	mov	r1, r5
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	f7ff fca5 	bl	b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8ff6:	1d28      	adds	r0, r5, #4
   b8ff8:	f7ff fcac 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8ffc:	3508      	adds	r5, #8
   b8ffe:	3408      	adds	r4, #8
   b9000:	e7f2      	b.n	b8fe8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9004 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9006:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9008:	6846      	ldr	r6, [r0, #4]
   b900a:	4668      	mov	r0, sp
   b900c:	f7ff fc98 	bl	b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9010:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9014:	429f      	cmp	r7, r3
   b9016:	db12      	blt.n	b903e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b9018:	3701      	adds	r7, #1
        if (n > 0) {
   b901a:	2f00      	cmp	r7, #0
   b901c:	dd29      	ble.n	b9072 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b901e:	00f8      	lsls	r0, r7, #3
   b9020:	f7fe fe6a 	bl	b7cf8 <malloc>
            if (!d) {
   b9024:	4605      	mov	r5, r0
   b9026:	b1f0      	cbz	r0, b9066 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b9028:	e9d4 1200 	ldrd	r1, r2, [r4]
   b902c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9030:	f7ff ffbe 	bl	b8fb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9034:	6820      	ldr	r0, [r4, #0]
   b9036:	f7fe fe67 	bl	b7d08 <free>
        data_ = d;
   b903a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b903c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b903e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9040:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9042:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b9046:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b904a:	4631      	mov	r1, r6
   b904c:	f106 0008 	add.w	r0, r6, #8
   b9050:	f7ff ffae 	bl	b8fb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9054:	b11e      	cbz	r6, b905e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9056:	4669      	mov	r1, sp
   b9058:	4630      	mov	r0, r6
   b905a:	f7ff fc71 	bl	b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b905e:	6863      	ldr	r3, [r4, #4]
   b9060:	3301      	adds	r3, #1
   b9062:	6063      	str	r3, [r4, #4]
    return true;
   b9064:	2501      	movs	r5, #1
   b9066:	a801      	add	r0, sp, #4
   b9068:	f7ff fc74 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b906c:	4628      	mov	r0, r5
   b906e:	b003      	add	sp, #12
   b9070:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9072:	2500      	movs	r5, #0
   b9074:	e7de      	b.n	b9034 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9078:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b907c:	4605      	mov	r5, r0
   b907e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9080:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9084:	42a6      	cmp	r6, r4
   b9086:	d005      	beq.n	b9094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9088:	4639      	mov	r1, r7
   b908a:	4620      	mov	r0, r4
   b908c:	f7ff fb3d 	bl	b870a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9090:	b108      	cbz	r0, b9096 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9092:	b914      	cbnz	r4, b909a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9096:	3408      	adds	r4, #8
   b9098:	e7f4      	b.n	b9084 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b909a:	1d20      	adds	r0, r4, #4
   b909c:	f7ff fc5a 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b90a0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b90a4:	f104 0108 	add.w	r1, r4, #8
   b90a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b90ac:	4620      	mov	r0, r4
   b90ae:	f7ff ff7f 	bl	b8fb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b90b2:	686b      	ldr	r3, [r5, #4]
   b90b4:	3b01      	subs	r3, #1
   b90b6:	606b      	str	r3, [r5, #4]
    return true;
   b90b8:	e7ec      	b.n	b9094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b90bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b90bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90c0:	4605      	mov	r5, r0
   b90c2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b90c4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b90c6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b90c8:	f7ff f968 	bl	b839c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b90cc:	682e      	ldr	r6, [r5, #0]
   b90ce:	1ef3      	subs	r3, r6, #3
   b90d0:	2b0d      	cmp	r3, #13
   b90d2:	d83c      	bhi.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b90d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b90d8:	0057000e 	.word	0x0057000e
   b90dc:	00d3003b 	.word	0x00d3003b
   b90e0:	003b003b 	.word	0x003b003b
   b90e4:	003b003b 	.word	0x003b003b
   b90e8:	009d003b 	.word	0x009d003b
   b90ec:	009d009d 	.word	0x009d009d
   b90f0:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b90f4:	a804      	add	r0, sp, #16
   b90f6:	f7ff fad3 	bl	b86a0 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b90fa:	9b04      	ldr	r3, [sp, #16]
   b90fc:	89aa      	ldrh	r2, [r5, #12]
   b90fe:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b9100:	6869      	ldr	r1, [r5, #4]
   b9102:	9804      	ldr	r0, [sp, #16]
   b9104:	3108      	adds	r1, #8
   b9106:	3002      	adds	r0, #2
   b9108:	f7ff f96c 	bl	b83e4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b910c:	a904      	add	r1, sp, #16
   b910e:	a806      	add	r0, sp, #24
   b9110:	f7ff fc16 	bl	b8940 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b9114:	a906      	add	r1, sp, #24
   b9116:	f104 0018 	add.w	r0, r4, #24
   b911a:	f7ff ff73 	bl	b9004 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b911e:	4605      	mov	r5, r0
   b9120:	a807      	add	r0, sp, #28
   b9122:	f7ff fc17 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9126:	b9c5      	cbnz	r5, b915a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b9128:	2320      	movs	r3, #32
   b912a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b912e:	4b5e      	ldr	r3, [pc, #376]	; (b92a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9130:	495e      	ldr	r1, [pc, #376]	; (b92ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b9132:	9300      	str	r3, [sp, #0]
   b9134:	aa06      	add	r2, sp, #24
   b9136:	462b      	mov	r3, r5
   b9138:	2001      	movs	r0, #1
   b913a:	f7fe fd19 	bl	b7b70 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b913e:	9b04      	ldr	r3, [sp, #16]
   b9140:	4629      	mov	r1, r5
   b9142:	8818      	ldrh	r0, [r3, #0]
   b9144:	f7fe fb40 	bl	b77c8 <hal_ble_gap_disconnect>
   b9148:	a805      	add	r0, sp, #20
   b914a:	f7ff fc03 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b914e:	a803      	add	r0, sp, #12
   b9150:	f7ff f932 	bl	b83b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9154:	b00e      	add	sp, #56	; 0x38
   b9156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b915a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b915c:	b123      	cbz	r3, b9168 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b915e:	a904      	add	r1, sp, #16
   b9160:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9164:	f7ff fc5e 	bl	b8a24 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9168:	a805      	add	r0, sp, #20
   b916a:	f7ff fbf3 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b916e:	2120      	movs	r1, #32
   b9170:	2300      	movs	r3, #0
   b9172:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b9176:	4a4e      	ldr	r2, [pc, #312]	; (b92b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b9178:	9200      	str	r2, [sp, #0]
   b917a:	494c      	ldr	r1, [pc, #304]	; (b92ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b917c:	aa06      	add	r2, sp, #24
   b917e:	2001      	movs	r0, #1
   b9180:	f7fe fcf6 	bl	b7b70 <log_message>
   b9184:	e7e3      	b.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9186:	89a9      	ldrh	r1, [r5, #12]
   b9188:	4620      	mov	r0, r4
   b918a:	f7ff fa77 	bl	b867c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b918e:	4606      	mov	r6, r0
   b9190:	2800      	cmp	r0, #0
   b9192:	d0dc      	beq.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9194:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9196:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b919a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b919e:	8029      	strh	r1, [r5, #0]
   b91a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b91a4:	429a      	cmp	r2, r3
   b91a6:	d003      	beq.n	b91b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b91a8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b91ac:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b91ae:	e7f9      	b.n	b91a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b91b0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b91b4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b91b8:	45b8      	cmp	r8, r7
   b91ba:	d004      	beq.n	b91c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b91bc:	1d38      	adds	r0, r7, #4
   b91be:	f7ff fbc9 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b91c2:	3708      	adds	r7, #8
   b91c4:	e7f8      	b.n	b91b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b91c6:	2300      	movs	r3, #0
   b91c8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b91ca:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b91ce:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b91d2:	45b8      	cmp	r8, r7
   b91d4:	d004      	beq.n	b91e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b91d6:	1d38      	adds	r0, r7, #4
   b91d8:	f7ff fbbc 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b91dc:	3708      	adds	r7, #8
   b91de:	e7f8      	b.n	b91d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b91e0:	2300      	movs	r3, #0
   b91e2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b91e4:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b91e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b91e8:	b123      	cbz	r3, b91f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b91ea:	4631      	mov	r1, r6
   b91ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b91f0:	f7ff fc18 	bl	b8a24 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b91f4:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b91f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b91fa:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b91fc:	4631      	mov	r1, r6
   b91fe:	f104 0018 	add.w	r0, r4, #24
   b9202:	f7ff ff38 	bl	b9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b9206:	2220      	movs	r2, #32
   b9208:	2300      	movs	r3, #0
   b920a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b920e:	4a29      	ldr	r2, [pc, #164]	; (b92b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b9210:	e7b2      	b.n	b9178 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9212:	89a9      	ldrh	r1, [r5, #12]
   b9214:	4620      	mov	r0, r4
   b9216:	f7ff fa31 	bl	b867c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b921a:	2800      	cmp	r0, #0
   b921c:	d097      	beq.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b921e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9220:	2b00      	cmp	r3, #0
   b9222:	d094      	beq.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9224:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9226:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9228:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b922c:	d001      	beq.n	b9232 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b922e:	2e10      	cmp	r6, #16
   b9230:	d117      	bne.n	b9262 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b9232:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9234:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9236:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9238:	2506      	movs	r5, #6
                        };
   b923a:	f88d 3015 	strb.w	r3, [sp, #21]
   b923e:	9104      	str	r1, [sp, #16]
   b9240:	f88d 2014 	strb.w	r2, [sp, #20]
   b9244:	9006      	str	r0, [sp, #24]
   b9246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b924a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b924c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b9250:	9508      	str	r5, [sp, #32]
   b9252:	e883 0003 	stmia.w	r3, {r0, r1}
   b9256:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9258:	a906      	add	r1, sp, #24
   b925a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b925e:	4798      	blx	r3
   b9260:	e775      	b.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b9262:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9264:	bf01      	itttt	eq
   b9266:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9268:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b926a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b926e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b9270:	bf0f      	iteee	eq
   b9272:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9276:	461a      	movne	r2, r3
   b9278:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b927a:	461d      	movne	r5, r3
   b927c:	e7dd      	b.n	b923a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b927e:	89a9      	ldrh	r1, [r5, #12]
   b9280:	4620      	mov	r0, r4
   b9282:	f7ff f9fb 	bl	b867c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9286:	4601      	mov	r1, r0
   b9288:	2800      	cmp	r0, #0
   b928a:	f43f af60 	beq.w	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b928e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9290:	2b00      	cmp	r3, #0
   b9292:	f43f af5c 	beq.w	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9296:	686b      	ldr	r3, [r5, #4]
   b9298:	9306      	str	r3, [sp, #24]
   b929a:	aa06      	add	r2, sp, #24
   b929c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b929e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b92a2:	4798      	blx	r3
   b92a4:	e753      	b.n	b914e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b92a6:	bf00      	nop
   b92a8:	000bf2e7 	.word	0x000bf2e7
   b92ac:	000bf263 	.word	0x000bf263
   b92b0:	000bf30d 	.word	0x000bf30d
   b92b4:	000bf317 	.word	0x000bf317

000b92b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b92b8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b92ba:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b92bc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b92be:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b92c0:	dd05      	ble.n	b92ce <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b92c2:	2114      	movs	r1, #20
   b92c4:	4369      	muls	r1, r5
   b92c6:	f7fe fd27 	bl	b7d18 <realloc>
            if (!d) {
   b92ca:	b918      	cbnz	r0, b92d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b92cc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b92ce:	f7fe fd1b 	bl	b7d08 <free>
        T* d = nullptr;
   b92d2:	2000      	movs	r0, #0
        data_ = d;
   b92d4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b92d6:	60a5      	str	r5, [r4, #8]
        return true;
   b92d8:	2001      	movs	r0, #1
   b92da:	e7f7      	b.n	b92cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b92dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b92e0:	2400      	movs	r4, #0
   b92e2:	e9c0 4400 	strd	r4, r4, [r0]
   b92e6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92e8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92ea:	6849      	ldr	r1, [r1, #4]
   b92ec:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b92ee:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b92f0:	dd1a      	ble.n	b9328 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b92f2:	f7ff ffe1 	bl	b92b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b92f6:	b1b8      	cbz	r0, b9328 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b92f8:	e9d8 9300 	ldrd	r9, r3, [r8]
   b92fc:	f04f 0c14 	mov.w	ip, #20
   b9300:	f8d7 e000 	ldr.w	lr, [r7]
   b9304:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b9308:	eb09 0504 	add.w	r5, r9, r4
   b930c:	45ac      	cmp	ip, r5
   b930e:	d008      	beq.n	b9322 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b9310:	eb1e 0604 	adds.w	r6, lr, r4
   b9314:	bf1f      	itttt	ne
   b9316:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b9318:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b931a:	682b      	ldrne	r3, [r5, #0]
   b931c:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b931e:	3414      	adds	r4, #20
   b9320:	e7f2      	b.n	b9308 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b9322:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9326:	607b      	str	r3, [r7, #4]
}
   b9328:	4638      	mov	r0, r7
   b932a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b932e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b9332:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b9336:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9338:	6883      	ldr	r3, [r0, #8]
   b933a:	19e9      	adds	r1, r5, r7
   b933c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b933e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9340:	dc17      	bgt.n	b9372 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b9342:	2314      	movs	r3, #20
   b9344:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b9346:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9348:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b934a:	fb03 f907 	mul.w	r9, r3, r7
   b934e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9350:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9352:	1b52      	subs	r2, r2, r5
   b9354:	4631      	mov	r1, r6
   b9356:	eb06 0009 	add.w	r0, r6, r9
   b935a:	f002 fe7f 	bl	bc05c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b935e:	464a      	mov	r2, r9
   b9360:	4641      	mov	r1, r8
   b9362:	4630      	mov	r0, r6
   b9364:	f002 fe6c 	bl	bc040 <memcpy>
    size_ += n;
   b9368:	6863      	ldr	r3, [r4, #4]
   b936a:	443b      	add	r3, r7
   b936c:	6063      	str	r3, [r4, #4]
}
   b936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9372:	f7ff ffa1 	bl	b92b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9376:	2800      	cmp	r0, #0
   b9378:	d1e3      	bne.n	b9342 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b937a:	e7f8      	b.n	b936e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b937c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b937c:	b082      	sub	sp, #8
   b937e:	b570      	push	{r4, r5, r6, lr}
   b9380:	460c      	mov	r4, r1
   b9382:	a904      	add	r1, sp, #16
   b9384:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9388:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b938c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b938e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9390:	da17      	bge.n	b93c2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b9392:	2314      	movs	r3, #20
   b9394:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b9398:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b939a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b939c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b939e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b93a0:	1a52      	subs	r2, r2, r1
   b93a2:	18e0      	adds	r0, r4, r3
   b93a4:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b93a6:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b93a8:	f002 fe58 	bl	bc05c <memmove>
    new(p) T(std::move(value));
   b93ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b93ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b93b0:	6833      	ldr	r3, [r6, #0]
   b93b2:	6023      	str	r3, [r4, #0]
    ++size_;
   b93b4:	686b      	ldr	r3, [r5, #4]
   b93b6:	3301      	adds	r3, #1
   b93b8:	606b      	str	r3, [r5, #4]
}
   b93ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b93be:	b002      	add	sp, #8
   b93c0:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b93c2:	3101      	adds	r1, #1
   b93c4:	f7ff ff78 	bl	b92b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b93c8:	2800      	cmp	r0, #0
   b93ca:	d1e2      	bne.n	b9392 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b93cc:	e7f5      	b.n	b93ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b93ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b93d2:	2400      	movs	r4, #0
   b93d4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93d6:	1e93      	subs	r3, r2, #2
   b93d8:	e9c0 4400 	strd	r4, r4, [r0]
   b93dc:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b93de:	4605      	mov	r5, r0
   b93e0:	460f      	mov	r7, r1
   b93e2:	4690      	mov	r8, r2
   b93e4:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b93e6:	9305      	str	r3, [sp, #20]
    return size_;
   b93e8:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b93ea:	428c      	cmp	r4, r1
   b93ec:	da72      	bge.n	b94d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b93ee:	6838      	ldr	r0, [r7, #0]
   b93f0:	ab07      	add	r3, sp, #28
   b93f2:	4642      	mov	r2, r8
   b93f4:	1b09      	subs	r1, r1, r4
   b93f6:	4420      	add	r0, r4
   b93f8:	f7fe ff5e 	bl	b82b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b93fc:	4606      	mov	r6, r0
   b93fe:	2800      	cmp	r0, #0
   b9400:	d068      	beq.n	b94d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b9402:	9b05      	ldr	r3, [sp, #20]
   b9404:	2b01      	cmp	r3, #1
   b9406:	d82f      	bhi.n	b9468 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9408:	f1a0 0b02 	sub.w	fp, r0, #2
   b940c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b9410:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b9414:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b9418:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b941a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b941c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b941e:	d055      	beq.n	b94cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b9420:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b9422:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b9426:	4413      	add	r3, r2
   b9428:	a808      	add	r0, sp, #32
   b942a:	78d9      	ldrb	r1, [r3, #3]
   b942c:	789b      	ldrb	r3, [r3, #2]
   b942e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b9432:	f7ff f832 	bl	b849a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b9436:	f10d 0e20 	add.w	lr, sp, #32
   b943a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b943e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9442:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9446:	f8de 3000 	ldr.w	r3, [lr]
   b944a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b944e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b9452:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b9456:	ab0d      	add	r3, sp, #52	; 0x34
   b9458:	cb0c      	ldmia	r3, {r2, r3}
   b945a:	6869      	ldr	r1, [r5, #4]
   b945c:	4628      	mov	r0, r5
   b945e:	f7ff ff8d 	bl	b937c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9462:	f109 0901 	add.w	r9, r9, #1
   b9466:	e7d7      	b.n	b9418 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b9468:	f1a8 0306 	sub.w	r3, r8, #6
   b946c:	2b01      	cmp	r3, #1
   b946e:	d82d      	bhi.n	b94cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9470:	f1a0 0b02 	sub.w	fp, r0, #2
   b9474:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b9478:	f04f 0900 	mov.w	r9, #0
   b947c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b9480:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9482:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9484:	d022      	beq.n	b94cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b9486:	3302      	adds	r3, #2
    return data_[i];
   b9488:	6839      	ldr	r1, [r7, #0]
   b948a:	4423      	add	r3, r4
   b948c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b9490:	2201      	movs	r2, #1
   b9492:	4419      	add	r1, r3
   b9494:	a808      	add	r0, sp, #32
   b9496:	f7fe ffe1 	bl	b845c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b949a:	f10d 0e20 	add.w	lr, sp, #32
   b949e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b94a2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b94a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b94aa:	f8de 3000 	ldr.w	r3, [lr]
   b94ae:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b94b2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b94b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b94ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b94be:	6869      	ldr	r1, [r5, #4]
   b94c0:	4628      	mov	r0, r5
   b94c2:	f7ff ff5b 	bl	b937c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b94c6:	f109 0901 	add.w	r9, r9, #1
   b94ca:	e7d9      	b.n	b9480 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b94cc:	9b07      	ldr	r3, [sp, #28]
   b94ce:	441c      	add	r4, r3
   b94d0:	4434      	add	r4, r6
   b94d2:	e789      	b.n	b93e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b94d4:	4628      	mov	r0, r5
   b94d6:	b013      	add	sp, #76	; 0x4c
   b94d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b94dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b94dc:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b94de:	2300      	movs	r3, #0
   b94e0:	b085      	sub	sp, #20
   b94e2:	e9c0 3300 	strd	r3, r3, [r0]
   b94e6:	6083      	str	r3, [r0, #8]
   b94e8:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94ea:	2202      	movs	r2, #2
   b94ec:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b94ee:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b94f0:	f7ff ff6d 	bl	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b94f4:	a901      	add	r1, sp, #4
   b94f6:	4620      	mov	r0, r4
   b94f8:	f7ff ff19 	bl	b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b94fc:	a801      	add	r0, sp, #4
   b94fe:	f7ff f9d3 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b9502:	2202      	movs	r2, #2
   b9504:	4629      	mov	r1, r5
   b9506:	a801      	add	r0, sp, #4
   b9508:	f7ff ff61 	bl	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b950c:	a901      	add	r1, sp, #4
   b950e:	4620      	mov	r0, r4
   b9510:	f7ff ff0d 	bl	b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9514:	a801      	add	r0, sp, #4
   b9516:	f7ff f9c7 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b951a:	2203      	movs	r2, #3
   b951c:	4629      	mov	r1, r5
   b951e:	a801      	add	r0, sp, #4
   b9520:	f7ff ff55 	bl	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9524:	a901      	add	r1, sp, #4
   b9526:	4620      	mov	r0, r4
   b9528:	f7ff ff01 	bl	b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b952c:	a801      	add	r0, sp, #4
   b952e:	f7ff f9bb 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b9532:	2206      	movs	r2, #6
   b9534:	4629      	mov	r1, r5
   b9536:	a801      	add	r0, sp, #4
   b9538:	f7ff ff49 	bl	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b953c:	a901      	add	r1, sp, #4
   b953e:	4620      	mov	r0, r4
   b9540:	f7ff fef5 	bl	b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9544:	a801      	add	r0, sp, #4
   b9546:	f7ff f9af 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b954a:	2207      	movs	r2, #7
   b954c:	4629      	mov	r1, r5
   b954e:	a801      	add	r0, sp, #4
   b9550:	f7ff ff3d 	bl	b93ce <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9554:	a901      	add	r1, sp, #4
   b9556:	4620      	mov	r0, r4
   b9558:	f7ff fee9 	bl	b932e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b955c:	a801      	add	r0, sp, #4
   b955e:	f7ff f9a3 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b9562:	4620      	mov	r0, r4
   b9564:	b005      	add	sp, #20
   b9566:	bd30      	pop	{r4, r5, pc}

000b9568 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b9568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b956c:	b085      	sub	sp, #20
   b956e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9570:	4601      	mov	r1, r0
   b9572:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b9574:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9576:	f7ff ffb1 	bl	b94dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b957a:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b957c:	9b02      	ldr	r3, [sp, #8]
   b957e:	f04f 0e14 	mov.w	lr, #20
   b9582:	fb0e 6c03 	mla	ip, lr, r3, r6
   b9586:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b9588:	45b4      	cmp	ip, r6
   b958a:	d00d      	beq.n	b95a8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b958c:	45b9      	cmp	r9, r7
   b958e:	f106 0614 	add.w	r6, r6, #20
   b9592:	d009      	beq.n	b95a8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b9594:	f1a6 0514 	sub.w	r5, r6, #20
   b9598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b959a:	fb0e 8407 	mla	r4, lr, r7, r8
   b959e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b95a0:	682b      	ldr	r3, [r5, #0]
   b95a2:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b95a4:	3701      	adds	r7, #1
   b95a6:	e7ef      	b.n	b9588 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b95a8:	a801      	add	r0, sp, #4
   b95aa:	f7ff f97d 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b95ae:	4638      	mov	r0, r7
   b95b0:	b005      	add	sp, #20
   b95b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b95b6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b95b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95ba:	b08b      	sub	sp, #44	; 0x2c
   b95bc:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b95be:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b95c2:	a801      	add	r0, sp, #4
   b95c4:	f7ff fe8a 	bl	b92dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b95c8:	9b02      	ldr	r3, [sp, #8]
   b95ca:	2b00      	cmp	r3, #0
   b95cc:	dd4a      	ble.n	b9664 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b95ce:	f104 0114 	add.w	r1, r4, #20
   b95d2:	a804      	add	r0, sp, #16
   b95d4:	f7ff ff82 	bl	b94dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b95d8:	f104 0108 	add.w	r1, r4, #8
   b95dc:	a807      	add	r0, sp, #28
   b95de:	f7ff ff7d 	bl	b94dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b95e2:	9d05      	ldr	r5, [sp, #20]
   b95e4:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b95e6:	2d00      	cmp	r5, #0
   b95e8:	dc01      	bgt.n	b95ee <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b95ea:	2e00      	cmp	r6, #0
   b95ec:	dd38      	ble.n	b9660 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b95ee:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b95f0:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b95f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b95f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b95fa:	2314      	movs	r3, #20
   b95fc:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b9600:	fb03 8505 	mla	r5, r3, r5, r8
   b9604:	fb03 9606 	mla	r6, r3, r6, r9
   b9608:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b960a:	45ba      	cmp	sl, r7
   b960c:	d028      	beq.n	b9660 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b960e:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b9610:	45ab      	cmp	fp, r5
   b9612:	d015      	beq.n	b9640 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b9614:	4659      	mov	r1, fp
   b9616:	4650      	mov	r0, sl
   b9618:	f7fe ff49 	bl	b84ae <_ZNK8particle7BleUuideqERKS0_>
   b961c:	f10b 0b14 	add.w	fp, fp, #20
   b9620:	4604      	mov	r4, r0
   b9622:	2800      	cmp	r0, #0
   b9624:	d0f4      	beq.n	b9610 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b9626:	a807      	add	r0, sp, #28
   b9628:	f7ff f93e 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b962c:	a804      	add	r0, sp, #16
   b962e:	f7ff f93b 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b9632:	a801      	add	r0, sp, #4
   b9634:	f7ff f938 	bl	b88a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b9638:	4620      	mov	r0, r4
   b963a:	b00b      	add	sp, #44	; 0x2c
   b963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9640:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b9642:	45b3      	cmp	fp, r6
   b9644:	d009      	beq.n	b965a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b9646:	4659      	mov	r1, fp
   b9648:	4650      	mov	r0, sl
   b964a:	f7fe ff30 	bl	b84ae <_ZNK8particle7BleUuideqERKS0_>
   b964e:	f10b 0b14 	add.w	fp, fp, #20
   b9652:	4604      	mov	r4, r0
   b9654:	2800      	cmp	r0, #0
   b9656:	d0f4      	beq.n	b9642 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b9658:	e7e5      	b.n	b9626 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b965a:	f10a 0a14 	add.w	sl, sl, #20
   b965e:	e7d4      	b.n	b960a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b9660:	2400      	movs	r4, #0
   b9662:	e7e0      	b.n	b9626 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b9664:	2401      	movs	r4, #1
   b9666:	e7e4      	b.n	b9632 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b9668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9668:	b513      	push	{r0, r1, r4, lr}
   b966a:	460b      	mov	r3, r1
   b966c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b966e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9672:	466c      	mov	r4, sp
   b9674:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9678:	e893 0003 	ldmia.w	r3, {r0, r1}
   b967c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9680:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9684:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9688:	b002      	add	sp, #8
   b968a:	bd10      	pop	{r4, pc}

000b968c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>:
    int start(BleOnScanResultCallback callback, void* context) {
   b968c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b968e:	4604      	mov	r4, r0
   b9690:	b089      	sub	sp, #36	; 0x24
   b9692:	4616      	mov	r6, r2
        scanResultCallback_ = callback ? std::bind(callback, _1, context) : (std::function<void(const BleScanResult*)>)nullptr;
   b9694:	f100 0718 	add.w	r7, r0, #24
   b9698:	460d      	mov	r5, r1
   b969a:	2900      	cmp	r1, #0
   b969c:	d03a      	beq.n	b9714 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x88>
    _Function_base() : _M_manager(nullptr) { }
   b969e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b96a0:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   b96a2:	9302      	str	r3, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b96a4:	f7fb fa05 	bl	b4ab2 <_Znwj>
   b96a8:	b108      	cbz	r0, b96ae <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x22>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b96aa:	e9c0 5600 	strd	r5, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b96ae:	4b1a      	ldr	r3, [pc, #104]	; (b9718 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x8c>)
   b96b0:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b96b2:	4b1a      	ldr	r3, [pc, #104]	; (b971c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b96b4:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b96b6:	9302      	str	r3, [sp, #8]
    _Function_base() : _M_manager(nullptr) { }
   b96b8:	2500      	movs	r5, #0
	std::swap(_M_functor, __x._M_functor);
   b96ba:	a904      	add	r1, sp, #16
   b96bc:	4668      	mov	r0, sp
    _Function_base() : _M_manager(nullptr) { }
   b96be:	9506      	str	r5, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
   b96c0:	f7ff ffd2 	bl	b9668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96c4:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b96c6:	9a06      	ldr	r2, [sp, #24]
   b96c8:	9202      	str	r2, [sp, #8]
   b96ca:	4639      	mov	r1, r7
   b96cc:	9a07      	ldr	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b96ce:	9306      	str	r3, [sp, #24]
   b96d0:	a804      	add	r0, sp, #16
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96d2:	9b03      	ldr	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b96d4:	9307      	str	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b96d6:	9203      	str	r2, [sp, #12]
   b96d8:	f7ff ffc6 	bl	b9668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96dc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b96de:	6a22      	ldr	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b96e0:	6223      	str	r3, [r4, #32]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b96e2:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b96e4:	9206      	str	r2, [sp, #24]
    class function<_Res(_ArgTypes...)>
   b96e6:	a804      	add	r0, sp, #16
   b96e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
   b96ea:	6263      	str	r3, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b96ec:	9207      	str	r2, [sp, #28]
   b96ee:	f7fd ffad 	bl	b764c <_ZNSt14_Function_baseD1Ev>
   b96f2:	4668      	mov	r0, sp
   b96f4:	f7fd ffaa 	bl	b764c <_ZNSt14_Function_baseD1Ev>
        scanResultCallbackRef_ = nullptr;
   b96f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b96fc:	f7fe fe1a 	bl	b8334 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b9700:	462a      	mov	r2, r5
   b9702:	4621      	mov	r1, r4
   b9704:	4806      	ldr	r0, [pc, #24]	; (b9720 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x94>)
   b9706:	f7fe f84d 	bl	b77a4 <hal_ble_gap_start_scan>
   b970a:	2800      	cmp	r0, #0
        return foundCount_;
   b970c:	bfa8      	it	ge
   b970e:	6960      	ldrge	r0, [r4, #20]
    }
   b9710:	b009      	add	sp, #36	; 0x24
   b9712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9714:	9102      	str	r1, [sp, #8]
      : _Function_base() { }
   b9716:	e7cf      	b.n	b96b8 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x2c>
   b9718:	000b82e3 	.word	0x000b82e3
   b971c:	000b82f5 	.word	0x000b82f5
   b9720:	000b97d3 	.word	0x000b97d3

000b9724 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b9724:	b510      	push	{r4, lr}
   b9726:	b0a0      	sub	sp, #128	; 0x80
    BleScanDelegator scanner;
   b9728:	a803      	add	r0, sp, #12
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b972a:	e9cd 2100 	strd	r2, r1, [sp]
    BleScanDelegator scanner;
   b972e:	f7ff f88a 	bl	b8846 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(callback, context);
   b9732:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9736:	a803      	add	r0, sp, #12
   b9738:	f7ff ffa8 	bl	b968c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>
   b973c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b973e:	a803      	add	r0, sp, #12
   b9740:	f7ff f8b9 	bl	b88b6 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b9744:	4620      	mov	r0, r4
   b9746:	b020      	add	sp, #128	; 0x80
   b9748:	bd10      	pop	{r4, pc}

000b974a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b974a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b974e:	4604      	mov	r4, r0
   b9750:	460d      	mov	r5, r1
   b9752:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9754:	d914      	bls.n	b9780 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9756:	4290      	cmp	r0, r2
   b9758:	d213      	bcs.n	b9782 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b975a:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b975e:	1a75      	subs	r5, r6, r1
   b9760:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b9764:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9766:	42b7      	cmp	r7, r6
   b9768:	d018      	beq.n	b979c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b976a:	b11c      	cbz	r4, b9774 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b976c:	4631      	mov	r1, r6
   b976e:	4620      	mov	r0, r4
   b9770:	f7ff fb30 	bl	b8dd4 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b9774:	4630      	mov	r0, r6
   b9776:	f7ff f85c 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b977a:	3e24      	subs	r6, #36	; 0x24
   b977c:	3c24      	subs	r4, #36	; 0x24
   b977e:	e7f2      	b.n	b9766 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9780:	d00c      	beq.n	b979c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9782:	42b5      	cmp	r5, r6
   b9784:	d00a      	beq.n	b979c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9786:	b11c      	cbz	r4, b9790 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9788:	4629      	mov	r1, r5
   b978a:	4620      	mov	r0, r4
   b978c:	f7ff fb22 	bl	b8dd4 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b9790:	4628      	mov	r0, r5
   b9792:	f7ff f84e 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b9796:	3524      	adds	r5, #36	; 0x24
   b9798:	3424      	adds	r4, #36	; 0x24
   b979a:	e7f2      	b.n	b9782 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b979e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b97a0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b97a2:	4605      	mov	r5, r0
        if (n > 0) {
   b97a4:	dd13      	ble.n	b97ce <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b97a6:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b97a8:	fb07 f006 	mul.w	r0, r7, r6
   b97ac:	f7fe faa4 	bl	b7cf8 <malloc>
            if (!d) {
   b97b0:	4604      	mov	r4, r0
   b97b2:	b158      	cbz	r0, b97cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b97b4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b97b8:	fb07 1202 	mla	r2, r7, r2, r1
   b97bc:	f7ff ffc5 	bl	b974a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b97c0:	6828      	ldr	r0, [r5, #0]
   b97c2:	f7fe faa1 	bl	b7d08 <free>
        data_ = d;
   b97c6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b97c8:	60ae      	str	r6, [r5, #8]
        return true;
   b97ca:	2001      	movs	r0, #1
    }
   b97cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b97ce:	2400      	movs	r4, #0
   b97d0:	e7f6      	b.n	b97c0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b97d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b97d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b97d6:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b97d8:	ad01      	add	r5, sp, #4
   b97da:	4606      	mov	r6, r0
   b97dc:	4628      	mov	r0, r5
   b97de:	460c      	mov	r4, r1
   b97e0:	f7fe fe21 	bl	b8426 <_ZN8particle10BleAddressC1Ev>
   b97e4:	a803      	add	r0, sp, #12
   b97e6:	f7ff fbd0 	bl	b8f8a <_ZN8particle18BleAdvertisingDataC1Ev>
   b97ea:	a806      	add	r0, sp, #24
   b97ec:	f7ff fbcd 	bl	b8f8a <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b97f0:	6930      	ldr	r0, [r6, #16]
   b97f2:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b97f4:	89f2      	ldrh	r2, [r6, #14]
   b97f6:	ab13      	add	r3, sp, #76	; 0x4c
   b97f8:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b97fa:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b97fe:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9800:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9802:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9806:	a806      	add	r0, sp, #24
   b9808:	f7ff fb33 	bl	b8e72 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b980c:	89b2      	ldrh	r2, [r6, #12]
   b980e:	6871      	ldr	r1, [r6, #4]
   b9810:	a803      	add	r0, sp, #12
   b9812:	f7ff fb2e 	bl	b8e72 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b9816:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b981a:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b981c:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b981e:	d003      	beq.n	b9828 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9820:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9824:	429a      	cmp	r2, r3
   b9826:	db5c      	blt.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9828:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b982c:	2b7f      	cmp	r3, #127	; 0x7f
   b982e:	d003      	beq.n	b9838 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9830:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9834:	429a      	cmp	r2, r3
   b9836:	dc54      	bgt.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9838:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b983c:	4638      	mov	r0, r7
   b983e:	f7ff f991 	bl	b8b64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9842:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9844:	2b00      	cmp	r3, #0
   b9846:	dd52      	ble.n	b98ee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9848:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b984a:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b984e:	45b1      	cmp	r9, r6
   b9850:	d050      	beq.n	b98f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9852:	4630      	mov	r0, r6
   b9854:	4629      	mov	r1, r5
   b9856:	f7fe fdd2 	bl	b83fe <_ZNK8particle10BleAddresseqERKS0_>
   b985a:	3608      	adds	r6, #8
   b985c:	4680      	mov	r8, r0
   b985e:	2800      	cmp	r0, #0
   b9860:	d0f5      	beq.n	b984e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9862:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9864:	f7fe fa50 	bl	b7d08 <free>
        if (!delegator->filterByRssi(result) ||
   b9868:	f1b8 0f00 	cmp.w	r8, #0
   b986c:	d039      	beq.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b986e:	4629      	mov	r1, r5
   b9870:	4620      	mov	r0, r4
   b9872:	f7ff f93a 	bl	b8aea <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9876:	b3a0      	cbz	r0, b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9878:	4629      	mov	r1, r5
   b987a:	4620      	mov	r0, r4
   b987c:	f7ff fe9b 	bl	b95b6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b9880:	4606      	mov	r6, r0
   b9882:	b370      	cbz	r0, b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9884:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9888:	4638      	mov	r0, r7
   b988a:	f7ff f9b6 	bl	b8bfa <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b988e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9890:	2b00      	cmp	r3, #0
   b9892:	dd12      	ble.n	b98ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9894:	a806      	add	r0, sp, #24
   b9896:	f7fe fee5 	bl	b8664 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b989a:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b989c:	a803      	add	r0, sp, #12
   b989e:	f7fe fee1 	bl	b8664 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b98a2:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b98a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b98aa:	429a      	cmp	r2, r3
   b98ac:	d025      	beq.n	b98fa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b98ae:	f833 1b02 	ldrh.w	r1, [r3], #2
   b98b2:	4588      	cmp	r8, r1
   b98b4:	d001      	beq.n	b98ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b98b6:	4288      	cmp	r0, r1
   b98b8:	d1f7      	bne.n	b98aa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b98ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b98bc:	f7fe fa24 	bl	b7d08 <free>
              !delegator->filterByServiceUUID(result) ||
   b98c0:	b17e      	cbz	r6, b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b98c2:	4629      	mov	r1, r5
   b98c4:	4620      	mov	r0, r4
   b98c6:	f7ff f9cd 	bl	b8c64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b98ca:	b150      	cbz	r0, b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b98cc:	6a23      	ldr	r3, [r4, #32]
   b98ce:	b1b3      	cbz	r3, b98fe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b98d0:	6963      	ldr	r3, [r4, #20]
   b98d2:	9513      	str	r5, [sp, #76]	; 0x4c
   b98d4:	3301      	adds	r3, #1
   b98d6:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b98d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b98da:	4639      	mov	r1, r7
   b98dc:	f104 0018 	add.w	r0, r4, #24
   b98e0:	4798      	blx	r3
            return;
   b98e2:	4628      	mov	r0, r5
   b98e4:	f7fe ffa5 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
    }
   b98e8:	b01d      	add	sp, #116	; 0x74
   b98ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b98ee:	f04f 0801 	mov.w	r8, #1
   b98f2:	e7b6      	b.n	b9862 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98f4:	f04f 0800 	mov.w	r8, #0
   b98f8:	e7b3      	b.n	b9862 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b98fa:	2600      	movs	r6, #0
   b98fc:	e7dd      	b.n	b98ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b98fe:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9902:	f1b8 0f00 	cmp.w	r8, #0
   b9906:	d007      	beq.n	b9918 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9908:	6963      	ldr	r3, [r4, #20]
   b990a:	3301      	adds	r3, #1
   b990c:	6163      	str	r3, [r4, #20]
   b990e:	4629      	mov	r1, r5
   b9910:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9912:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9916:	e7e3      	b.n	b98e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b9918:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b991c:	f1bc 0f00 	cmp.w	ip, #0
   b9920:	d025      	beq.n	b996e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9922:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9924:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9926:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9928:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b992a:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b992c:	d8d9      	bhi.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b992e:	2224      	movs	r2, #36	; 0x24
   b9930:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9932:	462a      	mov	r2, r5
   b9934:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9936:	3b24      	subs	r3, #36	; 0x24
   b9938:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b993c:	f84c 0003 	str.w	r0, [ip, r3]
   b9940:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9942:	f106 0008 	add.w	r0, r6, #8
   b9946:	a903      	add	r1, sp, #12
   b9948:	f7ff fa5b 	bl	b8e02 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b994c:	a906      	add	r1, sp, #24
   b994e:	f106 0014 	add.w	r0, r6, #20
   b9952:	f7ff fa56 	bl	b8e02 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9956:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b995a:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b995e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9962:	429a      	cmp	r2, r3
   b9964:	d3bd      	bcc.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9966:	4640      	mov	r0, r8
   b9968:	f7fd ff24 	bl	b77b4 <hal_ble_gap_stop_scan>
   b996c:	e7b9      	b.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b996e:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9972:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9976:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b997a:	a903      	add	r1, sp, #12
   b997c:	a80c      	add	r0, sp, #48	; 0x30
   b997e:	f7ff fa0c 	bl	b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9982:	a906      	add	r1, sp, #24
   b9984:	a80f      	add	r0, sp, #60	; 0x3c
   b9986:	f7ff fa08 	bl	b8d9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b998a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b998e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9992:	4641      	mov	r1, r8
   b9994:	4638      	mov	r0, r7
   b9996:	6866      	ldr	r6, [r4, #4]
   b9998:	f7ff fa1c 	bl	b8dd4 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b999c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b99a0:	4299      	cmp	r1, r3
   b99a2:	da10      	bge.n	b99c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b99a4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b99a6:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b99a8:	2224      	movs	r2, #36	; 0x24
   b99aa:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b99ae:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b99b2:	fb02 3201 	mla	r2, r2, r1, r3
   b99b6:	4631      	mov	r1, r6
   b99b8:	f7ff fec7 	bl	b974a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b99bc:	b986      	cbnz	r6, b99e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b99be:	6863      	ldr	r3, [r4, #4]
   b99c0:	3301      	adds	r3, #1
   b99c2:	6063      	str	r3, [r4, #4]
    return true;
   b99c4:	e005      	b.n	b99d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99c6:	3101      	adds	r1, #1
   b99c8:	4620      	mov	r0, r4
   b99ca:	f7ff fee8 	bl	b979e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b99ce:	2800      	cmp	r0, #0
   b99d0:	d1e8      	bne.n	b99a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b99d2:	4638      	mov	r0, r7
   b99d4:	f7fe ff2d 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b99d8:	4640      	mov	r0, r8
   b99da:	f7fe ff2a 	bl	b8832 <_ZN8particle13BleScanResultD1Ev>
   b99de:	e780      	b.n	b98e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b99e0:	4639      	mov	r1, r7
   b99e2:	4630      	mov	r0, r6
   b99e4:	f7ff f9f6 	bl	b8dd4 <_ZN8particle13BleScanResultC1EOS0_>
   b99e8:	e7e9      	b.n	b99be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

000b99ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b99ec:	4802      	ldr	r0, [pc, #8]	; (b99f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b99ee:	2300      	movs	r3, #0
   b99f0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b99f2:	f7fd bf1d 	b.w	b7830 <os_mutex_recursive_create>
   b99f6:	bf00      	nop
   b99f8:	2003e6a4 	.word	0x2003e6a4

000b99fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b99fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99fe:	4606      	mov	r6, r0
   b9a00:	460d      	mov	r5, r1
  size_t n = 0;
   b9a02:	188f      	adds	r7, r1, r2
   b9a04:	2400      	movs	r4, #0
  while (size--) {
   b9a06:	42bd      	cmp	r5, r7
   b9a08:	d00c      	beq.n	b9a24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9a0a:	6833      	ldr	r3, [r6, #0]
   b9a0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9a10:	689b      	ldr	r3, [r3, #8]
   b9a12:	4630      	mov	r0, r6
   b9a14:	4798      	blx	r3
     if (chunk>=0)
   b9a16:	1e03      	subs	r3, r0, #0
   b9a18:	db01      	blt.n	b9a1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9a1a:	441c      	add	r4, r3
  while (size--) {
   b9a1c:	e7f3      	b.n	b9a06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9a1e:	2c00      	cmp	r4, #0
   b9a20:	bf08      	it	eq
   b9a22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9a24:	4620      	mov	r0, r4
   b9a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9a28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b9a28:	b513      	push	{r0, r1, r4, lr}
   b9a2a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b9a2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9a2e:	b159      	cbz	r1, b9a48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9a30:	9101      	str	r1, [sp, #4]
   b9a32:	f7fa ffe3 	bl	b49fc <strlen>
   b9a36:	6823      	ldr	r3, [r4, #0]
   b9a38:	9901      	ldr	r1, [sp, #4]
   b9a3a:	68db      	ldr	r3, [r3, #12]
   b9a3c:	4602      	mov	r2, r0
   b9a3e:	4620      	mov	r0, r4
    }
   b9a40:	b002      	add	sp, #8
   b9a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9a46:	4718      	bx	r3
    }
   b9a48:	b002      	add	sp, #8
   b9a4a:	bd10      	pop	{r4, pc}

000b9a4c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9a4c:	b508      	push	{r3, lr}
  return write(str);
   b9a4e:	f7ff ffeb 	bl	b9a28 <_ZN5Print5writeEPKc>
}
   b9a52:	bd08      	pop	{r3, pc}

000b9a54 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9a54:	6803      	ldr	r3, [r0, #0]
   b9a56:	689b      	ldr	r3, [r3, #8]
   b9a58:	4718      	bx	r3

000b9a5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9a5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9a5c:	210d      	movs	r1, #13
{
   b9a5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9a60:	f7ff fff8 	bl	b9a54 <_ZN5Print5printEc>
  n += print('\n');
   b9a64:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9a66:	4604      	mov	r4, r0
  n += print('\n');
   b9a68:	4628      	mov	r0, r5
   b9a6a:	f7ff fff3 	bl	b9a54 <_ZN5Print5printEc>
  return n;
}
   b9a6e:	4420      	add	r0, r4
   b9a70:	bd38      	pop	{r3, r4, r5, pc}

000b9a72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9a72:	b538      	push	{r3, r4, r5, lr}
   b9a74:	4605      	mov	r5, r0
  return write(str);
   b9a76:	f7ff ffd7 	bl	b9a28 <_ZN5Print5writeEPKc>
   b9a7a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9a7c:	4628      	mov	r0, r5
   b9a7e:	f7ff ffec 	bl	b9a5a <_ZN5Print7printlnEv>
  return n;
}
   b9a82:	4420      	add	r0, r4
   b9a84:	bd38      	pop	{r3, r4, r5, pc}

000b9a86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9a86:	b530      	push	{r4, r5, lr}
   b9a88:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9a8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9a8c:	2a01      	cmp	r2, #1
  *str = '\0';
   b9a8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9a92:	bf98      	it	ls
   b9a94:	220a      	movls	r2, #10
   b9a96:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9a98:	460d      	mov	r5, r1
   b9a9a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9a9e:	fb01 5312 	mls	r3, r1, r2, r5
   b9aa2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9aa6:	2b09      	cmp	r3, #9
   b9aa8:	bf94      	ite	ls
   b9aaa:	3330      	addls	r3, #48	; 0x30
   b9aac:	3337      	addhi	r3, #55	; 0x37
   b9aae:	b2db      	uxtb	r3, r3
  } while(n);
   b9ab0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9ab2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9ab6:	d9ef      	bls.n	b9a98 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9ab8:	4621      	mov	r1, r4
   b9aba:	f7ff ffb5 	bl	b9a28 <_ZN5Print5writeEPKc>
}
   b9abe:	b00b      	add	sp, #44	; 0x2c
   b9ac0:	bd30      	pop	{r4, r5, pc}

000b9ac2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ac6:	b086      	sub	sp, #24
   b9ac8:	af00      	add	r7, sp, #0
   b9aca:	4605      	mov	r5, r0
   b9acc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9ace:	1d38      	adds	r0, r7, #4
   b9ad0:	2114      	movs	r1, #20
{
   b9ad2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9ad4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9ad6:	f7fe f92f 	bl	b7d38 <vsnprintf>

    if (n<bufsize)
   b9ada:	2813      	cmp	r0, #19
   b9adc:	d80e      	bhi.n	b9afc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9ade:	1d39      	adds	r1, r7, #4
   b9ae0:	4628      	mov	r0, r5
   b9ae2:	f7ff ffa1 	bl	b9a28 <_ZN5Print5writeEPKc>
   b9ae6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9ae8:	b11e      	cbz	r6, b9af2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9aea:	4628      	mov	r0, r5
   b9aec:	f7ff ffb5 	bl	b9a5a <_ZN5Print7printlnEv>
   b9af0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9af2:	4620      	mov	r0, r4
   b9af4:	3718      	adds	r7, #24
   b9af6:	46bd      	mov	sp, r7
   b9af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9afc:	f100 0308 	add.w	r3, r0, #8
   b9b00:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9b04:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9b06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9b0a:	4622      	mov	r2, r4
   b9b0c:	1c41      	adds	r1, r0, #1
   b9b0e:	683b      	ldr	r3, [r7, #0]
   b9b10:	4668      	mov	r0, sp
   b9b12:	f7fe f911 	bl	b7d38 <vsnprintf>
  return write(str);
   b9b16:	4669      	mov	r1, sp
   b9b18:	4628      	mov	r0, r5
   b9b1a:	f7ff ff85 	bl	b9a28 <_ZN5Print5writeEPKc>
   b9b1e:	4604      	mov	r4, r0
   b9b20:	46c5      	mov	sp, r8
   b9b22:	e7e1      	b.n	b9ae8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9b24 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b9b24:	b510      	push	{r4, lr}
   b9b26:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9b28:	f7fd fe1c 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b9b2c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b9b2e:	6823      	ldr	r3, [r4, #0]
   b9b30:	4620      	mov	r0, r4
   b9b32:	695b      	ldr	r3, [r3, #20]
   b9b34:	4798      	blx	r3
    if (c >= 0) return c;
   b9b36:	2800      	cmp	r0, #0
   b9b38:	da08      	bge.n	b9b4c <_ZN6Stream9timedReadEv+0x28>
   b9b3a:	f7fd fe13 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b9b3e:	68e3      	ldr	r3, [r4, #12]
   b9b40:	1ac0      	subs	r0, r0, r3
   b9b42:	68a3      	ldr	r3, [r4, #8]
   b9b44:	4298      	cmp	r0, r3
   b9b46:	d3f2      	bcc.n	b9b2e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b9b48:	f04f 30ff 	mov.w	r0, #4294967295
}
   b9b4c:	bd10      	pop	{r4, pc}

000b9b4e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b9b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b52:	4607      	mov	r7, r0
   b9b54:	460c      	mov	r4, r1
   b9b56:	188e      	adds	r6, r1, r2
   b9b58:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b9b5a:	42b5      	cmp	r5, r6
   b9b5c:	eba5 0804 	sub.w	r8, r5, r4
   b9b60:	d007      	beq.n	b9b72 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b9b62:	4638      	mov	r0, r7
   b9b64:	f7ff ffde 	bl	b9b24 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b9b68:	1e03      	subs	r3, r0, #0
   b9b6a:	db02      	blt.n	b9b72 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b9b6c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b9b70:	e7f3      	b.n	b9b5a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b9b72:	4640      	mov	r0, r8
   b9b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9b78 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9b78:	6880      	ldr	r0, [r0, #8]
   b9b7a:	6803      	ldr	r3, [r0, #0]
   b9b7c:	68db      	ldr	r3, [r3, #12]
   b9b7e:	4718      	bx	r3

000b9b80 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9b80:	4770      	bx	lr

000b9b82 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9b82:	4608      	mov	r0, r1
   b9b84:	b111      	cbz	r1, b9b8c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9b86:	680b      	ldr	r3, [r1, #0]
   b9b88:	685b      	ldr	r3, [r3, #4]
   b9b8a:	4718      	bx	r3
}
   b9b8c:	4770      	bx	lr

000b9b8e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9b8e:	4770      	bx	lr

000b9b90 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9b90:	4770      	bx	lr

000b9b92 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9b92:	4770      	bx	lr

000b9b94 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9b94:	4770      	bx	lr

000b9b96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9b96:	b538      	push	{r3, r4, r5, lr}
   b9b98:	4604      	mov	r4, r0
   b9b9a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9b9c:	6800      	ldr	r0, [r0, #0]
   b9b9e:	212e      	movs	r1, #46	; 0x2e
   b9ba0:	f002 fab9 	bl	bc116 <strchrnul>
    size = s - category;
   b9ba4:	6823      	ldr	r3, [r4, #0]
   b9ba6:	1ac3      	subs	r3, r0, r3
   b9ba8:	602b      	str	r3, [r5, #0]
    if (size) {
   b9baa:	b123      	cbz	r3, b9bb6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9bac:	7803      	ldrb	r3, [r0, #0]
   b9bae:	b103      	cbz	r3, b9bb2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9bb0:	3001      	adds	r0, #1
   b9bb2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bb4:	6020      	str	r0, [r4, #0]
}
   b9bb6:	4618      	mov	r0, r3
   b9bb8:	bd38      	pop	{r3, r4, r5, pc}

000b9bba <_ZN5spark16JSONStreamWriterD0Ev>:
   b9bba:	b510      	push	{r4, lr}
   b9bbc:	210c      	movs	r1, #12
   b9bbe:	4604      	mov	r4, r0
   b9bc0:	f7fa ff7d 	bl	b4abe <_ZdlPvj>
   b9bc4:	4620      	mov	r0, r4
   b9bc6:	bd10      	pop	{r4, pc}

000b9bc8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9bc8:	b510      	push	{r4, lr}
   b9bca:	2104      	movs	r1, #4
   b9bcc:	4604      	mov	r4, r0
   b9bce:	f7fa ff76 	bl	b4abe <_ZdlPvj>
   b9bd2:	4620      	mov	r0, r4
   b9bd4:	bd10      	pop	{r4, pc}

000b9bd6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9bd6:	b510      	push	{r4, lr}
   b9bd8:	2104      	movs	r1, #4
   b9bda:	4604      	mov	r4, r0
   b9bdc:	f7fa ff6f 	bl	b4abe <_ZdlPvj>
   b9be0:	4620      	mov	r0, r4
   b9be2:	bd10      	pop	{r4, pc}

000b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b9be4:	f7fd be34 	b.w	b7850 <os_mutex_recursive_lock>

000b9be8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9be8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9bea:	f7fa fefd 	bl	b49e8 <strcmp>
}
   b9bee:	fab0 f080 	clz	r0, r0
   b9bf2:	0940      	lsrs	r0, r0, #5
   b9bf4:	bd08      	pop	{r3, pc}

000b9bf6 <__tcf_1>:
   b9bf6:	4770      	bx	lr

000b9bf8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9bf8:	b510      	push	{r4, lr}
   b9bfa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9bfc:	f001 f92c 	bl	bae58 <_Z16_fetch_usbserialv>
   b9c00:	4284      	cmp	r4, r0
   b9c02:	d010      	beq.n	b9c26 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9c04:	f002 f874 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
   b9c08:	4284      	cmp	r4, r0
   b9c0a:	d105      	bne.n	b9c18 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9c0c:	f002 f870 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9c14:	f001 b99f 	b.w	baf56 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9c18:	b12c      	cbz	r4, b9c26 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9c1a:	6823      	ldr	r3, [r4, #0]
   b9c1c:	4620      	mov	r0, r4
   b9c1e:	685b      	ldr	r3, [r3, #4]
}
   b9c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9c24:	4718      	bx	r3
   b9c26:	bd10      	pop	{r4, pc}

000b9c28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c28:	680b      	ldr	r3, [r1, #0]
   b9c2a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9c2c:	684b      	ldr	r3, [r1, #4]
   b9c2e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9c30:	b113      	cbz	r3, b9c38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9c32:	685a      	ldr	r2, [r3, #4]
   b9c34:	3201      	adds	r2, #1
   b9c36:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c38:	4770      	bx	lr

000b9c3a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9c3a:	b513      	push	{r0, r1, r4, lr}
   b9c3c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9c3e:	4608      	mov	r0, r1
   b9c40:	9101      	str	r1, [sp, #4]
   b9c42:	f7fa fedb 	bl	b49fc <strlen>
   b9c46:	9901      	ldr	r1, [sp, #4]
   b9c48:	4602      	mov	r2, r0
   b9c4a:	4620      	mov	r0, r4
}
   b9c4c:	b002      	add	sp, #8
   b9c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9c52:	f001 bf69 	b.w	bbb28 <_ZN5spark10JSONWriter5valueEPKcj>

000b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9c56:	b513      	push	{r0, r1, r4, lr}
   b9c58:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9c5a:	4608      	mov	r0, r1
   b9c5c:	9101      	str	r1, [sp, #4]
   b9c5e:	f7fa fecd 	bl	b49fc <strlen>
   b9c62:	6823      	ldr	r3, [r4, #0]
   b9c64:	9901      	ldr	r1, [sp, #4]
   b9c66:	68db      	ldr	r3, [r3, #12]
   b9c68:	4602      	mov	r2, r0
   b9c6a:	4620      	mov	r0, r4
}
   b9c6c:	b002      	add	sp, #8
   b9c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9c72:	4718      	bx	r3

000b9c74 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9c74:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9c76:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9c78:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9c7c:	68db      	ldr	r3, [r3, #12]
   b9c7e:	2201      	movs	r2, #1
   b9c80:	f10d 0107 	add.w	r1, sp, #7
   b9c84:	4798      	blx	r3
}
   b9c86:	b003      	add	sp, #12
   b9c88:	f85d fb04 	ldr.w	pc, [sp], #4

000b9c8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9c8c:	680a      	ldr	r2, [r1, #0]
   b9c8e:	6002      	str	r2, [r0, #0]
   b9c90:	684a      	ldr	r2, [r1, #4]
   b9c92:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9c94:	2200      	movs	r2, #0
   b9c96:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9c9a:	b510      	push	{r4, lr}
   b9c9c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9c9e:	688c      	ldr	r4, [r1, #8]
   b9ca0:	6084      	str	r4, [r0, #8]
   b9ca2:	68cc      	ldr	r4, [r1, #12]
   b9ca4:	60c4      	str	r4, [r0, #12]
   b9ca6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ca8:	608a      	str	r2, [r1, #8]
   b9caa:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9cac:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9cae:	610a      	str	r2, [r1, #16]
   b9cb0:	bd10      	pop	{r4, pc}
	...

000b9cb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
   b9cb8:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9cbc:	f04f 0a14 	mov.w	sl, #20
   b9cc0:	9300      	str	r3, [sp, #0]
   b9cc2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9cc6:	4b18      	ldr	r3, [pc, #96]	; (b9d28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9cc8:	10a4      	asrs	r4, r4, #2
   b9cca:	4617      	mov	r7, r2
   b9ccc:	435c      	muls	r4, r3
   b9cce:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9cd0:	2c00      	cmp	r4, #0
   b9cd2:	dd21      	ble.n	b9d18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9cd4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9cd6:	fb0a f006 	mul.w	r0, sl, r6
   b9cda:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9cde:	463a      	mov	r2, r7
   b9ce0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9ce4:	5828      	ldr	r0, [r5, r0]
   b9ce6:	9101      	str	r1, [sp, #4]
   b9ce8:	455f      	cmp	r7, fp
   b9cea:	bf28      	it	cs
   b9cec:	465a      	movcs	r2, fp
   b9cee:	f002 fa24 	bl	bc13a <strncmp>
                if (cmp == 0) {
   b9cf2:	2800      	cmp	r0, #0
   b9cf4:	9901      	ldr	r1, [sp, #4]
   b9cf6:	f04f 0301 	mov.w	r3, #1
   b9cfa:	d10b      	bne.n	b9d14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9cfc:	455f      	cmp	r7, fp
   b9cfe:	d103      	bne.n	b9d08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9d00:	9a00      	ldr	r2, [sp, #0]
   b9d02:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9d04:	4634      	mov	r4, r6
   b9d06:	e7e3      	b.n	b9cd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9d08:	d9fc      	bls.n	b9d04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9d0a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9d0c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9d10:	3e01      	subs	r6, #1
   b9d12:	e7f7      	b.n	b9d04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9d14:	dbf9      	blt.n	b9d0a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9d16:	e7f5      	b.n	b9d04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9d18:	eba5 0508 	sub.w	r5, r5, r8
}
   b9d1c:	4802      	ldr	r0, [pc, #8]	; (b9d28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9d1e:	10ad      	asrs	r5, r5, #2
   b9d20:	4368      	muls	r0, r5
   b9d22:	b003      	add	sp, #12
   b9d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d28:	cccccccd 	.word	0xcccccccd

000b9d2c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9d2e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9d30:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9d32:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9d34:	b303      	cbz	r3, b9d78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9d36:	b1f9      	cbz	r1, b9d78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9d38:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9d3a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9d3e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9d40:	a903      	add	r1, sp, #12
   b9d42:	a801      	add	r0, sp, #4
   b9d44:	f7ff ff27 	bl	b9b96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9d48:	4601      	mov	r1, r0
   b9d4a:	b1a8      	cbz	r0, b9d78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d4c:	f10d 030b 	add.w	r3, sp, #11
   b9d50:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9d52:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d56:	4620      	mov	r0, r4
   b9d58:	f7ff ffac 	bl	b9cb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9d5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9d60:	b153      	cbz	r3, b9d78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9d62:	6823      	ldr	r3, [r4, #0]
   b9d64:	2414      	movs	r4, #20
   b9d66:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9d6a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9d6c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9d70:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9d72:	bfa8      	it	ge
   b9d74:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9d76:	e7e3      	b.n	b9d40 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9d78:	4628      	mov	r0, r5
   b9d7a:	b004      	add	sp, #16
   b9d7c:	bd70      	pop	{r4, r5, r6, pc}

000b9d7e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9d7e:	b40e      	push	{r1, r2, r3}
   b9d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d82:	b08c      	sub	sp, #48	; 0x30
   b9d84:	af00      	add	r7, sp, #0
   b9d86:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b9d8a:	4604      	mov	r4, r0
   b9d8c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d90:	607a      	str	r2, [r7, #4]
   b9d92:	462b      	mov	r3, r5
   b9d94:	2120      	movs	r1, #32
   b9d96:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b9d9a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9d9c:	f7fd ffcc 	bl	b7d38 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b9da0:	281f      	cmp	r0, #31
   b9da2:	687a      	ldr	r2, [r7, #4]
   b9da4:	d91a      	bls.n	b9ddc <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b9da6:	f100 0308 	add.w	r3, r0, #8
   b9daa:	f023 0307 	bic.w	r3, r3, #7
        }
   b9dae:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b9db0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9db4:	1c41      	adds	r1, r0, #1
   b9db6:	462b      	mov	r3, r5
   b9db8:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9dba:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9dbc:	f7fd ffbc 	bl	b7d38 <vsnprintf>
        if (n > 0) {
   b9dc0:	1e02      	subs	r2, r0, #0
   b9dc2:	dd04      	ble.n	b9dce <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b9dc4:	6823      	ldr	r3, [r4, #0]
   b9dc6:	4669      	mov	r1, sp
   b9dc8:	68db      	ldr	r3, [r3, #12]
   b9dca:	4620      	mov	r0, r4
   b9dcc:	4798      	blx	r3
   b9dce:	46b5      	mov	sp, r6
}
   b9dd0:	3730      	adds	r7, #48	; 0x30
   b9dd2:	46bd      	mov	sp, r7
   b9dd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9dd8:	b003      	add	sp, #12
   b9dda:	4770      	bx	lr
    } else if (n > 0) {
   b9ddc:	2800      	cmp	r0, #0
   b9dde:	d0f7      	beq.n	b9dd0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b9de0:	6823      	ldr	r3, [r4, #0]
   b9de2:	4602      	mov	r2, r0
   b9de4:	68db      	ldr	r3, [r3, #12]
   b9de6:	f107 0110 	add.w	r1, r7, #16
   b9dea:	4620      	mov	r0, r4
   b9dec:	4798      	blx	r3
}
   b9dee:	e7ef      	b.n	b9dd0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b9df0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9df0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9df2:	4c09      	ldr	r4, [pc, #36]	; (b9e18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9df4:	7823      	ldrb	r3, [r4, #0]
   b9df6:	f3bf 8f5b 	dmb	ish
   b9dfa:	07db      	lsls	r3, r3, #31
   b9dfc:	d409      	bmi.n	b9e12 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9dfe:	4620      	mov	r0, r4
   b9e00:	f7fa fe6c 	bl	b4adc <__cxa_guard_acquire>
   b9e04:	b128      	cbz	r0, b9e12 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9e06:	4620      	mov	r0, r4
   b9e08:	f7fa fe6d 	bl	b4ae6 <__cxa_guard_release>
   b9e0c:	4803      	ldr	r0, [pc, #12]	; (b9e1c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9e0e:	f002 f8ed 	bl	bbfec <atexit>
}
   b9e12:	4803      	ldr	r0, [pc, #12]	; (b9e20 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9e14:	bd10      	pop	{r4, pc}
   b9e16:	bf00      	nop
   b9e18:	2003e6b0 	.word	0x2003e6b0
   b9e1c:	000b9b8f 	.word	0x000b9b8f
   b9e20:	2003e2dc 	.word	0x2003e2dc

000b9e24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9e24:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9e26:	4c09      	ldr	r4, [pc, #36]	; (b9e4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9e28:	7823      	ldrb	r3, [r4, #0]
   b9e2a:	f3bf 8f5b 	dmb	ish
   b9e2e:	07db      	lsls	r3, r3, #31
   b9e30:	d409      	bmi.n	b9e46 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e32:	4620      	mov	r0, r4
   b9e34:	f7fa fe52 	bl	b4adc <__cxa_guard_acquire>
   b9e38:	b128      	cbz	r0, b9e46 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9e3a:	4620      	mov	r0, r4
   b9e3c:	f7fa fe53 	bl	b4ae6 <__cxa_guard_release>
   b9e40:	4803      	ldr	r0, [pc, #12]	; (b9e50 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9e42:	f002 f8d3 	bl	bbfec <atexit>
    return &factory;
}
   b9e46:	4803      	ldr	r0, [pc, #12]	; (b9e54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9e48:	bd10      	pop	{r4, pc}
   b9e4a:	bf00      	nop
   b9e4c:	2003e6b4 	.word	0x2003e6b4
   b9e50:	000b9bf7 	.word	0x000b9bf7
   b9e54:	2003e2e0 	.word	0x2003e2e0

000b9e58 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9e58:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9e5a:	2500      	movs	r5, #0
   b9e5c:	4604      	mov	r4, r0
   b9e5e:	e9c0 5500 	strd	r5, r5, [r0]
   b9e62:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9e66:	6085      	str	r5, [r0, #8]
   b9e68:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9e6a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9e6e:	f7fd fcdf 	bl	b7830 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9e72:	f7ff ffbd 	bl	b9df0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9e76:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9e78:	f7ff ffd4 	bl	b9e24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9e7c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9e7e:	6220      	str	r0, [r4, #32]
}
   b9e80:	4620      	mov	r0, r4
   b9e82:	bd38      	pop	{r3, r4, r5, pc}

000b9e84 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9e84:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9e86:	4c0a      	ldr	r4, [pc, #40]	; (b9eb0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9e88:	7823      	ldrb	r3, [r4, #0]
   b9e8a:	f3bf 8f5b 	dmb	ish
   b9e8e:	07db      	lsls	r3, r3, #31
   b9e90:	d40c      	bmi.n	b9eac <_ZN5spark10LogManager8instanceEv+0x28>
   b9e92:	4620      	mov	r0, r4
   b9e94:	f7fa fe22 	bl	b4adc <__cxa_guard_acquire>
   b9e98:	b140      	cbz	r0, b9eac <_ZN5spark10LogManager8instanceEv+0x28>
   b9e9a:	4806      	ldr	r0, [pc, #24]	; (b9eb4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9e9c:	f7ff ffdc 	bl	b9e58 <_ZN5spark10LogManagerC1Ev>
   b9ea0:	4620      	mov	r0, r4
   b9ea2:	f7fa fe20 	bl	b4ae6 <__cxa_guard_release>
   b9ea6:	4804      	ldr	r0, [pc, #16]	; (b9eb8 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9ea8:	f002 f8a0 	bl	bbfec <atexit>
    return &mgr;
}
   b9eac:	4801      	ldr	r0, [pc, #4]	; (b9eb4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9eae:	bd10      	pop	{r4, pc}
   b9eb0:	2003e6ac 	.word	0x2003e6ac
   b9eb4:	2003e6bc 	.word	0x2003e6bc
   b9eb8:	000ba3d9 	.word	0x000ba3d9

000b9ebc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9ebc:	4a02      	ldr	r2, [pc, #8]	; (b9ec8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9ebe:	4903      	ldr	r1, [pc, #12]	; (b9ecc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9ec0:	4803      	ldr	r0, [pc, #12]	; (b9ed0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9ec2:	2300      	movs	r3, #0
   b9ec4:	f7fd be6c 	b.w	b7ba0 <log_set_callbacks>
   b9ec8:	000ba1bd 	.word	0x000ba1bd
   b9ecc:	000ba149 	.word	0x000ba149
   b9ed0:	000ba0c9 	.word	0x000ba0c9

000b9ed4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9ed4:	2300      	movs	r3, #0
   b9ed6:	461a      	mov	r2, r3
   b9ed8:	4619      	mov	r1, r3
   b9eda:	4618      	mov	r0, r3
   b9edc:	f7fd be60 	b.w	b7ba0 <log_set_callbacks>

000b9ee0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9ee2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9ee4:	4604      	mov	r4, r0
   b9ee6:	4668      	mov	r0, sp
   b9ee8:	f7ff fe9e 	bl	b9c28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9eec:	466a      	mov	r2, sp
   b9eee:	4629      	mov	r1, r5
   b9ef0:	4620      	mov	r0, r4
   b9ef2:	f001 fd39 	bl	bb968 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9ef6:	a801      	add	r0, sp, #4
   b9ef8:	f7fe fd2c 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9efc:	4620      	mov	r0, r4
   b9efe:	b003      	add	sp, #12
   b9f00:	bd30      	pop	{r4, r5, pc}

000b9f02 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9f04:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9f06:	4604      	mov	r4, r0
   b9f08:	4668      	mov	r0, sp
   b9f0a:	f7ff fe8d 	bl	b9c28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9f0e:	466a      	mov	r2, sp
   b9f10:	4629      	mov	r1, r5
   b9f12:	4620      	mov	r0, r4
   b9f14:	f001 fd04 	bl	bb920 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f18:	a801      	add	r0, sp, #4
   b9f1a:	f7fe fd1b 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f1e:	4620      	mov	r0, r4
   b9f20:	b003      	add	sp, #12
   b9f22:	bd30      	pop	{r4, r5, pc}

000b9f24 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9f26:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9f28:	4604      	mov	r4, r0
   b9f2a:	4668      	mov	r0, sp
   b9f2c:	f7ff fe7c 	bl	b9c28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9f30:	466a      	mov	r2, sp
   b9f32:	4629      	mov	r1, r5
   b9f34:	4620      	mov	r0, r4
   b9f36:	f001 fc9c 	bl	bb872 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9f3a:	a801      	add	r0, sp, #4
   b9f3c:	f7fe fd0a 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f40:	4620      	mov	r0, r4
   b9f42:	b003      	add	sp, #12
   b9f44:	bd30      	pop	{r4, r5, pc}
	...

000b9f48 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9f48:	b570      	push	{r4, r5, r6, lr}
   b9f4a:	b08a      	sub	sp, #40	; 0x28
   b9f4c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9f4e:	4601      	mov	r1, r0
   b9f50:	a804      	add	r0, sp, #16
   b9f52:	f7ff ffc5 	bl	b9ee0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9f56:	4e14      	ldr	r6, [pc, #80]	; (b9fa8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9f58:	a804      	add	r0, sp, #16
   b9f5a:	f001 fd1d 	bl	bb998 <_ZN5spark18JSONObjectIterator4nextEv>
   b9f5e:	b1e8      	cbz	r0, b9f9c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9f60:	a904      	add	r1, sp, #16
   b9f62:	4668      	mov	r0, sp
   b9f64:	f7ff ffcd 	bl	b9f02 <_ZNK5spark18JSONObjectIterator4nameEv>
   b9f68:	9802      	ldr	r0, [sp, #8]
   b9f6a:	4631      	mov	r1, r6
   b9f6c:	f7ff fe3c 	bl	b9be8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9f70:	4604      	mov	r4, r0
   b9f72:	b110      	cbz	r0, b9f7a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9f74:	1e2c      	subs	r4, r5, #0
   b9f76:	bf18      	it	ne
   b9f78:	2401      	movne	r4, #1
   b9f7a:	a801      	add	r0, sp, #4
   b9f7c:	f7fe fcea 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f80:	2c00      	cmp	r4, #0
   b9f82:	d0e9      	beq.n	b9f58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9f84:	a904      	add	r1, sp, #16
   b9f86:	4668      	mov	r0, sp
   b9f88:	f7ff ffcc 	bl	b9f24 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9f8c:	4668      	mov	r0, sp
   b9f8e:	f001 fca6 	bl	bb8de <_ZNK5spark9JSONValue5toIntEv>
   b9f92:	6028      	str	r0, [r5, #0]
   b9f94:	a801      	add	r0, sp, #4
   b9f96:	f7fe fcdd 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f9a:	e7dd      	b.n	b9f58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9f9c:	a805      	add	r0, sp, #20
   b9f9e:	f7fe fcd9 	bl	b8954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9fa2:	b00a      	add	sp, #40	; 0x28
   b9fa4:	bd70      	pop	{r4, r5, r6, pc}
   b9fa6:	bf00      	nop
   b9fa8:	000bf348 	.word	0x000bf348

000b9fac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fae:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9fb0:	4620      	mov	r0, r4
   b9fb2:	4913      	ldr	r1, [pc, #76]	; (ba000 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9fb4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9fb6:	f7fa fd17 	bl	b49e8 <strcmp>
   b9fba:	b950      	cbnz	r0, b9fd2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9fbc:	f000 ff4c 	bl	bae58 <_Z16_fetch_usbserialv>
   b9fc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9fc4:	f000 ff38 	bl	bae38 <_ZN9USBSerial5beginEl>
}
   b9fc8:	b003      	add	sp, #12
   b9fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9fce:	f000 bf43 	b.w	bae58 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9fd2:	490c      	ldr	r1, [pc, #48]	; (ba004 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9fd4:	4620      	mov	r0, r4
   b9fd6:	f7fa fd07 	bl	b49e8 <strcmp>
   b9fda:	b978      	cbnz	r0, b9ffc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9fdc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9fe0:	a901      	add	r1, sp, #4
   b9fe2:	4628      	mov	r0, r5
        int baud = 9600;
   b9fe4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9fe6:	f7ff ffaf 	bl	b9f48 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9fea:	f001 fe81 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
   b9fee:	9901      	ldr	r1, [sp, #4]
   b9ff0:	f000 ffae 	bl	baf50 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9ff4:	f001 fe7c 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
}
   b9ff8:	b003      	add	sp, #12
   b9ffa:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9ffc:	2000      	movs	r0, #0
   b9ffe:	e7fb      	b.n	b9ff8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   ba000:	000bf34d 	.word	0x000bf34d
   ba004:	000bf354 	.word	0x000bf354

000ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba008:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba00a:	e9d0 5300 	ldrd	r5, r3, [r0]
   ba00e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba010:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba012:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba016:	42ae      	cmp	r6, r5
   ba018:	d005      	beq.n	ba026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   ba01a:	f105 0008 	add.w	r0, r5, #8
   ba01e:	f7ff fff3 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba022:	3514      	adds	r5, #20
   ba024:	e7f7      	b.n	ba016 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   ba026:	6820      	ldr	r0, [r4, #0]
   ba028:	f7fd fe6e 	bl	b7d08 <free>
}
   ba02c:	4620      	mov	r0, r4
   ba02e:	bd70      	pop	{r4, r5, r6, pc}

000ba030 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   ba030:	b510      	push	{r4, lr}
   ba032:	4604      	mov	r4, r0
   ba034:	300c      	adds	r0, #12
   ba036:	f7ff ffe7 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba03a:	4620      	mov	r0, r4
   ba03c:	f7fe fc22 	bl	b8884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba040:	4620      	mov	r0, r4
   ba042:	bd10      	pop	{r4, pc}

000ba044 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   ba044:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   ba046:	4b04      	ldr	r3, [pc, #16]	; (ba058 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   ba048:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   ba04a:	f840 3b04 	str.w	r3, [r0], #4
   ba04e:	f7ff ffef 	bl	ba030 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   ba052:	4620      	mov	r0, r4
   ba054:	bd10      	pop	{r4, pc}
   ba056:	bf00      	nop
   ba058:	000be23c 	.word	0x000be23c

000ba05c <_ZN5spark16StreamLogHandlerD0Ev>:
   ba05c:	b510      	push	{r4, lr}
   ba05e:	4604      	mov	r4, r0
   ba060:	f7ff fff0 	bl	ba044 <_ZN5spark16StreamLogHandlerD1Ev>
   ba064:	4620      	mov	r0, r4
   ba066:	2124      	movs	r1, #36	; 0x24
   ba068:	f7fa fd29 	bl	b4abe <_ZdlPvj>
   ba06c:	4620      	mov	r0, r4
   ba06e:	bd10      	pop	{r4, pc}

000ba070 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   ba070:	b510      	push	{r4, lr}
   ba072:	4b03      	ldr	r3, [pc, #12]	; (ba080 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   ba074:	6003      	str	r3, [r0, #0]
   ba076:	4604      	mov	r4, r0
   ba078:	f7ff ffe4 	bl	ba044 <_ZN5spark16StreamLogHandlerD1Ev>
   ba07c:	4620      	mov	r0, r4
   ba07e:	bd10      	pop	{r4, pc}
   ba080:	000bf3ec 	.word	0x000bf3ec

000ba084 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   ba084:	b510      	push	{r4, lr}
   ba086:	4604      	mov	r4, r0
   ba088:	f7ff fff2 	bl	ba070 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   ba08c:	4620      	mov	r0, r4
   ba08e:	2124      	movs	r1, #36	; 0x24
   ba090:	f7fa fd15 	bl	b4abe <_ZdlPvj>
   ba094:	4620      	mov	r0, r4
   ba096:	bd10      	pop	{r4, pc}

000ba098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   ba098:	2200      	movs	r2, #0
   ba09a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   ba09e:	b510      	push	{r4, lr}
        capacity_(0) {
   ba0a0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba0a2:	680c      	ldr	r4, [r1, #0]
   ba0a4:	6004      	str	r4, [r0, #0]
   ba0a6:	684c      	ldr	r4, [r1, #4]
   ba0a8:	6044      	str	r4, [r0, #4]
   ba0aa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba0ac:	600a      	str	r2, [r1, #0]
   ba0ae:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba0b0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba0b2:	608a      	str	r2, [r1, #8]
}
   ba0b4:	bd10      	pop	{r4, pc}

000ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   ba0b6:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba0b8:	6803      	ldr	r3, [r0, #0]
   ba0ba:	4604      	mov	r4, r0
   ba0bc:	6818      	ldr	r0, [r3, #0]
   ba0be:	f7fd fbcf 	bl	b7860 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   ba0c2:	4620      	mov	r0, r4
   ba0c4:	bd10      	pop	{r4, pc}
	...

000ba0c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   ba0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0cc:	b087      	sub	sp, #28
   ba0ce:	4680      	mov	r8, r0
   ba0d0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   ba0d2:	4b1c      	ldr	r3, [pc, #112]	; (ba144 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   ba0d4:	685b      	ldr	r3, [r3, #4]
   ba0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba0da:	4689      	mov	r9, r1
   ba0dc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   ba0de:	b96b      	cbnz	r3, ba0fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   ba0e0:	f7ff fed0 	bl	b9e84 <_ZN5spark10LogManager8instanceEv>
   ba0e4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba0e6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   ba0ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba0ec:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   ba0ee:	f7ff fd79 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   ba0f2:	7b23      	ldrb	r3, [r4, #12]
   ba0f4:	b12b      	cbz	r3, ba102 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   ba0f6:	a805      	add	r0, sp, #20
   ba0f8:	f7ff ffdd 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   ba0fc:	b007      	add	sp, #28
   ba0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   ba102:	2301      	movs	r3, #1
   ba104:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   ba106:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   ba10a:	fa5f f989 	uxtb.w	r9, r9
   ba10e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba112:	45aa      	cmp	sl, r5
   ba114:	d012      	beq.n	ba13c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   ba116:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   ba11a:	4631      	mov	r1, r6
   ba11c:	1d38      	adds	r0, r7, #4
   ba11e:	f7ff fe05 	bl	b9d2c <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba122:	4581      	cmp	r9, r0
   ba124:	d3f5      	bcc.n	ba112 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   ba126:	683b      	ldr	r3, [r7, #0]
   ba128:	9a03      	ldr	r2, [sp, #12]
   ba12a:	9200      	str	r2, [sp, #0]
   ba12c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   ba130:	464a      	mov	r2, r9
   ba132:	4633      	mov	r3, r6
   ba134:	4641      	mov	r1, r8
   ba136:	4638      	mov	r0, r7
   ba138:	47d8      	blx	fp
   ba13a:	e7ea      	b.n	ba112 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   ba13c:	2300      	movs	r3, #0
   ba13e:	7323      	strb	r3, [r4, #12]
   ba140:	e7d9      	b.n	ba0f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   ba142:	bf00      	nop
   ba144:	e000ed00 	.word	0xe000ed00

000ba148 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   ba148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba14c:	469b      	mov	fp, r3
   ba14e:	4b1a      	ldr	r3, [pc, #104]	; (ba1b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   ba150:	685b      	ldr	r3, [r3, #4]
   ba152:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba156:	4680      	mov	r8, r0
   ba158:	4689      	mov	r9, r1
   ba15a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   ba15c:	b96b      	cbnz	r3, ba17a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   ba15e:	f7ff fe91 	bl	b9e84 <_ZN5spark10LogManager8instanceEv>
   ba162:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   ba164:	f100 0324 	add.w	r3, r0, #36	; 0x24
   ba168:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba16a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba16c:	f7ff fd3a 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   ba170:	7b23      	ldrb	r3, [r4, #12]
   ba172:	b12b      	cbz	r3, ba180 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   ba174:	a801      	add	r0, sp, #4
   ba176:	f7ff ff9e 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba17a:	b003      	add	sp, #12
   ba17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   ba180:	2301      	movs	r3, #1
   ba182:	7323      	strb	r3, [r4, #12]
   ba184:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ba188:	b2f6      	uxtb	r6, r6
   ba18a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba18e:	4555      	cmp	r5, sl
   ba190:	d00e      	beq.n	ba1b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ba192:	f855 7b04 	ldr.w	r7, [r5], #4
   ba196:	4659      	mov	r1, fp
   ba198:	1d38      	adds	r0, r7, #4
   ba19a:	f7ff fdc7 	bl	b9d2c <_ZNK5spark6detail9LogFilter5levelEPKc>
   ba19e:	4286      	cmp	r6, r0
   ba1a0:	d3f5      	bcc.n	ba18e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ba1a2:	683b      	ldr	r3, [r7, #0]
   ba1a4:	464a      	mov	r2, r9
   ba1a6:	68db      	ldr	r3, [r3, #12]
   ba1a8:	4641      	mov	r1, r8
   ba1aa:	4638      	mov	r0, r7
   ba1ac:	4798      	blx	r3
   ba1ae:	e7ee      	b.n	ba18e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ba1b0:	2300      	movs	r3, #0
   ba1b2:	7323      	strb	r3, [r4, #12]
   ba1b4:	e7de      	b.n	ba174 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ba1b6:	bf00      	nop
   ba1b8:	e000ed00 	.word	0xe000ed00

000ba1bc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ba1bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba1c0:	4b16      	ldr	r3, [pc, #88]	; (ba21c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ba1c2:	685b      	ldr	r3, [r3, #4]
   ba1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ba1c8:	4605      	mov	r5, r0
   ba1ca:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   ba1cc:	bb1b      	cbnz	r3, ba216 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ba1ce:	f7ff fe59 	bl	b9e84 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ba1d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ba1d6:	4604      	mov	r4, r0
   ba1d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba1da:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba1dc:	f7ff fd02 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
   ba1e0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ba1e4:	2446      	movs	r4, #70	; 0x46
   ba1e6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ba1ea:	45b0      	cmp	r8, r6
   ba1ec:	d109      	bne.n	ba202 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ba1ee:	a801      	add	r0, sp, #4
   ba1f0:	f7ff ff61 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ba1f4:	42a5      	cmp	r5, r4
   ba1f6:	bfb4      	ite	lt
   ba1f8:	2000      	movlt	r0, #0
   ba1fa:	2001      	movge	r0, #1
}
   ba1fc:	b002      	add	sp, #8
   ba1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ba202:	f856 0b04 	ldr.w	r0, [r6], #4
   ba206:	4639      	mov	r1, r7
   ba208:	3004      	adds	r0, #4
   ba20a:	f7ff fd8f 	bl	b9d2c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ba20e:	4284      	cmp	r4, r0
   ba210:	bfa8      	it	ge
   ba212:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ba214:	e7e9      	b.n	ba1ea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ba216:	2000      	movs	r0, #0
   ba218:	e7f0      	b.n	ba1fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ba21a:	bf00      	nop
   ba21c:	e000ed00 	.word	0xe000ed00

000ba220 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba222:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   ba226:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba228:	4604      	mov	r4, r0
   ba22a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba22c:	db0d      	blt.n	ba24a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   ba22e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   ba230:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba232:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba234:	dd04      	ble.n	ba240 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   ba236:	00b9      	lsls	r1, r7, #2
   ba238:	f7fd fd6e 	bl	b7d18 <realloc>
            if (!d) {
   ba23c:	b918      	cbnz	r0, ba246 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba240:	f7fd fd62 	bl	b7d08 <free>
        T* d = nullptr;
   ba244:	2000      	movs	r0, #0
        data_ = d;
   ba246:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba248:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba24a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba24c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba24e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba252:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba254:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba258:	1d08      	adds	r0, r1, #4
   ba25a:	f001 feff 	bl	bc05c <memmove>
    new(p) T(std::move(value));
   ba25e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba262:	6863      	ldr	r3, [r4, #4]
   ba264:	3301      	adds	r3, #1
   ba266:	6063      	str	r3, [r4, #4]
    return true;
   ba268:	2001      	movs	r0, #1
   ba26a:	e7e8      	b.n	ba23e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba26c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba26e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba272:	4604      	mov	r4, r0
   ba274:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba276:	9301      	str	r3, [sp, #4]
   ba278:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba27a:	f7ff fcb3 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba27e:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba282:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba286:	4293      	cmp	r3, r2
   ba288:	4619      	mov	r1, r3
   ba28a:	d00b      	beq.n	ba2a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba28c:	6809      	ldr	r1, [r1, #0]
   ba28e:	42a9      	cmp	r1, r5
   ba290:	f103 0304 	add.w	r3, r3, #4
   ba294:	d1f7      	bne.n	ba286 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba296:	a801      	add	r0, sp, #4
   ba298:	f7ff ff0d 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba29c:	2500      	movs	r5, #0
}
   ba29e:	4628      	mov	r0, r5
   ba2a0:	b003      	add	sp, #12
   ba2a2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba2a4:	4629      	mov	r1, r5
   ba2a6:	4620      	mov	r0, r4
   ba2a8:	f7ff ffba 	bl	ba220 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba2ac:	4605      	mov	r5, r0
   ba2ae:	2800      	cmp	r0, #0
   ba2b0:	d0f1      	beq.n	ba296 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba2b2:	6863      	ldr	r3, [r4, #4]
   ba2b4:	2b01      	cmp	r3, #1
   ba2b6:	d101      	bne.n	ba2bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba2b8:	f7ff fe00 	bl	b9ebc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba2bc:	a801      	add	r0, sp, #4
   ba2be:	f7ff fefa 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba2c2:	e7ec      	b.n	ba29e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba2c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba2c4:	b570      	push	{r4, r5, r6, lr}
   ba2c6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba2c8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba2cc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba2ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba2d2:	4282      	cmp	r2, r0
   ba2d4:	d00f      	beq.n	ba2f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba2d6:	4601      	mov	r1, r0
            if (*p == value) {
   ba2d8:	681d      	ldr	r5, [r3, #0]
   ba2da:	f851 6b04 	ldr.w	r6, [r1], #4
   ba2de:	42ae      	cmp	r6, r5
   ba2e0:	d107      	bne.n	ba2f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba2e2:	1a52      	subs	r2, r2, r1
   ba2e4:	f001 feba 	bl	bc05c <memmove>
    --size_;
   ba2e8:	6863      	ldr	r3, [r4, #4]
   ba2ea:	3b01      	subs	r3, #1
   ba2ec:	6063      	str	r3, [r4, #4]
    return true;
   ba2ee:	2001      	movs	r0, #1
}
   ba2f0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba2f2:	4608      	mov	r0, r1
   ba2f4:	e7ed      	b.n	ba2d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba2f6:	2000      	movs	r0, #0
   ba2f8:	e7fa      	b.n	ba2f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba2fa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba2fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba2fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba300:	4604      	mov	r4, r0
   ba302:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba304:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba306:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba308:	f7ff fc6c 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba30c:	a901      	add	r1, sp, #4
   ba30e:	4620      	mov	r0, r4
   ba310:	f7ff ffd8 	bl	ba2c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba314:	b118      	cbz	r0, ba31e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba316:	6863      	ldr	r3, [r4, #4]
   ba318:	b90b      	cbnz	r3, ba31e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba31a:	f7ff fddb 	bl	b9ed4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba31e:	a803      	add	r0, sp, #12
   ba320:	f7ff fec9 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba324:	b004      	add	sp, #16
   ba326:	bd10      	pop	{r4, pc}

000ba328 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba328:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba32a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba32e:	2318      	movs	r3, #24
   ba330:	4604      	mov	r4, r0
   ba332:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba336:	42ae      	cmp	r6, r5
   ba338:	d015      	beq.n	ba366 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba33a:	f105 0110 	add.w	r1, r5, #16
   ba33e:	4620      	mov	r0, r4
   ba340:	f7ff ffc0 	bl	ba2c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba344:	6863      	ldr	r3, [r4, #4]
   ba346:	b90b      	cbnz	r3, ba34c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba348:	f7ff fdc4 	bl	b9ed4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba34c:	69e0      	ldr	r0, [r4, #28]
   ba34e:	6929      	ldr	r1, [r5, #16]
   ba350:	6803      	ldr	r3, [r0, #0]
   ba352:	68db      	ldr	r3, [r3, #12]
   ba354:	4798      	blx	r3
        if (h.stream) {
   ba356:	6969      	ldr	r1, [r5, #20]
   ba358:	b119      	cbz	r1, ba362 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba35a:	6a20      	ldr	r0, [r4, #32]
   ba35c:	6803      	ldr	r3, [r0, #0]
   ba35e:	68db      	ldr	r3, [r3, #12]
   ba360:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba362:	3518      	adds	r5, #24
   ba364:	e7e7      	b.n	ba336 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba366:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba36a:	2618      	movs	r6, #24
   ba36c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba370:	42ae      	cmp	r6, r5
   ba372:	d004      	beq.n	ba37e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba374:	4628      	mov	r0, r5
   ba376:	f7fd fe5d 	bl	b8034 <_ZN6StringD1Ev>
   ba37a:	3518      	adds	r5, #24
   ba37c:	e7f8      	b.n	ba370 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba37e:	2300      	movs	r3, #0
   ba380:	6163      	str	r3, [r4, #20]
}
   ba382:	bd70      	pop	{r4, r5, r6, pc}

000ba384 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba384:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba386:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba388:	f7ff fda4 	bl	b9ed4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba38c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba390:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba392:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba394:	f7ff fc26 	bl	b9be4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba398:	4620      	mov	r0, r4
   ba39a:	f7ff ffc5 	bl	ba328 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba39e:	a801      	add	r0, sp, #4
   ba3a0:	f7ff fe89 	bl	ba0b6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba3a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba3a6:	b108      	cbz	r0, ba3ac <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba3a8:	f7fd fa4a 	bl	b7840 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba3ac:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba3b0:	2618      	movs	r6, #24
   ba3b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba3b6:	42ae      	cmp	r6, r5
   ba3b8:	d004      	beq.n	ba3c4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba3ba:	4628      	mov	r0, r5
   ba3bc:	f7fd fe3a 	bl	b8034 <_ZN6StringD1Ev>
   ba3c0:	3518      	adds	r5, #24
   ba3c2:	e7f8      	b.n	ba3b6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba3c4:	6920      	ldr	r0, [r4, #16]
   ba3c6:	f7fd fc9f 	bl	b7d08 <free>
   ba3ca:	6820      	ldr	r0, [r4, #0]
   ba3cc:	f7fd fc9c 	bl	b7d08 <free>
}
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	b002      	add	sp, #8
   ba3d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba3d8 <__tcf_2>:
    static LogManager mgr;
   ba3d8:	4801      	ldr	r0, [pc, #4]	; (ba3e0 <__tcf_2+0x8>)
   ba3da:	f7ff bfd3 	b.w	ba384 <_ZN5spark10LogManagerD1Ev>
   ba3de:	bf00      	nop
   ba3e0:	2003e6bc 	.word	0x2003e6bc

000ba3e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba3e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba3e8:	4604      	mov	r4, r0
   ba3ea:	460d      	mov	r5, r1
   ba3ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba3ee:	d915      	bls.n	ba41c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba3f0:	4290      	cmp	r0, r2
   ba3f2:	d214      	bcs.n	ba41e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba3f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba3f8:	1a75      	subs	r5, r6, r1
   ba3fa:	f1a1 0714 	sub.w	r7, r1, #20
   ba3fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba400:	42b7      	cmp	r7, r6
   ba402:	d01a      	beq.n	ba43a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba404:	b11c      	cbz	r4, ba40e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba406:	4631      	mov	r1, r6
   ba408:	4620      	mov	r0, r4
   ba40a:	f7ff fc3f 	bl	b9c8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba40e:	f106 0008 	add.w	r0, r6, #8
   ba412:	f7ff fdf9 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba416:	3e14      	subs	r6, #20
   ba418:	3c14      	subs	r4, #20
   ba41a:	e7f1      	b.n	ba400 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba41c:	d00d      	beq.n	ba43a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba41e:	42b5      	cmp	r5, r6
   ba420:	d00b      	beq.n	ba43a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba422:	b11c      	cbz	r4, ba42c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba424:	4629      	mov	r1, r5
   ba426:	4620      	mov	r0, r4
   ba428:	f7ff fc30 	bl	b9c8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba42c:	f105 0008 	add.w	r0, r5, #8
   ba430:	f7ff fdea 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba434:	3514      	adds	r5, #20
   ba436:	3414      	adds	r4, #20
   ba438:	e7f1      	b.n	ba41e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba43c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba43c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba440:	4604      	mov	r4, r0
   ba442:	460d      	mov	r5, r1
   ba444:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba446:	d914      	bls.n	ba472 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba448:	4290      	cmp	r0, r2
   ba44a:	d213      	bcs.n	ba474 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba44c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba450:	1a75      	subs	r5, r6, r1
   ba452:	f1a1 0710 	sub.w	r7, r1, #16
   ba456:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba458:	42b7      	cmp	r7, r6
   ba45a:	d018      	beq.n	ba48e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba45c:	b11c      	cbz	r4, ba466 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba45e:	4631      	mov	r1, r6
   ba460:	4620      	mov	r0, r4
   ba462:	f7fd fe63 	bl	b812c <_ZN6StringC1EOS_>
                end->~T();
   ba466:	4630      	mov	r0, r6
   ba468:	f7fd fde4 	bl	b8034 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba46c:	3e10      	subs	r6, #16
   ba46e:	3c10      	subs	r4, #16
   ba470:	e7f2      	b.n	ba458 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba472:	d00c      	beq.n	ba48e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba474:	42b5      	cmp	r5, r6
   ba476:	d00a      	beq.n	ba48e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba478:	b11c      	cbz	r4, ba482 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba47a:	4629      	mov	r1, r5
   ba47c:	4620      	mov	r0, r4
   ba47e:	f7fd fe55 	bl	b812c <_ZN6StringC1EOS_>
                p->~T();
   ba482:	4628      	mov	r0, r5
   ba484:	f7fd fdd6 	bl	b8034 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba488:	3510      	adds	r5, #16
   ba48a:	3410      	adds	r4, #16
   ba48c:	e7f2      	b.n	ba474 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba490 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba490:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba492:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba494:	4605      	mov	r5, r0
        if (n > 0) {
   ba496:	dd11      	ble.n	ba4bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba498:	0130      	lsls	r0, r6, #4
   ba49a:	f7fd fc2d 	bl	b7cf8 <malloc>
            if (!d) {
   ba49e:	4604      	mov	r4, r0
   ba4a0:	b158      	cbz	r0, ba4ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba4a2:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba4a6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba4aa:	f7ff ffc7 	bl	ba43c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba4ae:	6828      	ldr	r0, [r5, #0]
   ba4b0:	f7fd fc2a 	bl	b7d08 <free>
        data_ = d;
   ba4b4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba4b6:	60ae      	str	r6, [r5, #8]
        return true;
   ba4b8:	2001      	movs	r0, #1
    }
   ba4ba:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba4bc:	2400      	movs	r4, #0
   ba4be:	e7f6      	b.n	ba4ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba4c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4c4:	4690      	mov	r8, r2
   ba4c6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba4c8:	2300      	movs	r3, #0
   ba4ca:	9103      	str	r1, [sp, #12]
    return size_;
   ba4cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba4d0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba4d2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba4d4:	4299      	cmp	r1, r3
        capacity_(0) {
   ba4d6:	e9c0 3300 	strd	r3, r3, [r0]
   ba4da:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba4e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba4e6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba4e8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba4ea:	dc23      	bgt.n	ba534 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba4ec:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba4f0:	2314      	movs	r3, #20
   ba4f2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba4f6:	42af      	cmp	r7, r5
   ba4f8:	d03b      	beq.n	ba572 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba4fa:	4629      	mov	r1, r5
   ba4fc:	a80b      	add	r0, sp, #44	; 0x2c
   ba4fe:	f7fd fe15 	bl	b812c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba502:	a90b      	add	r1, sp, #44	; 0x2c
   ba504:	a80f      	add	r0, sp, #60	; 0x3c
   ba506:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba508:	f7fd fe10 	bl	b812c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba50c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba510:	4299      	cmp	r1, r3
   ba512:	da1b      	bge.n	ba54c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba514:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba516:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba518:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba51c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba520:	4631      	mov	r1, r6
   ba522:	f106 0010 	add.w	r0, r6, #16
   ba526:	f7ff ff89 	bl	ba43c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba52a:	b9ee      	cbnz	r6, ba568 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba52e:	3301      	adds	r3, #1
   ba530:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba532:	e011      	b.n	ba558 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba534:	a808      	add	r0, sp, #32
   ba536:	f7ff ffab 	bl	ba490 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba53a:	2800      	cmp	r0, #0
   ba53c:	d1d6      	bne.n	ba4ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba53e:	a808      	add	r0, sp, #32
   ba540:	f7fe f9a0 	bl	b8884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba544:	4620      	mov	r0, r4
   ba546:	b015      	add	sp, #84	; 0x54
   ba548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba54c:	3101      	adds	r1, #1
   ba54e:	a808      	add	r0, sp, #32
   ba550:	f7ff ff9e 	bl	ba490 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba554:	2800      	cmp	r0, #0
   ba556:	d1dd      	bne.n	ba514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba558:	a80f      	add	r0, sp, #60	; 0x3c
   ba55a:	f7fd fd6b 	bl	b8034 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba55e:	a80b      	add	r0, sp, #44	; 0x2c
   ba560:	f7fd fd68 	bl	b8034 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba564:	3514      	adds	r5, #20
   ba566:	e7c6      	b.n	ba4f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba568:	a90f      	add	r1, sp, #60	; 0x3c
   ba56a:	4630      	mov	r0, r6
   ba56c:	f7fd fdde 	bl	b812c <_ZN6StringC1EOS_>
   ba570:	e7dc      	b.n	ba52c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba572:	2600      	movs	r6, #0
   ba574:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba578:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba57a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba57e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba582:	429e      	cmp	r6, r3
   ba584:	da7c      	bge.n	ba680 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba586:	0133      	lsls	r3, r6, #4
   ba588:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba58a:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba58c:	b90b      	cbnz	r3, ba592 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba58e:	3601      	adds	r6, #1
   ba590:	e7f5      	b.n	ba57e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba592:	2300      	movs	r3, #0
   ba594:	9307      	str	r3, [sp, #28]
   ba596:	fb09 f306 	mul.w	r3, r9, r6
   ba59a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba59c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba59e:	a907      	add	r1, sp, #28
   ba5a0:	a806      	add	r0, sp, #24
   ba5a2:	f7ff faf8 	bl	b9b96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba5a6:	4682      	mov	sl, r0
   ba5a8:	2800      	cmp	r0, #0
   ba5aa:	d0f0      	beq.n	ba58e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba5ac:	f04f 0300 	mov.w	r3, #0
   ba5b0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba5b4:	4601      	mov	r1, r0
   ba5b6:	9a07      	ldr	r2, [sp, #28]
   ba5b8:	f10d 0317 	add.w	r3, sp, #23
   ba5bc:	4628      	mov	r0, r5
   ba5be:	f7ff fb79 	bl	b9cb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba5c2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba5c6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba5c8:	2f00      	cmp	r7, #0
   ba5ca:	d14a      	bne.n	ba662 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba5cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba5d0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba5d4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba5d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba5dc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba5e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba5e4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba5e6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba5ea:	4293      	cmp	r3, r2
   ba5ec:	db17      	blt.n	ba61e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba5ee:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba5f2:	f1ba 0f00 	cmp.w	sl, #0
   ba5f6:	dd30      	ble.n	ba65a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba5f8:	fb09 f00a 	mul.w	r0, r9, sl
   ba5fc:	f7fd fb7c 	bl	b7cf8 <malloc>
            if (!d) {
   ba600:	4683      	mov	fp, r0
   ba602:	b360      	cbz	r0, ba65e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba604:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba608:	fb09 1202 	mla	r2, r9, r2, r1
   ba60c:	f7ff feea 	bl	ba3e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba610:	6828      	ldr	r0, [r5, #0]
   ba612:	f7fd fb79 	bl	b7d08 <free>
        data_ = d;
   ba616:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba61a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba61e:	682b      	ldr	r3, [r5, #0]
   ba620:	9a01      	ldr	r2, [sp, #4]
   ba622:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba626:	686a      	ldr	r2, [r5, #4]
   ba628:	4651      	mov	r1, sl
   ba62a:	fb09 3202 	mla	r2, r9, r2, r3
   ba62e:	f10a 0014 	add.w	r0, sl, #20
   ba632:	f7ff fed7 	bl	ba3e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba636:	f1ba 0f00 	cmp.w	sl, #0
   ba63a:	d003      	beq.n	ba644 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba63c:	a90f      	add	r1, sp, #60	; 0x3c
   ba63e:	4650      	mov	r0, sl
   ba640:	f7ff fb24 	bl	b9c8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba644:	686b      	ldr	r3, [r5, #4]
   ba646:	3301      	adds	r3, #1
   ba648:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba64a:	a811      	add	r0, sp, #68	; 0x44
   ba64c:	f7ff fcdc 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba650:	b13f      	cbz	r7, ba662 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba652:	a80b      	add	r0, sp, #44	; 0x2c
   ba654:	f7ff fcd8 	bl	ba008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba658:	e771      	b.n	ba53e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba65a:	46bb      	mov	fp, r7
   ba65c:	e7d8      	b.n	ba610 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba65e:	2701      	movs	r7, #1
   ba660:	e7f3      	b.n	ba64a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba662:	9b01      	ldr	r3, [sp, #4]
   ba664:	682d      	ldr	r5, [r5, #0]
   ba666:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba66a:	9b06      	ldr	r3, [sp, #24]
   ba66c:	781b      	ldrb	r3, [r3, #0]
   ba66e:	b92b      	cbnz	r3, ba67c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba670:	f8d8 3000 	ldr.w	r3, [r8]
   ba674:	9a02      	ldr	r2, [sp, #8]
   ba676:	4413      	add	r3, r2
   ba678:	7c1b      	ldrb	r3, [r3, #16]
   ba67a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba67c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba67e:	e78e      	b.n	ba59e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba680:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba682:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba684:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba686:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba688:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba68a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba68e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba690:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba692:	60a2      	str	r2, [r4, #8]
   ba694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba696:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba698:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba69a:	60e2      	str	r2, [r4, #12]
   ba69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba69e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6a0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba6a2:	6122      	str	r2, [r4, #16]
   ba6a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba6a6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba6a8:	9b03      	ldr	r3, [sp, #12]
   ba6aa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba6ac:	6162      	str	r2, [r4, #20]
   ba6ae:	7623      	strb	r3, [r4, #24]
   ba6b0:	e7cf      	b.n	ba652 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba6b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba6b6:	4604      	mov	r4, r0
   ba6b8:	b087      	sub	sp, #28
   ba6ba:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba6bc:	4626      	mov	r6, r4
        stream_(&stream) {
   ba6be:	4619      	mov	r1, r3
   ba6c0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba6c2:	4617      	mov	r7, r2
        stream_(&stream) {
   ba6c4:	f7fa fbd1 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba6c8:	4b0b      	ldr	r3, [pc, #44]	; (ba6f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba6ca:	f846 3b04 	str.w	r3, [r6], #4
   ba6ce:	4669      	mov	r1, sp
   ba6d0:	a803      	add	r0, sp, #12
   ba6d2:	f7fa fbca 	bl	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba6d6:	aa03      	add	r2, sp, #12
   ba6d8:	4639      	mov	r1, r7
   ba6da:	4630      	mov	r0, r6
   ba6dc:	f7ff fef0 	bl	ba4c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba6e0:	a803      	add	r0, sp, #12
   ba6e2:	f7fa fb77 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba6e6:	4668      	mov	r0, sp
   ba6e8:	f7fa fb74 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba6ec:	4b03      	ldr	r3, [pc, #12]	; (ba6fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba6ee:	6023      	str	r3, [r4, #0]
}
   ba6f0:	4620      	mov	r0, r4
        stream_(&stream) {
   ba6f2:	6225      	str	r5, [r4, #32]
}
   ba6f4:	b007      	add	sp, #28
   ba6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba6f8:	000be23c 	.word	0x000be23c
   ba6fc:	000bf3d4 	.word	0x000bf3d4

000ba700 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba700:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba702:	460f      	mov	r7, r1
   ba704:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba706:	491d      	ldr	r1, [pc, #116]	; (ba77c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba70a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba70c:	4616      	mov	r6, r2
   ba70e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba710:	f7fa f96a 	bl	b49e8 <strcmp>
   ba714:	b9c0      	cbnz	r0, ba748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba716:	b1a4      	cbz	r4, ba742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba718:	4629      	mov	r1, r5
   ba71a:	a801      	add	r0, sp, #4
   ba71c:	f7ff fcbc 	bl	ba098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba720:	4917      	ldr	r1, [pc, #92]	; (ba780 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba722:	2024      	movs	r0, #36	; 0x24
   ba724:	f001 fb48 	bl	bbdb8 <_ZnwjRKSt9nothrow_t>
   ba728:	4605      	mov	r5, r0
   ba72a:	b130      	cbz	r0, ba73a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba72c:	ab01      	add	r3, sp, #4
   ba72e:	4632      	mov	r2, r6
   ba730:	4621      	mov	r1, r4
   ba732:	f7ff ffbf 	bl	ba6b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba736:	4b13      	ldr	r3, [pc, #76]	; (ba784 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba738:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba73a:	a801      	add	r0, sp, #4
   ba73c:	f7fa fb4a 	bl	b4dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba740:	462c      	mov	r4, r5
}
   ba742:	4620      	mov	r0, r4
   ba744:	b005      	add	sp, #20
   ba746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba748:	490f      	ldr	r1, [pc, #60]	; (ba788 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba74a:	4638      	mov	r0, r7
   ba74c:	f7fa f94c 	bl	b49e8 <strcmp>
   ba750:	b990      	cbnz	r0, ba778 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba752:	2c00      	cmp	r4, #0
   ba754:	d0f5      	beq.n	ba742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba756:	4629      	mov	r1, r5
   ba758:	a801      	add	r0, sp, #4
   ba75a:	f7ff fc9d 	bl	ba098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba75e:	4908      	ldr	r1, [pc, #32]	; (ba780 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba760:	2024      	movs	r0, #36	; 0x24
   ba762:	f001 fb29 	bl	bbdb8 <_ZnwjRKSt9nothrow_t>
   ba766:	4605      	mov	r5, r0
   ba768:	2800      	cmp	r0, #0
   ba76a:	d0e6      	beq.n	ba73a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba76c:	ab01      	add	r3, sp, #4
   ba76e:	4632      	mov	r2, r6
   ba770:	4621      	mov	r1, r4
   ba772:	f7ff ff9f 	bl	ba6b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba776:	e7e0      	b.n	ba73a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba778:	2400      	movs	r4, #0
   ba77a:	e7e2      	b.n	ba742 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba77c:	000bf35c 	.word	0x000bf35c
   ba780:	000bf5e5 	.word	0x000bf5e5
   ba784:	000bf3ec 	.word	0x000bf3ec
   ba788:	000bf360 	.word	0x000bf360

000ba78c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba78c:	4b01      	ldr	r3, [pc, #4]	; (ba794 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba78e:	4a02      	ldr	r2, [pc, #8]	; (ba798 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba790:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba792:	4770      	bx	lr
   ba794:	2003e6b8 	.word	0x2003e6b8
   ba798:	000bf371 	.word	0x000bf371

000ba79c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba7a0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba7a2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba7a6:	4604      	mov	r4, r0
   ba7a8:	460e      	mov	r6, r1
   ba7aa:	4617      	mov	r7, r2
   ba7ac:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba7ae:	f000 fb53 	bl	bae58 <_Z16_fetch_usbserialv>
   ba7b2:	4581      	cmp	r9, r0
   ba7b4:	d04c      	beq.n	ba850 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba7b6:	792b      	ldrb	r3, [r5, #4]
   ba7b8:	0719      	lsls	r1, r3, #28
   ba7ba:	d504      	bpl.n	ba7c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba7bc:	696a      	ldr	r2, [r5, #20]
   ba7be:	4954      	ldr	r1, [pc, #336]	; (ba910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba7c0:	4620      	mov	r0, r4
   ba7c2:	f7ff fadc 	bl	b9d7e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba7c6:	f1b8 0f00 	cmp.w	r8, #0
   ba7ca:	d00d      	beq.n	ba7e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba7cc:	215b      	movs	r1, #91	; 0x5b
   ba7ce:	4620      	mov	r0, r4
   ba7d0:	f7ff fa50 	bl	b9c74 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba7d4:	4641      	mov	r1, r8
   ba7d6:	4620      	mov	r0, r4
   ba7d8:	f7ff fa3d 	bl	b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba7dc:	6823      	ldr	r3, [r4, #0]
   ba7de:	494d      	ldr	r1, [pc, #308]	; (ba914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba7e0:	68db      	ldr	r3, [r3, #12]
   ba7e2:	2202      	movs	r2, #2
   ba7e4:	4620      	mov	r0, r4
   ba7e6:	4798      	blx	r3
    if (attr.has_file) {
   ba7e8:	792b      	ldrb	r3, [r5, #4]
   ba7ea:	07da      	lsls	r2, r3, #31
   ba7ec:	d523      	bpl.n	ba836 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba7ee:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba7f2:	212f      	movs	r1, #47	; 0x2f
   ba7f4:	4640      	mov	r0, r8
   ba7f6:	f001 fcd3 	bl	bc1a0 <strrchr>
    if (s1) {
   ba7fa:	b108      	cbz	r0, ba800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba7fc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba800:	4641      	mov	r1, r8
   ba802:	4620      	mov	r0, r4
   ba804:	f7ff fa27 	bl	b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba808:	792b      	ldrb	r3, [r5, #4]
   ba80a:	079b      	lsls	r3, r3, #30
   ba80c:	d508      	bpl.n	ba820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba80e:	213a      	movs	r1, #58	; 0x3a
   ba810:	4620      	mov	r0, r4
   ba812:	f7ff fa2f 	bl	b9c74 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba816:	68ea      	ldr	r2, [r5, #12]
   ba818:	493f      	ldr	r1, [pc, #252]	; (ba918 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba81a:	4620      	mov	r0, r4
   ba81c:	f7ff faaf 	bl	b9d7e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba820:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba822:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba824:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba828:	68db      	ldr	r3, [r3, #12]
   ba82a:	bf14      	ite	ne
   ba82c:	493b      	ldrne	r1, [pc, #236]	; (ba91c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba82e:	493c      	ldreq	r1, [pc, #240]	; (ba920 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba830:	2202      	movs	r2, #2
            write(": ", 2);
   ba832:	4620      	mov	r0, r4
   ba834:	4798      	blx	r3
    if (attr.has_function) {
   ba836:	792b      	ldrb	r3, [r5, #4]
   ba838:	0758      	lsls	r0, r3, #29
   ba83a:	d51d      	bpl.n	ba878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba83c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba83e:	460b      	mov	r3, r1
   ba840:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba842:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba846:	b160      	cbz	r0, ba862 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba848:	2820      	cmp	r0, #32
   ba84a:	d108      	bne.n	ba85e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba84c:	4619      	mov	r1, r3
   ba84e:	e7f7      	b.n	ba840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba850:	4834      	ldr	r0, [pc, #208]	; (ba924 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba852:	f000 ff26 	bl	bb6a2 <_ZN5spark12NetworkClass9listeningEv>
   ba856:	2800      	cmp	r0, #0
   ba858:	d0ad      	beq.n	ba7b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba85e:	2828      	cmp	r0, #40	; 0x28
   ba860:	d1ee      	bne.n	ba840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba862:	6823      	ldr	r3, [r4, #0]
   ba864:	1a52      	subs	r2, r2, r1
   ba866:	68db      	ldr	r3, [r3, #12]
   ba868:	4620      	mov	r0, r4
   ba86a:	4798      	blx	r3
        write("(): ", 4);
   ba86c:	6823      	ldr	r3, [r4, #0]
   ba86e:	492e      	ldr	r1, [pc, #184]	; (ba928 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba870:	68db      	ldr	r3, [r3, #12]
   ba872:	2204      	movs	r2, #4
   ba874:	4620      	mov	r0, r4
   ba876:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba878:	2100      	movs	r1, #0
   ba87a:	4638      	mov	r0, r7
   ba87c:	f7fd f988 	bl	b7b90 <log_level_name>
   ba880:	4601      	mov	r1, r0
    write(s);
   ba882:	4620      	mov	r0, r4
   ba884:	f7ff f9e7 	bl	b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba888:	6823      	ldr	r3, [r4, #0]
   ba88a:	4925      	ldr	r1, [pc, #148]	; (ba920 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba88c:	68db      	ldr	r3, [r3, #12]
   ba88e:	2202      	movs	r2, #2
   ba890:	4620      	mov	r0, r4
   ba892:	4798      	blx	r3
    if (msg) {
   ba894:	b11e      	cbz	r6, ba89e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba896:	4631      	mov	r1, r6
   ba898:	4620      	mov	r0, r4
   ba89a:	f7ff f9dc 	bl	b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba89e:	792b      	ldrb	r3, [r5, #4]
   ba8a0:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba8a4:	d02c      	beq.n	ba900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba8a6:	6823      	ldr	r3, [r4, #0]
   ba8a8:	4920      	ldr	r1, [pc, #128]	; (ba92c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba8aa:	68db      	ldr	r3, [r3, #12]
   ba8ac:	2202      	movs	r2, #2
   ba8ae:	4620      	mov	r0, r4
   ba8b0:	4798      	blx	r3
        if (attr.has_code) {
   ba8b2:	792b      	ldrb	r3, [r5, #4]
   ba8b4:	06d9      	lsls	r1, r3, #27
   ba8b6:	d50a      	bpl.n	ba8ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba8b8:	6823      	ldr	r3, [r4, #0]
   ba8ba:	491d      	ldr	r1, [pc, #116]	; (ba930 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba8bc:	68db      	ldr	r3, [r3, #12]
   ba8be:	2207      	movs	r2, #7
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba8c4:	69aa      	ldr	r2, [r5, #24]
   ba8c6:	491b      	ldr	r1, [pc, #108]	; (ba934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	f7ff fa58 	bl	b9d7e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba8ce:	792b      	ldrb	r3, [r5, #4]
   ba8d0:	069a      	lsls	r2, r3, #26
   ba8d2:	d511      	bpl.n	ba8f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba8d4:	06db      	lsls	r3, r3, #27
   ba8d6:	d505      	bpl.n	ba8e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba8d8:	6823      	ldr	r3, [r4, #0]
   ba8da:	4910      	ldr	r1, [pc, #64]	; (ba91c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba8dc:	68db      	ldr	r3, [r3, #12]
   ba8de:	2202      	movs	r2, #2
   ba8e0:	4620      	mov	r0, r4
   ba8e2:	4798      	blx	r3
            write("details = ", 10);
   ba8e4:	6823      	ldr	r3, [r4, #0]
   ba8e6:	4914      	ldr	r1, [pc, #80]	; (ba938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba8e8:	68db      	ldr	r3, [r3, #12]
   ba8ea:	4620      	mov	r0, r4
   ba8ec:	220a      	movs	r2, #10
   ba8ee:	4798      	blx	r3
            write(attr.details);
   ba8f0:	69e9      	ldr	r1, [r5, #28]
   ba8f2:	4620      	mov	r0, r4
   ba8f4:	f7ff f9af 	bl	b9c56 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba8f8:	215d      	movs	r1, #93	; 0x5d
   ba8fa:	4620      	mov	r0, r4
   ba8fc:	f7ff f9ba 	bl	b9c74 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba900:	6823      	ldr	r3, [r4, #0]
   ba902:	490e      	ldr	r1, [pc, #56]	; (ba93c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba904:	68db      	ldr	r3, [r3, #12]
   ba906:	4620      	mov	r0, r4
   ba908:	2202      	movs	r2, #2
}
   ba90a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba90e:	4718      	bx	r3
   ba910:	000bf375 	.word	0x000bf375
   ba914:	000bf37c 	.word	0x000bf37c
   ba918:	000bf4f8 	.word	0x000bf4f8
   ba91c:	000bf37f 	.word	0x000bf37f
   ba920:	000be18b 	.word	0x000be18b
   ba924:	2003e720 	.word	0x2003e720
   ba928:	000bf382 	.word	0x000bf382
   ba92c:	000bf387 	.word	0x000bf387
   ba930:	000bf38a 	.word	0x000bf38a
   ba934:	000be15a 	.word	0x000be15a
   ba938:	000bf392 	.word	0x000bf392
   ba93c:	000bf39d 	.word	0x000bf39d

000ba940 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   ba940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba944:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   ba946:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   ba948:	460d      	mov	r5, r1
   ba94a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   ba94c:	f000 fa84 	bl	bae58 <_Z16_fetch_usbserialv>
   ba950:	4287      	cmp	r7, r0
   ba952:	d007      	beq.n	ba964 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   ba954:	6a20      	ldr	r0, [r4, #32]
   ba956:	6803      	ldr	r3, [r0, #0]
   ba958:	4632      	mov	r2, r6
   ba95a:	4629      	mov	r1, r5
   ba95c:	68db      	ldr	r3, [r3, #12]
}
   ba95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   ba962:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   ba964:	4803      	ldr	r0, [pc, #12]	; (ba974 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   ba966:	f000 fe9c 	bl	bb6a2 <_ZN5spark12NetworkClass9listeningEv>
   ba96a:	2800      	cmp	r0, #0
   ba96c:	d0f2      	beq.n	ba954 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   ba96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba972:	bf00      	nop
   ba974:	2003e720 	.word	0x2003e720

000ba978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba97c:	b085      	sub	sp, #20
    return stream_;
   ba97e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba984:	4605      	mov	r5, r0
   ba986:	460f      	mov	r7, r1
   ba988:	4690      	mov	r8, r2
   ba98a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba98c:	f000 fa64 	bl	bae58 <_Z16_fetch_usbserialv>
   ba990:	4581      	cmp	r9, r0
   ba992:	d105      	bne.n	ba9a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba994:	4849      	ldr	r0, [pc, #292]	; (baabc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba996:	f000 fe84 	bl	bb6a2 <_ZN5spark12NetworkClass9listeningEv>
   ba99a:	2800      	cmp	r0, #0
   ba99c:	f040 808a 	bne.w	baab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba9a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba9a2:	4a47      	ldr	r2, [pc, #284]	; (baac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba9a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba9a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba9aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba9ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba9ae:	f88d 9008 	strb.w	r9, [sp, #8]
   ba9b2:	f001 f81a 	bl	bb9ea <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba9b6:	4649      	mov	r1, r9
   ba9b8:	4640      	mov	r0, r8
   ba9ba:	f7fd f8e9 	bl	b7b90 <log_level_name>
    json.name("l", 1).value(s);
   ba9be:	4941      	ldr	r1, [pc, #260]	; (baac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba9c0:	4680      	mov	r8, r0
   ba9c2:	2201      	movs	r2, #1
   ba9c4:	a801      	add	r0, sp, #4
   ba9c6:	f001 f89f 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9ca:	4641      	mov	r1, r8
   ba9cc:	f7ff f935 	bl	b9c3a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba9d0:	b13f      	cbz	r7, ba9e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba9d2:	493d      	ldr	r1, [pc, #244]	; (baac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba9d4:	2201      	movs	r2, #1
   ba9d6:	a801      	add	r0, sp, #4
   ba9d8:	f001 f896 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9dc:	4639      	mov	r1, r7
   ba9de:	f7ff f92c 	bl	b9c3a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba9e2:	b13e      	cbz	r6, ba9f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba9e4:	4939      	ldr	r1, [pc, #228]	; (baacc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba9e6:	2201      	movs	r2, #1
   ba9e8:	a801      	add	r0, sp, #4
   ba9ea:	f001 f88d 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   ba9ee:	4631      	mov	r1, r6
   ba9f0:	f7ff f923 	bl	b9c3a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba9f4:	7923      	ldrb	r3, [r4, #4]
   ba9f6:	07df      	lsls	r7, r3, #31
   ba9f8:	d50e      	bpl.n	baa18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba9fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba9fc:	212f      	movs	r1, #47	; 0x2f
   ba9fe:	4630      	mov	r0, r6
   baa00:	f001 fbce 	bl	bc1a0 <strrchr>
    if (s1) {
   baa04:	b100      	cbz	r0, baa08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   baa06:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   baa08:	4931      	ldr	r1, [pc, #196]	; (baad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   baa0a:	2201      	movs	r2, #1
   baa0c:	a801      	add	r0, sp, #4
   baa0e:	f001 f87b 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa12:	4631      	mov	r1, r6
   baa14:	f7ff f911 	bl	b9c3a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   baa18:	7923      	ldrb	r3, [r4, #4]
   baa1a:	079e      	lsls	r6, r3, #30
   baa1c:	d507      	bpl.n	baa2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   baa1e:	492d      	ldr	r1, [pc, #180]	; (baad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   baa20:	2202      	movs	r2, #2
   baa22:	a801      	add	r0, sp, #4
   baa24:	f001 f870 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa28:	68e1      	ldr	r1, [r4, #12]
   baa2a:	f000 ffeb 	bl	bba04 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   baa2e:	7923      	ldrb	r3, [r4, #4]
   baa30:	0758      	lsls	r0, r3, #29
   baa32:	d514      	bpl.n	baa5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   baa34:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   baa36:	4633      	mov	r3, r6
   baa38:	461f      	mov	r7, r3
    for (; *s; ++s) {
   baa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa3e:	b12a      	cbz	r2, baa4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   baa40:	2a20      	cmp	r2, #32
   baa42:	d101      	bne.n	baa48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   baa44:	461e      	mov	r6, r3
   baa46:	e7f7      	b.n	baa38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   baa48:	2a28      	cmp	r2, #40	; 0x28
   baa4a:	d1f5      	bne.n	baa38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   baa4c:	4922      	ldr	r1, [pc, #136]	; (baad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   baa4e:	2202      	movs	r2, #2
   baa50:	a801      	add	r0, sp, #4
   baa52:	f001 f859 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa56:	1bba      	subs	r2, r7, r6
   baa58:	4631      	mov	r1, r6
   baa5a:	f001 f865 	bl	bbb28 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   baa5e:	7923      	ldrb	r3, [r4, #4]
   baa60:	0719      	lsls	r1, r3, #28
   baa62:	d507      	bpl.n	baa74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   baa64:	491d      	ldr	r1, [pc, #116]	; (baadc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   baa66:	2201      	movs	r2, #1
   baa68:	a801      	add	r0, sp, #4
   baa6a:	f001 f84d 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa6e:	6961      	ldr	r1, [r4, #20]
   baa70:	f000 ffda 	bl	bba28 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   baa74:	7923      	ldrb	r3, [r4, #4]
   baa76:	06da      	lsls	r2, r3, #27
   baa78:	d508      	bpl.n	baa8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   baa7a:	2204      	movs	r2, #4
   baa7c:	4918      	ldr	r1, [pc, #96]	; (baae0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   baa7e:	eb0d 0002 	add.w	r0, sp, r2
   baa82:	f001 f841 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa86:	69a1      	ldr	r1, [r4, #24]
   baa88:	f000 ffbc 	bl	bba04 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   baa8c:	7923      	ldrb	r3, [r4, #4]
   baa8e:	069b      	lsls	r3, r3, #26
   baa90:	d507      	bpl.n	baaa2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   baa92:	4914      	ldr	r1, [pc, #80]	; (baae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   baa94:	2206      	movs	r2, #6
   baa96:	a801      	add	r0, sp, #4
   baa98:	f001 f836 	bl	bbb08 <_ZN5spark10JSONWriter4nameEPKcj>
   baa9c:	69e1      	ldr	r1, [r4, #28]
   baa9e:	f7ff f8cc 	bl	b9c3a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   baaa2:	a801      	add	r0, sp, #4
   baaa4:	f000 ff8b 	bl	bb9be <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   baaa8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   baaaa:	490f      	ldr	r1, [pc, #60]	; (baae8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   baaac:	6803      	ldr	r3, [r0, #0]
   baaae:	2202      	movs	r2, #2
   baab0:	68db      	ldr	r3, [r3, #12]
   baab2:	4798      	blx	r3
}
   baab4:	b005      	add	sp, #20
   baab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baaba:	bf00      	nop
   baabc:	2003e720 	.word	0x2003e720
   baac0:	000bf3bc 	.word	0x000bf3bc
   baac4:	000bf352 	.word	0x000bf352
   baac8:	000be1ec 	.word	0x000be1ec
   baacc:	000bf9f8 	.word	0x000bf9f8
   baad0:	000bf76e 	.word	0x000bf76e
   baad4:	000bf3a0 	.word	0x000bf3a0
   baad8:	000bf3a3 	.word	0x000bf3a3
   baadc:	000be166 	.word	0x000be166
   baae0:	000bf3a6 	.word	0x000bf3a6
   baae4:	000bf3ab 	.word	0x000bf3ab
   baae8:	000bf39d 	.word	0x000bf39d

000baaec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baaec:	4b02      	ldr	r3, [pc, #8]	; (baaf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baaee:	681a      	ldr	r2, [r3, #0]
   baaf0:	4b02      	ldr	r3, [pc, #8]	; (baafc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baaf2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baaf4:	4770      	bx	lr
   baaf6:	bf00      	nop
   baaf8:	2003e2e4 	.word	0x2003e2e4
   baafc:	2003e6e4 	.word	0x2003e6e4

000bab00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bab00:	2100      	movs	r1, #0
   bab02:	f7fd b85d 	b.w	b7bc0 <system_delay_ms>
	...

000bab08 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   bab08:	b510      	push	{r4, lr}
   bab0a:	4b04      	ldr	r3, [pc, #16]	; (bab1c <_ZN9TCPClientD1Ev+0x14>)
   bab0c:	6003      	str	r3, [r0, #0]
   bab0e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bab10:	6980      	ldr	r0, [r0, #24]
   bab12:	b108      	cbz	r0, bab18 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   bab14:	f7fd fc19 	bl	b834a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   bab18:	4620      	mov	r0, r4
   bab1a:	bd10      	pop	{r4, pc}
   bab1c:	000bf520 	.word	0x000bf520

000bab20 <_ZN9TCPClientD0Ev>:
   bab20:	b510      	push	{r4, lr}
   bab22:	4604      	mov	r4, r0
   bab24:	f7ff fff0 	bl	bab08 <_ZN9TCPClientD1Ev>
   bab28:	4620      	mov	r0, r4
   bab2a:	211c      	movs	r1, #28
   bab2c:	f7f9 ffc7 	bl	b4abe <_ZdlPvj>
   bab30:	4620      	mov	r0, r4
   bab32:	bd10      	pop	{r4, pc}

000bab34 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bab34:	4b01      	ldr	r3, [pc, #4]	; (bab3c <_GLOBAL__sub_I_RGB+0x8>)
   bab36:	2200      	movs	r2, #0
   bab38:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bab3a:	4770      	bx	lr
   bab3c:	2003e6e8 	.word	0x2003e6e8

000bab40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bab40:	4b01      	ldr	r3, [pc, #4]	; (bab48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bab42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bab44:	4770      	bx	lr
   bab46:	bf00      	nop
   bab48:	2003e2e8 	.word	0x2003e2e8

000bab4c <serialEventRun>:
{
   bab4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bab4e:	4b0b      	ldr	r3, [pc, #44]	; (bab7c <serialEventRun+0x30>)
   bab50:	b143      	cbz	r3, bab64 <serialEventRun+0x18>
   bab52:	f000 f981 	bl	bae58 <_Z16_fetch_usbserialv>
   bab56:	6803      	ldr	r3, [r0, #0]
   bab58:	691b      	ldr	r3, [r3, #16]
   bab5a:	4798      	blx	r3
   bab5c:	2800      	cmp	r0, #0
   bab5e:	dd01      	ble.n	bab64 <serialEventRun+0x18>
        serialEvent();
   bab60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bab64:	4b06      	ldr	r3, [pc, #24]	; (bab80 <serialEventRun+0x34>)
   bab66:	b143      	cbz	r3, bab7a <serialEventRun+0x2e>
   bab68:	f001 f8c2 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
   bab6c:	6803      	ldr	r3, [r0, #0]
   bab6e:	691b      	ldr	r3, [r3, #16]
   bab70:	4798      	blx	r3
   bab72:	2800      	cmp	r0, #0
   bab74:	dd01      	ble.n	bab7a <serialEventRun+0x2e>
        serialEvent1();
   bab76:	f3af 8000 	nop.w
}
   bab7a:	bd08      	pop	{r3, pc}
	...

000bab84 <_post_loop>:
{
   bab84:	b508      	push	{r3, lr}
	serialEventRun();
   bab86:	f7ff ffe1 	bl	bab4c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bab8a:	f7fc fdeb 	bl	b7764 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bab8e:	4b01      	ldr	r3, [pc, #4]	; (bab94 <_post_loop+0x10>)
   bab90:	6018      	str	r0, [r3, #0]
}
   bab92:	bd08      	pop	{r3, pc}
   bab94:	2003e740 	.word	0x2003e740

000bab98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab98:	4805      	ldr	r0, [pc, #20]	; (babb0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bab9a:	4a06      	ldr	r2, [pc, #24]	; (babb4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bab9c:	4906      	ldr	r1, [pc, #24]	; (babb8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bab9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   baba0:	1a12      	subs	r2, r2, r0
   baba2:	f001 fa4d 	bl	bc040 <memcpy>
    __backup_sram_signature = signature;
   baba6:	4b05      	ldr	r3, [pc, #20]	; (babbc <_Z33system_initialize_user_backup_ramv+0x24>)
   baba8:	4a05      	ldr	r2, [pc, #20]	; (babc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   babaa:	601a      	str	r2, [r3, #0]
}
   babac:	bd08      	pop	{r3, pc}
   babae:	bf00      	nop
   babb0:	2003f400 	.word	0x2003f400
   babb4:	2003f404 	.word	0x2003f404
   babb8:	000bfd28 	.word	0x000bfd28
   babbc:	2003f400 	.word	0x2003f400
   babc0:	9a271c1e 	.word	0x9a271c1e

000babc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   babc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   babc6:	2300      	movs	r3, #0
   babc8:	9300      	str	r3, [sp, #0]
   babca:	461a      	mov	r2, r3
   babcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   babd0:	f7fd f810 	bl	b7bf4 <system_ctrl_set_result>
}
   babd4:	b003      	add	sp, #12
   babd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000babdc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   babdc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   babde:	8843      	ldrh	r3, [r0, #2]
   babe0:	2b0a      	cmp	r3, #10
   babe2:	d008      	beq.n	babf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   babe4:	2b50      	cmp	r3, #80	; 0x50
   babe6:	d10b      	bne.n	bac00 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   babe8:	4b09      	ldr	r3, [pc, #36]	; (bac10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   babea:	681b      	ldr	r3, [r3, #0]
   babec:	b14b      	cbz	r3, bac02 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   babee:	b003      	add	sp, #12
   babf0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   babf4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   babf6:	f7ff ffe5 	bl	babc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   babfa:	b003      	add	sp, #12
   babfc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bac00:	2300      	movs	r3, #0
   bac02:	9300      	str	r3, [sp, #0]
   bac04:	461a      	mov	r2, r3
   bac06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bac0a:	f7fc fff3 	bl	b7bf4 <system_ctrl_set_result>
}
   bac0e:	e7f4      	b.n	babfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bac10:	2003e6fc 	.word	0x2003e6fc

000bac14 <module_user_init_hook>:
{
   bac14:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bac16:	4812      	ldr	r0, [pc, #72]	; (bac60 <module_user_init_hook+0x4c>)
   bac18:	2100      	movs	r1, #0
   bac1a:	f7fd f8b5 	bl	b7d88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bac1e:	4b11      	ldr	r3, [pc, #68]	; (bac64 <module_user_init_hook+0x50>)
   bac20:	681a      	ldr	r2, [r3, #0]
   bac22:	4b11      	ldr	r3, [pc, #68]	; (bac68 <module_user_init_hook+0x54>)
   bac24:	429a      	cmp	r2, r3
   bac26:	4b11      	ldr	r3, [pc, #68]	; (bac6c <module_user_init_hook+0x58>)
   bac28:	bf0c      	ite	eq
   bac2a:	2201      	moveq	r2, #1
   bac2c:	2200      	movne	r2, #0
   bac2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bac30:	d001      	beq.n	bac36 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bac32:	f7ff ffb1 	bl	bab98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bac36:	f7fc fd85 	bl	b7744 <HAL_RNG_GetRandomNumber>
   bac3a:	4604      	mov	r4, r0
    srand(seed);
   bac3c:	f001 fa30 	bl	bc0a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bac40:	4b0b      	ldr	r3, [pc, #44]	; (bac70 <module_user_init_hook+0x5c>)
   bac42:	b113      	cbz	r3, bac4a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bac44:	4620      	mov	r0, r4
   bac46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bac4a:	2100      	movs	r1, #0
   bac4c:	4808      	ldr	r0, [pc, #32]	; (bac70 <module_user_init_hook+0x5c>)
   bac4e:	f7fd f84b 	bl	b7ce8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bac52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bac56:	4807      	ldr	r0, [pc, #28]	; (bac74 <module_user_init_hook+0x60>)
   bac58:	2100      	movs	r1, #0
   bac5a:	f7fc bfc1 	b.w	b7be0 <system_ctrl_set_app_request_handler>
   bac5e:	bf00      	nop
   bac60:	000bab41 	.word	0x000bab41
   bac64:	2003f400 	.word	0x2003f400
   bac68:	9a271c1e 	.word	0x9a271c1e
   bac6c:	2003e6f8 	.word	0x2003e6f8
   bac70:	00000000 	.word	0x00000000
   bac74:	000babdd 	.word	0x000babdd

000bac78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bac78:	4770      	bx	lr

000bac7a <_ZN9IPAddressD0Ev>:
   bac7a:	b510      	push	{r4, lr}
   bac7c:	2118      	movs	r1, #24
   bac7e:	4604      	mov	r4, r0
   bac80:	f7f9 ff1d 	bl	b4abe <_ZdlPvj>
   bac84:	4620      	mov	r0, r4
   bac86:	bd10      	pop	{r4, pc}

000bac88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bac88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bac8a:	7d03      	ldrb	r3, [r0, #20]
   bac8c:	2b06      	cmp	r3, #6
{
   bac8e:	b08d      	sub	sp, #52	; 0x34
   bac90:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac92:	f100 0704 	add.w	r7, r0, #4
   bac96:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bac9a:	d012      	beq.n	bacc2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bac9c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   baca0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   baca4:	220a      	movs	r2, #10
   baca6:	4630      	mov	r0, r6
   baca8:	f7fe feed 	bl	b9a86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bacac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bacae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bacb0:	d019      	beq.n	bace6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bacb2:	2c00      	cmp	r4, #0
   bacb4:	d0f4      	beq.n	baca0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bacb6:	212e      	movs	r1, #46	; 0x2e
   bacb8:	4630      	mov	r0, r6
   bacba:	f7fe fecb 	bl	b9a54 <_ZN5Print5printEc>
   bacbe:	4404      	add	r4, r0
   bacc0:	e7ee      	b.n	baca0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bacc2:	232f      	movs	r3, #47	; 0x2f
   bacc4:	466a      	mov	r2, sp
   bacc6:	4639      	mov	r1, r7
   bacc8:	200a      	movs	r0, #10
		buf[0] = 0;
   bacca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bacce:	f7fc fdcf 	bl	b7870 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bacd2:	4668      	mov	r0, sp
   bacd4:	f7f9 fe92 	bl	b49fc <strlen>
   bacd8:	6833      	ldr	r3, [r6, #0]
   bacda:	4602      	mov	r2, r0
   bacdc:	68db      	ldr	r3, [r3, #12]
   bacde:	4669      	mov	r1, sp
   bace0:	4630      	mov	r0, r6
   bace2:	4798      	blx	r3
   bace4:	4604      	mov	r4, r0
    }
    return n;
}
   bace6:	4620      	mov	r0, r4
   bace8:	b00d      	add	sp, #52	; 0x34
   bacea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bacec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bacec:	b510      	push	{r4, lr}
   bacee:	4b05      	ldr	r3, [pc, #20]	; (bad04 <_ZN9IPAddressC1Ev+0x18>)
   bacf0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bacf2:	2211      	movs	r2, #17
   bacf4:	f840 3b04 	str.w	r3, [r0], #4
   bacf8:	2100      	movs	r1, #0
   bacfa:	f001 f9c9 	bl	bc090 <memset>
}
   bacfe:	4620      	mov	r0, r4
   bad00:	bd10      	pop	{r4, pc}
   bad02:	bf00      	nop
   bad04:	000bf450 	.word	0x000bf450

000bad08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bad08:	4603      	mov	r3, r0
   bad0a:	4a07      	ldr	r2, [pc, #28]	; (bad28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bad0c:	b510      	push	{r4, lr}
   bad0e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bad12:	f101 0210 	add.w	r2, r1, #16
   bad16:	f851 4b04 	ldr.w	r4, [r1], #4
   bad1a:	f843 4b04 	str.w	r4, [r3], #4
   bad1e:	4291      	cmp	r1, r2
   bad20:	d1f9      	bne.n	bad16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bad22:	780a      	ldrb	r2, [r1, #0]
   bad24:	701a      	strb	r2, [r3, #0]
}
   bad26:	bd10      	pop	{r4, pc}
   bad28:	000bf450 	.word	0x000bf450

000bad2c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   bad2c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   bad2e:	2b04      	cmp	r3, #4
   bad30:	d104      	bne.n	bad3c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   bad32:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad34:	3800      	subs	r0, #0
   bad36:	bf18      	it	ne
   bad38:	2001      	movne	r0, #1
   bad3a:	4770      	bx	lr
    } else if (version() == 6) {
   bad3c:	2b06      	cmp	r3, #6
   bad3e:	d107      	bne.n	bad50 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad40:	6843      	ldr	r3, [r0, #4]
   bad42:	b93b      	cbnz	r3, bad54 <_ZNK9IPAddresscvbEv+0x28>
   bad44:	6883      	ldr	r3, [r0, #8]
   bad46:	b92b      	cbnz	r3, bad54 <_ZNK9IPAddresscvbEv+0x28>
   bad48:	68c3      	ldr	r3, [r0, #12]
   bad4a:	b91b      	cbnz	r3, bad54 <_ZNK9IPAddresscvbEv+0x28>
   bad4c:	6900      	ldr	r0, [r0, #16]
   bad4e:	e7f1      	b.n	bad34 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   bad50:	2000      	movs	r0, #0
   bad52:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   bad54:	2001      	movs	r0, #1
}
   bad56:	4770      	bx	lr

000bad58 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bad58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bad5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bad5e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bad62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bad66:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bad6a:	2304      	movs	r3, #4
   bad6c:	6041      	str	r1, [r0, #4]
   bad6e:	7503      	strb	r3, [r0, #20]
}
   bad70:	bd10      	pop	{r4, pc}
	...

000bad74 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bad74:	b507      	push	{r0, r1, r2, lr}
   bad76:	4b06      	ldr	r3, [pc, #24]	; (bad90 <_ZN9IPAddressC1EPKh+0x1c>)
   bad78:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bad7a:	78cb      	ldrb	r3, [r1, #3]
   bad7c:	9300      	str	r3, [sp, #0]
   bad7e:	788b      	ldrb	r3, [r1, #2]
   bad80:	784a      	ldrb	r2, [r1, #1]
   bad82:	7809      	ldrb	r1, [r1, #0]
   bad84:	f7ff ffe8 	bl	bad58 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bad88:	b003      	add	sp, #12
   bad8a:	f85d fb04 	ldr.w	pc, [sp], #4
   bad8e:	bf00      	nop
   bad90:	000bf450 	.word	0x000bf450

000bad94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad94:	7441      	strb	r1, [r0, #17]
}
   bad96:	4770      	bx	lr

000bad98 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bad98:	4770      	bx	lr

000bad9a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bad9a:	4770      	bx	lr

000bad9c <_ZN9USBSerial4readEv>:
{
   bad9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bad9e:	2100      	movs	r1, #0
   bada0:	7c00      	ldrb	r0, [r0, #16]
   bada2:	f7fc fec5 	bl	b7b30 <HAL_USB_USART_Receive_Data>
}
   bada6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   badaa:	bd08      	pop	{r3, pc}

000badac <_ZN9USBSerial4peekEv>:
{
   badac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   badae:	2101      	movs	r1, #1
   badb0:	7c00      	ldrb	r0, [r0, #16]
   badb2:	f7fc febd 	bl	b7b30 <HAL_USB_USART_Receive_Data>
}
   badb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   badba:	bd08      	pop	{r3, pc}

000badbc <_ZN9USBSerial17availableForWriteEv>:
{
   badbc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   badbe:	7c00      	ldrb	r0, [r0, #16]
   badc0:	f7fc feae 	bl	b7b20 <HAL_USB_USART_Available_Data_For_Write>
}
   badc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   badc8:	bd08      	pop	{r3, pc}

000badca <_ZN9USBSerial9availableEv>:
{
   badca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   badcc:	7c00      	ldrb	r0, [r0, #16]
   badce:	f7fc fe9f 	bl	b7b10 <HAL_USB_USART_Available_Data>
}
   badd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   badd6:	bd08      	pop	{r3, pc}

000badd8 <_ZN9USBSerial5writeEh>:
{
   badd8:	b513      	push	{r0, r1, r4, lr}
   badda:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baddc:	7c00      	ldrb	r0, [r0, #16]
{
   badde:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bade0:	f7fc fe9e 	bl	b7b20 <HAL_USB_USART_Available_Data_For_Write>
   bade4:	2800      	cmp	r0, #0
   bade6:	9901      	ldr	r1, [sp, #4]
   bade8:	dc01      	bgt.n	badee <_ZN9USBSerial5writeEh+0x16>
   badea:	7c60      	ldrb	r0, [r4, #17]
   badec:	b120      	cbz	r0, badf8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   badee:	7c20      	ldrb	r0, [r4, #16]
   badf0:	f7fc fea6 	bl	b7b40 <HAL_USB_USART_Send_Data>
   badf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   badf8:	b002      	add	sp, #8
   badfa:	bd10      	pop	{r4, pc}

000badfc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   badfc:	7c00      	ldrb	r0, [r0, #16]
   badfe:	f7fc bea7 	b.w	b7b50 <HAL_USB_USART_Flush_Data>

000bae02 <_ZN9USBSerialD0Ev>:
   bae02:	b510      	push	{r4, lr}
   bae04:	2114      	movs	r1, #20
   bae06:	4604      	mov	r4, r0
   bae08:	f7f9 fe59 	bl	b4abe <_ZdlPvj>
   bae0c:	4620      	mov	r0, r4
   bae0e:	bd10      	pop	{r4, pc}

000bae10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bae10:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bae12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bae16:	4604      	mov	r4, r0
   bae18:	4608      	mov	r0, r1
   bae1a:	2100      	movs	r1, #0
   bae1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bae20:	4b04      	ldr	r3, [pc, #16]	; (bae34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bae22:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bae24:	2301      	movs	r3, #1
  _serial = serial;
   bae26:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bae28:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bae2a:	4611      	mov	r1, r2
   bae2c:	f7fc fe58 	bl	b7ae0 <HAL_USB_USART_Init>
}
   bae30:	4620      	mov	r0, r4
   bae32:	bd10      	pop	{r4, pc}
   bae34:	000bf464 	.word	0x000bf464

000bae38 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bae38:	7c00      	ldrb	r0, [r0, #16]
   bae3a:	2200      	movs	r2, #0
   bae3c:	f7fc be58 	b.w	b7af0 <HAL_USB_USART_Begin>

000bae40 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bae40:	7c00      	ldrb	r0, [r0, #16]
   bae42:	f7fc be5d 	b.w	b7b00 <HAL_USB_USART_End>

000bae46 <_Z19acquireSerialBufferv>:
{
   bae46:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bae48:	2214      	movs	r2, #20
{
   bae4a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bae4c:	2100      	movs	r1, #0
   bae4e:	f001 f91f 	bl	bc090 <memset>
}
   bae52:	4620      	mov	r0, r4
   bae54:	bd10      	pop	{r4, pc}
	...

000bae58 <_Z16_fetch_usbserialv>:
{
   bae58:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae5a:	4c0f      	ldr	r4, [pc, #60]	; (bae98 <_Z16_fetch_usbserialv+0x40>)
{
   bae5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bae5e:	a803      	add	r0, sp, #12
   bae60:	f7ff fff1 	bl	bae46 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae64:	7821      	ldrb	r1, [r4, #0]
   bae66:	f3bf 8f5b 	dmb	ish
   bae6a:	f011 0101 	ands.w	r1, r1, #1
   bae6e:	d10f      	bne.n	bae90 <_Z16_fetch_usbserialv+0x38>
   bae70:	4620      	mov	r0, r4
   bae72:	9101      	str	r1, [sp, #4]
   bae74:	f7f9 fe32 	bl	b4adc <__cxa_guard_acquire>
   bae78:	9901      	ldr	r1, [sp, #4]
   bae7a:	b148      	cbz	r0, bae90 <_Z16_fetch_usbserialv+0x38>
   bae7c:	aa03      	add	r2, sp, #12
   bae7e:	4807      	ldr	r0, [pc, #28]	; (bae9c <_Z16_fetch_usbserialv+0x44>)
   bae80:	f7ff ffc6 	bl	bae10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae84:	4620      	mov	r0, r4
   bae86:	f7f9 fe2e 	bl	b4ae6 <__cxa_guard_release>
   bae8a:	4805      	ldr	r0, [pc, #20]	; (baea0 <_Z16_fetch_usbserialv+0x48>)
   bae8c:	f001 f8ae 	bl	bbfec <atexit>
	return _usbserial;
}
   bae90:	4802      	ldr	r0, [pc, #8]	; (bae9c <_Z16_fetch_usbserialv+0x44>)
   bae92:	b008      	add	sp, #32
   bae94:	bd10      	pop	{r4, pc}
   bae96:	bf00      	nop
   bae98:	2003e700 	.word	0x2003e700
   bae9c:	2003e704 	.word	0x2003e704
   baea0:	000bad99 	.word	0x000bad99

000baea4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   baea4:	4770      	bx	lr

000baea6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baea6:	7441      	strb	r1, [r0, #17]
}
   baea8:	4770      	bx	lr

000baeaa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   baeaa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   baeac:	7c00      	ldrb	r0, [r0, #16]
   baeae:	f7fc fd37 	bl	b7920 <hal_usart_available_data_for_write>
}
   baeb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baeb6:	bd08      	pop	{r3, pc}

000baeb8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   baeb8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   baeba:	7c00      	ldrb	r0, [r0, #16]
   baebc:	f7fc fd08 	bl	b78d0 <hal_usart_available>
}
   baec0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baec4:	bd08      	pop	{r3, pc}

000baec6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   baec6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baec8:	7c00      	ldrb	r0, [r0, #16]
   baeca:	f7fc fd11 	bl	b78f0 <hal_usart_peek>
}
   baece:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baed2:	bd08      	pop	{r3, pc}

000baed4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baed4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baed6:	7c00      	ldrb	r0, [r0, #16]
   baed8:	f7fc fd02 	bl	b78e0 <hal_usart_read>
}
   baedc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baee0:	bd08      	pop	{r3, pc}

000baee2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baee2:	7c00      	ldrb	r0, [r0, #16]
   baee4:	f7fc bd0c 	b.w	b7900 <hal_usart_flush>

000baee8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baeea:	7c45      	ldrb	r5, [r0, #17]
{
   baeec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baeee:	b12d      	cbz	r5, baefc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baef0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baef2:	b003      	add	sp, #12
   baef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baef8:	f7fc bce2 	b.w	b78c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baefc:	7c00      	ldrb	r0, [r0, #16]
   baefe:	9101      	str	r1, [sp, #4]
   baf00:	f7fc fd0e 	bl	b7920 <hal_usart_available_data_for_write>
   baf04:	2800      	cmp	r0, #0
   baf06:	9901      	ldr	r1, [sp, #4]
   baf08:	dcf2      	bgt.n	baef0 <_ZN11USARTSerial5writeEh+0x8>
}
   baf0a:	4628      	mov	r0, r5
   baf0c:	b003      	add	sp, #12
   baf0e:	bd30      	pop	{r4, r5, pc}

000baf10 <_ZN11USARTSerialD0Ev>:
   baf10:	b510      	push	{r4, lr}
   baf12:	2114      	movs	r1, #20
   baf14:	4604      	mov	r4, r0
   baf16:	f7f9 fdd2 	bl	b4abe <_ZdlPvj>
   baf1a:	4620      	mov	r0, r4
   baf1c:	bd10      	pop	{r4, pc}
	...

000baf20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baf20:	b510      	push	{r4, lr}
   baf22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf26:	4604      	mov	r4, r0
   baf28:	4608      	mov	r0, r1
   baf2a:	4611      	mov	r1, r2
   baf2c:	2200      	movs	r2, #0
   baf2e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baf32:	4b04      	ldr	r3, [pc, #16]	; (baf44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baf34:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf36:	2301      	movs	r3, #1
  _serial = serial;
   baf38:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf3a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baf3c:	f7fc fd00 	bl	b7940 <hal_usart_init_ex>
}
   baf40:	4620      	mov	r0, r4
   baf42:	bd10      	pop	{r4, pc}
   baf44:	000bf494 	.word	0x000bf494

000baf48 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   baf48:	7c00      	ldrb	r0, [r0, #16]
   baf4a:	2300      	movs	r3, #0
   baf4c:	f7fc bcf0 	b.w	b7930 <hal_usart_begin_config>

000baf50 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   baf50:	2200      	movs	r2, #0
   baf52:	f7ff bff9 	b.w	baf48 <_ZN11USARTSerial5beginEmm>

000baf56 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   baf56:	7c00      	ldrb	r0, [r0, #16]
   baf58:	f7fc bcaa 	b.w	b78b0 <hal_usart_end>

000baf5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   baf5c:	4770      	bx	lr

000baf5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   baf5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf60:	4606      	mov	r6, r0
   baf62:	4615      	mov	r5, r2
   baf64:	460c      	mov	r4, r1
   baf66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   baf68:	42bc      	cmp	r4, r7
   baf6a:	d006      	beq.n	baf7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   baf6c:	6833      	ldr	r3, [r6, #0]
   baf6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   baf72:	689b      	ldr	r3, [r3, #8]
   baf74:	4630      	mov	r0, r6
   baf76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   baf78:	e7f6      	b.n	baf68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   baf7a:	4628      	mov	r0, r5
   baf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   baf7e:	7c00      	ldrb	r0, [r0, #16]
   baf80:	2200      	movs	r2, #0
   baf82:	f7fc bd05 	b.w	b7990 <hal_i2c_write>

000baf86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   baf86:	7c00      	ldrb	r0, [r0, #16]
   baf88:	2100      	movs	r1, #0
   baf8a:	f7fc bd09 	b.w	b79a0 <hal_i2c_available>

000baf8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   baf8e:	7c00      	ldrb	r0, [r0, #16]
   baf90:	2100      	movs	r1, #0
   baf92:	f7fc bd0d 	b.w	b79b0 <hal_i2c_read>

000baf96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   baf96:	7c00      	ldrb	r0, [r0, #16]
   baf98:	2100      	movs	r1, #0
   baf9a:	f7fc bd11 	b.w	b79c0 <hal_i2c_peek>

000baf9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baf9e:	7c00      	ldrb	r0, [r0, #16]
   bafa0:	2100      	movs	r1, #0
   bafa2:	f7fc bd15 	b.w	b79d0 <hal_i2c_flush>

000bafa6 <_ZN7TwoWireD0Ev>:
   bafa6:	b510      	push	{r4, lr}
   bafa8:	2114      	movs	r1, #20
   bafaa:	4604      	mov	r4, r0
   bafac:	f7f9 fd87 	bl	b4abe <_ZdlPvj>
   bafb0:	4620      	mov	r0, r4
   bafb2:	bd10      	pop	{r4, pc}

000bafb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafb4:	b538      	push	{r3, r4, r5, lr}
   bafb6:	4604      	mov	r4, r0
   bafb8:	4615      	mov	r5, r2
   bafba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bafbe:	2200      	movs	r2, #0
   bafc0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bafc4:	4b09      	ldr	r3, [pc, #36]	; (bafec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bafc6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafc8:	4608      	mov	r0, r1
   bafca:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bafcc:	4629      	mov	r1, r5
   bafce:	f7fc fd0f 	bl	b79f0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafd2:	30bf      	adds	r0, #191	; 0xbf
   bafd4:	d108      	bne.n	bafe8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bafd6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafd8:	07db      	lsls	r3, r3, #31
   bafda:	d505      	bpl.n	bafe8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bafdc:	6868      	ldr	r0, [r5, #4]
   bafde:	f7fc fe93 	bl	b7d08 <free>
    free(conf.tx_buffer);
   bafe2:	68e8      	ldr	r0, [r5, #12]
   bafe4:	f7fc fe90 	bl	b7d08 <free>
}
   bafe8:	4620      	mov	r0, r4
   bafea:	bd38      	pop	{r3, r4, r5, pc}
   bafec:	000bf4c4 	.word	0x000bf4c4

000baff0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   baff0:	7c00      	ldrb	r0, [r0, #16]
   baff2:	2200      	movs	r2, #0
   baff4:	f7fc bcac 	b.w	b7950 <hal_i2c_set_speed>

000baff8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   baff8:	2300      	movs	r3, #0
   baffa:	7c00      	ldrb	r0, [r0, #16]
   baffc:	461a      	mov	r2, r3
   baffe:	4619      	mov	r1, r3
   bb000:	f7fc bcae 	b.w	b7960 <hal_i2c_begin>

000bb004 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb004:	7c00      	ldrb	r0, [r0, #16]
   bb006:	2200      	movs	r2, #0
   bb008:	f7fc bcb2 	b.w	b7970 <hal_i2c_begin_transmission>

000bb00c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb00c:	b2c9      	uxtb	r1, r1
   bb00e:	f7ff bff9 	b.w	bb004 <_ZN7TwoWire17beginTransmissionEh>

000bb012 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb012:	7c00      	ldrb	r0, [r0, #16]
   bb014:	2200      	movs	r2, #0
   bb016:	f7fc bcb3 	b.w	b7980 <hal_i2c_end_transmission>

000bb01a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb01a:	2101      	movs	r1, #1
   bb01c:	f7ff bff9 	b.w	bb012 <_ZN7TwoWire15endTransmissionEh>

000bb020 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   bb020:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb022:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   bb024:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   bb028:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb02a:	2201      	movs	r2, #1
   bb02c:	f04f 33ff 	mov.w	r3, #4294967295
   bb030:	f10d 0107 	add.w	r1, sp, #7
   bb034:	47a0      	blx	r4
}
   bb036:	b002      	add	sp, #8
   bb038:	bd10      	pop	{r4, pc}

000bb03a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bb03a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb03c:	6803      	ldr	r3, [r0, #0]
   bb03e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bb040:	f04f 33ff 	mov.w	r3, #4294967295
   bb044:	46a4      	mov	ip, r4
}
   bb046:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bb04a:	4760      	bx	ip

000bb04c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb04c:	b513      	push	{r0, r1, r4, lr}
   bb04e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bb050:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bb052:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bb056:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bb058:	f10d 0107 	add.w	r1, sp, #7
   bb05c:	2201      	movs	r2, #1
   bb05e:	47a0      	blx	r4
}
   bb060:	b002      	add	sp, #8
   bb062:	bd10      	pop	{r4, pc}

000bb064 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bb064:	b510      	push	{r4, lr}
      { return _M_ptr; }
   bb066:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb068:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb06c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb070:	429a      	cmp	r2, r3
int TCPClient::read() {
   bb072:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb074:	d008      	beq.n	bb088 <_ZN9TCPClient4readEv+0x24>
   bb076:	6963      	ldr	r3, [r4, #20]
   bb078:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb07c:	1c51      	adds	r1, r2, #1
   bb07e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bb082:	4413      	add	r3, r2
   bb084:	7918      	ldrb	r0, [r3, #4]
}
   bb086:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bb088:	6803      	ldr	r3, [r0, #0]
   bb08a:	691b      	ldr	r3, [r3, #16]
   bb08c:	4798      	blx	r3
   bb08e:	2800      	cmp	r0, #0
   bb090:	d1f1      	bne.n	bb076 <_ZN9TCPClient4readEv+0x12>
   bb092:	f04f 30ff 	mov.w	r0, #4294967295
   bb096:	e7f6      	b.n	bb086 <_ZN9TCPClient4readEv+0x22>

000bb098 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bb098:	4770      	bx	lr

000bb09a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bb09a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bb09c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bb09e:	43c0      	mvns	r0, r0
   bb0a0:	0fc0      	lsrs	r0, r0, #31
   bb0a2:	4770      	bx	lr

000bb0a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb0a4:	4770      	bx	lr
	...

000bb0a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bb0a8:	4b06      	ldr	r3, [pc, #24]	; (bb0c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bb0aa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bb0ac:	b510      	push	{r4, lr}
   bb0ae:	f100 040c 	add.w	r4, r0, #12
	    ||
   bb0b2:	d005      	beq.n	bb0c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bb0b4:	4608      	mov	r0, r1
   bb0b6:	f000 fe87 	bl	bbdc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bb0ba:	2800      	cmp	r0, #0
   bb0bc:	bf08      	it	eq
   bb0be:	2400      	moveq	r4, #0
      }
   bb0c0:	4620      	mov	r0, r4
   bb0c2:	bd10      	pop	{r4, pc}
   bb0c4:	000bf340 	.word	0x000bf340

000bb0c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bb0c8:	b510      	push	{r4, lr}
   bb0ca:	21ac      	movs	r1, #172	; 0xac
   bb0cc:	4604      	mov	r4, r0
   bb0ce:	f7f9 fcf6 	bl	b4abe <_ZdlPvj>
   bb0d2:	4620      	mov	r0, r4
   bb0d4:	bd10      	pop	{r4, pc}

000bb0d6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   bb0d6:	21ac      	movs	r1, #172	; 0xac
   bb0d8:	f7f9 bcf1 	b.w	b4abe <_ZdlPvj>

000bb0dc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   bb0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   bb0e0:	f04f 0800 	mov.w	r8, #0
   bb0e4:	b086      	sub	sp, #24
   bb0e6:	461c      	mov	r4, r3
   bb0e8:	f8c0 8004 	str.w	r8, [r0, #4]
   bb0ec:	4605      	mov	r5, r0
   bb0ee:	460e      	mov	r6, r1
   bb0f0:	4617      	mov	r7, r2
    struct timeval tv = {};
   bb0f2:	4641      	mov	r1, r8
   bb0f4:	2210      	movs	r2, #16
   bb0f6:	a802      	add	r0, sp, #8
   bb0f8:	f000 ffca 	bl	bc090 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   bb0fc:	1c63      	adds	r3, r4, #1
   bb0fe:	d009      	beq.n	bb114 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   bb100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb104:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   bb108:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   bb10c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   bb110:	435c      	muls	r4, r3
   bb112:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   bb114:	6968      	ldr	r0, [r5, #20]
   bb116:	2310      	movs	r3, #16
   bb118:	9300      	str	r3, [sp, #0]
   bb11a:	6800      	ldr	r0, [r0, #0]
   bb11c:	ab02      	add	r3, sp, #8
   bb11e:	f241 0205 	movw	r2, #4101	; 0x1005
   bb122:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb126:	f7fc fc6b 	bl	b7a00 <sock_setsockopt>
    if (ret < 0) {
   bb12a:	2800      	cmp	r0, #0
   bb12c:	da07      	bge.n	bb13e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   bb12e:	f7fc fe1b 	bl	b7d68 <__errno>
   bb132:	6803      	ldr	r3, [r0, #0]
   bb134:	606b      	str	r3, [r5, #4]
        return 0;
   bb136:	2000      	movs	r0, #0
}
   bb138:	b006      	add	sp, #24
   bb13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bb13e:	6968      	ldr	r0, [r5, #20]
   bb140:	2300      	movs	r3, #0
   bb142:	6800      	ldr	r0, [r0, #0]
   bb144:	463a      	mov	r2, r7
   bb146:	4631      	mov	r1, r6
   bb148:	f7fc fc7a 	bl	b7a40 <sock_send>
    if (ret < 0) {
   bb14c:	1e03      	subs	r3, r0, #0
   bb14e:	dbee      	blt.n	bb12e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bb150:	4618      	mov	r0, r3
   bb152:	e7f1      	b.n	bb138 <_ZN9TCPClient5writeEPKhjm+0x5c>

000bb154 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bb154:	b530      	push	{r4, r5, lr}
   bb156:	b087      	sub	sp, #28
   bb158:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bb15a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bb15c:	4668      	mov	r0, sp
   bb15e:	f7ff fe09 	bl	bad74 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb164:	3404      	adds	r4, #4
   bb166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb168:	682b      	ldr	r3, [r5, #0]
   bb16a:	7023      	strb	r3, [r4, #0]
    }
   bb16c:	b007      	add	sp, #28
   bb16e:	bd30      	pop	{r4, r5, pc}

000bb170 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bb170:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bb172:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bb174:	4b05      	ldr	r3, [pc, #20]	; (bb18c <_ZN9TCPClient8remoteIPEv+0x1c>)
   bb176:	4604      	mov	r4, r0
   bb178:	358c      	adds	r5, #140	; 0x8c
   bb17a:	f844 3b04 	str.w	r3, [r4], #4
   bb17e:	4606      	mov	r6, r0
   bb180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb184:	682b      	ldr	r3, [r5, #0]
   bb186:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bb188:	4630      	mov	r0, r6
   bb18a:	bd70      	pop	{r4, r5, r6, pc}
   bb18c:	000bf450 	.word	0x000bf450

000bb190 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb194:	4698      	mov	r8, r3
    stop();
   bb196:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb198:	b093      	sub	sp, #76	; 0x4c
   bb19a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bb19c:	2400      	movs	r4, #0
    stop();
   bb19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bb1a0:	4606      	mov	r6, r0
   bb1a2:	4617      	mov	r7, r2
    stop();
   bb1a4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb1a6:	4628      	mov	r0, r5
   bb1a8:	466b      	mov	r3, sp
   bb1aa:	4622      	mov	r2, r4
   bb1ac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bb1ae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb1b0:	f7fc fa78 	bl	b76a4 <netdb_getaddrinfo>
   bb1b4:	4605      	mov	r5, r0
   bb1b6:	2800      	cmp	r0, #0
   bb1b8:	d163      	bne.n	bb282 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bb1ba:	9b00      	ldr	r3, [sp, #0]
   bb1bc:	2b00      	cmp	r3, #0
   bb1be:	d04b      	beq.n	bb258 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb1c0:	695b      	ldr	r3, [r3, #20]
   bb1c2:	2b00      	cmp	r3, #0
   bb1c4:	d048      	beq.n	bb258 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bb1c6:	a806      	add	r0, sp, #24
   bb1c8:	f7ff fd90 	bl	bacec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bb1cc:	9b00      	ldr	r3, [sp, #0]
   bb1ce:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   bb1d0:	7863      	ldrb	r3, [r4, #1]
   bb1d2:	2b02      	cmp	r3, #2
   bb1d4:	d104      	bne.n	bb1e0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bb1d6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   bb1d8:	a806      	add	r0, sp, #24
   bb1da:	f7ff ffbb 	bl	bb154 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   bb1de:	e026      	b.n	bb22e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bb1e0:	2b0a      	cmp	r3, #10
   bb1e2:	d124      	bne.n	bb22e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bb1e4:	2211      	movs	r2, #17
   bb1e6:	4629      	mov	r1, r5
   bb1e8:	a801      	add	r0, sp, #4
   bb1ea:	f000 ff51 	bl	bc090 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb1ee:	68a3      	ldr	r3, [r4, #8]
   bb1f0:	2b00      	cmp	r3, #0
   bb1f2:	d038      	beq.n	bb266 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb1f4:	f104 0308 	add.w	r3, r4, #8
   bb1f8:	f10d 0c04 	add.w	ip, sp, #4
   bb1fc:	3418      	adds	r4, #24
   bb1fe:	6818      	ldr	r0, [r3, #0]
   bb200:	6859      	ldr	r1, [r3, #4]
   bb202:	4662      	mov	r2, ip
   bb204:	c203      	stmia	r2!, {r0, r1}
   bb206:	3308      	adds	r3, #8
   bb208:	42a3      	cmp	r3, r4
   bb20a:	4694      	mov	ip, r2
   bb20c:	d1f7      	bne.n	bb1fe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bb20e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bb210:	a901      	add	r1, sp, #4
   bb212:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bb214:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bb218:	f7ff fd76 	bl	bad08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb21c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb220:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb224:	ac07      	add	r4, sp, #28
   bb226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb228:	f8dc 3000 	ldr.w	r3, [ip]
   bb22c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bb22e:	a806      	add	r0, sp, #24
   bb230:	f7ff fd7c 	bl	bad2c <_ZNK9IPAddresscvbEv>
        if (addr) {
   bb234:	b180      	cbz	r0, bb258 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bb236:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bb238:	ad07      	add	r5, sp, #28
   bb23a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bb23e:	4b12      	ldr	r3, [pc, #72]	; (bb288 <_ZN9TCPClient7connectEPKctm+0xf8>)
   bb240:	930c      	str	r3, [sp, #48]	; 0x30
   bb242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb244:	ac0d      	add	r4, sp, #52	; 0x34
   bb246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb248:	682b      	ldr	r3, [r5, #0]
   bb24a:	7023      	strb	r3, [r4, #0]
   bb24c:	463a      	mov	r2, r7
   bb24e:	4643      	mov	r3, r8
   bb250:	a90c      	add	r1, sp, #48	; 0x30
   bb252:	4630      	mov	r0, r6
   bb254:	47c8      	blx	r9
   bb256:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bb258:	9800      	ldr	r0, [sp, #0]
   bb25a:	f7fc fa1b 	bl	b7694 <netdb_freeaddrinfo>
}
   bb25e:	4628      	mov	r0, r5
   bb260:	b013      	add	sp, #76	; 0x4c
   bb262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bb266:	68e3      	ldr	r3, [r4, #12]
   bb268:	2b00      	cmp	r3, #0
   bb26a:	d1c3      	bne.n	bb1f4 <_ZN9TCPClient7connectEPKctm+0x64>
   bb26c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bb270:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bb274:	f7fc fb04 	bl	b7880 <inet_htonl>
   bb278:	4581      	cmp	r9, r0
   bb27a:	d1bb      	bne.n	bb1f4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bb27c:	f104 0114 	add.w	r1, r4, #20
   bb280:	e7aa      	b.n	bb1d8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bb282:	4625      	mov	r5, r4
   bb284:	e7e8      	b.n	bb258 <_ZN9TCPClient7connectEPKctm+0xc8>
   bb286:	bf00      	nop
   bb288:	000bf450 	.word	0x000bf450

000bb28c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bb28c:	b538      	push	{r3, r4, r5, lr}
   bb28e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bb290:	681a      	ldr	r2, [r3, #0]
   bb292:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bb294:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   bb296:	da10      	bge.n	bb2ba <_ZN9TCPClient9connectedEv+0x2e>
   bb298:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb29c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb2a0:	429a      	cmp	r2, r3
   bb2a2:	d10a      	bne.n	bb2ba <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   bb2a4:	6803      	ldr	r3, [r0, #0]
   bb2a6:	691b      	ldr	r3, [r3, #16]
   bb2a8:	4798      	blx	r3
        if (!rv) {
   bb2aa:	4604      	mov	r4, r0
   bb2ac:	b928      	cbnz	r0, bb2ba <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   bb2ae:	682b      	ldr	r3, [r5, #0]
   bb2b0:	4628      	mov	r0, r5
   bb2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bb2b4:	4798      	blx	r3
        rv = available();
   bb2b6:	4620      	mov	r0, r4
}
   bb2b8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   bb2ba:	2001      	movs	r0, #1
   bb2bc:	e7fc      	b.n	bb2b8 <_ZN9TCPClient9connectedEv+0x2c>

000bb2be <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   bb2be:	b510      	push	{r4, lr}
   bb2c0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb2c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb2ca:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bb2cc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2ce:	d005      	beq.n	bb2dc <_ZN9TCPClient4peekEv+0x1e>
   bb2d0:	6963      	ldr	r3, [r4, #20]
   bb2d2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bb2d6:	4413      	add	r3, r2
   bb2d8:	7918      	ldrb	r0, [r3, #4]
}
   bb2da:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bb2dc:	6803      	ldr	r3, [r0, #0]
   bb2de:	691b      	ldr	r3, [r3, #16]
   bb2e0:	4798      	blx	r3
   bb2e2:	2800      	cmp	r0, #0
   bb2e4:	d1f4      	bne.n	bb2d0 <_ZN9TCPClient4peekEv+0x12>
   bb2e6:	f04f 30ff 	mov.w	r0, #4294967295
   bb2ea:	e7f6      	b.n	bb2da <_ZN9TCPClient4peekEv+0x1c>

000bb2ec <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2ee:	6943      	ldr	r3, [r0, #20]
   bb2f0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bb2f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb2f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bb2fa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bb2fc:	4605      	mov	r5, r0
   bb2fe:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bb300:	d016      	beq.n	bb330 <_ZN9TCPClient4readEPhj+0x44>
   bb302:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bb304:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bb308:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bb30c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bb30e:	42bc      	cmp	r4, r7
   bb310:	bf28      	it	cs
   bb312:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bb314:	3304      	adds	r3, #4
   bb316:	4622      	mov	r2, r4
   bb318:	4419      	add	r1, r3
   bb31a:	4630      	mov	r0, r6
   bb31c:	f000 fe90 	bl	bc040 <memcpy>
   bb320:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bb322:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bb326:	4423      	add	r3, r4
   bb328:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bb32c:	4620      	mov	r0, r4
   bb32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bb330:	6803      	ldr	r3, [r0, #0]
   bb332:	691b      	ldr	r3, [r3, #16]
   bb334:	4798      	blx	r3
   bb336:	2800      	cmp	r0, #0
   bb338:	d1e3      	bne.n	bb302 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bb33a:	f04f 34ff 	mov.w	r4, #4294967295
   bb33e:	e7f5      	b.n	bb32c <_ZN9TCPClient4readEPhj+0x40>

000bb340 <_ZN9TCPClient12flush_bufferEv>:
   bb340:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bb342:	2300      	movs	r3, #0
   bb344:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bb348:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bb34a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bb34e:	4770      	bx	lr

000bb350 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb354:	461f      	mov	r7, r3
    stop();
   bb356:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb358:	460c      	mov	r4, r1
    stop();
   bb35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bb35c:	b08a      	sub	sp, #40	; 0x28
   bb35e:	4605      	mov	r5, r0
   bb360:	4616      	mov	r6, r2
    stop();
   bb362:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bb364:	7d23      	ldrb	r3, [r4, #20]
   bb366:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bb36a:	2b04      	cmp	r3, #4
   bb36c:	bf0c      	ite	eq
   bb36e:	2002      	moveq	r0, #2
   bb370:	200a      	movne	r0, #10
   bb372:	2206      	movs	r2, #6
   bb374:	2101      	movs	r1, #1
   bb376:	f7fc fb6b 	bl	b7a50 <sock_socket>
   bb37a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bb37e:	696b      	ldr	r3, [r5, #20]
   bb380:	681b      	ldr	r3, [r3, #0]
   bb382:	2b00      	cmp	r3, #0
   bb384:	da08      	bge.n	bb398 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bb386:	682b      	ldr	r3, [r5, #0]
   bb388:	4628      	mov	r0, r5
   bb38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb38c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bb38e:	4798      	blx	r3
}
   bb390:	4620      	mov	r0, r4
   bb392:	b00a      	add	sp, #40	; 0x28
   bb394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bb398:	4628      	mov	r0, r5
   bb39a:	f7ff ffd1 	bl	bb340 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bb39e:	b1b7      	cbz	r7, bb3ce <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bb3a0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb3a2:	a903      	add	r1, sp, #12
   bb3a4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bb3a6:	9303      	str	r3, [sp, #12]
   bb3a8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bb3ac:	f7fc f9c2 	bl	b7734 <if_index_to_name>
   bb3b0:	2800      	cmp	r0, #0
   bb3b2:	d1e8      	bne.n	bb386 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bb3b4:	6968      	ldr	r0, [r5, #20]
   bb3b6:	2306      	movs	r3, #6
   bb3b8:	9300      	str	r3, [sp, #0]
   bb3ba:	6800      	ldr	r0, [r0, #0]
   bb3bc:	ab03      	add	r3, sp, #12
   bb3be:	f241 020b 	movw	r2, #4107	; 0x100b
   bb3c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   bb3c6:	f7fc fb1b 	bl	b7a00 <sock_setsockopt>
   bb3ca:	2800      	cmp	r0, #0
   bb3cc:	d1db      	bne.n	bb386 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bb3ce:	221c      	movs	r2, #28
   bb3d0:	2100      	movs	r1, #0
   bb3d2:	a803      	add	r0, sp, #12
   bb3d4:	f000 fe5c 	bl	bc090 <memset>
    if (ip.version() == 4) {
   bb3d8:	7d23      	ldrb	r3, [r4, #20]
   bb3da:	2b04      	cmp	r3, #4
   bb3dc:	d11d      	bne.n	bb41a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bb3de:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bb3e2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bb3e4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bb3e8:	f7fc fa5a 	bl	b78a0 <inet_htons>
   bb3ec:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bb3f0:	6860      	ldr	r0, [r4, #4]
   bb3f2:	f7fc fa45 	bl	b7880 <inet_htonl>
   bb3f6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bb3f8:	696b      	ldr	r3, [r5, #20]
   bb3fa:	221c      	movs	r2, #28
   bb3fc:	6818      	ldr	r0, [r3, #0]
   bb3fe:	a903      	add	r1, sp, #12
   bb400:	f7fc fb0e 	bl	b7a20 <sock_connect>
   bb404:	2800      	cmp	r0, #0
   bb406:	d1be      	bne.n	bb386 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bb408:	3404      	adds	r4, #4
   bb40a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb40c:	696d      	ldr	r5, [r5, #20]
   bb40e:	358c      	adds	r5, #140	; 0x8c
   bb410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb412:	6823      	ldr	r3, [r4, #0]
   bb414:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bb416:	2401      	movs	r4, #1
   bb418:	e7ba      	b.n	bb390 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bb41a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bb41e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bb420:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bb424:	f7fc fa3c 	bl	b78a0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb428:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bb42a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bb42e:	1d23      	adds	r3, r4, #4
   bb430:	f104 0714 	add.w	r7, r4, #20
   bb434:	6818      	ldr	r0, [r3, #0]
   bb436:	6859      	ldr	r1, [r3, #4]
   bb438:	4632      	mov	r2, r6
   bb43a:	c203      	stmia	r2!, {r0, r1}
   bb43c:	3308      	adds	r3, #8
   bb43e:	42bb      	cmp	r3, r7
   bb440:	4616      	mov	r6, r2
   bb442:	d1f7      	bne.n	bb434 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bb444:	e7d8      	b.n	bb3f8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bb448 <_ZN9TCPClient9availableEv>:
{
   bb448:	b530      	push	{r4, r5, lr}
   bb44a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bb44c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bb450:	b08b      	sub	sp, #44	; 0x2c
   bb452:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bb454:	b12b      	cbz	r3, bb462 <_ZN9TCPClient9availableEv+0x1a>
   bb456:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bb45a:	429a      	cmp	r2, r3
   bb45c:	d101      	bne.n	bb462 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bb45e:	f7ff ff6f 	bl	bb340 <_ZN9TCPClient12flush_bufferEv>
   bb462:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bb464:	6808      	ldr	r0, [r1, #0]
   bb466:	2800      	cmp	r0, #0
   bb468:	db18      	blt.n	bb49c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bb46a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bb46e:	2d7f      	cmp	r5, #127	; 0x7f
   bb470:	d814      	bhi.n	bb49c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bb472:	3104      	adds	r1, #4
   bb474:	2308      	movs	r3, #8
   bb476:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bb47a:	4429      	add	r1, r5
   bb47c:	f7fc fad8 	bl	b7a30 <sock_recv>
            if (ret > 0) {
   bb480:	2800      	cmp	r0, #0
   bb482:	dd13      	ble.n	bb4ac <_ZN9TCPClient9availableEv+0x64>
   bb484:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bb486:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb48a:	b90a      	cbnz	r2, bb490 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bb48c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bb490:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bb492:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bb496:	4410      	add	r0, r2
   bb498:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bb49c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bb49e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bb4a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bb4a6:	1ac0      	subs	r0, r0, r3
   bb4a8:	b00b      	add	sp, #44	; 0x2c
   bb4aa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bb4ac:	f7fc fc5c 	bl	b7d68 <__errno>
   bb4b0:	6803      	ldr	r3, [r0, #0]
   bb4b2:	2b0b      	cmp	r3, #11
   bb4b4:	d0f2      	beq.n	bb49c <_ZN9TCPClient9availableEv+0x54>
   bb4b6:	f7fc fc57 	bl	b7d68 <__errno>
   bb4ba:	6803      	ldr	r3, [r0, #0]
   bb4bc:	2b0b      	cmp	r3, #11
   bb4be:	d0ed      	beq.n	bb49c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bb4c0:	2320      	movs	r3, #32
   bb4c2:	2500      	movs	r5, #0
   bb4c4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bb4c8:	f7fc fc4e 	bl	b7d68 <__errno>
   bb4cc:	6803      	ldr	r3, [r0, #0]
   bb4ce:	9301      	str	r3, [sp, #4]
   bb4d0:	4b08      	ldr	r3, [pc, #32]	; (bb4f4 <_ZN9TCPClient9availableEv+0xac>)
   bb4d2:	4909      	ldr	r1, [pc, #36]	; (bb4f8 <_ZN9TCPClient9availableEv+0xb0>)
   bb4d4:	9300      	str	r3, [sp, #0]
   bb4d6:	aa02      	add	r2, sp, #8
   bb4d8:	462b      	mov	r3, r5
   bb4da:	2032      	movs	r0, #50	; 0x32
   bb4dc:	f7fc fb48 	bl	b7b70 <log_message>
                    sock_close(d_->sock);
   bb4e0:	6963      	ldr	r3, [r4, #20]
   bb4e2:	6818      	ldr	r0, [r3, #0]
   bb4e4:	f7fc fa94 	bl	b7a10 <sock_close>
   bb4e8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bb4ea:	f04f 32ff 	mov.w	r2, #4294967295
   bb4ee:	601a      	str	r2, [r3, #0]
   bb4f0:	e7d4      	b.n	bb49c <_ZN9TCPClient9availableEv+0x54>
   bb4f2:	bf00      	nop
   bb4f4:	000bf4eb 	.word	0x000bf4eb
   bb4f8:	000bf4e4 	.word	0x000bf4e4

000bb4fc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bb4fc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bb4fe:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bb500:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bb502:	6818      	ldr	r0, [r3, #0]
   bb504:	2800      	cmp	r0, #0
   bb506:	db01      	blt.n	bb50c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bb508:	f7fc fa82 	bl	b7a10 <sock_close>
   bb50c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bb50e:	f04f 32ff 	mov.w	r2, #4294967295
   bb512:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bb514:	6960      	ldr	r0, [r4, #20]
   bb516:	2211      	movs	r2, #17
   bb518:	2100      	movs	r1, #0
   bb51a:	308c      	adds	r0, #140	; 0x8c
   bb51c:	f000 fdb8 	bl	bc090 <memset>
    flush_buffer();
   bb520:	4620      	mov	r0, r4
}
   bb522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bb526:	f7ff bf0b 	b.w	bb340 <_ZN9TCPClient12flush_bufferEv>

000bb52a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bb52a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bb52c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bb52e:	4604      	mov	r4, r0
          total(0) {
   bb530:	6001      	str	r1, [r0, #0]
   bb532:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bb536:	3088      	adds	r0, #136	; 0x88
   bb538:	f7ff fbd8 	bl	bacec <_ZN9IPAddressC1Ev>
}
   bb53c:	4620      	mov	r0, r4
   bb53e:	bd10      	pop	{r4, pc}

000bb540 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bb540:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb542:	2300      	movs	r3, #0
   bb544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bb548:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bb54c:	4a0e      	ldr	r2, [pc, #56]	; (bb588 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bb54e:	6103      	str	r3, [r0, #16]
   bb550:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb552:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bb554:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb556:	20ac      	movs	r0, #172	; 0xac
   bb558:	9101      	str	r1, [sp, #4]
   bb55a:	f7f9 faaa 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   bb55e:	1e05      	subs	r5, r0, #0
   bb560:	f105 060c 	add.w	r6, r5, #12
   bb564:	d008      	beq.n	bb578 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bb566:	2301      	movs	r3, #1
   bb568:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bb56c:	4b07      	ldr	r3, [pc, #28]	; (bb58c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb56e:	9901      	ldr	r1, [sp, #4]
   bb570:	602b      	str	r3, [r5, #0]
   bb572:	4630      	mov	r0, r6
   bb574:	f7ff ffd9 	bl	bb52a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bb578:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bb57a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bb57e:	f7ff fedf 	bl	bb340 <_ZN9TCPClient12flush_bufferEv>
}
   bb582:	b002      	add	sp, #8
   bb584:	bd70      	pop	{r4, r5, r6, pc}
   bb586:	bf00      	nop
   bb588:	000bf520 	.word	0x000bf520
   bb58c:	000bf504 	.word	0x000bf504

000bb590 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bb590:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bb592:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   bb596:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bb598:	f7ff ffd2 	bl	bb540 <_ZN9TCPClientC1Ei>
}
   bb59c:	4620      	mov	r0, r4
   bb59e:	bd10      	pop	{r4, pc}

000bb5a0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bb5a0:	b510      	push	{r4, lr}
   bb5a2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bb5a4:	6800      	ldr	r0, [r0, #0]
   bb5a6:	2800      	cmp	r0, #0
   bb5a8:	db01      	blt.n	bb5ae <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bb5aa:	f7fc fa31 	bl	b7a10 <sock_close>
    }
}
   bb5ae:	4620      	mov	r0, r4
   bb5b0:	bd10      	pop	{r4, pc}

000bb5b2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bb5b2:	300c      	adds	r0, #12
   bb5b4:	f7ff bff4 	b.w	bb5a0 <_ZN9TCPClient4DataD1Ev>

000bb5b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb5b8:	2200      	movs	r2, #0
   bb5ba:	6840      	ldr	r0, [r0, #4]
   bb5bc:	4611      	mov	r1, r2
   bb5be:	f7fc bb3b 	b.w	b7c38 <network_ready>

000bb5c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb5c2:	2200      	movs	r2, #0
   bb5c4:	6840      	ldr	r0, [r0, #4]
   bb5c6:	4611      	mov	r1, r2
   bb5c8:	f7fc bb56 	b.w	b7c78 <network_listening>

000bb5cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb5cc:	2200      	movs	r2, #0
   bb5ce:	6840      	ldr	r0, [r0, #4]
   bb5d0:	4611      	mov	r1, r2
   bb5d2:	f7fc bb61 	b.w	b7c98 <network_get_listen_timeout>

000bb5d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb5d6:	6840      	ldr	r0, [r0, #4]
   bb5d8:	2200      	movs	r2, #0
   bb5da:	f7fc bb55 	b.w	b7c88 <network_set_listen_timeout>

000bb5de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb5de:	6840      	ldr	r0, [r0, #4]
   bb5e0:	2200      	movs	r2, #0
   bb5e2:	f081 0101 	eor.w	r1, r1, #1
   bb5e6:	f7fc bb3f 	b.w	b7c68 <network_listen>

000bb5ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb5ea:	2300      	movs	r3, #0
   bb5ec:	6840      	ldr	r0, [r0, #4]
   bb5ee:	461a      	mov	r2, r3
   bb5f0:	4619      	mov	r1, r3
   bb5f2:	f7fc bb31 	b.w	b7c58 <network_off>

000bb5f6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb5f6:	2300      	movs	r3, #0
   bb5f8:	6840      	ldr	r0, [r0, #4]
   bb5fa:	461a      	mov	r2, r3
   bb5fc:	4619      	mov	r1, r3
   bb5fe:	f7fc bb23 	b.w	b7c48 <network_on>

000bb602 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb602:	2200      	movs	r2, #0
   bb604:	6840      	ldr	r0, [r0, #4]
   bb606:	4611      	mov	r1, r2
   bb608:	f7fc bb06 	b.w	b7c18 <network_connecting>

000bb60c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb60c:	6840      	ldr	r0, [r0, #4]
   bb60e:	2200      	movs	r2, #0
   bb610:	2102      	movs	r1, #2
   bb612:	f7fc bb09 	b.w	b7c28 <network_disconnect>

000bb616 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb616:	2300      	movs	r3, #0
   bb618:	6840      	ldr	r0, [r0, #4]
   bb61a:	461a      	mov	r2, r3
   bb61c:	f7fc baf4 	b.w	b7c08 <network_connect>

000bb620 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb620:	4b02      	ldr	r3, [pc, #8]	; (bb62c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb622:	2204      	movs	r2, #4
   bb624:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb626:	4a02      	ldr	r2, [pc, #8]	; (bb630 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb628:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb62a:	4770      	bx	lr
   bb62c:	2003e718 	.word	0x2003e718
   bb630:	000bf56c 	.word	0x000bf56c

000bb634 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb634:	2300      	movs	r3, #0
   bb636:	6840      	ldr	r0, [r0, #4]
   bb638:	461a      	mov	r2, r3
   bb63a:	f7fc bae5 	b.w	b7c08 <network_connect>

000bb63e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb63e:	6840      	ldr	r0, [r0, #4]
   bb640:	2200      	movs	r2, #0
   bb642:	2102      	movs	r1, #2
   bb644:	f7fc baf0 	b.w	b7c28 <network_disconnect>

000bb648 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb648:	2200      	movs	r2, #0
   bb64a:	6840      	ldr	r0, [r0, #4]
   bb64c:	4611      	mov	r1, r2
   bb64e:	f7fc bae3 	b.w	b7c18 <network_connecting>

000bb652 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb652:	2200      	movs	r2, #0
   bb654:	6840      	ldr	r0, [r0, #4]
   bb656:	4611      	mov	r1, r2
   bb658:	f7fc baee 	b.w	b7c38 <network_ready>

000bb65c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb65c:	2300      	movs	r3, #0
   bb65e:	6840      	ldr	r0, [r0, #4]
   bb660:	461a      	mov	r2, r3
   bb662:	4619      	mov	r1, r3
   bb664:	f7fc baf0 	b.w	b7c48 <network_on>

000bb668 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb668:	2300      	movs	r3, #0
   bb66a:	6840      	ldr	r0, [r0, #4]
   bb66c:	461a      	mov	r2, r3
   bb66e:	4619      	mov	r1, r3
   bb670:	f7fc baf2 	b.w	b7c58 <network_off>

000bb674 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb674:	6840      	ldr	r0, [r0, #4]
   bb676:	2100      	movs	r1, #0
   bb678:	f7fc bb16 	b.w	b7ca8 <network_is_on>

000bb67c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb67c:	6840      	ldr	r0, [r0, #4]
   bb67e:	2100      	movs	r1, #0
   bb680:	f7fc bb1a 	b.w	b7cb8 <network_is_off>

000bb684 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb684:	6840      	ldr	r0, [r0, #4]
   bb686:	2200      	movs	r2, #0
   bb688:	f081 0101 	eor.w	r1, r1, #1
   bb68c:	f7fc baec 	b.w	b7c68 <network_listen>

000bb690 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb690:	6840      	ldr	r0, [r0, #4]
   bb692:	2200      	movs	r2, #0
   bb694:	f7fc baf8 	b.w	b7c88 <network_set_listen_timeout>

000bb698 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb698:	2200      	movs	r2, #0
   bb69a:	6840      	ldr	r0, [r0, #4]
   bb69c:	4611      	mov	r1, r2
   bb69e:	f7fc bafb 	b.w	b7c98 <network_get_listen_timeout>

000bb6a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb6a2:	2200      	movs	r2, #0
   bb6a4:	6840      	ldr	r0, [r0, #4]
   bb6a6:	4611      	mov	r1, r2
   bb6a8:	f7fc bae6 	b.w	b7c78 <network_listening>

000bb6ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb6b0:	b095      	sub	sp, #84	; 0x54
   bb6b2:	4614      	mov	r4, r2
   bb6b4:	460d      	mov	r5, r1
   bb6b6:	4607      	mov	r7, r0
    IPAddress addr;
   bb6b8:	f7ff fb18 	bl	bacec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb6bc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb6be:	221c      	movs	r2, #28
   bb6c0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb6c2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb6c4:	f000 fce4 	bl	bc090 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb6c8:	2340      	movs	r3, #64	; 0x40
   bb6ca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb6cc:	4620      	mov	r0, r4
   bb6ce:	466b      	mov	r3, sp
   bb6d0:	aa0c      	add	r2, sp, #48	; 0x30
   bb6d2:	2100      	movs	r1, #0
   bb6d4:	f7fb ffe6 	bl	b76a4 <netdb_getaddrinfo>
    if (!r) {
   bb6d8:	4604      	mov	r4, r0
   bb6da:	2800      	cmp	r0, #0
   bb6dc:	d14b      	bne.n	bb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb6de:	4602      	mov	r2, r0
   bb6e0:	2101      	movs	r1, #1
   bb6e2:	6868      	ldr	r0, [r5, #4]
   bb6e4:	f7fc faa8 	bl	b7c38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb6ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6ec:	4622      	mov	r2, r4
   bb6ee:	6868      	ldr	r0, [r5, #4]
   bb6f0:	f7fc faa2 	bl	b7c38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb6f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb6f6:	4681      	mov	r9, r0
        bool ok = false;
   bb6f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb6fa:	2e00      	cmp	r6, #0
   bb6fc:	d03b      	beq.n	bb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb6fe:	2900      	cmp	r1, #0
   bb700:	d139      	bne.n	bb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb702:	6873      	ldr	r3, [r6, #4]
   bb704:	2b02      	cmp	r3, #2
   bb706:	d003      	beq.n	bb710 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb708:	2b0a      	cmp	r3, #10
   bb70a:	d011      	beq.n	bb730 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb70c:	69f6      	ldr	r6, [r6, #28]
   bb70e:	e7f4      	b.n	bb6fa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb710:	f1b8 0f00 	cmp.w	r8, #0
   bb714:	d0fa      	beq.n	bb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb716:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb718:	a806      	add	r0, sp, #24
   bb71a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb71c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb71e:	f7ff fb29 	bl	bad74 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb724:	1d3c      	adds	r4, r7, #4
   bb726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb728:	682b      	ldr	r3, [r5, #0]
   bb72a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb72c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb72e:	e7ed      	b.n	bb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb730:	f1b9 0f00 	cmp.w	r9, #0
   bb734:	d0ea      	beq.n	bb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb736:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb738:	2210      	movs	r2, #16
   bb73a:	a801      	add	r0, sp, #4
   bb73c:	f000 fca8 	bl	bc090 <memset>
                    a.v = 6;
   bb740:	2306      	movs	r3, #6
   bb742:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb746:	ad01      	add	r5, sp, #4
   bb748:	f104 0308 	add.w	r3, r4, #8
   bb74c:	3418      	adds	r4, #24
   bb74e:	6818      	ldr	r0, [r3, #0]
   bb750:	6859      	ldr	r1, [r3, #4]
   bb752:	462a      	mov	r2, r5
   bb754:	c203      	stmia	r2!, {r0, r1}
   bb756:	3308      	adds	r3, #8
   bb758:	42a3      	cmp	r3, r4
   bb75a:	4615      	mov	r5, r2
   bb75c:	d1f7      	bne.n	bb74e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb75e:	a901      	add	r1, sp, #4
   bb760:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb762:	ad07      	add	r5, sp, #28
   bb764:	f7ff fad0 	bl	bad08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb76a:	1d3c      	adds	r4, r7, #4
   bb76c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb76e:	682b      	ldr	r3, [r5, #0]
   bb770:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb772:	4649      	mov	r1, r9
   bb774:	e7ca      	b.n	bb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb776:	9800      	ldr	r0, [sp, #0]
   bb778:	f7fb ff8c 	bl	b7694 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb77c:	4638      	mov	r0, r7
   bb77e:	b015      	add	sp, #84	; 0x54
   bb780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb784 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb784:	4b02      	ldr	r3, [pc, #8]	; (bb790 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb786:	4a03      	ldr	r2, [pc, #12]	; (bb794 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb788:	601a      	str	r2, [r3, #0]
   bb78a:	2200      	movs	r2, #0
   bb78c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb78e:	4770      	bx	lr
   bb790:	2003e720 	.word	0x2003e720
   bb794:	000bf5a8 	.word	0x000bf5a8

000bb798 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bb798:	f100 0310 	add.w	r3, r0, #16
   bb79c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bb79e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bb7a2:	2901      	cmp	r1, #1
   bb7a4:	4618      	mov	r0, r3
   bb7a6:	d108      	bne.n	bb7ba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bb7a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bb7ac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bb7b0:	3a01      	subs	r2, #1
   bb7b2:	f103 0310 	add.w	r3, r3, #16
   bb7b6:	d1f2      	bne.n	bb79e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bb7b8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bb7ba:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bb7bc:	bf04      	itt	eq
   bb7be:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bb7c2:	1852      	addeq	r2, r2, r1
   bb7c4:	e7f4      	b.n	bb7b0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bb7c6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7c6:	b40e      	push	{r1, r2, r3}
   bb7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb7ca:	b088      	sub	sp, #32
   bb7cc:	af00      	add	r7, sp, #0
   bb7ce:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7d2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7d4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7d8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb7da:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7dc:	462b      	mov	r3, r5
   bb7de:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bb7e0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7e2:	f7fc faa9 	bl	b7d38 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bb7e6:	280f      	cmp	r0, #15
   bb7e8:	687a      	ldr	r2, [r7, #4]
   bb7ea:	d91a      	bls.n	bb822 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bb7ec:	f100 0308 	add.w	r3, r0, #8
   bb7f0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bb7f4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bb7f6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb7fa:	1c41      	adds	r1, r0, #1
   bb7fc:	462b      	mov	r3, r5
   bb7fe:	4668      	mov	r0, sp
        va_start(args, fmt);
   bb800:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb802:	f7fc fa99 	bl	b7d38 <vsnprintf>
        if (n > 0) {
   bb806:	1e02      	subs	r2, r0, #0
   bb808:	dd04      	ble.n	bb814 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bb80a:	6823      	ldr	r3, [r4, #0]
   bb80c:	4669      	mov	r1, sp
   bb80e:	689b      	ldr	r3, [r3, #8]
   bb810:	4620      	mov	r0, r4
   bb812:	4798      	blx	r3
   bb814:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bb816:	3720      	adds	r7, #32
   bb818:	46bd      	mov	sp, r7
   bb81a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb81e:	b003      	add	sp, #12
   bb820:	4770      	bx	lr
    } else if (n > 0) {
   bb822:	2800      	cmp	r0, #0
   bb824:	d0f7      	beq.n	bb816 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bb826:	6823      	ldr	r3, [r4, #0]
   bb828:	4602      	mov	r2, r0
   bb82a:	689b      	ldr	r3, [r3, #8]
   bb82c:	f107 0110 	add.w	r1, r7, #16
   bb830:	4620      	mov	r0, r4
   bb832:	4798      	blx	r3
}
   bb834:	e7ef      	b.n	bb816 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bb836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb836:	b538      	push	{r3, r4, r5, lr}
   bb838:	680b      	ldr	r3, [r1, #0]
   bb83a:	6003      	str	r3, [r0, #0]
   bb83c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bb83e:	6843      	ldr	r3, [r0, #4]
   bb840:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb842:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bb844:	d008      	beq.n	bb858 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bb846:	b115      	cbz	r5, bb84e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bb848:	686b      	ldr	r3, [r5, #4]
   bb84a:	3301      	adds	r3, #1
   bb84c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bb84e:	6860      	ldr	r0, [r4, #4]
   bb850:	b108      	cbz	r0, bb856 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bb852:	f7fc fd7a 	bl	b834a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bb856:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb858:	bd38      	pop	{r3, r4, r5, pc}

000bb85a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   bb85a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bb85c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bb85e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bb862:	689b      	ldr	r3, [r3, #8]
   bb864:	2201      	movs	r2, #1
   bb866:	f10d 0107 	add.w	r1, sp, #7
   bb86a:	4798      	blx	r3
}
   bb86c:	b003      	add	sp, #12
   bb86e:	f85d fb04 	ldr.w	pc, [sp], #4

000bb872 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb872:	460b      	mov	r3, r1
   bb874:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bb876:	2200      	movs	r2, #0
   bb878:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bb87a:	e9c0 2200 	strd	r2, r2, [r0]
   bb87e:	4604      	mov	r4, r0
        t_ = t;
   bb880:	6083      	str	r3, [r0, #8]
    if (t) {
   bb882:	b90b      	cbnz	r3, bb888 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bb884:	4620      	mov	r0, r4
   bb886:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bb888:	f7ff ffd5 	bl	bb836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bb88c:	e7fa      	b.n	bb884 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bb88e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bb88e:	6883      	ldr	r3, [r0, #8]
   bb890:	b1eb      	cbz	r3, bb8ce <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bb892:	781a      	ldrb	r2, [r3, #0]
   bb894:	2a03      	cmp	r2, #3
   bb896:	d81a      	bhi.n	bb8ce <_ZNK5spark9JSONValue4typeEv+0x40>
   bb898:	e8df f002 	tbb	[pc, r2]
   bb89c:	1b021704 	.word	0x1b021704
   bb8a0:	2005      	movs	r0, #5
   bb8a2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bb8a4:	6802      	ldr	r2, [r0, #0]
   bb8a6:	685b      	ldr	r3, [r3, #4]
   bb8a8:	6852      	ldr	r2, [r2, #4]
   bb8aa:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bb8ac:	282d      	cmp	r0, #45	; 0x2d
   bb8ae:	d012      	beq.n	bb8d6 <_ZNK5spark9JSONValue4typeEv+0x48>
   bb8b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb8b4:	2b09      	cmp	r3, #9
   bb8b6:	d90e      	bls.n	bb8d6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bb8b8:	2874      	cmp	r0, #116	; 0x74
   bb8ba:	d00e      	beq.n	bb8da <_ZNK5spark9JSONValue4typeEv+0x4c>
   bb8bc:	2866      	cmp	r0, #102	; 0x66
   bb8be:	d00c      	beq.n	bb8da <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bb8c0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bb8c4:	4258      	negs	r0, r3
   bb8c6:	4158      	adcs	r0, r3
   bb8c8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bb8ca:	2006      	movs	r0, #6
   bb8cc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bb8ce:	2000      	movs	r0, #0
   bb8d0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bb8d2:	2004      	movs	r0, #4
   bb8d4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bb8d6:	2003      	movs	r0, #3
   bb8d8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bb8da:	2002      	movs	r0, #2
}
   bb8dc:	4770      	bx	lr

000bb8de <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bb8de:	b510      	push	{r4, lr}
   bb8e0:	4604      	mov	r4, r0
    switch (type()) {
   bb8e2:	f7ff ffd4 	bl	bb88e <_ZNK5spark9JSONValue4typeEv>
   bb8e6:	2802      	cmp	r0, #2
   bb8e8:	d00e      	beq.n	bb908 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bb8ea:	1ec3      	subs	r3, r0, #3
   bb8ec:	b2db      	uxtb	r3, r3
   bb8ee:	2b01      	cmp	r3, #1
   bb8f0:	d814      	bhi.n	bb91c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bb8f2:	6822      	ldr	r2, [r4, #0]
   bb8f4:	68a3      	ldr	r3, [r4, #8]
   bb8f6:	6850      	ldr	r0, [r2, #4]
   bb8f8:	685b      	ldr	r3, [r3, #4]
}
   bb8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bb8fe:	220a      	movs	r2, #10
   bb900:	2100      	movs	r1, #0
   bb902:	4418      	add	r0, r3
   bb904:	f001 bb10 	b.w	bcf28 <strtol>
        const char* const s = d_->json + t_->start;
   bb908:	6822      	ldr	r2, [r4, #0]
   bb90a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bb90c:	6852      	ldr	r2, [r2, #4]
   bb90e:	685b      	ldr	r3, [r3, #4]
   bb910:	5cd0      	ldrb	r0, [r2, r3]
   bb912:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bb916:	4258      	negs	r0, r3
   bb918:	4158      	adcs	r0, r3
}
   bb91a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bb91c:	2000      	movs	r0, #0
   bb91e:	e7fc      	b.n	bb91a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bb920 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb920:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb922:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb924:	e9c0 3300 	strd	r3, r3, [r0]
   bb928:	4604      	mov	r4, r0
        n_(0) {
   bb92a:	480e      	ldr	r0, [pc, #56]	; (bb964 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bb92c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bb930:	b1a9      	cbz	r1, bb95e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bb932:	780b      	ldrb	r3, [r1, #0]
   bb934:	2b03      	cmp	r3, #3
   bb936:	d006      	beq.n	bb946 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bb938:	b98b      	cbnz	r3, bb95e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bb93a:	6813      	ldr	r3, [r2, #0]
   bb93c:	6858      	ldr	r0, [r3, #4]
   bb93e:	684b      	ldr	r3, [r1, #4]
   bb940:	5cc3      	ldrb	r3, [r0, r3]
   bb942:	2b6e      	cmp	r3, #110	; 0x6e
   bb944:	d007      	beq.n	bb956 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bb946:	6813      	ldr	r3, [r2, #0]
   bb948:	684d      	ldr	r5, [r1, #4]
   bb94a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bb94c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bb94e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bb950:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bb952:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bb954:	60e3      	str	r3, [r4, #12]
   bb956:	4611      	mov	r1, r2
   bb958:	4620      	mov	r0, r4
   bb95a:	f7ff ff6c 	bl	bb836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb95e:	4620      	mov	r0, r4
   bb960:	bd38      	pop	{r3, r4, r5, pc}
   bb962:	bf00      	nop
   bb964:	000bf39f 	.word	0x000bf39f

000bb968 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb968:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb96a:	2500      	movs	r5, #0
   bb96c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bb96e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bb972:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bb976:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb97a:	4604      	mov	r4, r0
   bb97c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bb97e:	b14b      	cbz	r3, bb994 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bb980:	781a      	ldrb	r2, [r3, #0]
   bb982:	2a01      	cmp	r2, #1
   bb984:	d106      	bne.n	bb994 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bb986:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bb98a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bb98c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bb98e:	6143      	str	r3, [r0, #20]
   bb990:	f7ff ff51 	bl	bb836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb994:	4620      	mov	r0, r4
   bb996:	bd38      	pop	{r3, r4, r5, pc}

000bb998 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bb998:	b510      	push	{r4, lr}
    if (!n_) {
   bb99a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bb99c:	4604      	mov	r4, r0
    if (!n_) {
   bb99e:	b163      	cbz	r3, bb9ba <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bb9a0:	6880      	ldr	r0, [r0, #8]
   bb9a2:	60e0      	str	r0, [r4, #12]
    --n_;
   bb9a4:	3b01      	subs	r3, #1
    ++t_;
   bb9a6:	3010      	adds	r0, #16
   bb9a8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bb9aa:	6120      	str	r0, [r4, #16]
    --n_;
   bb9ac:	6163      	str	r3, [r4, #20]
    if (n_) {
   bb9ae:	b113      	cbz	r3, bb9b6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bb9b0:	f7ff fef2 	bl	bb798 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bb9b4:	60a0      	str	r0, [r4, #8]
    return true;
   bb9b6:	2001      	movs	r0, #1
   bb9b8:	e000      	b.n	bb9bc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bb9ba:	4618      	mov	r0, r3
}
   bb9bc:	bd10      	pop	{r4, pc}

000bb9be <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb9be:	b510      	push	{r4, lr}
    write('}');
   bb9c0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb9c2:	4604      	mov	r4, r0
    write('}');
   bb9c4:	f7ff ff49 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bb9c8:	2301      	movs	r3, #1
   bb9ca:	7123      	strb	r3, [r4, #4]
}
   bb9cc:	4620      	mov	r0, r4
   bb9ce:	bd10      	pop	{r4, pc}

000bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bb9d0:	b508      	push	{r3, lr}
    switch (state_) {
   bb9d2:	7903      	ldrb	r3, [r0, #4]
   bb9d4:	2b01      	cmp	r3, #1
   bb9d6:	d002      	beq.n	bb9de <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bb9d8:	2b02      	cmp	r3, #2
   bb9da:	d004      	beq.n	bb9e6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bb9dc:	bd08      	pop	{r3, pc}
        write(',');
   bb9de:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bb9e0:	f7ff ff3b 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
}
   bb9e4:	e7fa      	b.n	bb9dc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bb9e6:	213a      	movs	r1, #58	; 0x3a
   bb9e8:	e7fa      	b.n	bb9e0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bb9ea <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bb9ea:	b510      	push	{r4, lr}
   bb9ec:	4604      	mov	r4, r0
    writeSeparator();
   bb9ee:	f7ff ffef 	bl	bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bb9f2:	4620      	mov	r0, r4
   bb9f4:	217b      	movs	r1, #123	; 0x7b
   bb9f6:	f7ff ff30 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bb9fa:	2300      	movs	r3, #0
   bb9fc:	7123      	strb	r3, [r4, #4]
}
   bb9fe:	4620      	mov	r0, r4
   bba00:	bd10      	pop	{r4, pc}
	...

000bba04 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bba04:	b513      	push	{r0, r1, r4, lr}
   bba06:	4604      	mov	r4, r0
   bba08:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bba0a:	f7ff ffe1 	bl	bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bba0e:	6823      	ldr	r3, [r4, #0]
   bba10:	9a01      	ldr	r2, [sp, #4]
   bba12:	68db      	ldr	r3, [r3, #12]
   bba14:	4903      	ldr	r1, [pc, #12]	; (bba24 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bba16:	4620      	mov	r0, r4
   bba18:	4798      	blx	r3
    state_ = NEXT;
   bba1a:	2301      	movs	r3, #1
}
   bba1c:	4620      	mov	r0, r4
    state_ = NEXT;
   bba1e:	7123      	strb	r3, [r4, #4]
}
   bba20:	b002      	add	sp, #8
   bba22:	bd10      	pop	{r4, pc}
   bba24:	000bf4f8 	.word	0x000bf4f8

000bba28 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bba28:	b513      	push	{r0, r1, r4, lr}
   bba2a:	4604      	mov	r4, r0
   bba2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bba2e:	f7ff ffcf 	bl	bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bba32:	6823      	ldr	r3, [r4, #0]
   bba34:	9a01      	ldr	r2, [sp, #4]
   bba36:	68db      	ldr	r3, [r3, #12]
   bba38:	4903      	ldr	r1, [pc, #12]	; (bba48 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bba3a:	4620      	mov	r0, r4
   bba3c:	4798      	blx	r3
    state_ = NEXT;
   bba3e:	2301      	movs	r3, #1
}
   bba40:	4620      	mov	r0, r4
    state_ = NEXT;
   bba42:	7123      	strb	r3, [r4, #4]
}
   bba44:	b002      	add	sp, #8
   bba46:	bd10      	pop	{r4, pc}
   bba48:	000bf5dc 	.word	0x000bf5dc

000bba4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bba50:	460d      	mov	r5, r1
    write('"');
   bba52:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bba54:	4690      	mov	r8, r2
   bba56:	4604      	mov	r4, r0
    write('"');
   bba58:	f7ff feff 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bba5c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bbb04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bba60:	44a8      	add	r8, r5
    const char *s = str;
   bba62:	462f      	mov	r7, r5
    while (s != end) {
   bba64:	4547      	cmp	r7, r8
   bba66:	46ba      	mov	sl, r7
   bba68:	d03d      	beq.n	bbae6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bba6a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bba6e:	2e22      	cmp	r6, #34	; 0x22
   bba70:	d006      	beq.n	bba80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bba72:	2e5c      	cmp	r6, #92	; 0x5c
   bba74:	d004      	beq.n	bba80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bba76:	4630      	mov	r0, r6
   bba78:	f000 faca 	bl	bc010 <isprint>
   bba7c:	2800      	cmp	r0, #0
   bba7e:	d1f1      	bne.n	bba64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bba80:	6823      	ldr	r3, [r4, #0]
   bba82:	ebaa 0205 	sub.w	r2, sl, r5
   bba86:	689b      	ldr	r3, [r3, #8]
   bba88:	4629      	mov	r1, r5
   bba8a:	4620      	mov	r0, r4
   bba8c:	4798      	blx	r3
            write('\\');
   bba8e:	215c      	movs	r1, #92	; 0x5c
   bba90:	4620      	mov	r0, r4
   bba92:	f7ff fee2 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bba96:	2e0d      	cmp	r6, #13
   bba98:	d80a      	bhi.n	bbab0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bba9a:	2e07      	cmp	r6, #7
   bba9c:	d91c      	bls.n	bbad8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bba9e:	f1a6 0308 	sub.w	r3, r6, #8
   bbaa2:	2b05      	cmp	r3, #5
   bbaa4:	d818      	bhi.n	bbad8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bbaa6:	e8df f003 	tbb	[pc, r3]
   bbaaa:	0f0d      	.short	0x0f0d
   bbaac:	15131711 	.word	0x15131711
   bbab0:	2e22      	cmp	r6, #34	; 0x22
   bbab2:	d001      	beq.n	bbab8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bbab4:	2e5c      	cmp	r6, #92	; 0x5c
   bbab6:	d10f      	bne.n	bbad8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bbab8:	4631      	mov	r1, r6
                write('b');
   bbaba:	4620      	mov	r0, r4
   bbabc:	f7ff fecd 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bbac0:	463d      	mov	r5, r7
    while (s != end) {
   bbac2:	e7cf      	b.n	bba64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bbac4:	2162      	movs	r1, #98	; 0x62
   bbac6:	e7f8      	b.n	bbaba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bbac8:	2174      	movs	r1, #116	; 0x74
   bbaca:	e7f6      	b.n	bbaba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bbacc:	216e      	movs	r1, #110	; 0x6e
   bbace:	e7f4      	b.n	bbaba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bbad0:	2166      	movs	r1, #102	; 0x66
   bbad2:	e7f2      	b.n	bbaba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bbad4:	2172      	movs	r1, #114	; 0x72
   bbad6:	e7f0      	b.n	bbaba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bbad8:	6823      	ldr	r3, [r4, #0]
   bbada:	4632      	mov	r2, r6
   bbadc:	68db      	ldr	r3, [r3, #12]
   bbade:	4649      	mov	r1, r9
   bbae0:	4620      	mov	r0, r4
   bbae2:	4798      	blx	r3
                break;
   bbae4:	e7ec      	b.n	bbac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bbae6:	42bd      	cmp	r5, r7
   bbae8:	d005      	beq.n	bbaf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bbaea:	6823      	ldr	r3, [r4, #0]
   bbaec:	1b7a      	subs	r2, r7, r5
   bbaee:	689b      	ldr	r3, [r3, #8]
   bbaf0:	4629      	mov	r1, r5
   bbaf2:	4620      	mov	r0, r4
   bbaf4:	4798      	blx	r3
    }
    write('"');
   bbaf6:	2122      	movs	r1, #34	; 0x22
   bbaf8:	4620      	mov	r0, r4
   bbafa:	f7ff feae 	bl	bb85a <_ZN5spark10JSONWriter5writeEc>
}
   bbafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbb02:	bf00      	nop
   bbb04:	000bf5df 	.word	0x000bf5df

000bbb08 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bbb08:	b513      	push	{r0, r1, r4, lr}
   bbb0a:	4604      	mov	r4, r0
   bbb0c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbb10:	f7ff ff5e 	bl	bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bbb14:	4620      	mov	r0, r4
   bbb16:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbb1a:	f7ff ff97 	bl	bba4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bbb1e:	2302      	movs	r3, #2
}
   bbb20:	4620      	mov	r0, r4
    state_ = VALUE;
   bbb22:	7123      	strb	r3, [r4, #4]
}
   bbb24:	b002      	add	sp, #8
   bbb26:	bd10      	pop	{r4, pc}

000bbb28 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bbb28:	b513      	push	{r0, r1, r4, lr}
   bbb2a:	4604      	mov	r4, r0
   bbb2c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bbb30:	f7ff ff4e 	bl	bb9d0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bbb34:	4620      	mov	r0, r4
   bbb36:	e9dd 2100 	ldrd	r2, r1, [sp]
   bbb3a:	f7ff ff87 	bl	bba4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bbb3e:	2301      	movs	r3, #1
}
   bbb40:	4620      	mov	r0, r4
    state_ = NEXT;
   bbb42:	7123      	strb	r3, [r4, #4]
}
   bbb44:	b002      	add	sp, #8
   bbb46:	bd10      	pop	{r4, pc}

000bbb48 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bbb48:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bbb4a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bbb4c:	d902      	bls.n	bbb54 <pinAvailable+0xc>
    return false;
   bbb4e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bbb50:	b002      	add	sp, #8
   bbb52:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bbb54:	f1a0 030b 	sub.w	r3, r0, #11
   bbb58:	2b02      	cmp	r3, #2
   bbb5a:	d81a      	bhi.n	bbb92 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bbb5c:	4c17      	ldr	r4, [pc, #92]	; (bbbbc <pinAvailable+0x74>)
   bbb5e:	7821      	ldrb	r1, [r4, #0]
   bbb60:	f3bf 8f5b 	dmb	ish
   bbb64:	f011 0101 	ands.w	r1, r1, #1
   bbb68:	d10b      	bne.n	bbb82 <pinAvailable+0x3a>
   bbb6a:	4620      	mov	r0, r4
   bbb6c:	9101      	str	r1, [sp, #4]
   bbb6e:	f7f8 ffb5 	bl	b4adc <__cxa_guard_acquire>
   bbb72:	9901      	ldr	r1, [sp, #4]
   bbb74:	b128      	cbz	r0, bbb82 <pinAvailable+0x3a>
   bbb76:	4812      	ldr	r0, [pc, #72]	; (bbbc0 <pinAvailable+0x78>)
   bbb78:	f7fc f952 	bl	b7e20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bbb7c:	4620      	mov	r0, r4
   bbb7e:	f7f8 ffb2 	bl	b4ae6 <__cxa_guard_release>
   bbb82:	4b0f      	ldr	r3, [pc, #60]	; (bbbc0 <pinAvailable+0x78>)
   bbb84:	7818      	ldrb	r0, [r3, #0]
   bbb86:	f7fb ff83 	bl	b7a90 <hal_spi_is_enabled>
   bbb8a:	2800      	cmp	r0, #0
   bbb8c:	d1df      	bne.n	bbb4e <pinAvailable+0x6>
  return true; // 'pin' is available
   bbb8e:	2001      	movs	r0, #1
   bbb90:	e7de      	b.n	bbb50 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bbb92:	2801      	cmp	r0, #1
   bbb94:	d809      	bhi.n	bbbaa <pinAvailable+0x62>
   bbb96:	f000 f8eb 	bl	bbd70 <_Z19__fetch_global_Wirev>
   bbb9a:	2100      	movs	r1, #0
   bbb9c:	7c00      	ldrb	r0, [r0, #16]
   bbb9e:	f7fb ff1f 	bl	b79e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bbba2:	f080 0001 	eor.w	r0, r0, #1
   bbba6:	b2c0      	uxtb	r0, r0
   bbba8:	e7d2      	b.n	bbb50 <pinAvailable+0x8>
   bbbaa:	3809      	subs	r0, #9
   bbbac:	2801      	cmp	r0, #1
   bbbae:	d8ee      	bhi.n	bbb8e <pinAvailable+0x46>
   bbbb0:	f000 f89e 	bl	bbcf0 <_Z22__fetch_global_Serial1v>
   bbbb4:	7c00      	ldrb	r0, [r0, #16]
   bbbb6:	f7fb feab 	bl	b7910 <hal_usart_is_enabled>
   bbbba:	e7f2      	b.n	bbba2 <pinAvailable+0x5a>
   bbbbc:	2003e67c 	.word	0x2003e67c
   bbbc0:	2003e680 	.word	0x2003e680

000bbbc4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbbc4:	2823      	cmp	r0, #35	; 0x23
{
   bbbc6:	b538      	push	{r3, r4, r5, lr}
   bbbc8:	4604      	mov	r4, r0
   bbbca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bbbcc:	d80a      	bhi.n	bbbe4 <pinMode+0x20>
   bbbce:	29ff      	cmp	r1, #255	; 0xff
   bbbd0:	d008      	beq.n	bbbe4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bbbd2:	f7ff ffb9 	bl	bbb48 <pinAvailable>
   bbbd6:	b128      	cbz	r0, bbbe4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bbbd8:	4629      	mov	r1, r5
   bbbda:	4620      	mov	r0, r4
}
   bbbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bbbe0:	f7fb bd70 	b.w	b76c4 <hal_gpio_mode>
}
   bbbe4:	bd38      	pop	{r3, r4, r5, pc}

000bbbe6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bbbe6:	b538      	push	{r3, r4, r5, lr}
   bbbe8:	4604      	mov	r4, r0
   bbbea:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bbbec:	f7fb fd72 	bl	b76d4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bbbf0:	28ff      	cmp	r0, #255	; 0xff
   bbbf2:	d010      	beq.n	bbc16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bbbf4:	2806      	cmp	r0, #6
   bbbf6:	d804      	bhi.n	bbc02 <digitalWrite+0x1c>
   bbbf8:	234d      	movs	r3, #77	; 0x4d
   bbbfa:	fa23 f000 	lsr.w	r0, r3, r0
   bbbfe:	07c3      	lsls	r3, r0, #31
   bbc00:	d409      	bmi.n	bbc16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bbc02:	4620      	mov	r0, r4
   bbc04:	f7ff ffa0 	bl	bbb48 <pinAvailable>
   bbc08:	b128      	cbz	r0, bbc16 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bbc0a:	4629      	mov	r1, r5
   bbc0c:	4620      	mov	r0, r4
}
   bbc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bbc12:	f7fb bd67 	b.w	b76e4 <hal_gpio_write>
}
   bbc16:	bd38      	pop	{r3, r4, r5, pc}

000bbc18 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bbc18:	b510      	push	{r4, lr}
   bbc1a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bbc1c:	f7fb fd5a 	bl	b76d4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bbc20:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bbc22:	b2db      	uxtb	r3, r3
   bbc24:	2b01      	cmp	r3, #1
   bbc26:	d908      	bls.n	bbc3a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bbc28:	4620      	mov	r0, r4
   bbc2a:	f7ff ff8d 	bl	bbb48 <pinAvailable>
   bbc2e:	b120      	cbz	r0, bbc3a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bbc30:	4620      	mov	r0, r4
}
   bbc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bbc36:	f7fb bd5d 	b.w	b76f4 <hal_gpio_read>
}
   bbc3a:	2000      	movs	r0, #0
   bbc3c:	bd10      	pop	{r4, pc}

000bbc3e <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bbc3e:	280d      	cmp	r0, #13
{
   bbc40:	b510      	push	{r4, lr}
   bbc42:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bbc44:	bf9c      	itt	ls
   bbc46:	340e      	addls	r4, #14
   bbc48:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	f7ff ff7c 	bl	bbb48 <pinAvailable>
   bbc50:	b150      	cbz	r0, bbc68 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bbc52:	2103      	movs	r1, #3
   bbc54:	4620      	mov	r0, r4
   bbc56:	f7fb fd2d 	bl	b76b4 <hal_pin_validate_function>
   bbc5a:	2803      	cmp	r0, #3
   bbc5c:	d104      	bne.n	bbc68 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bbc5e:	4620      	mov	r0, r4
}
   bbc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bbc64:	f7fb bd56 	b.w	b7714 <hal_adc_read>
}
   bbc68:	2000      	movs	r0, #0
   bbc6a:	bd10      	pop	{r4, pc}

000bbc6c <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   bbc6c:	b538      	push	{r3, r4, r5, lr}
   bbc6e:	4604      	mov	r4, r0
   bbc70:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   bbc72:	f7ff ff69 	bl	bbb48 <pinAvailable>
   bbc76:	b1f0      	cbz	r0, bbcb6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   bbc78:	2104      	movs	r1, #4
   bbc7a:	4620      	mov	r0, r4
   bbc7c:	f7fb fd1a 	bl	b76b4 <hal_pin_validate_function>
   bbc80:	2804      	cmp	r0, #4
   bbc82:	d105      	bne.n	bbc90 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   bbc84:	b2a9      	uxth	r1, r5
   bbc86:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   bbc88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   bbc8c:	f7fb bd3a 	b.w	b7704 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bbc90:	2102      	movs	r1, #2
   bbc92:	4620      	mov	r0, r4
   bbc94:	f7fb fd0e 	bl	b76b4 <hal_pin_validate_function>
   bbc98:	2802      	cmp	r0, #2
   bbc9a:	d10c      	bne.n	bbcb6 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   bbc9c:	4620      	mov	r0, r4
   bbc9e:	f7fb fd19 	bl	b76d4 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bbca2:	2801      	cmp	r0, #1
   bbca4:	d001      	beq.n	bbcaa <_Z11analogWritetm+0x3e>
   bbca6:	2804      	cmp	r0, #4
   bbca8:	d105      	bne.n	bbcb6 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   bbcaa:	4629      	mov	r1, r5
   bbcac:	4620      	mov	r0, r4
}
   bbcae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   bbcb2:	f7fb bd37 	b.w	b7724 <hal_pwm_write_ext>
}
   bbcb6:	bd38      	pop	{r3, r4, r5, pc}

000bbcb8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbcb8:	4770      	bx	lr
	...

000bbcbc <_Z20acquireSerial1Bufferv>:
{
   bbcbc:	b538      	push	{r3, r4, r5, lr}
   bbcbe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbcc0:	2514      	movs	r5, #20
   bbcc2:	462a      	mov	r2, r5
   bbcc4:	2100      	movs	r1, #0
   bbcc6:	f000 f9e3 	bl	bc090 <memset>
   bbcca:	8025      	strh	r5, [r4, #0]
   bbccc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcce:	4907      	ldr	r1, [pc, #28]	; (bbcec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbcd0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcd2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbcd4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcd6:	f000 f871 	bl	bbdbc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcda:	4904      	ldr	r1, [pc, #16]	; (bbcec <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbcdc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbcde:	4628      	mov	r0, r5
   bbce0:	f000 f86c 	bl	bbdbc <_ZnajRKSt9nothrow_t>
    };
   bbce4:	60e0      	str	r0, [r4, #12]
}
   bbce6:	4620      	mov	r0, r4
   bbce8:	bd38      	pop	{r3, r4, r5, pc}
   bbcea:	bf00      	nop
   bbcec:	000bf5e5 	.word	0x000bf5e5

000bbcf0 <_Z22__fetch_global_Serial1v>:
{
   bbcf0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbcf2:	4d0e      	ldr	r5, [pc, #56]	; (bbd2c <_Z22__fetch_global_Serial1v+0x3c>)
   bbcf4:	7829      	ldrb	r1, [r5, #0]
   bbcf6:	f3bf 8f5b 	dmb	ish
   bbcfa:	f011 0401 	ands.w	r4, r1, #1
{
   bbcfe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbd00:	d111      	bne.n	bbd26 <_Z22__fetch_global_Serial1v+0x36>
   bbd02:	4628      	mov	r0, r5
   bbd04:	f7f8 feea 	bl	b4adc <__cxa_guard_acquire>
   bbd08:	b168      	cbz	r0, bbd26 <_Z22__fetch_global_Serial1v+0x36>
   bbd0a:	a801      	add	r0, sp, #4
   bbd0c:	f7ff ffd6 	bl	bbcbc <_Z20acquireSerial1Bufferv>
   bbd10:	aa01      	add	r2, sp, #4
   bbd12:	4621      	mov	r1, r4
   bbd14:	4806      	ldr	r0, [pc, #24]	; (bbd30 <_Z22__fetch_global_Serial1v+0x40>)
   bbd16:	f7ff f903 	bl	baf20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbd1a:	4628      	mov	r0, r5
   bbd1c:	f7f8 fee3 	bl	b4ae6 <__cxa_guard_release>
   bbd20:	4804      	ldr	r0, [pc, #16]	; (bbd34 <_Z22__fetch_global_Serial1v+0x44>)
   bbd22:	f000 f963 	bl	bbfec <atexit>
    return serial1;
}
   bbd26:	4802      	ldr	r0, [pc, #8]	; (bbd30 <_Z22__fetch_global_Serial1v+0x40>)
   bbd28:	b007      	add	sp, #28
   bbd2a:	bd30      	pop	{r4, r5, pc}
   bbd2c:	2003e728 	.word	0x2003e728
   bbd30:	2003e72c 	.word	0x2003e72c
   bbd34:	000bbcb9 	.word	0x000bbcb9

000bbd38 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd38:	4770      	bx	lr
	...

000bbd3c <_Z17acquireWireBufferv>:
{
   bbd3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bbd3e:	4b0a      	ldr	r3, [pc, #40]	; (bbd68 <_Z17acquireWireBufferv+0x2c>)
   bbd40:	6003      	str	r3, [r0, #0]
   bbd42:	2301      	movs	r3, #1
{
   bbd44:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bbd46:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd48:	4908      	ldr	r1, [pc, #32]	; (bbd6c <_Z17acquireWireBufferv+0x30>)
   bbd4a:	2020      	movs	r0, #32
   bbd4c:	f000 f836 	bl	bbdbc <_ZnajRKSt9nothrow_t>
	};
   bbd50:	2520      	movs	r5, #32
   bbd52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd54:	4905      	ldr	r1, [pc, #20]	; (bbd6c <_Z17acquireWireBufferv+0x30>)
	};
   bbd56:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bbd58:	4628      	mov	r0, r5
   bbd5a:	f000 f82f 	bl	bbdbc <_ZnajRKSt9nothrow_t>
	};
   bbd5e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bbd62:	4620      	mov	r0, r4
   bbd64:	bd38      	pop	{r3, r4, r5, pc}
   bbd66:	bf00      	nop
   bbd68:	00010018 	.word	0x00010018
   bbd6c:	000bf5e5 	.word	0x000bf5e5

000bbd70 <_Z19__fetch_global_Wirev>:
{
   bbd70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd72:	4d0e      	ldr	r5, [pc, #56]	; (bbdac <_Z19__fetch_global_Wirev+0x3c>)
   bbd74:	7829      	ldrb	r1, [r5, #0]
   bbd76:	f3bf 8f5b 	dmb	ish
   bbd7a:	f011 0401 	ands.w	r4, r1, #1
{
   bbd7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbd80:	d111      	bne.n	bbda6 <_Z19__fetch_global_Wirev+0x36>
   bbd82:	4628      	mov	r0, r5
   bbd84:	f7f8 feaa 	bl	b4adc <__cxa_guard_acquire>
   bbd88:	b168      	cbz	r0, bbda6 <_Z19__fetch_global_Wirev+0x36>
   bbd8a:	4668      	mov	r0, sp
   bbd8c:	f7ff ffd6 	bl	bbd3c <_Z17acquireWireBufferv>
   bbd90:	466a      	mov	r2, sp
   bbd92:	4621      	mov	r1, r4
   bbd94:	4806      	ldr	r0, [pc, #24]	; (bbdb0 <_Z19__fetch_global_Wirev+0x40>)
   bbd96:	f7ff f90d 	bl	bafb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbd9a:	4628      	mov	r0, r5
   bbd9c:	f7f8 fea3 	bl	b4ae6 <__cxa_guard_release>
   bbda0:	4804      	ldr	r0, [pc, #16]	; (bbdb4 <_Z19__fetch_global_Wirev+0x44>)
   bbda2:	f000 f923 	bl	bbfec <atexit>
	return wire;
}
   bbda6:	4802      	ldr	r0, [pc, #8]	; (bbdb0 <_Z19__fetch_global_Wirev+0x40>)
   bbda8:	b007      	add	sp, #28
   bbdaa:	bd30      	pop	{r4, r5, pc}
   bbdac:	2003e744 	.word	0x2003e744
   bbdb0:	2003e748 	.word	0x2003e748
   bbdb4:	000bbd39 	.word	0x000bbd39

000bbdb8 <_ZnwjRKSt9nothrow_t>:
   bbdb8:	f7f8 be7b 	b.w	b4ab2 <_Znwj>

000bbdbc <_ZnajRKSt9nothrow_t>:
   bbdbc:	f7f8 be7b 	b.w	b4ab6 <_Znaj>

000bbdc0 <_ZSt25__throw_bad_function_callv>:
   bbdc0:	b508      	push	{r3, lr}
   bbdc2:	f7fb ffc1 	bl	b7d48 <abort>
	...

000bbdc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bbdc8:	4901      	ldr	r1, [pc, #4]	; (bbdd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bbdca:	f000 b8f9 	b.w	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbdce:	bf00      	nop
   bbdd0:	000bf600 	.word	0x000bf600

000bbdd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bbdd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bbdd6:	2400      	movs	r4, #0
   bbdd8:	2310      	movs	r3, #16
   bbdda:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bbdde:	6803      	ldr	r3, [r0, #0]
   bbde0:	4615      	mov	r5, r2
   bbde2:	699e      	ldr	r6, [r3, #24]
   bbde4:	6812      	ldr	r2, [r2, #0]
   bbde6:	466b      	mov	r3, sp
   bbde8:	e9cd 4400 	strd	r4, r4, [sp]
   bbdec:	47b0      	blx	r6
   bbdee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bbdf2:	f003 0306 	and.w	r3, r3, #6
   bbdf6:	2b06      	cmp	r3, #6
   bbdf8:	bf03      	ittte	eq
   bbdfa:	9b00      	ldreq	r3, [sp, #0]
   bbdfc:	602b      	streq	r3, [r5, #0]
   bbdfe:	2001      	moveq	r0, #1
   bbe00:	4620      	movne	r0, r4
   bbe02:	b004      	add	sp, #16
   bbe04:	bd70      	pop	{r4, r5, r6, pc}

000bbe06 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bbe06:	9800      	ldr	r0, [sp, #0]
   bbe08:	4290      	cmp	r0, r2
   bbe0a:	bf14      	ite	ne
   bbe0c:	2001      	movne	r0, #1
   bbe0e:	2006      	moveq	r0, #6
   bbe10:	4770      	bx	lr
	...

000bbe14 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bbe14:	b510      	push	{r4, lr}
   bbe16:	4b03      	ldr	r3, [pc, #12]	; (bbe24 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bbe18:	6003      	str	r3, [r0, #0]
   bbe1a:	4604      	mov	r4, r0
   bbe1c:	f000 f8cd 	bl	bbfba <_ZNSt9type_infoD1Ev>
   bbe20:	4620      	mov	r0, r4
   bbe22:	bd10      	pop	{r4, pc}
   bbe24:	000bf640 	.word	0x000bf640

000bbe28 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bbe28:	b510      	push	{r4, lr}
   bbe2a:	4604      	mov	r4, r0
   bbe2c:	f7ff fff2 	bl	bbe14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbe30:	4620      	mov	r0, r4
   bbe32:	2108      	movs	r1, #8
   bbe34:	f7f8 fe43 	bl	b4abe <_ZdlPvj>
   bbe38:	4620      	mov	r0, r4
   bbe3a:	bd10      	pop	{r4, pc}

000bbe3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bbe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbe40:	461f      	mov	r7, r3
   bbe42:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bbe46:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bbe4a:	4598      	cmp	r8, r3
   bbe4c:	4606      	mov	r6, r0
   bbe4e:	4615      	mov	r5, r2
   bbe50:	d107      	bne.n	bbe62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbe52:	9907      	ldr	r1, [sp, #28]
   bbe54:	f000 f8b4 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbe58:	b118      	cbz	r0, bbe62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bbe5a:	7165      	strb	r5, [r4, #5]
   bbe5c:	2000      	movs	r0, #0
   bbe5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbe62:	4639      	mov	r1, r7
   bbe64:	4630      	mov	r0, r6
   bbe66:	f000 f8ab 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbe6a:	2800      	cmp	r0, #0
   bbe6c:	d0f6      	beq.n	bbe5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bbe6e:	2301      	movs	r3, #1
   bbe70:	f8c4 8000 	str.w	r8, [r4]
   bbe74:	7125      	strb	r5, [r4, #4]
   bbe76:	71a3      	strb	r3, [r4, #6]
   bbe78:	e7f0      	b.n	bbe5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bbe7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bbe7a:	b538      	push	{r3, r4, r5, lr}
   bbe7c:	4615      	mov	r5, r2
   bbe7e:	461c      	mov	r4, r3
   bbe80:	f000 f89e 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbe84:	b120      	cbz	r0, bbe90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bbe86:	2308      	movs	r3, #8
   bbe88:	60e3      	str	r3, [r4, #12]
   bbe8a:	2306      	movs	r3, #6
   bbe8c:	6025      	str	r5, [r4, #0]
   bbe8e:	7123      	strb	r3, [r4, #4]
   bbe90:	bd38      	pop	{r3, r4, r5, pc}

000bbe92 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bbe92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbe94:	4605      	mov	r5, r0
   bbe96:	460c      	mov	r4, r1
   bbe98:	9201      	str	r2, [sp, #4]
   bbe9a:	461e      	mov	r6, r3
   bbe9c:	f000 f890 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbea0:	b950      	cbnz	r0, bbeb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbea2:	2e03      	cmp	r6, #3
   bbea4:	d808      	bhi.n	bbeb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bbea6:	6823      	ldr	r3, [r4, #0]
   bbea8:	9a01      	ldr	r2, [sp, #4]
   bbeaa:	695b      	ldr	r3, [r3, #20]
   bbeac:	4629      	mov	r1, r5
   bbeae:	4620      	mov	r0, r4
   bbeb0:	b002      	add	sp, #8
   bbeb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbeb6:	4718      	bx	r3
   bbeb8:	b002      	add	sp, #8
   bbeba:	bd70      	pop	{r4, r5, r6, pc}

000bbebc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bbebc:	b510      	push	{r4, lr}
   bbebe:	4b03      	ldr	r3, [pc, #12]	; (bbecc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bbec0:	6003      	str	r3, [r0, #0]
   bbec2:	4604      	mov	r4, r0
   bbec4:	f7ff ffa6 	bl	bbe14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bbec8:	4620      	mov	r0, r4
   bbeca:	bd10      	pop	{r4, pc}
   bbecc:	000bf6a0 	.word	0x000bf6a0

000bbed0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bbed0:	b510      	push	{r4, lr}
   bbed2:	4604      	mov	r4, r0
   bbed4:	f7ff fff2 	bl	bbebc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bbed8:	4620      	mov	r0, r4
   bbeda:	210c      	movs	r1, #12
   bbedc:	f7f8 fdef 	bl	b4abe <_ZdlPvj>
   bbee0:	4620      	mov	r0, r4
   bbee2:	bd10      	pop	{r4, pc}

000bbee4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bbee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbee6:	9f08      	ldr	r7, [sp, #32]
   bbee8:	4297      	cmp	r7, r2
   bbeea:	4605      	mov	r5, r0
   bbeec:	460e      	mov	r6, r1
   bbeee:	4614      	mov	r4, r2
   bbef0:	d00a      	beq.n	bbf08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bbef2:	68a8      	ldr	r0, [r5, #8]
   bbef4:	6802      	ldr	r2, [r0, #0]
   bbef6:	9708      	str	r7, [sp, #32]
   bbef8:	6a15      	ldr	r5, [r2, #32]
   bbefa:	4631      	mov	r1, r6
   bbefc:	4622      	mov	r2, r4
   bbefe:	46ac      	mov	ip, r5
   bbf00:	b003      	add	sp, #12
   bbf02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbf06:	4760      	bx	ip
   bbf08:	4619      	mov	r1, r3
   bbf0a:	9301      	str	r3, [sp, #4]
   bbf0c:	f000 f858 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbf10:	9b01      	ldr	r3, [sp, #4]
   bbf12:	2800      	cmp	r0, #0
   bbf14:	d0ed      	beq.n	bbef2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bbf16:	2006      	movs	r0, #6
   bbf18:	b003      	add	sp, #12
   bbf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbf1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbf1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf20:	460d      	mov	r5, r1
   bbf22:	4619      	mov	r1, r3
   bbf24:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbf28:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbf2c:	4681      	mov	r9, r0
   bbf2e:	4617      	mov	r7, r2
   bbf30:	4698      	mov	r8, r3
   bbf32:	f000 f845 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbf36:	b190      	cbz	r0, bbf5e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbf38:	2d00      	cmp	r5, #0
   bbf3a:	6034      	str	r4, [r6, #0]
   bbf3c:	7137      	strb	r7, [r6, #4]
   bbf3e:	db09      	blt.n	bbf54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbf40:	1961      	adds	r1, r4, r5
   bbf42:	458a      	cmp	sl, r1
   bbf44:	bf0c      	ite	eq
   bbf46:	2106      	moveq	r1, #6
   bbf48:	2101      	movne	r1, #1
   bbf4a:	71b1      	strb	r1, [r6, #6]
   bbf4c:	2000      	movs	r0, #0
   bbf4e:	b001      	add	sp, #4
   bbf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf54:	3502      	adds	r5, #2
   bbf56:	d1f9      	bne.n	bbf4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf58:	2301      	movs	r3, #1
   bbf5a:	71b3      	strb	r3, [r6, #6]
   bbf5c:	e7f6      	b.n	bbf4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf5e:	4554      	cmp	r4, sl
   bbf60:	d106      	bne.n	bbf70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbf62:	4659      	mov	r1, fp
   bbf64:	4648      	mov	r0, r9
   bbf66:	f000 f82b 	bl	bbfc0 <_ZNKSt9type_infoeqERKS_>
   bbf6a:	b108      	cbz	r0, bbf70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbf6c:	7177      	strb	r7, [r6, #5]
   bbf6e:	e7ed      	b.n	bbf4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbf70:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbf74:	6803      	ldr	r3, [r0, #0]
   bbf76:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbf7a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbf7e:	69dc      	ldr	r4, [r3, #28]
   bbf80:	463a      	mov	r2, r7
   bbf82:	4643      	mov	r3, r8
   bbf84:	4629      	mov	r1, r5
   bbf86:	46a4      	mov	ip, r4
   bbf88:	b001      	add	sp, #4
   bbf8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf8e:	4760      	bx	ip

000bbf90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf94:	4607      	mov	r7, r0
   bbf96:	460c      	mov	r4, r1
   bbf98:	4615      	mov	r5, r2
   bbf9a:	461e      	mov	r6, r3
   bbf9c:	f7ff ff6d 	bl	bbe7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbfa0:	b948      	cbnz	r0, bbfb6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbfa2:	68b8      	ldr	r0, [r7, #8]
   bbfa4:	6803      	ldr	r3, [r0, #0]
   bbfa6:	699f      	ldr	r7, [r3, #24]
   bbfa8:	462a      	mov	r2, r5
   bbfaa:	4633      	mov	r3, r6
   bbfac:	4621      	mov	r1, r4
   bbfae:	46bc      	mov	ip, r7
   bbfb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbfb4:	4760      	bx	ip
   bbfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbfba <_ZNSt9type_infoD1Ev>:
   bbfba:	4770      	bx	lr

000bbfbc <_ZNKSt9type_info14__is_pointer_pEv>:
   bbfbc:	2000      	movs	r0, #0
   bbfbe:	4770      	bx	lr

000bbfc0 <_ZNKSt9type_infoeqERKS_>:
   bbfc0:	4281      	cmp	r1, r0
   bbfc2:	b508      	push	{r3, lr}
   bbfc4:	d00e      	beq.n	bbfe4 <_ZNKSt9type_infoeqERKS_+0x24>
   bbfc6:	6840      	ldr	r0, [r0, #4]
   bbfc8:	7803      	ldrb	r3, [r0, #0]
   bbfca:	2b2a      	cmp	r3, #42	; 0x2a
   bbfcc:	d00c      	beq.n	bbfe8 <_ZNKSt9type_infoeqERKS_+0x28>
   bbfce:	6849      	ldr	r1, [r1, #4]
   bbfd0:	780b      	ldrb	r3, [r1, #0]
   bbfd2:	2b2a      	cmp	r3, #42	; 0x2a
   bbfd4:	bf08      	it	eq
   bbfd6:	3101      	addeq	r1, #1
   bbfd8:	f7f8 fd06 	bl	b49e8 <strcmp>
   bbfdc:	fab0 f080 	clz	r0, r0
   bbfe0:	0940      	lsrs	r0, r0, #5
   bbfe2:	bd08      	pop	{r3, pc}
   bbfe4:	2001      	movs	r0, #1
   bbfe6:	e7fc      	b.n	bbfe2 <_ZNKSt9type_infoeqERKS_+0x22>
   bbfe8:	2000      	movs	r0, #0
   bbfea:	e7fa      	b.n	bbfe2 <_ZNKSt9type_infoeqERKS_+0x22>

000bbfec <atexit>:
   bbfec:	2300      	movs	r3, #0
   bbfee:	4601      	mov	r1, r0
   bbff0:	461a      	mov	r2, r3
   bbff2:	4618      	mov	r0, r3
   bbff4:	f000 bfa2 	b.w	bcf3c <__register_exitproc>

000bbff8 <atof>:
   bbff8:	2100      	movs	r1, #0
   bbffa:	f000 bf07 	b.w	bce0c <strtod>

000bbffe <atoi>:
   bbffe:	220a      	movs	r2, #10
   bc000:	2100      	movs	r1, #0
   bc002:	f000 bf91 	b.w	bcf28 <strtol>

000bc006 <atol>:
   bc006:	220a      	movs	r2, #10
   bc008:	2100      	movs	r1, #0
   bc00a:	f000 bf8d 	b.w	bcf28 <strtol>
	...

000bc010 <isprint>:
   bc010:	4b02      	ldr	r3, [pc, #8]	; (bc01c <isprint+0xc>)
   bc012:	4418      	add	r0, r3
   bc014:	7840      	ldrb	r0, [r0, #1]
   bc016:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc01a:	4770      	bx	lr
   bc01c:	000bf7d0 	.word	0x000bf7d0

000bc020 <memcmp>:
   bc020:	b510      	push	{r4, lr}
   bc022:	3901      	subs	r1, #1
   bc024:	4402      	add	r2, r0
   bc026:	4290      	cmp	r0, r2
   bc028:	d101      	bne.n	bc02e <memcmp+0xe>
   bc02a:	2000      	movs	r0, #0
   bc02c:	e005      	b.n	bc03a <memcmp+0x1a>
   bc02e:	7803      	ldrb	r3, [r0, #0]
   bc030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc034:	42a3      	cmp	r3, r4
   bc036:	d001      	beq.n	bc03c <memcmp+0x1c>
   bc038:	1b18      	subs	r0, r3, r4
   bc03a:	bd10      	pop	{r4, pc}
   bc03c:	3001      	adds	r0, #1
   bc03e:	e7f2      	b.n	bc026 <memcmp+0x6>

000bc040 <memcpy>:
   bc040:	440a      	add	r2, r1
   bc042:	4291      	cmp	r1, r2
   bc044:	f100 33ff 	add.w	r3, r0, #4294967295
   bc048:	d100      	bne.n	bc04c <memcpy+0xc>
   bc04a:	4770      	bx	lr
   bc04c:	b510      	push	{r4, lr}
   bc04e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc052:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc056:	4291      	cmp	r1, r2
   bc058:	d1f9      	bne.n	bc04e <memcpy+0xe>
   bc05a:	bd10      	pop	{r4, pc}

000bc05c <memmove>:
   bc05c:	4288      	cmp	r0, r1
   bc05e:	b510      	push	{r4, lr}
   bc060:	eb01 0402 	add.w	r4, r1, r2
   bc064:	d902      	bls.n	bc06c <memmove+0x10>
   bc066:	4284      	cmp	r4, r0
   bc068:	4623      	mov	r3, r4
   bc06a:	d807      	bhi.n	bc07c <memmove+0x20>
   bc06c:	1e43      	subs	r3, r0, #1
   bc06e:	42a1      	cmp	r1, r4
   bc070:	d008      	beq.n	bc084 <memmove+0x28>
   bc072:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc076:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc07a:	e7f8      	b.n	bc06e <memmove+0x12>
   bc07c:	4402      	add	r2, r0
   bc07e:	4601      	mov	r1, r0
   bc080:	428a      	cmp	r2, r1
   bc082:	d100      	bne.n	bc086 <memmove+0x2a>
   bc084:	bd10      	pop	{r4, pc}
   bc086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc08e:	e7f7      	b.n	bc080 <memmove+0x24>

000bc090 <memset>:
   bc090:	4402      	add	r2, r0
   bc092:	4603      	mov	r3, r0
   bc094:	4293      	cmp	r3, r2
   bc096:	d100      	bne.n	bc09a <memset+0xa>
   bc098:	4770      	bx	lr
   bc09a:	f803 1b01 	strb.w	r1, [r3], #1
   bc09e:	e7f9      	b.n	bc094 <memset+0x4>

000bc0a0 <srand>:
   bc0a0:	b538      	push	{r3, r4, r5, lr}
   bc0a2:	4b10      	ldr	r3, [pc, #64]	; (bc0e4 <srand+0x44>)
   bc0a4:	681d      	ldr	r5, [r3, #0]
   bc0a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc0a8:	4604      	mov	r4, r0
   bc0aa:	b9b3      	cbnz	r3, bc0da <srand+0x3a>
   bc0ac:	2018      	movs	r0, #24
   bc0ae:	f7fb fe23 	bl	b7cf8 <malloc>
   bc0b2:	4602      	mov	r2, r0
   bc0b4:	63a8      	str	r0, [r5, #56]	; 0x38
   bc0b6:	b920      	cbnz	r0, bc0c2 <srand+0x22>
   bc0b8:	4b0b      	ldr	r3, [pc, #44]	; (bc0e8 <srand+0x48>)
   bc0ba:	480c      	ldr	r0, [pc, #48]	; (bc0ec <srand+0x4c>)
   bc0bc:	2142      	movs	r1, #66	; 0x42
   bc0be:	f7fb fe5b 	bl	b7d78 <__assert_func>
   bc0c2:	490b      	ldr	r1, [pc, #44]	; (bc0f0 <srand+0x50>)
   bc0c4:	4b0b      	ldr	r3, [pc, #44]	; (bc0f4 <srand+0x54>)
   bc0c6:	e9c0 1300 	strd	r1, r3, [r0]
   bc0ca:	4b0b      	ldr	r3, [pc, #44]	; (bc0f8 <srand+0x58>)
   bc0cc:	6083      	str	r3, [r0, #8]
   bc0ce:	230b      	movs	r3, #11
   bc0d0:	8183      	strh	r3, [r0, #12]
   bc0d2:	2100      	movs	r1, #0
   bc0d4:	2001      	movs	r0, #1
   bc0d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc0da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc0dc:	2200      	movs	r2, #0
   bc0de:	611c      	str	r4, [r3, #16]
   bc0e0:	615a      	str	r2, [r3, #20]
   bc0e2:	bd38      	pop	{r3, r4, r5, pc}
   bc0e4:	2003e2e8 	.word	0x2003e2e8
   bc0e8:	000bf6d9 	.word	0x000bf6d9
   bc0ec:	000bf6f0 	.word	0x000bf6f0
   bc0f0:	abcd330e 	.word	0xabcd330e
   bc0f4:	e66d1234 	.word	0xe66d1234
   bc0f8:	0005deec 	.word	0x0005deec

000bc0fc <strchr>:
   bc0fc:	b2c9      	uxtb	r1, r1
   bc0fe:	4603      	mov	r3, r0
   bc100:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc104:	b11a      	cbz	r2, bc10e <strchr+0x12>
   bc106:	428a      	cmp	r2, r1
   bc108:	d1f9      	bne.n	bc0fe <strchr+0x2>
   bc10a:	4618      	mov	r0, r3
   bc10c:	4770      	bx	lr
   bc10e:	2900      	cmp	r1, #0
   bc110:	bf18      	it	ne
   bc112:	2300      	movne	r3, #0
   bc114:	e7f9      	b.n	bc10a <strchr+0xe>

000bc116 <strchrnul>:
   bc116:	b510      	push	{r4, lr}
   bc118:	4604      	mov	r4, r0
   bc11a:	f7ff ffef 	bl	bc0fc <strchr>
   bc11e:	b918      	cbnz	r0, bc128 <strchrnul+0x12>
   bc120:	4620      	mov	r0, r4
   bc122:	f7f8 fc6b 	bl	b49fc <strlen>
   bc126:	4420      	add	r0, r4
   bc128:	bd10      	pop	{r4, pc}

000bc12a <strcpy>:
   bc12a:	4603      	mov	r3, r0
   bc12c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc130:	f803 2b01 	strb.w	r2, [r3], #1
   bc134:	2a00      	cmp	r2, #0
   bc136:	d1f9      	bne.n	bc12c <strcpy+0x2>
   bc138:	4770      	bx	lr

000bc13a <strncmp>:
   bc13a:	b510      	push	{r4, lr}
   bc13c:	b17a      	cbz	r2, bc15e <strncmp+0x24>
   bc13e:	4603      	mov	r3, r0
   bc140:	3901      	subs	r1, #1
   bc142:	1884      	adds	r4, r0, r2
   bc144:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc148:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc14c:	4290      	cmp	r0, r2
   bc14e:	d101      	bne.n	bc154 <strncmp+0x1a>
   bc150:	42a3      	cmp	r3, r4
   bc152:	d101      	bne.n	bc158 <strncmp+0x1e>
   bc154:	1a80      	subs	r0, r0, r2
   bc156:	bd10      	pop	{r4, pc}
   bc158:	2800      	cmp	r0, #0
   bc15a:	d1f3      	bne.n	bc144 <strncmp+0xa>
   bc15c:	e7fa      	b.n	bc154 <strncmp+0x1a>
   bc15e:	4610      	mov	r0, r2
   bc160:	e7f9      	b.n	bc156 <strncmp+0x1c>

000bc162 <strncpy>:
   bc162:	b510      	push	{r4, lr}
   bc164:	3901      	subs	r1, #1
   bc166:	4603      	mov	r3, r0
   bc168:	b132      	cbz	r2, bc178 <strncpy+0x16>
   bc16a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc16e:	f803 4b01 	strb.w	r4, [r3], #1
   bc172:	3a01      	subs	r2, #1
   bc174:	2c00      	cmp	r4, #0
   bc176:	d1f7      	bne.n	bc168 <strncpy+0x6>
   bc178:	441a      	add	r2, r3
   bc17a:	2100      	movs	r1, #0
   bc17c:	4293      	cmp	r3, r2
   bc17e:	d100      	bne.n	bc182 <strncpy+0x20>
   bc180:	bd10      	pop	{r4, pc}
   bc182:	f803 1b01 	strb.w	r1, [r3], #1
   bc186:	e7f9      	b.n	bc17c <strncpy+0x1a>

000bc188 <strnlen>:
   bc188:	b510      	push	{r4, lr}
   bc18a:	4602      	mov	r2, r0
   bc18c:	4401      	add	r1, r0
   bc18e:	428a      	cmp	r2, r1
   bc190:	4613      	mov	r3, r2
   bc192:	d003      	beq.n	bc19c <strnlen+0x14>
   bc194:	781c      	ldrb	r4, [r3, #0]
   bc196:	3201      	adds	r2, #1
   bc198:	2c00      	cmp	r4, #0
   bc19a:	d1f8      	bne.n	bc18e <strnlen+0x6>
   bc19c:	1a18      	subs	r0, r3, r0
   bc19e:	bd10      	pop	{r4, pc}

000bc1a0 <strrchr>:
   bc1a0:	b538      	push	{r3, r4, r5, lr}
   bc1a2:	4603      	mov	r3, r0
   bc1a4:	460c      	mov	r4, r1
   bc1a6:	b969      	cbnz	r1, bc1c4 <strrchr+0x24>
   bc1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc1ac:	f7ff bfa6 	b.w	bc0fc <strchr>
   bc1b0:	1c43      	adds	r3, r0, #1
   bc1b2:	4605      	mov	r5, r0
   bc1b4:	4621      	mov	r1, r4
   bc1b6:	4618      	mov	r0, r3
   bc1b8:	f7ff ffa0 	bl	bc0fc <strchr>
   bc1bc:	2800      	cmp	r0, #0
   bc1be:	d1f7      	bne.n	bc1b0 <strrchr+0x10>
   bc1c0:	4628      	mov	r0, r5
   bc1c2:	bd38      	pop	{r3, r4, r5, pc}
   bc1c4:	2500      	movs	r5, #0
   bc1c6:	e7f5      	b.n	bc1b4 <strrchr+0x14>

000bc1c8 <sulp>:
   bc1c8:	b570      	push	{r4, r5, r6, lr}
   bc1ca:	4604      	mov	r4, r0
   bc1cc:	460d      	mov	r5, r1
   bc1ce:	ec45 4b10 	vmov	d0, r4, r5
   bc1d2:	4616      	mov	r6, r2
   bc1d4:	f001 fe0c 	bl	bddf0 <__ulp>
   bc1d8:	ec51 0b10 	vmov	r0, r1, d0
   bc1dc:	b17e      	cbz	r6, bc1fe <sulp+0x36>
   bc1de:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc1e6:	2b00      	cmp	r3, #0
   bc1e8:	dd09      	ble.n	bc1fe <sulp+0x36>
   bc1ea:	051b      	lsls	r3, r3, #20
   bc1ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc1f0:	2400      	movs	r4, #0
   bc1f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc1f6:	4622      	mov	r2, r4
   bc1f8:	462b      	mov	r3, r5
   bc1fa:	f7f8 f8cd 	bl	b4398 <__aeabi_dmul>
   bc1fe:	bd70      	pop	{r4, r5, r6, pc}

000bc200 <_strtod_l>:
   bc200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc204:	ed2d 8b02 	vpush	{d8}
   bc208:	b09d      	sub	sp, #116	; 0x74
   bc20a:	461f      	mov	r7, r3
   bc20c:	2300      	movs	r3, #0
   bc20e:	9318      	str	r3, [sp, #96]	; 0x60
   bc210:	4ba2      	ldr	r3, [pc, #648]	; (bc49c <_strtod_l+0x29c>)
   bc212:	9213      	str	r2, [sp, #76]	; 0x4c
   bc214:	681b      	ldr	r3, [r3, #0]
   bc216:	9305      	str	r3, [sp, #20]
   bc218:	4604      	mov	r4, r0
   bc21a:	4618      	mov	r0, r3
   bc21c:	4688      	mov	r8, r1
   bc21e:	f7f8 fbed 	bl	b49fc <strlen>
   bc222:	f04f 0a00 	mov.w	sl, #0
   bc226:	4605      	mov	r5, r0
   bc228:	f04f 0b00 	mov.w	fp, #0
   bc22c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc232:	781a      	ldrb	r2, [r3, #0]
   bc234:	2a2b      	cmp	r2, #43	; 0x2b
   bc236:	d04e      	beq.n	bc2d6 <_strtod_l+0xd6>
   bc238:	d83b      	bhi.n	bc2b2 <_strtod_l+0xb2>
   bc23a:	2a0d      	cmp	r2, #13
   bc23c:	d834      	bhi.n	bc2a8 <_strtod_l+0xa8>
   bc23e:	2a08      	cmp	r2, #8
   bc240:	d834      	bhi.n	bc2ac <_strtod_l+0xac>
   bc242:	2a00      	cmp	r2, #0
   bc244:	d03e      	beq.n	bc2c4 <_strtod_l+0xc4>
   bc246:	2300      	movs	r3, #0
   bc248:	930a      	str	r3, [sp, #40]	; 0x28
   bc24a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc24c:	7833      	ldrb	r3, [r6, #0]
   bc24e:	2b30      	cmp	r3, #48	; 0x30
   bc250:	f040 80b0 	bne.w	bc3b4 <_strtod_l+0x1b4>
   bc254:	7873      	ldrb	r3, [r6, #1]
   bc256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc25a:	2b58      	cmp	r3, #88	; 0x58
   bc25c:	d168      	bne.n	bc330 <_strtod_l+0x130>
   bc25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc260:	9301      	str	r3, [sp, #4]
   bc262:	ab18      	add	r3, sp, #96	; 0x60
   bc264:	9702      	str	r7, [sp, #8]
   bc266:	9300      	str	r3, [sp, #0]
   bc268:	4a8d      	ldr	r2, [pc, #564]	; (bc4a0 <_strtod_l+0x2a0>)
   bc26a:	ab19      	add	r3, sp, #100	; 0x64
   bc26c:	a917      	add	r1, sp, #92	; 0x5c
   bc26e:	4620      	mov	r0, r4
   bc270:	f000 ff2e 	bl	bd0d0 <__gethex>
   bc274:	f010 0707 	ands.w	r7, r0, #7
   bc278:	4605      	mov	r5, r0
   bc27a:	d005      	beq.n	bc288 <_strtod_l+0x88>
   bc27c:	2f06      	cmp	r7, #6
   bc27e:	d12c      	bne.n	bc2da <_strtod_l+0xda>
   bc280:	3601      	adds	r6, #1
   bc282:	2300      	movs	r3, #0
   bc284:	9617      	str	r6, [sp, #92]	; 0x5c
   bc286:	930a      	str	r3, [sp, #40]	; 0x28
   bc288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc28a:	2b00      	cmp	r3, #0
   bc28c:	f040 8590 	bne.w	bcdb0 <_strtod_l+0xbb0>
   bc290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc292:	b1eb      	cbz	r3, bc2d0 <_strtod_l+0xd0>
   bc294:	4652      	mov	r2, sl
   bc296:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc29a:	ec43 2b10 	vmov	d0, r2, r3
   bc29e:	b01d      	add	sp, #116	; 0x74
   bc2a0:	ecbd 8b02 	vpop	{d8}
   bc2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc2a8:	2a20      	cmp	r2, #32
   bc2aa:	d1cc      	bne.n	bc246 <_strtod_l+0x46>
   bc2ac:	3301      	adds	r3, #1
   bc2ae:	9317      	str	r3, [sp, #92]	; 0x5c
   bc2b0:	e7be      	b.n	bc230 <_strtod_l+0x30>
   bc2b2:	2a2d      	cmp	r2, #45	; 0x2d
   bc2b4:	d1c7      	bne.n	bc246 <_strtod_l+0x46>
   bc2b6:	2201      	movs	r2, #1
   bc2b8:	920a      	str	r2, [sp, #40]	; 0x28
   bc2ba:	1c5a      	adds	r2, r3, #1
   bc2bc:	9217      	str	r2, [sp, #92]	; 0x5c
   bc2be:	785b      	ldrb	r3, [r3, #1]
   bc2c0:	2b00      	cmp	r3, #0
   bc2c2:	d1c2      	bne.n	bc24a <_strtod_l+0x4a>
   bc2c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc2c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc2ca:	2b00      	cmp	r3, #0
   bc2cc:	f040 856e 	bne.w	bcdac <_strtod_l+0xbac>
   bc2d0:	4652      	mov	r2, sl
   bc2d2:	465b      	mov	r3, fp
   bc2d4:	e7e1      	b.n	bc29a <_strtod_l+0x9a>
   bc2d6:	2200      	movs	r2, #0
   bc2d8:	e7ee      	b.n	bc2b8 <_strtod_l+0xb8>
   bc2da:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc2dc:	b13a      	cbz	r2, bc2ee <_strtod_l+0xee>
   bc2de:	2135      	movs	r1, #53	; 0x35
   bc2e0:	a81a      	add	r0, sp, #104	; 0x68
   bc2e2:	f001 fe90 	bl	be006 <__copybits>
   bc2e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc2e8:	4620      	mov	r0, r4
   bc2ea:	f001 fa4f 	bl	bd78c <_Bfree>
   bc2ee:	3f01      	subs	r7, #1
   bc2f0:	2f04      	cmp	r7, #4
   bc2f2:	d806      	bhi.n	bc302 <_strtod_l+0x102>
   bc2f4:	e8df f007 	tbb	[pc, r7]
   bc2f8:	1714030a 	.word	0x1714030a
   bc2fc:	0a          	.byte	0x0a
   bc2fd:	00          	.byte	0x00
   bc2fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc302:	0728      	lsls	r0, r5, #28
   bc304:	d5c0      	bpl.n	bc288 <_strtod_l+0x88>
   bc306:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc30a:	e7bd      	b.n	bc288 <_strtod_l+0x88>
   bc30c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc310:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc316:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc31a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc31e:	e7f0      	b.n	bc302 <_strtod_l+0x102>
   bc320:	f8df b180 	ldr.w	fp, [pc, #384]	; bc4a4 <_strtod_l+0x2a4>
   bc324:	e7ed      	b.n	bc302 <_strtod_l+0x102>
   bc326:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc32a:	f04f 3aff 	mov.w	sl, #4294967295
   bc32e:	e7e8      	b.n	bc302 <_strtod_l+0x102>
   bc330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc332:	1c5a      	adds	r2, r3, #1
   bc334:	9217      	str	r2, [sp, #92]	; 0x5c
   bc336:	785b      	ldrb	r3, [r3, #1]
   bc338:	2b30      	cmp	r3, #48	; 0x30
   bc33a:	d0f9      	beq.n	bc330 <_strtod_l+0x130>
   bc33c:	2b00      	cmp	r3, #0
   bc33e:	d0a3      	beq.n	bc288 <_strtod_l+0x88>
   bc340:	2301      	movs	r3, #1
   bc342:	f04f 0900 	mov.w	r9, #0
   bc346:	9304      	str	r3, [sp, #16]
   bc348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc34a:	9308      	str	r3, [sp, #32]
   bc34c:	f8cd 901c 	str.w	r9, [sp, #28]
   bc350:	464f      	mov	r7, r9
   bc352:	220a      	movs	r2, #10
   bc354:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc356:	7806      	ldrb	r6, [r0, #0]
   bc358:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc35c:	b2d9      	uxtb	r1, r3
   bc35e:	2909      	cmp	r1, #9
   bc360:	d92a      	bls.n	bc3b8 <_strtod_l+0x1b8>
   bc362:	9905      	ldr	r1, [sp, #20]
   bc364:	462a      	mov	r2, r5
   bc366:	f7ff fee8 	bl	bc13a <strncmp>
   bc36a:	b398      	cbz	r0, bc3d4 <_strtod_l+0x1d4>
   bc36c:	2000      	movs	r0, #0
   bc36e:	4632      	mov	r2, r6
   bc370:	463d      	mov	r5, r7
   bc372:	9005      	str	r0, [sp, #20]
   bc374:	4603      	mov	r3, r0
   bc376:	2a65      	cmp	r2, #101	; 0x65
   bc378:	d001      	beq.n	bc37e <_strtod_l+0x17e>
   bc37a:	2a45      	cmp	r2, #69	; 0x45
   bc37c:	d118      	bne.n	bc3b0 <_strtod_l+0x1b0>
   bc37e:	b91d      	cbnz	r5, bc388 <_strtod_l+0x188>
   bc380:	9a04      	ldr	r2, [sp, #16]
   bc382:	4302      	orrs	r2, r0
   bc384:	d09e      	beq.n	bc2c4 <_strtod_l+0xc4>
   bc386:	2500      	movs	r5, #0
   bc388:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc38c:	f108 0201 	add.w	r2, r8, #1
   bc390:	9217      	str	r2, [sp, #92]	; 0x5c
   bc392:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc396:	2a2b      	cmp	r2, #43	; 0x2b
   bc398:	d075      	beq.n	bc486 <_strtod_l+0x286>
   bc39a:	2a2d      	cmp	r2, #45	; 0x2d
   bc39c:	d07b      	beq.n	bc496 <_strtod_l+0x296>
   bc39e:	f04f 0c00 	mov.w	ip, #0
   bc3a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc3a6:	2909      	cmp	r1, #9
   bc3a8:	f240 8082 	bls.w	bc4b0 <_strtod_l+0x2b0>
   bc3ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc3b0:	2600      	movs	r6, #0
   bc3b2:	e09d      	b.n	bc4f0 <_strtod_l+0x2f0>
   bc3b4:	2300      	movs	r3, #0
   bc3b6:	e7c4      	b.n	bc342 <_strtod_l+0x142>
   bc3b8:	2f08      	cmp	r7, #8
   bc3ba:	bfd8      	it	le
   bc3bc:	9907      	ldrle	r1, [sp, #28]
   bc3be:	f100 0001 	add.w	r0, r0, #1
   bc3c2:	bfda      	itte	le
   bc3c4:	fb02 3301 	mlale	r3, r2, r1, r3
   bc3c8:	9307      	strle	r3, [sp, #28]
   bc3ca:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc3ce:	3701      	adds	r7, #1
   bc3d0:	9017      	str	r0, [sp, #92]	; 0x5c
   bc3d2:	e7bf      	b.n	bc354 <_strtod_l+0x154>
   bc3d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3d6:	195a      	adds	r2, r3, r5
   bc3d8:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3da:	5d5a      	ldrb	r2, [r3, r5]
   bc3dc:	2f00      	cmp	r7, #0
   bc3de:	d037      	beq.n	bc450 <_strtod_l+0x250>
   bc3e0:	9005      	str	r0, [sp, #20]
   bc3e2:	463d      	mov	r5, r7
   bc3e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc3e8:	2b09      	cmp	r3, #9
   bc3ea:	d912      	bls.n	bc412 <_strtod_l+0x212>
   bc3ec:	2301      	movs	r3, #1
   bc3ee:	e7c2      	b.n	bc376 <_strtod_l+0x176>
   bc3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3f2:	1c5a      	adds	r2, r3, #1
   bc3f4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3f6:	785a      	ldrb	r2, [r3, #1]
   bc3f8:	3001      	adds	r0, #1
   bc3fa:	2a30      	cmp	r2, #48	; 0x30
   bc3fc:	d0f8      	beq.n	bc3f0 <_strtod_l+0x1f0>
   bc3fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc402:	2b08      	cmp	r3, #8
   bc404:	f200 84d9 	bhi.w	bcdba <_strtod_l+0xbba>
   bc408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc40a:	9005      	str	r0, [sp, #20]
   bc40c:	2000      	movs	r0, #0
   bc40e:	9308      	str	r3, [sp, #32]
   bc410:	4605      	mov	r5, r0
   bc412:	3a30      	subs	r2, #48	; 0x30
   bc414:	f100 0301 	add.w	r3, r0, #1
   bc418:	d014      	beq.n	bc444 <_strtod_l+0x244>
   bc41a:	9905      	ldr	r1, [sp, #20]
   bc41c:	4419      	add	r1, r3
   bc41e:	9105      	str	r1, [sp, #20]
   bc420:	462b      	mov	r3, r5
   bc422:	eb00 0e05 	add.w	lr, r0, r5
   bc426:	210a      	movs	r1, #10
   bc428:	4573      	cmp	r3, lr
   bc42a:	d113      	bne.n	bc454 <_strtod_l+0x254>
   bc42c:	182b      	adds	r3, r5, r0
   bc42e:	2b08      	cmp	r3, #8
   bc430:	f105 0501 	add.w	r5, r5, #1
   bc434:	4405      	add	r5, r0
   bc436:	dc1c      	bgt.n	bc472 <_strtod_l+0x272>
   bc438:	9907      	ldr	r1, [sp, #28]
   bc43a:	230a      	movs	r3, #10
   bc43c:	fb03 2301 	mla	r3, r3, r1, r2
   bc440:	9307      	str	r3, [sp, #28]
   bc442:	2300      	movs	r3, #0
   bc444:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc446:	1c51      	adds	r1, r2, #1
   bc448:	9117      	str	r1, [sp, #92]	; 0x5c
   bc44a:	7852      	ldrb	r2, [r2, #1]
   bc44c:	4618      	mov	r0, r3
   bc44e:	e7c9      	b.n	bc3e4 <_strtod_l+0x1e4>
   bc450:	4638      	mov	r0, r7
   bc452:	e7d2      	b.n	bc3fa <_strtod_l+0x1fa>
   bc454:	2b08      	cmp	r3, #8
   bc456:	dc04      	bgt.n	bc462 <_strtod_l+0x262>
   bc458:	9e07      	ldr	r6, [sp, #28]
   bc45a:	434e      	muls	r6, r1
   bc45c:	9607      	str	r6, [sp, #28]
   bc45e:	3301      	adds	r3, #1
   bc460:	e7e2      	b.n	bc428 <_strtod_l+0x228>
   bc462:	f103 0c01 	add.w	ip, r3, #1
   bc466:	f1bc 0f10 	cmp.w	ip, #16
   bc46a:	bfd8      	it	le
   bc46c:	fb01 f909 	mulle.w	r9, r1, r9
   bc470:	e7f5      	b.n	bc45e <_strtod_l+0x25e>
   bc472:	2d10      	cmp	r5, #16
   bc474:	bfdc      	itt	le
   bc476:	230a      	movle	r3, #10
   bc478:	fb03 2909 	mlale	r9, r3, r9, r2
   bc47c:	e7e1      	b.n	bc442 <_strtod_l+0x242>
   bc47e:	2300      	movs	r3, #0
   bc480:	9305      	str	r3, [sp, #20]
   bc482:	2301      	movs	r3, #1
   bc484:	e77c      	b.n	bc380 <_strtod_l+0x180>
   bc486:	f04f 0c00 	mov.w	ip, #0
   bc48a:	f108 0202 	add.w	r2, r8, #2
   bc48e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc490:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc494:	e785      	b.n	bc3a2 <_strtod_l+0x1a2>
   bc496:	f04f 0c01 	mov.w	ip, #1
   bc49a:	e7f6      	b.n	bc48a <_strtod_l+0x28a>
   bc49c:	000bf968 	.word	0x000bf968
   bc4a0:	000bf77c 	.word	0x000bf77c
   bc4a4:	7ff00000 	.word	0x7ff00000
   bc4a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4aa:	1c51      	adds	r1, r2, #1
   bc4ac:	9117      	str	r1, [sp, #92]	; 0x5c
   bc4ae:	7852      	ldrb	r2, [r2, #1]
   bc4b0:	2a30      	cmp	r2, #48	; 0x30
   bc4b2:	d0f9      	beq.n	bc4a8 <_strtod_l+0x2a8>
   bc4b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc4b8:	2908      	cmp	r1, #8
   bc4ba:	f63f af79 	bhi.w	bc3b0 <_strtod_l+0x1b0>
   bc4be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc4c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4c4:	9206      	str	r2, [sp, #24]
   bc4c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc4c8:	1c51      	adds	r1, r2, #1
   bc4ca:	9117      	str	r1, [sp, #92]	; 0x5c
   bc4cc:	7852      	ldrb	r2, [r2, #1]
   bc4ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc4d2:	2e09      	cmp	r6, #9
   bc4d4:	d937      	bls.n	bc546 <_strtod_l+0x346>
   bc4d6:	9e06      	ldr	r6, [sp, #24]
   bc4d8:	1b89      	subs	r1, r1, r6
   bc4da:	2908      	cmp	r1, #8
   bc4dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc4e0:	dc02      	bgt.n	bc4e8 <_strtod_l+0x2e8>
   bc4e2:	4576      	cmp	r6, lr
   bc4e4:	bfa8      	it	ge
   bc4e6:	4676      	movge	r6, lr
   bc4e8:	f1bc 0f00 	cmp.w	ip, #0
   bc4ec:	d000      	beq.n	bc4f0 <_strtod_l+0x2f0>
   bc4ee:	4276      	negs	r6, r6
   bc4f0:	2d00      	cmp	r5, #0
   bc4f2:	d14d      	bne.n	bc590 <_strtod_l+0x390>
   bc4f4:	9904      	ldr	r1, [sp, #16]
   bc4f6:	4301      	orrs	r1, r0
   bc4f8:	f47f aec6 	bne.w	bc288 <_strtod_l+0x88>
   bc4fc:	2b00      	cmp	r3, #0
   bc4fe:	f47f aee1 	bne.w	bc2c4 <_strtod_l+0xc4>
   bc502:	2a69      	cmp	r2, #105	; 0x69
   bc504:	d027      	beq.n	bc556 <_strtod_l+0x356>
   bc506:	dc24      	bgt.n	bc552 <_strtod_l+0x352>
   bc508:	2a49      	cmp	r2, #73	; 0x49
   bc50a:	d024      	beq.n	bc556 <_strtod_l+0x356>
   bc50c:	2a4e      	cmp	r2, #78	; 0x4e
   bc50e:	f47f aed9 	bne.w	bc2c4 <_strtod_l+0xc4>
   bc512:	499f      	ldr	r1, [pc, #636]	; (bc790 <_strtod_l+0x590>)
   bc514:	a817      	add	r0, sp, #92	; 0x5c
   bc516:	f001 f833 	bl	bd580 <__match>
   bc51a:	2800      	cmp	r0, #0
   bc51c:	f43f aed2 	beq.w	bc2c4 <_strtod_l+0xc4>
   bc520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc522:	781b      	ldrb	r3, [r3, #0]
   bc524:	2b28      	cmp	r3, #40	; 0x28
   bc526:	d12d      	bne.n	bc584 <_strtod_l+0x384>
   bc528:	499a      	ldr	r1, [pc, #616]	; (bc794 <_strtod_l+0x594>)
   bc52a:	aa1a      	add	r2, sp, #104	; 0x68
   bc52c:	a817      	add	r0, sp, #92	; 0x5c
   bc52e:	f001 f83b 	bl	bd5a8 <__hexnan>
   bc532:	2805      	cmp	r0, #5
   bc534:	d126      	bne.n	bc584 <_strtod_l+0x384>
   bc536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc538:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc53c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc540:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc544:	e6a0      	b.n	bc288 <_strtod_l+0x88>
   bc546:	210a      	movs	r1, #10
   bc548:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc54c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc550:	e7b9      	b.n	bc4c6 <_strtod_l+0x2c6>
   bc552:	2a6e      	cmp	r2, #110	; 0x6e
   bc554:	e7db      	b.n	bc50e <_strtod_l+0x30e>
   bc556:	4990      	ldr	r1, [pc, #576]	; (bc798 <_strtod_l+0x598>)
   bc558:	a817      	add	r0, sp, #92	; 0x5c
   bc55a:	f001 f811 	bl	bd580 <__match>
   bc55e:	2800      	cmp	r0, #0
   bc560:	f43f aeb0 	beq.w	bc2c4 <_strtod_l+0xc4>
   bc564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc566:	498d      	ldr	r1, [pc, #564]	; (bc79c <_strtod_l+0x59c>)
   bc568:	3b01      	subs	r3, #1
   bc56a:	a817      	add	r0, sp, #92	; 0x5c
   bc56c:	9317      	str	r3, [sp, #92]	; 0x5c
   bc56e:	f001 f807 	bl	bd580 <__match>
   bc572:	b910      	cbnz	r0, bc57a <_strtod_l+0x37a>
   bc574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc576:	3301      	adds	r3, #1
   bc578:	9317      	str	r3, [sp, #92]	; 0x5c
   bc57a:	f8df b230 	ldr.w	fp, [pc, #560]	; bc7ac <_strtod_l+0x5ac>
   bc57e:	f04f 0a00 	mov.w	sl, #0
   bc582:	e681      	b.n	bc288 <_strtod_l+0x88>
   bc584:	4886      	ldr	r0, [pc, #536]	; (bc7a0 <_strtod_l+0x5a0>)
   bc586:	f001 fd93 	bl	be0b0 <nan>
   bc58a:	ec5b ab10 	vmov	sl, fp, d0
   bc58e:	e67b      	b.n	bc288 <_strtod_l+0x88>
   bc590:	9b05      	ldr	r3, [sp, #20]
   bc592:	9807      	ldr	r0, [sp, #28]
   bc594:	1af3      	subs	r3, r6, r3
   bc596:	2f00      	cmp	r7, #0
   bc598:	bf08      	it	eq
   bc59a:	462f      	moveq	r7, r5
   bc59c:	2d10      	cmp	r5, #16
   bc59e:	9306      	str	r3, [sp, #24]
   bc5a0:	46a8      	mov	r8, r5
   bc5a2:	bfa8      	it	ge
   bc5a4:	f04f 0810 	movge.w	r8, #16
   bc5a8:	f7f7 fe7c 	bl	b42a4 <__aeabi_ui2d>
   bc5ac:	2d09      	cmp	r5, #9
   bc5ae:	4682      	mov	sl, r0
   bc5b0:	468b      	mov	fp, r1
   bc5b2:	dd13      	ble.n	bc5dc <_strtod_l+0x3dc>
   bc5b4:	4b7b      	ldr	r3, [pc, #492]	; (bc7a4 <_strtod_l+0x5a4>)
   bc5b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc5ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc5be:	f7f7 feeb 	bl	b4398 <__aeabi_dmul>
   bc5c2:	4682      	mov	sl, r0
   bc5c4:	4648      	mov	r0, r9
   bc5c6:	468b      	mov	fp, r1
   bc5c8:	f7f7 fe6c 	bl	b42a4 <__aeabi_ui2d>
   bc5cc:	4602      	mov	r2, r0
   bc5ce:	460b      	mov	r3, r1
   bc5d0:	4650      	mov	r0, sl
   bc5d2:	4659      	mov	r1, fp
   bc5d4:	f7f7 fd2a 	bl	b402c <__adddf3>
   bc5d8:	4682      	mov	sl, r0
   bc5da:	468b      	mov	fp, r1
   bc5dc:	2d0f      	cmp	r5, #15
   bc5de:	dc38      	bgt.n	bc652 <_strtod_l+0x452>
   bc5e0:	9b06      	ldr	r3, [sp, #24]
   bc5e2:	2b00      	cmp	r3, #0
   bc5e4:	f43f ae50 	beq.w	bc288 <_strtod_l+0x88>
   bc5e8:	dd24      	ble.n	bc634 <_strtod_l+0x434>
   bc5ea:	2b16      	cmp	r3, #22
   bc5ec:	dc0b      	bgt.n	bc606 <_strtod_l+0x406>
   bc5ee:	496d      	ldr	r1, [pc, #436]	; (bc7a4 <_strtod_l+0x5a4>)
   bc5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc5f8:	4652      	mov	r2, sl
   bc5fa:	465b      	mov	r3, fp
   bc5fc:	f7f7 fecc 	bl	b4398 <__aeabi_dmul>
   bc600:	4682      	mov	sl, r0
   bc602:	468b      	mov	fp, r1
   bc604:	e640      	b.n	bc288 <_strtod_l+0x88>
   bc606:	9a06      	ldr	r2, [sp, #24]
   bc608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc60c:	4293      	cmp	r3, r2
   bc60e:	db20      	blt.n	bc652 <_strtod_l+0x452>
   bc610:	4c64      	ldr	r4, [pc, #400]	; (bc7a4 <_strtod_l+0x5a4>)
   bc612:	f1c5 050f 	rsb	r5, r5, #15
   bc616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc61a:	4652      	mov	r2, sl
   bc61c:	465b      	mov	r3, fp
   bc61e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc622:	f7f7 feb9 	bl	b4398 <__aeabi_dmul>
   bc626:	9b06      	ldr	r3, [sp, #24]
   bc628:	1b5d      	subs	r5, r3, r5
   bc62a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc62e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc632:	e7e3      	b.n	bc5fc <_strtod_l+0x3fc>
   bc634:	9b06      	ldr	r3, [sp, #24]
   bc636:	3316      	adds	r3, #22
   bc638:	db0b      	blt.n	bc652 <_strtod_l+0x452>
   bc63a:	9b05      	ldr	r3, [sp, #20]
   bc63c:	1b9e      	subs	r6, r3, r6
   bc63e:	4b59      	ldr	r3, [pc, #356]	; (bc7a4 <_strtod_l+0x5a4>)
   bc640:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc644:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc648:	4650      	mov	r0, sl
   bc64a:	4659      	mov	r1, fp
   bc64c:	f7f7 ffce 	bl	b45ec <__aeabi_ddiv>
   bc650:	e7d6      	b.n	bc600 <_strtod_l+0x400>
   bc652:	9b06      	ldr	r3, [sp, #24]
   bc654:	eba5 0808 	sub.w	r8, r5, r8
   bc658:	4498      	add	r8, r3
   bc65a:	f1b8 0f00 	cmp.w	r8, #0
   bc65e:	dd74      	ble.n	bc74a <_strtod_l+0x54a>
   bc660:	f018 030f 	ands.w	r3, r8, #15
   bc664:	d00a      	beq.n	bc67c <_strtod_l+0x47c>
   bc666:	494f      	ldr	r1, [pc, #316]	; (bc7a4 <_strtod_l+0x5a4>)
   bc668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc66c:	4652      	mov	r2, sl
   bc66e:	465b      	mov	r3, fp
   bc670:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc674:	f7f7 fe90 	bl	b4398 <__aeabi_dmul>
   bc678:	4682      	mov	sl, r0
   bc67a:	468b      	mov	fp, r1
   bc67c:	f038 080f 	bics.w	r8, r8, #15
   bc680:	d04f      	beq.n	bc722 <_strtod_l+0x522>
   bc682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc686:	dd22      	ble.n	bc6ce <_strtod_l+0x4ce>
   bc688:	2500      	movs	r5, #0
   bc68a:	462e      	mov	r6, r5
   bc68c:	9507      	str	r5, [sp, #28]
   bc68e:	9505      	str	r5, [sp, #20]
   bc690:	2322      	movs	r3, #34	; 0x22
   bc692:	f8df b118 	ldr.w	fp, [pc, #280]	; bc7ac <_strtod_l+0x5ac>
   bc696:	6023      	str	r3, [r4, #0]
   bc698:	f04f 0a00 	mov.w	sl, #0
   bc69c:	9b07      	ldr	r3, [sp, #28]
   bc69e:	2b00      	cmp	r3, #0
   bc6a0:	f43f adf2 	beq.w	bc288 <_strtod_l+0x88>
   bc6a4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc6a6:	4620      	mov	r0, r4
   bc6a8:	f001 f870 	bl	bd78c <_Bfree>
   bc6ac:	9905      	ldr	r1, [sp, #20]
   bc6ae:	4620      	mov	r0, r4
   bc6b0:	f001 f86c 	bl	bd78c <_Bfree>
   bc6b4:	4631      	mov	r1, r6
   bc6b6:	4620      	mov	r0, r4
   bc6b8:	f001 f868 	bl	bd78c <_Bfree>
   bc6bc:	9907      	ldr	r1, [sp, #28]
   bc6be:	4620      	mov	r0, r4
   bc6c0:	f001 f864 	bl	bd78c <_Bfree>
   bc6c4:	4629      	mov	r1, r5
   bc6c6:	4620      	mov	r0, r4
   bc6c8:	f001 f860 	bl	bd78c <_Bfree>
   bc6cc:	e5dc      	b.n	bc288 <_strtod_l+0x88>
   bc6ce:	4b36      	ldr	r3, [pc, #216]	; (bc7a8 <_strtod_l+0x5a8>)
   bc6d0:	9304      	str	r3, [sp, #16]
   bc6d2:	2300      	movs	r3, #0
   bc6d4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc6d8:	4650      	mov	r0, sl
   bc6da:	4659      	mov	r1, fp
   bc6dc:	4699      	mov	r9, r3
   bc6de:	f1b8 0f01 	cmp.w	r8, #1
   bc6e2:	dc21      	bgt.n	bc728 <_strtod_l+0x528>
   bc6e4:	b10b      	cbz	r3, bc6ea <_strtod_l+0x4ea>
   bc6e6:	4682      	mov	sl, r0
   bc6e8:	468b      	mov	fp, r1
   bc6ea:	4b2f      	ldr	r3, [pc, #188]	; (bc7a8 <_strtod_l+0x5a8>)
   bc6ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc6f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc6f4:	4652      	mov	r2, sl
   bc6f6:	465b      	mov	r3, fp
   bc6f8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc6fc:	f7f7 fe4c 	bl	b4398 <__aeabi_dmul>
   bc700:	4b2a      	ldr	r3, [pc, #168]	; (bc7ac <_strtod_l+0x5ac>)
   bc702:	460a      	mov	r2, r1
   bc704:	400b      	ands	r3, r1
   bc706:	492a      	ldr	r1, [pc, #168]	; (bc7b0 <_strtod_l+0x5b0>)
   bc708:	428b      	cmp	r3, r1
   bc70a:	4682      	mov	sl, r0
   bc70c:	d8bc      	bhi.n	bc688 <_strtod_l+0x488>
   bc70e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc712:	428b      	cmp	r3, r1
   bc714:	bf86      	itte	hi
   bc716:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc7b4 <_strtod_l+0x5b4>
   bc71a:	f04f 3aff 	movhi.w	sl, #4294967295
   bc71e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc722:	2300      	movs	r3, #0
   bc724:	9304      	str	r3, [sp, #16]
   bc726:	e084      	b.n	bc832 <_strtod_l+0x632>
   bc728:	f018 0f01 	tst.w	r8, #1
   bc72c:	d005      	beq.n	bc73a <_strtod_l+0x53a>
   bc72e:	9b04      	ldr	r3, [sp, #16]
   bc730:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc734:	f7f7 fe30 	bl	b4398 <__aeabi_dmul>
   bc738:	2301      	movs	r3, #1
   bc73a:	9a04      	ldr	r2, [sp, #16]
   bc73c:	3208      	adds	r2, #8
   bc73e:	f109 0901 	add.w	r9, r9, #1
   bc742:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc746:	9204      	str	r2, [sp, #16]
   bc748:	e7c9      	b.n	bc6de <_strtod_l+0x4de>
   bc74a:	d0ea      	beq.n	bc722 <_strtod_l+0x522>
   bc74c:	f1c8 0800 	rsb	r8, r8, #0
   bc750:	f018 020f 	ands.w	r2, r8, #15
   bc754:	d00a      	beq.n	bc76c <_strtod_l+0x56c>
   bc756:	4b13      	ldr	r3, [pc, #76]	; (bc7a4 <_strtod_l+0x5a4>)
   bc758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc75c:	4650      	mov	r0, sl
   bc75e:	4659      	mov	r1, fp
   bc760:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc764:	f7f7 ff42 	bl	b45ec <__aeabi_ddiv>
   bc768:	4682      	mov	sl, r0
   bc76a:	468b      	mov	fp, r1
   bc76c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc770:	d0d7      	beq.n	bc722 <_strtod_l+0x522>
   bc772:	f1b8 0f1f 	cmp.w	r8, #31
   bc776:	dd1f      	ble.n	bc7b8 <_strtod_l+0x5b8>
   bc778:	2500      	movs	r5, #0
   bc77a:	462e      	mov	r6, r5
   bc77c:	9507      	str	r5, [sp, #28]
   bc77e:	9505      	str	r5, [sp, #20]
   bc780:	2322      	movs	r3, #34	; 0x22
   bc782:	f04f 0a00 	mov.w	sl, #0
   bc786:	f04f 0b00 	mov.w	fp, #0
   bc78a:	6023      	str	r3, [r4, #0]
   bc78c:	e786      	b.n	bc69c <_strtod_l+0x49c>
   bc78e:	bf00      	nop
   bc790:	000bf776 	.word	0x000bf776
   bc794:	000bf790 	.word	0x000bf790
   bc798:	000bf76d 	.word	0x000bf76d
   bc79c:	000bf770 	.word	0x000bf770
   bc7a0:	000bf39f 	.word	0x000bf39f
   bc7a4:	000bfa28 	.word	0x000bfa28
   bc7a8:	000bfa00 	.word	0x000bfa00
   bc7ac:	7ff00000 	.word	0x7ff00000
   bc7b0:	7ca00000 	.word	0x7ca00000
   bc7b4:	7fefffff 	.word	0x7fefffff
   bc7b8:	f018 0310 	ands.w	r3, r8, #16
   bc7bc:	bf18      	it	ne
   bc7be:	236a      	movne	r3, #106	; 0x6a
   bc7c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bcb70 <_strtod_l+0x970>
   bc7c4:	9304      	str	r3, [sp, #16]
   bc7c6:	4650      	mov	r0, sl
   bc7c8:	4659      	mov	r1, fp
   bc7ca:	2300      	movs	r3, #0
   bc7cc:	f018 0f01 	tst.w	r8, #1
   bc7d0:	d004      	beq.n	bc7dc <_strtod_l+0x5dc>
   bc7d2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc7d6:	f7f7 fddf 	bl	b4398 <__aeabi_dmul>
   bc7da:	2301      	movs	r3, #1
   bc7dc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc7e0:	f109 0908 	add.w	r9, r9, #8
   bc7e4:	d1f2      	bne.n	bc7cc <_strtod_l+0x5cc>
   bc7e6:	b10b      	cbz	r3, bc7ec <_strtod_l+0x5ec>
   bc7e8:	4682      	mov	sl, r0
   bc7ea:	468b      	mov	fp, r1
   bc7ec:	9b04      	ldr	r3, [sp, #16]
   bc7ee:	b1c3      	cbz	r3, bc822 <_strtod_l+0x622>
   bc7f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc7f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc7f8:	2b00      	cmp	r3, #0
   bc7fa:	4659      	mov	r1, fp
   bc7fc:	dd11      	ble.n	bc822 <_strtod_l+0x622>
   bc7fe:	2b1f      	cmp	r3, #31
   bc800:	f340 8124 	ble.w	bca4c <_strtod_l+0x84c>
   bc804:	2b34      	cmp	r3, #52	; 0x34
   bc806:	bfde      	ittt	le
   bc808:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc80c:	f04f 33ff 	movle.w	r3, #4294967295
   bc810:	fa03 f202 	lslle.w	r2, r3, r2
   bc814:	f04f 0a00 	mov.w	sl, #0
   bc818:	bfcc      	ite	gt
   bc81a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc81e:	ea02 0b01 	andle.w	fp, r2, r1
   bc822:	2200      	movs	r2, #0
   bc824:	2300      	movs	r3, #0
   bc826:	4650      	mov	r0, sl
   bc828:	4659      	mov	r1, fp
   bc82a:	f7f8 f81d 	bl	b4868 <__aeabi_dcmpeq>
   bc82e:	2800      	cmp	r0, #0
   bc830:	d1a2      	bne.n	bc778 <_strtod_l+0x578>
   bc832:	9b07      	ldr	r3, [sp, #28]
   bc834:	9300      	str	r3, [sp, #0]
   bc836:	9908      	ldr	r1, [sp, #32]
   bc838:	462b      	mov	r3, r5
   bc83a:	463a      	mov	r2, r7
   bc83c:	4620      	mov	r0, r4
   bc83e:	f001 f80d 	bl	bd85c <__s2b>
   bc842:	9007      	str	r0, [sp, #28]
   bc844:	2800      	cmp	r0, #0
   bc846:	f43f af1f 	beq.w	bc688 <_strtod_l+0x488>
   bc84a:	9b05      	ldr	r3, [sp, #20]
   bc84c:	1b9e      	subs	r6, r3, r6
   bc84e:	9b06      	ldr	r3, [sp, #24]
   bc850:	2b00      	cmp	r3, #0
   bc852:	bfb4      	ite	lt
   bc854:	4633      	movlt	r3, r6
   bc856:	2300      	movge	r3, #0
   bc858:	930c      	str	r3, [sp, #48]	; 0x30
   bc85a:	9b06      	ldr	r3, [sp, #24]
   bc85c:	2500      	movs	r5, #0
   bc85e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc862:	9312      	str	r3, [sp, #72]	; 0x48
   bc864:	462e      	mov	r6, r5
   bc866:	9b07      	ldr	r3, [sp, #28]
   bc868:	4620      	mov	r0, r4
   bc86a:	6859      	ldr	r1, [r3, #4]
   bc86c:	f000 ff4e 	bl	bd70c <_Balloc>
   bc870:	9005      	str	r0, [sp, #20]
   bc872:	2800      	cmp	r0, #0
   bc874:	f43f af0c 	beq.w	bc690 <_strtod_l+0x490>
   bc878:	9b07      	ldr	r3, [sp, #28]
   bc87a:	691a      	ldr	r2, [r3, #16]
   bc87c:	3202      	adds	r2, #2
   bc87e:	f103 010c 	add.w	r1, r3, #12
   bc882:	0092      	lsls	r2, r2, #2
   bc884:	300c      	adds	r0, #12
   bc886:	f7ff fbdb 	bl	bc040 <memcpy>
   bc88a:	ec4b ab10 	vmov	d0, sl, fp
   bc88e:	aa1a      	add	r2, sp, #104	; 0x68
   bc890:	a919      	add	r1, sp, #100	; 0x64
   bc892:	4620      	mov	r0, r4
   bc894:	f001 fb28 	bl	bdee8 <__d2b>
   bc898:	ec4b ab18 	vmov	d8, sl, fp
   bc89c:	9018      	str	r0, [sp, #96]	; 0x60
   bc89e:	2800      	cmp	r0, #0
   bc8a0:	f43f aef6 	beq.w	bc690 <_strtod_l+0x490>
   bc8a4:	2101      	movs	r1, #1
   bc8a6:	4620      	mov	r0, r4
   bc8a8:	f001 f872 	bl	bd990 <__i2b>
   bc8ac:	4606      	mov	r6, r0
   bc8ae:	2800      	cmp	r0, #0
   bc8b0:	f43f aeee 	beq.w	bc690 <_strtod_l+0x490>
   bc8b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc8b6:	9904      	ldr	r1, [sp, #16]
   bc8b8:	2b00      	cmp	r3, #0
   bc8ba:	bfab      	itete	ge
   bc8bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc8be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc8c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc8c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc8c6:	bfac      	ite	ge
   bc8c8:	eb03 0902 	addge.w	r9, r3, r2
   bc8cc:	1ad7      	sublt	r7, r2, r3
   bc8ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc8d0:	eba3 0801 	sub.w	r8, r3, r1
   bc8d4:	4490      	add	r8, r2
   bc8d6:	4ba1      	ldr	r3, [pc, #644]	; (bcb5c <_strtod_l+0x95c>)
   bc8d8:	f108 38ff 	add.w	r8, r8, #4294967295
   bc8dc:	4598      	cmp	r8, r3
   bc8de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc8e2:	f280 80c7 	bge.w	bca74 <_strtod_l+0x874>
   bc8e6:	eba3 0308 	sub.w	r3, r3, r8
   bc8ea:	2b1f      	cmp	r3, #31
   bc8ec:	eba2 0203 	sub.w	r2, r2, r3
   bc8f0:	f04f 0101 	mov.w	r1, #1
   bc8f4:	f300 80b1 	bgt.w	bca5a <_strtod_l+0x85a>
   bc8f8:	fa01 f303 	lsl.w	r3, r1, r3
   bc8fc:	930d      	str	r3, [sp, #52]	; 0x34
   bc8fe:	2300      	movs	r3, #0
   bc900:	9308      	str	r3, [sp, #32]
   bc902:	eb09 0802 	add.w	r8, r9, r2
   bc906:	9b04      	ldr	r3, [sp, #16]
   bc908:	45c1      	cmp	r9, r8
   bc90a:	4417      	add	r7, r2
   bc90c:	441f      	add	r7, r3
   bc90e:	464b      	mov	r3, r9
   bc910:	bfa8      	it	ge
   bc912:	4643      	movge	r3, r8
   bc914:	42bb      	cmp	r3, r7
   bc916:	bfa8      	it	ge
   bc918:	463b      	movge	r3, r7
   bc91a:	2b00      	cmp	r3, #0
   bc91c:	bfc2      	ittt	gt
   bc91e:	eba8 0803 	subgt.w	r8, r8, r3
   bc922:	1aff      	subgt	r7, r7, r3
   bc924:	eba9 0903 	subgt.w	r9, r9, r3
   bc928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc92a:	2b00      	cmp	r3, #0
   bc92c:	dd17      	ble.n	bc95e <_strtod_l+0x75e>
   bc92e:	4631      	mov	r1, r6
   bc930:	461a      	mov	r2, r3
   bc932:	4620      	mov	r0, r4
   bc934:	f001 f8ec 	bl	bdb10 <__pow5mult>
   bc938:	4606      	mov	r6, r0
   bc93a:	2800      	cmp	r0, #0
   bc93c:	f43f aea8 	beq.w	bc690 <_strtod_l+0x490>
   bc940:	4601      	mov	r1, r0
   bc942:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc944:	4620      	mov	r0, r4
   bc946:	f001 f839 	bl	bd9bc <__multiply>
   bc94a:	900b      	str	r0, [sp, #44]	; 0x2c
   bc94c:	2800      	cmp	r0, #0
   bc94e:	f43f ae9f 	beq.w	bc690 <_strtod_l+0x490>
   bc952:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc954:	4620      	mov	r0, r4
   bc956:	f000 ff19 	bl	bd78c <_Bfree>
   bc95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc95c:	9318      	str	r3, [sp, #96]	; 0x60
   bc95e:	f1b8 0f00 	cmp.w	r8, #0
   bc962:	f300 808c 	bgt.w	bca7e <_strtod_l+0x87e>
   bc966:	9b06      	ldr	r3, [sp, #24]
   bc968:	2b00      	cmp	r3, #0
   bc96a:	dd08      	ble.n	bc97e <_strtod_l+0x77e>
   bc96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc96e:	9905      	ldr	r1, [sp, #20]
   bc970:	4620      	mov	r0, r4
   bc972:	f001 f8cd 	bl	bdb10 <__pow5mult>
   bc976:	9005      	str	r0, [sp, #20]
   bc978:	2800      	cmp	r0, #0
   bc97a:	f43f ae89 	beq.w	bc690 <_strtod_l+0x490>
   bc97e:	2f00      	cmp	r7, #0
   bc980:	dd08      	ble.n	bc994 <_strtod_l+0x794>
   bc982:	9905      	ldr	r1, [sp, #20]
   bc984:	463a      	mov	r2, r7
   bc986:	4620      	mov	r0, r4
   bc988:	f001 f91c 	bl	bdbc4 <__lshift>
   bc98c:	9005      	str	r0, [sp, #20]
   bc98e:	2800      	cmp	r0, #0
   bc990:	f43f ae7e 	beq.w	bc690 <_strtod_l+0x490>
   bc994:	f1b9 0f00 	cmp.w	r9, #0
   bc998:	dd08      	ble.n	bc9ac <_strtod_l+0x7ac>
   bc99a:	4631      	mov	r1, r6
   bc99c:	464a      	mov	r2, r9
   bc99e:	4620      	mov	r0, r4
   bc9a0:	f001 f910 	bl	bdbc4 <__lshift>
   bc9a4:	4606      	mov	r6, r0
   bc9a6:	2800      	cmp	r0, #0
   bc9a8:	f43f ae72 	beq.w	bc690 <_strtod_l+0x490>
   bc9ac:	9a05      	ldr	r2, [sp, #20]
   bc9ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc9b0:	4620      	mov	r0, r4
   bc9b2:	f001 f993 	bl	bdcdc <__mdiff>
   bc9b6:	4605      	mov	r5, r0
   bc9b8:	2800      	cmp	r0, #0
   bc9ba:	f43f ae69 	beq.w	bc690 <_strtod_l+0x490>
   bc9be:	68c3      	ldr	r3, [r0, #12]
   bc9c0:	930b      	str	r3, [sp, #44]	; 0x2c
   bc9c2:	2300      	movs	r3, #0
   bc9c4:	60c3      	str	r3, [r0, #12]
   bc9c6:	4631      	mov	r1, r6
   bc9c8:	f001 f96c 	bl	bdca4 <__mcmp>
   bc9cc:	2800      	cmp	r0, #0
   bc9ce:	da60      	bge.n	bca92 <_strtod_l+0x892>
   bc9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc9d2:	ea53 030a 	orrs.w	r3, r3, sl
   bc9d6:	f040 8082 	bne.w	bcade <_strtod_l+0x8de>
   bc9da:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc9de:	2b00      	cmp	r3, #0
   bc9e0:	d17d      	bne.n	bcade <_strtod_l+0x8de>
   bc9e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc9e6:	0d1b      	lsrs	r3, r3, #20
   bc9e8:	051b      	lsls	r3, r3, #20
   bc9ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc9ee:	d976      	bls.n	bcade <_strtod_l+0x8de>
   bc9f0:	696b      	ldr	r3, [r5, #20]
   bc9f2:	b913      	cbnz	r3, bc9fa <_strtod_l+0x7fa>
   bc9f4:	692b      	ldr	r3, [r5, #16]
   bc9f6:	2b01      	cmp	r3, #1
   bc9f8:	dd71      	ble.n	bcade <_strtod_l+0x8de>
   bc9fa:	4629      	mov	r1, r5
   bc9fc:	2201      	movs	r2, #1
   bc9fe:	4620      	mov	r0, r4
   bca00:	f001 f8e0 	bl	bdbc4 <__lshift>
   bca04:	4631      	mov	r1, r6
   bca06:	4605      	mov	r5, r0
   bca08:	f001 f94c 	bl	bdca4 <__mcmp>
   bca0c:	2800      	cmp	r0, #0
   bca0e:	dd66      	ble.n	bcade <_strtod_l+0x8de>
   bca10:	9904      	ldr	r1, [sp, #16]
   bca12:	4a53      	ldr	r2, [pc, #332]	; (bcb60 <_strtod_l+0x960>)
   bca14:	465b      	mov	r3, fp
   bca16:	2900      	cmp	r1, #0
   bca18:	f000 8081 	beq.w	bcb1e <_strtod_l+0x91e>
   bca1c:	ea02 010b 	and.w	r1, r2, fp
   bca20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bca24:	dc7b      	bgt.n	bcb1e <_strtod_l+0x91e>
   bca26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bca2a:	f77f aea9 	ble.w	bc780 <_strtod_l+0x580>
   bca2e:	4b4d      	ldr	r3, [pc, #308]	; (bcb64 <_strtod_l+0x964>)
   bca30:	4650      	mov	r0, sl
   bca32:	4659      	mov	r1, fp
   bca34:	2200      	movs	r2, #0
   bca36:	f7f7 fcaf 	bl	b4398 <__aeabi_dmul>
   bca3a:	460b      	mov	r3, r1
   bca3c:	4303      	orrs	r3, r0
   bca3e:	bf08      	it	eq
   bca40:	2322      	moveq	r3, #34	; 0x22
   bca42:	4682      	mov	sl, r0
   bca44:	468b      	mov	fp, r1
   bca46:	bf08      	it	eq
   bca48:	6023      	streq	r3, [r4, #0]
   bca4a:	e62b      	b.n	bc6a4 <_strtod_l+0x4a4>
   bca4c:	f04f 32ff 	mov.w	r2, #4294967295
   bca50:	fa02 f303 	lsl.w	r3, r2, r3
   bca54:	ea03 0a0a 	and.w	sl, r3, sl
   bca58:	e6e3      	b.n	bc822 <_strtod_l+0x622>
   bca5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bca5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bca62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bca66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bca6a:	fa01 f308 	lsl.w	r3, r1, r8
   bca6e:	9308      	str	r3, [sp, #32]
   bca70:	910d      	str	r1, [sp, #52]	; 0x34
   bca72:	e746      	b.n	bc902 <_strtod_l+0x702>
   bca74:	2300      	movs	r3, #0
   bca76:	9308      	str	r3, [sp, #32]
   bca78:	2301      	movs	r3, #1
   bca7a:	930d      	str	r3, [sp, #52]	; 0x34
   bca7c:	e741      	b.n	bc902 <_strtod_l+0x702>
   bca7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bca80:	4642      	mov	r2, r8
   bca82:	4620      	mov	r0, r4
   bca84:	f001 f89e 	bl	bdbc4 <__lshift>
   bca88:	9018      	str	r0, [sp, #96]	; 0x60
   bca8a:	2800      	cmp	r0, #0
   bca8c:	f47f af6b 	bne.w	bc966 <_strtod_l+0x766>
   bca90:	e5fe      	b.n	bc690 <_strtod_l+0x490>
   bca92:	465f      	mov	r7, fp
   bca94:	d16e      	bne.n	bcb74 <_strtod_l+0x974>
   bca96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bca98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bca9c:	b342      	cbz	r2, bcaf0 <_strtod_l+0x8f0>
   bca9e:	4a32      	ldr	r2, [pc, #200]	; (bcb68 <_strtod_l+0x968>)
   bcaa0:	4293      	cmp	r3, r2
   bcaa2:	d128      	bne.n	bcaf6 <_strtod_l+0x8f6>
   bcaa4:	9b04      	ldr	r3, [sp, #16]
   bcaa6:	4651      	mov	r1, sl
   bcaa8:	b1eb      	cbz	r3, bcae6 <_strtod_l+0x8e6>
   bcaaa:	4b2d      	ldr	r3, [pc, #180]	; (bcb60 <_strtod_l+0x960>)
   bcaac:	403b      	ands	r3, r7
   bcaae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcab2:	f04f 32ff 	mov.w	r2, #4294967295
   bcab6:	d819      	bhi.n	bcaec <_strtod_l+0x8ec>
   bcab8:	0d1b      	lsrs	r3, r3, #20
   bcaba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcabe:	fa02 f303 	lsl.w	r3, r2, r3
   bcac2:	4299      	cmp	r1, r3
   bcac4:	d117      	bne.n	bcaf6 <_strtod_l+0x8f6>
   bcac6:	4b29      	ldr	r3, [pc, #164]	; (bcb6c <_strtod_l+0x96c>)
   bcac8:	429f      	cmp	r7, r3
   bcaca:	d102      	bne.n	bcad2 <_strtod_l+0x8d2>
   bcacc:	3101      	adds	r1, #1
   bcace:	f43f addf 	beq.w	bc690 <_strtod_l+0x490>
   bcad2:	4b23      	ldr	r3, [pc, #140]	; (bcb60 <_strtod_l+0x960>)
   bcad4:	403b      	ands	r3, r7
   bcad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcada:	f04f 0a00 	mov.w	sl, #0
   bcade:	9b04      	ldr	r3, [sp, #16]
   bcae0:	2b00      	cmp	r3, #0
   bcae2:	d1a4      	bne.n	bca2e <_strtod_l+0x82e>
   bcae4:	e5de      	b.n	bc6a4 <_strtod_l+0x4a4>
   bcae6:	f04f 33ff 	mov.w	r3, #4294967295
   bcaea:	e7ea      	b.n	bcac2 <_strtod_l+0x8c2>
   bcaec:	4613      	mov	r3, r2
   bcaee:	e7e8      	b.n	bcac2 <_strtod_l+0x8c2>
   bcaf0:	ea53 030a 	orrs.w	r3, r3, sl
   bcaf4:	d08c      	beq.n	bca10 <_strtod_l+0x810>
   bcaf6:	9b08      	ldr	r3, [sp, #32]
   bcaf8:	b1db      	cbz	r3, bcb32 <_strtod_l+0x932>
   bcafa:	423b      	tst	r3, r7
   bcafc:	d0ef      	beq.n	bcade <_strtod_l+0x8de>
   bcafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcb00:	9a04      	ldr	r2, [sp, #16]
   bcb02:	4650      	mov	r0, sl
   bcb04:	4659      	mov	r1, fp
   bcb06:	b1c3      	cbz	r3, bcb3a <_strtod_l+0x93a>
   bcb08:	f7ff fb5e 	bl	bc1c8 <sulp>
   bcb0c:	4602      	mov	r2, r0
   bcb0e:	460b      	mov	r3, r1
   bcb10:	ec51 0b18 	vmov	r0, r1, d8
   bcb14:	f7f7 fa8a 	bl	b402c <__adddf3>
   bcb18:	4682      	mov	sl, r0
   bcb1a:	468b      	mov	fp, r1
   bcb1c:	e7df      	b.n	bcade <_strtod_l+0x8de>
   bcb1e:	4013      	ands	r3, r2
   bcb20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bcb24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bcb28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bcb2c:	f04f 3aff 	mov.w	sl, #4294967295
   bcb30:	e7d5      	b.n	bcade <_strtod_l+0x8de>
   bcb32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcb34:	ea13 0f0a 	tst.w	r3, sl
   bcb38:	e7e0      	b.n	bcafc <_strtod_l+0x8fc>
   bcb3a:	f7ff fb45 	bl	bc1c8 <sulp>
   bcb3e:	4602      	mov	r2, r0
   bcb40:	460b      	mov	r3, r1
   bcb42:	ec51 0b18 	vmov	r0, r1, d8
   bcb46:	f7f7 fa6f 	bl	b4028 <__aeabi_dsub>
   bcb4a:	2200      	movs	r2, #0
   bcb4c:	2300      	movs	r3, #0
   bcb4e:	4682      	mov	sl, r0
   bcb50:	468b      	mov	fp, r1
   bcb52:	f7f7 fe89 	bl	b4868 <__aeabi_dcmpeq>
   bcb56:	2800      	cmp	r0, #0
   bcb58:	d0c1      	beq.n	bcade <_strtod_l+0x8de>
   bcb5a:	e611      	b.n	bc780 <_strtod_l+0x580>
   bcb5c:	fffffc02 	.word	0xfffffc02
   bcb60:	7ff00000 	.word	0x7ff00000
   bcb64:	39500000 	.word	0x39500000
   bcb68:	000fffff 	.word	0x000fffff
   bcb6c:	7fefffff 	.word	0x7fefffff
   bcb70:	000bf7a8 	.word	0x000bf7a8
   bcb74:	4631      	mov	r1, r6
   bcb76:	4628      	mov	r0, r5
   bcb78:	f001 fa12 	bl	bdfa0 <__ratio>
   bcb7c:	ec59 8b10 	vmov	r8, r9, d0
   bcb80:	ee10 0a10 	vmov	r0, s0
   bcb84:	2200      	movs	r2, #0
   bcb86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcb8a:	4649      	mov	r1, r9
   bcb8c:	f7f7 fe80 	bl	b4890 <__aeabi_dcmple>
   bcb90:	2800      	cmp	r0, #0
   bcb92:	d07a      	beq.n	bcc8a <_strtod_l+0xa8a>
   bcb94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcb96:	2b00      	cmp	r3, #0
   bcb98:	d04a      	beq.n	bcc30 <_strtod_l+0xa30>
   bcb9a:	4b95      	ldr	r3, [pc, #596]	; (bcdf0 <_strtod_l+0xbf0>)
   bcb9c:	2200      	movs	r2, #0
   bcb9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcdf0 <_strtod_l+0xbf0>
   bcba6:	f04f 0800 	mov.w	r8, #0
   bcbaa:	4b92      	ldr	r3, [pc, #584]	; (bcdf4 <_strtod_l+0xbf4>)
   bcbac:	403b      	ands	r3, r7
   bcbae:	930d      	str	r3, [sp, #52]	; 0x34
   bcbb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcbb2:	4b91      	ldr	r3, [pc, #580]	; (bcdf8 <_strtod_l+0xbf8>)
   bcbb4:	429a      	cmp	r2, r3
   bcbb6:	f040 80b0 	bne.w	bcd1a <_strtod_l+0xb1a>
   bcbba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcbbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bcbc2:	ec4b ab10 	vmov	d0, sl, fp
   bcbc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcbca:	f001 f911 	bl	bddf0 <__ulp>
   bcbce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcbd2:	ec53 2b10 	vmov	r2, r3, d0
   bcbd6:	f7f7 fbdf 	bl	b4398 <__aeabi_dmul>
   bcbda:	4652      	mov	r2, sl
   bcbdc:	465b      	mov	r3, fp
   bcbde:	f7f7 fa25 	bl	b402c <__adddf3>
   bcbe2:	460b      	mov	r3, r1
   bcbe4:	4983      	ldr	r1, [pc, #524]	; (bcdf4 <_strtod_l+0xbf4>)
   bcbe6:	4a85      	ldr	r2, [pc, #532]	; (bcdfc <_strtod_l+0xbfc>)
   bcbe8:	4019      	ands	r1, r3
   bcbea:	4291      	cmp	r1, r2
   bcbec:	4682      	mov	sl, r0
   bcbee:	d960      	bls.n	bccb2 <_strtod_l+0xab2>
   bcbf0:	ee18 3a90 	vmov	r3, s17
   bcbf4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bcbf8:	4293      	cmp	r3, r2
   bcbfa:	d104      	bne.n	bcc06 <_strtod_l+0xa06>
   bcbfc:	ee18 3a10 	vmov	r3, s16
   bcc00:	3301      	adds	r3, #1
   bcc02:	f43f ad45 	beq.w	bc690 <_strtod_l+0x490>
   bcc06:	f8df b200 	ldr.w	fp, [pc, #512]	; bce08 <_strtod_l+0xc08>
   bcc0a:	f04f 3aff 	mov.w	sl, #4294967295
   bcc0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcc10:	4620      	mov	r0, r4
   bcc12:	f000 fdbb 	bl	bd78c <_Bfree>
   bcc16:	9905      	ldr	r1, [sp, #20]
   bcc18:	4620      	mov	r0, r4
   bcc1a:	f000 fdb7 	bl	bd78c <_Bfree>
   bcc1e:	4631      	mov	r1, r6
   bcc20:	4620      	mov	r0, r4
   bcc22:	f000 fdb3 	bl	bd78c <_Bfree>
   bcc26:	4629      	mov	r1, r5
   bcc28:	4620      	mov	r0, r4
   bcc2a:	f000 fdaf 	bl	bd78c <_Bfree>
   bcc2e:	e61a      	b.n	bc866 <_strtod_l+0x666>
   bcc30:	f1ba 0f00 	cmp.w	sl, #0
   bcc34:	d11b      	bne.n	bcc6e <_strtod_l+0xa6e>
   bcc36:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcc3a:	b9f3      	cbnz	r3, bcc7a <_strtod_l+0xa7a>
   bcc3c:	4b6c      	ldr	r3, [pc, #432]	; (bcdf0 <_strtod_l+0xbf0>)
   bcc3e:	2200      	movs	r2, #0
   bcc40:	4640      	mov	r0, r8
   bcc42:	4649      	mov	r1, r9
   bcc44:	f7f7 fe1a 	bl	b487c <__aeabi_dcmplt>
   bcc48:	b9d0      	cbnz	r0, bcc80 <_strtod_l+0xa80>
   bcc4a:	4640      	mov	r0, r8
   bcc4c:	4649      	mov	r1, r9
   bcc4e:	4b6c      	ldr	r3, [pc, #432]	; (bce00 <_strtod_l+0xc00>)
   bcc50:	2200      	movs	r2, #0
   bcc52:	f7f7 fba1 	bl	b4398 <__aeabi_dmul>
   bcc56:	4680      	mov	r8, r0
   bcc58:	4689      	mov	r9, r1
   bcc5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bcc5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bcc62:	9315      	str	r3, [sp, #84]	; 0x54
   bcc64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bcc68:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcc6c:	e79d      	b.n	bcbaa <_strtod_l+0x9aa>
   bcc6e:	f1ba 0f01 	cmp.w	sl, #1
   bcc72:	d102      	bne.n	bcc7a <_strtod_l+0xa7a>
   bcc74:	2f00      	cmp	r7, #0
   bcc76:	f43f ad83 	beq.w	bc780 <_strtod_l+0x580>
   bcc7a:	4b62      	ldr	r3, [pc, #392]	; (bce04 <_strtod_l+0xc04>)
   bcc7c:	2200      	movs	r2, #0
   bcc7e:	e78e      	b.n	bcb9e <_strtod_l+0x99e>
   bcc80:	f8df 917c 	ldr.w	r9, [pc, #380]	; bce00 <_strtod_l+0xc00>
   bcc84:	f04f 0800 	mov.w	r8, #0
   bcc88:	e7e7      	b.n	bcc5a <_strtod_l+0xa5a>
   bcc8a:	4b5d      	ldr	r3, [pc, #372]	; (bce00 <_strtod_l+0xc00>)
   bcc8c:	4640      	mov	r0, r8
   bcc8e:	4649      	mov	r1, r9
   bcc90:	2200      	movs	r2, #0
   bcc92:	f7f7 fb81 	bl	b4398 <__aeabi_dmul>
   bcc96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcc98:	4680      	mov	r8, r0
   bcc9a:	4689      	mov	r9, r1
   bcc9c:	b933      	cbnz	r3, bccac <_strtod_l+0xaac>
   bcc9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcca2:	900e      	str	r0, [sp, #56]	; 0x38
   bcca4:	930f      	str	r3, [sp, #60]	; 0x3c
   bcca6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bccaa:	e7dd      	b.n	bcc68 <_strtod_l+0xa68>
   bccac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bccb0:	e7f9      	b.n	bcca6 <_strtod_l+0xaa6>
   bccb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bccb6:	9b04      	ldr	r3, [sp, #16]
   bccb8:	2b00      	cmp	r3, #0
   bccba:	d1a8      	bne.n	bcc0e <_strtod_l+0xa0e>
   bccbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bccc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bccc2:	0d1b      	lsrs	r3, r3, #20
   bccc4:	051b      	lsls	r3, r3, #20
   bccc6:	429a      	cmp	r2, r3
   bccc8:	d1a1      	bne.n	bcc0e <_strtod_l+0xa0e>
   bccca:	4640      	mov	r0, r8
   bcccc:	4649      	mov	r1, r9
   bccce:	f7f7 fe9d 	bl	b4a0c <__aeabi_d2lz>
   bccd2:	f7f7 fb33 	bl	b433c <__aeabi_l2d>
   bccd6:	4602      	mov	r2, r0
   bccd8:	460b      	mov	r3, r1
   bccda:	4640      	mov	r0, r8
   bccdc:	4649      	mov	r1, r9
   bccde:	f7f7 f9a3 	bl	b4028 <__aeabi_dsub>
   bcce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcce8:	ea43 030a 	orr.w	r3, r3, sl
   bccec:	4313      	orrs	r3, r2
   bccee:	4680      	mov	r8, r0
   bccf0:	4689      	mov	r9, r1
   bccf2:	d055      	beq.n	bcda0 <_strtod_l+0xba0>
   bccf4:	a336      	add	r3, pc, #216	; (adr r3, bcdd0 <_strtod_l+0xbd0>)
   bccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bccfa:	f7f7 fdbf 	bl	b487c <__aeabi_dcmplt>
   bccfe:	2800      	cmp	r0, #0
   bcd00:	f47f acd0 	bne.w	bc6a4 <_strtod_l+0x4a4>
   bcd04:	a334      	add	r3, pc, #208	; (adr r3, bcdd8 <_strtod_l+0xbd8>)
   bcd06:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd0a:	4640      	mov	r0, r8
   bcd0c:	4649      	mov	r1, r9
   bcd0e:	f7f7 fdd3 	bl	b48b8 <__aeabi_dcmpgt>
   bcd12:	2800      	cmp	r0, #0
   bcd14:	f43f af7b 	beq.w	bcc0e <_strtod_l+0xa0e>
   bcd18:	e4c4      	b.n	bc6a4 <_strtod_l+0x4a4>
   bcd1a:	9b04      	ldr	r3, [sp, #16]
   bcd1c:	b333      	cbz	r3, bcd6c <_strtod_l+0xb6c>
   bcd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcd20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcd24:	d822      	bhi.n	bcd6c <_strtod_l+0xb6c>
   bcd26:	a32e      	add	r3, pc, #184	; (adr r3, bcde0 <_strtod_l+0xbe0>)
   bcd28:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd2c:	4640      	mov	r0, r8
   bcd2e:	4649      	mov	r1, r9
   bcd30:	f7f7 fdae 	bl	b4890 <__aeabi_dcmple>
   bcd34:	b1a0      	cbz	r0, bcd60 <_strtod_l+0xb60>
   bcd36:	4649      	mov	r1, r9
   bcd38:	4640      	mov	r0, r8
   bcd3a:	f7f7 fdc7 	bl	b48cc <__aeabi_d2uiz>
   bcd3e:	2801      	cmp	r0, #1
   bcd40:	bf38      	it	cc
   bcd42:	2001      	movcc	r0, #1
   bcd44:	f7f7 faae 	bl	b42a4 <__aeabi_ui2d>
   bcd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcd4a:	4680      	mov	r8, r0
   bcd4c:	4689      	mov	r9, r1
   bcd4e:	bb23      	cbnz	r3, bcd9a <_strtod_l+0xb9a>
   bcd50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcd54:	9010      	str	r0, [sp, #64]	; 0x40
   bcd56:	9311      	str	r3, [sp, #68]	; 0x44
   bcd58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bcd5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcd62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcd64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bcd68:	1a9b      	subs	r3, r3, r2
   bcd6a:	9309      	str	r3, [sp, #36]	; 0x24
   bcd6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd70:	eeb0 0a48 	vmov.f32	s0, s16
   bcd74:	eef0 0a68 	vmov.f32	s1, s17
   bcd78:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcd7c:	f001 f838 	bl	bddf0 <__ulp>
   bcd80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd84:	ec53 2b10 	vmov	r2, r3, d0
   bcd88:	f7f7 fb06 	bl	b4398 <__aeabi_dmul>
   bcd8c:	ec53 2b18 	vmov	r2, r3, d8
   bcd90:	f7f7 f94c 	bl	b402c <__adddf3>
   bcd94:	4682      	mov	sl, r0
   bcd96:	468b      	mov	fp, r1
   bcd98:	e78d      	b.n	bccb6 <_strtod_l+0xab6>
   bcd9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bcd9e:	e7db      	b.n	bcd58 <_strtod_l+0xb58>
   bcda0:	a311      	add	r3, pc, #68	; (adr r3, bcde8 <_strtod_l+0xbe8>)
   bcda2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcda6:	f7f7 fd69 	bl	b487c <__aeabi_dcmplt>
   bcdaa:	e7b2      	b.n	bcd12 <_strtod_l+0xb12>
   bcdac:	2300      	movs	r3, #0
   bcdae:	930a      	str	r3, [sp, #40]	; 0x28
   bcdb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bcdb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcdb4:	6013      	str	r3, [r2, #0]
   bcdb6:	f7ff ba6b 	b.w	bc290 <_strtod_l+0x90>
   bcdba:	2a65      	cmp	r2, #101	; 0x65
   bcdbc:	f43f ab5f 	beq.w	bc47e <_strtod_l+0x27e>
   bcdc0:	2a45      	cmp	r2, #69	; 0x45
   bcdc2:	f43f ab5c 	beq.w	bc47e <_strtod_l+0x27e>
   bcdc6:	2301      	movs	r3, #1
   bcdc8:	f7ff bb94 	b.w	bc4f4 <_strtod_l+0x2f4>
   bcdcc:	f3af 8000 	nop.w
   bcdd0:	94a03595 	.word	0x94a03595
   bcdd4:	3fdfffff 	.word	0x3fdfffff
   bcdd8:	35afe535 	.word	0x35afe535
   bcddc:	3fe00000 	.word	0x3fe00000
   bcde0:	ffc00000 	.word	0xffc00000
   bcde4:	41dfffff 	.word	0x41dfffff
   bcde8:	94a03595 	.word	0x94a03595
   bcdec:	3fcfffff 	.word	0x3fcfffff
   bcdf0:	3ff00000 	.word	0x3ff00000
   bcdf4:	7ff00000 	.word	0x7ff00000
   bcdf8:	7fe00000 	.word	0x7fe00000
   bcdfc:	7c9fffff 	.word	0x7c9fffff
   bce00:	3fe00000 	.word	0x3fe00000
   bce04:	bff00000 	.word	0xbff00000
   bce08:	7fefffff 	.word	0x7fefffff

000bce0c <strtod>:
   bce0c:	460a      	mov	r2, r1
   bce0e:	4601      	mov	r1, r0
   bce10:	4802      	ldr	r0, [pc, #8]	; (bce1c <strtod+0x10>)
   bce12:	4b03      	ldr	r3, [pc, #12]	; (bce20 <strtod+0x14>)
   bce14:	6800      	ldr	r0, [r0, #0]
   bce16:	f7ff b9f3 	b.w	bc200 <_strtod_l>
   bce1a:	bf00      	nop
   bce1c:	2003e2e8 	.word	0x2003e2e8
   bce20:	2003e354 	.word	0x2003e354

000bce24 <_strtol_l.constprop.0>:
   bce24:	2b01      	cmp	r3, #1
   bce26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bce2a:	d001      	beq.n	bce30 <_strtol_l.constprop.0+0xc>
   bce2c:	2b24      	cmp	r3, #36	; 0x24
   bce2e:	d906      	bls.n	bce3e <_strtol_l.constprop.0+0x1a>
   bce30:	f7fa ff9a 	bl	b7d68 <__errno>
   bce34:	2316      	movs	r3, #22
   bce36:	6003      	str	r3, [r0, #0]
   bce38:	2000      	movs	r0, #0
   bce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bce3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcf24 <_strtol_l.constprop.0+0x100>
   bce42:	460d      	mov	r5, r1
   bce44:	462e      	mov	r6, r5
   bce46:	f815 4b01 	ldrb.w	r4, [r5], #1
   bce4a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bce4e:	f017 0708 	ands.w	r7, r7, #8
   bce52:	d1f7      	bne.n	bce44 <_strtol_l.constprop.0+0x20>
   bce54:	2c2d      	cmp	r4, #45	; 0x2d
   bce56:	d132      	bne.n	bcebe <_strtol_l.constprop.0+0x9a>
   bce58:	782c      	ldrb	r4, [r5, #0]
   bce5a:	2701      	movs	r7, #1
   bce5c:	1cb5      	adds	r5, r6, #2
   bce5e:	2b00      	cmp	r3, #0
   bce60:	d05b      	beq.n	bcf1a <_strtol_l.constprop.0+0xf6>
   bce62:	2b10      	cmp	r3, #16
   bce64:	d109      	bne.n	bce7a <_strtol_l.constprop.0+0x56>
   bce66:	2c30      	cmp	r4, #48	; 0x30
   bce68:	d107      	bne.n	bce7a <_strtol_l.constprop.0+0x56>
   bce6a:	782c      	ldrb	r4, [r5, #0]
   bce6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bce70:	2c58      	cmp	r4, #88	; 0x58
   bce72:	d14d      	bne.n	bcf10 <_strtol_l.constprop.0+0xec>
   bce74:	786c      	ldrb	r4, [r5, #1]
   bce76:	2310      	movs	r3, #16
   bce78:	3502      	adds	r5, #2
   bce7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bce7e:	f108 38ff 	add.w	r8, r8, #4294967295
   bce82:	f04f 0c00 	mov.w	ip, #0
   bce86:	fbb8 f9f3 	udiv	r9, r8, r3
   bce8a:	4666      	mov	r6, ip
   bce8c:	fb03 8a19 	mls	sl, r3, r9, r8
   bce90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bce94:	f1be 0f09 	cmp.w	lr, #9
   bce98:	d816      	bhi.n	bcec8 <_strtol_l.constprop.0+0xa4>
   bce9a:	4674      	mov	r4, lr
   bce9c:	42a3      	cmp	r3, r4
   bce9e:	dd24      	ble.n	bceea <_strtol_l.constprop.0+0xc6>
   bcea0:	f1bc 0f00 	cmp.w	ip, #0
   bcea4:	db1e      	blt.n	bcee4 <_strtol_l.constprop.0+0xc0>
   bcea6:	45b1      	cmp	r9, r6
   bcea8:	d31c      	bcc.n	bcee4 <_strtol_l.constprop.0+0xc0>
   bceaa:	d101      	bne.n	bceb0 <_strtol_l.constprop.0+0x8c>
   bceac:	45a2      	cmp	sl, r4
   bceae:	db19      	blt.n	bcee4 <_strtol_l.constprop.0+0xc0>
   bceb0:	fb06 4603 	mla	r6, r6, r3, r4
   bceb4:	f04f 0c01 	mov.w	ip, #1
   bceb8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcebc:	e7e8      	b.n	bce90 <_strtol_l.constprop.0+0x6c>
   bcebe:	2c2b      	cmp	r4, #43	; 0x2b
   bcec0:	bf04      	itt	eq
   bcec2:	782c      	ldrbeq	r4, [r5, #0]
   bcec4:	1cb5      	addeq	r5, r6, #2
   bcec6:	e7ca      	b.n	bce5e <_strtol_l.constprop.0+0x3a>
   bcec8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcecc:	f1be 0f19 	cmp.w	lr, #25
   bced0:	d801      	bhi.n	bced6 <_strtol_l.constprop.0+0xb2>
   bced2:	3c37      	subs	r4, #55	; 0x37
   bced4:	e7e2      	b.n	bce9c <_strtol_l.constprop.0+0x78>
   bced6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bceda:	f1be 0f19 	cmp.w	lr, #25
   bcede:	d804      	bhi.n	bceea <_strtol_l.constprop.0+0xc6>
   bcee0:	3c57      	subs	r4, #87	; 0x57
   bcee2:	e7db      	b.n	bce9c <_strtol_l.constprop.0+0x78>
   bcee4:	f04f 3cff 	mov.w	ip, #4294967295
   bcee8:	e7e6      	b.n	bceb8 <_strtol_l.constprop.0+0x94>
   bceea:	f1bc 0f00 	cmp.w	ip, #0
   bceee:	da05      	bge.n	bcefc <_strtol_l.constprop.0+0xd8>
   bcef0:	2322      	movs	r3, #34	; 0x22
   bcef2:	6003      	str	r3, [r0, #0]
   bcef4:	4646      	mov	r6, r8
   bcef6:	b942      	cbnz	r2, bcf0a <_strtol_l.constprop.0+0xe6>
   bcef8:	4630      	mov	r0, r6
   bcefa:	e79e      	b.n	bce3a <_strtol_l.constprop.0+0x16>
   bcefc:	b107      	cbz	r7, bcf00 <_strtol_l.constprop.0+0xdc>
   bcefe:	4276      	negs	r6, r6
   bcf00:	2a00      	cmp	r2, #0
   bcf02:	d0f9      	beq.n	bcef8 <_strtol_l.constprop.0+0xd4>
   bcf04:	f1bc 0f00 	cmp.w	ip, #0
   bcf08:	d000      	beq.n	bcf0c <_strtol_l.constprop.0+0xe8>
   bcf0a:	1e69      	subs	r1, r5, #1
   bcf0c:	6011      	str	r1, [r2, #0]
   bcf0e:	e7f3      	b.n	bcef8 <_strtol_l.constprop.0+0xd4>
   bcf10:	2430      	movs	r4, #48	; 0x30
   bcf12:	2b00      	cmp	r3, #0
   bcf14:	d1b1      	bne.n	bce7a <_strtol_l.constprop.0+0x56>
   bcf16:	2308      	movs	r3, #8
   bcf18:	e7af      	b.n	bce7a <_strtol_l.constprop.0+0x56>
   bcf1a:	2c30      	cmp	r4, #48	; 0x30
   bcf1c:	d0a5      	beq.n	bce6a <_strtol_l.constprop.0+0x46>
   bcf1e:	230a      	movs	r3, #10
   bcf20:	e7ab      	b.n	bce7a <_strtol_l.constprop.0+0x56>
   bcf22:	bf00      	nop
   bcf24:	000bf7d1 	.word	0x000bf7d1

000bcf28 <strtol>:
   bcf28:	4613      	mov	r3, r2
   bcf2a:	460a      	mov	r2, r1
   bcf2c:	4601      	mov	r1, r0
   bcf2e:	4802      	ldr	r0, [pc, #8]	; (bcf38 <strtol+0x10>)
   bcf30:	6800      	ldr	r0, [r0, #0]
   bcf32:	f7ff bf77 	b.w	bce24 <_strtol_l.constprop.0>
   bcf36:	bf00      	nop
   bcf38:	2003e2e8 	.word	0x2003e2e8

000bcf3c <__register_exitproc>:
   bcf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcf40:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcffc <__register_exitproc+0xc0>
   bcf44:	4606      	mov	r6, r0
   bcf46:	f8d8 0000 	ldr.w	r0, [r8]
   bcf4a:	461f      	mov	r7, r3
   bcf4c:	460d      	mov	r5, r1
   bcf4e:	4691      	mov	r9, r2
   bcf50:	f000 fbc6 	bl	bd6e0 <__retarget_lock_acquire_recursive>
   bcf54:	4b25      	ldr	r3, [pc, #148]	; (bcfec <__register_exitproc+0xb0>)
   bcf56:	681c      	ldr	r4, [r3, #0]
   bcf58:	b934      	cbnz	r4, bcf68 <__register_exitproc+0x2c>
   bcf5a:	4c25      	ldr	r4, [pc, #148]	; (bcff0 <__register_exitproc+0xb4>)
   bcf5c:	601c      	str	r4, [r3, #0]
   bcf5e:	4b25      	ldr	r3, [pc, #148]	; (bcff4 <__register_exitproc+0xb8>)
   bcf60:	b113      	cbz	r3, bcf68 <__register_exitproc+0x2c>
   bcf62:	681b      	ldr	r3, [r3, #0]
   bcf64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcf68:	6863      	ldr	r3, [r4, #4]
   bcf6a:	2b1f      	cmp	r3, #31
   bcf6c:	dd07      	ble.n	bcf7e <__register_exitproc+0x42>
   bcf6e:	f8d8 0000 	ldr.w	r0, [r8]
   bcf72:	f000 fbb7 	bl	bd6e4 <__retarget_lock_release_recursive>
   bcf76:	f04f 30ff 	mov.w	r0, #4294967295
   bcf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcf7e:	b34e      	cbz	r6, bcfd4 <__register_exitproc+0x98>
   bcf80:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcf84:	b988      	cbnz	r0, bcfaa <__register_exitproc+0x6e>
   bcf86:	4b1c      	ldr	r3, [pc, #112]	; (bcff8 <__register_exitproc+0xbc>)
   bcf88:	b923      	cbnz	r3, bcf94 <__register_exitproc+0x58>
   bcf8a:	f8d8 0000 	ldr.w	r0, [r8]
   bcf8e:	f000 fba8 	bl	bd6e2 <__retarget_lock_release>
   bcf92:	e7f0      	b.n	bcf76 <__register_exitproc+0x3a>
   bcf94:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcf98:	f7fa feae 	bl	b7cf8 <malloc>
   bcf9c:	2800      	cmp	r0, #0
   bcf9e:	d0f4      	beq.n	bcf8a <__register_exitproc+0x4e>
   bcfa0:	2300      	movs	r3, #0
   bcfa2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcfa6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcfaa:	6863      	ldr	r3, [r4, #4]
   bcfac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcfb0:	2201      	movs	r2, #1
   bcfb2:	409a      	lsls	r2, r3
   bcfb4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcfb8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcfbc:	4313      	orrs	r3, r2
   bcfbe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcfc2:	2e02      	cmp	r6, #2
   bcfc4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcfc8:	bf02      	ittt	eq
   bcfca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcfce:	4313      	orreq	r3, r2
   bcfd0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcfd4:	6863      	ldr	r3, [r4, #4]
   bcfd6:	f8d8 0000 	ldr.w	r0, [r8]
   bcfda:	1c5a      	adds	r2, r3, #1
   bcfdc:	3302      	adds	r3, #2
   bcfde:	6062      	str	r2, [r4, #4]
   bcfe0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcfe4:	f000 fb7e 	bl	bd6e4 <__retarget_lock_release_recursive>
   bcfe8:	2000      	movs	r0, #0
   bcfea:	e7c6      	b.n	bcf7a <__register_exitproc+0x3e>
   bcfec:	2003e7e8 	.word	0x2003e7e8
   bcff0:	2003e75c 	.word	0x2003e75c
   bcff4:	00000000 	.word	0x00000000
   bcff8:	000b7cf9 	.word	0x000b7cf9
   bcffc:	2003e34c 	.word	0x2003e34c

000bd000 <rshift>:
   bd000:	6903      	ldr	r3, [r0, #16]
   bd002:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd00a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd00e:	f100 0414 	add.w	r4, r0, #20
   bd012:	dd45      	ble.n	bd0a0 <rshift+0xa0>
   bd014:	f011 011f 	ands.w	r1, r1, #31
   bd018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd01c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd020:	d10c      	bne.n	bd03c <rshift+0x3c>
   bd022:	f100 0710 	add.w	r7, r0, #16
   bd026:	4629      	mov	r1, r5
   bd028:	42b1      	cmp	r1, r6
   bd02a:	d334      	bcc.n	bd096 <rshift+0x96>
   bd02c:	1a9b      	subs	r3, r3, r2
   bd02e:	009b      	lsls	r3, r3, #2
   bd030:	1eea      	subs	r2, r5, #3
   bd032:	4296      	cmp	r6, r2
   bd034:	bf38      	it	cc
   bd036:	2300      	movcc	r3, #0
   bd038:	4423      	add	r3, r4
   bd03a:	e015      	b.n	bd068 <rshift+0x68>
   bd03c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd040:	f1c1 0820 	rsb	r8, r1, #32
   bd044:	40cf      	lsrs	r7, r1
   bd046:	f105 0e04 	add.w	lr, r5, #4
   bd04a:	46a1      	mov	r9, r4
   bd04c:	4576      	cmp	r6, lr
   bd04e:	46f4      	mov	ip, lr
   bd050:	d815      	bhi.n	bd07e <rshift+0x7e>
   bd052:	1a9a      	subs	r2, r3, r2
   bd054:	0092      	lsls	r2, r2, #2
   bd056:	3a04      	subs	r2, #4
   bd058:	3501      	adds	r5, #1
   bd05a:	42ae      	cmp	r6, r5
   bd05c:	bf38      	it	cc
   bd05e:	2200      	movcc	r2, #0
   bd060:	18a3      	adds	r3, r4, r2
   bd062:	50a7      	str	r7, [r4, r2]
   bd064:	b107      	cbz	r7, bd068 <rshift+0x68>
   bd066:	3304      	adds	r3, #4
   bd068:	1b1a      	subs	r2, r3, r4
   bd06a:	42a3      	cmp	r3, r4
   bd06c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd070:	bf08      	it	eq
   bd072:	2300      	moveq	r3, #0
   bd074:	6102      	str	r2, [r0, #16]
   bd076:	bf08      	it	eq
   bd078:	6143      	streq	r3, [r0, #20]
   bd07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd07e:	f8dc c000 	ldr.w	ip, [ip]
   bd082:	fa0c fc08 	lsl.w	ip, ip, r8
   bd086:	ea4c 0707 	orr.w	r7, ip, r7
   bd08a:	f849 7b04 	str.w	r7, [r9], #4
   bd08e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd092:	40cf      	lsrs	r7, r1
   bd094:	e7da      	b.n	bd04c <rshift+0x4c>
   bd096:	f851 cb04 	ldr.w	ip, [r1], #4
   bd09a:	f847 cf04 	str.w	ip, [r7, #4]!
   bd09e:	e7c3      	b.n	bd028 <rshift+0x28>
   bd0a0:	4623      	mov	r3, r4
   bd0a2:	e7e1      	b.n	bd068 <rshift+0x68>

000bd0a4 <__hexdig_fun>:
   bd0a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd0a8:	2b09      	cmp	r3, #9
   bd0aa:	d802      	bhi.n	bd0b2 <__hexdig_fun+0xe>
   bd0ac:	3820      	subs	r0, #32
   bd0ae:	b2c0      	uxtb	r0, r0
   bd0b0:	4770      	bx	lr
   bd0b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd0b6:	2b05      	cmp	r3, #5
   bd0b8:	d801      	bhi.n	bd0be <__hexdig_fun+0x1a>
   bd0ba:	3847      	subs	r0, #71	; 0x47
   bd0bc:	e7f7      	b.n	bd0ae <__hexdig_fun+0xa>
   bd0be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd0c2:	2b05      	cmp	r3, #5
   bd0c4:	d801      	bhi.n	bd0ca <__hexdig_fun+0x26>
   bd0c6:	3827      	subs	r0, #39	; 0x27
   bd0c8:	e7f1      	b.n	bd0ae <__hexdig_fun+0xa>
   bd0ca:	2000      	movs	r0, #0
   bd0cc:	4770      	bx	lr
	...

000bd0d0 <__gethex>:
   bd0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd0d4:	ed2d 8b02 	vpush	{d8}
   bd0d8:	b089      	sub	sp, #36	; 0x24
   bd0da:	ee08 0a10 	vmov	s16, r0
   bd0de:	9304      	str	r3, [sp, #16]
   bd0e0:	4bb4      	ldr	r3, [pc, #720]	; (bd3b4 <__gethex+0x2e4>)
   bd0e2:	681b      	ldr	r3, [r3, #0]
   bd0e4:	9301      	str	r3, [sp, #4]
   bd0e6:	4618      	mov	r0, r3
   bd0e8:	468b      	mov	fp, r1
   bd0ea:	4690      	mov	r8, r2
   bd0ec:	f7f7 fc86 	bl	b49fc <strlen>
   bd0f0:	9b01      	ldr	r3, [sp, #4]
   bd0f2:	f8db 2000 	ldr.w	r2, [fp]
   bd0f6:	4403      	add	r3, r0
   bd0f8:	4682      	mov	sl, r0
   bd0fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd0fe:	9305      	str	r3, [sp, #20]
   bd100:	1c93      	adds	r3, r2, #2
   bd102:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd106:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd10a:	32fe      	adds	r2, #254	; 0xfe
   bd10c:	18d1      	adds	r1, r2, r3
   bd10e:	461f      	mov	r7, r3
   bd110:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd114:	9100      	str	r1, [sp, #0]
   bd116:	2830      	cmp	r0, #48	; 0x30
   bd118:	d0f8      	beq.n	bd10c <__gethex+0x3c>
   bd11a:	f7ff ffc3 	bl	bd0a4 <__hexdig_fun>
   bd11e:	4604      	mov	r4, r0
   bd120:	2800      	cmp	r0, #0
   bd122:	d13a      	bne.n	bd19a <__gethex+0xca>
   bd124:	9901      	ldr	r1, [sp, #4]
   bd126:	4652      	mov	r2, sl
   bd128:	4638      	mov	r0, r7
   bd12a:	f7ff f806 	bl	bc13a <strncmp>
   bd12e:	4605      	mov	r5, r0
   bd130:	2800      	cmp	r0, #0
   bd132:	d168      	bne.n	bd206 <__gethex+0x136>
   bd134:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd138:	eb07 060a 	add.w	r6, r7, sl
   bd13c:	f7ff ffb2 	bl	bd0a4 <__hexdig_fun>
   bd140:	2800      	cmp	r0, #0
   bd142:	d062      	beq.n	bd20a <__gethex+0x13a>
   bd144:	4633      	mov	r3, r6
   bd146:	7818      	ldrb	r0, [r3, #0]
   bd148:	2830      	cmp	r0, #48	; 0x30
   bd14a:	461f      	mov	r7, r3
   bd14c:	f103 0301 	add.w	r3, r3, #1
   bd150:	d0f9      	beq.n	bd146 <__gethex+0x76>
   bd152:	f7ff ffa7 	bl	bd0a4 <__hexdig_fun>
   bd156:	2301      	movs	r3, #1
   bd158:	fab0 f480 	clz	r4, r0
   bd15c:	0964      	lsrs	r4, r4, #5
   bd15e:	4635      	mov	r5, r6
   bd160:	9300      	str	r3, [sp, #0]
   bd162:	463a      	mov	r2, r7
   bd164:	4616      	mov	r6, r2
   bd166:	3201      	adds	r2, #1
   bd168:	7830      	ldrb	r0, [r6, #0]
   bd16a:	f7ff ff9b 	bl	bd0a4 <__hexdig_fun>
   bd16e:	2800      	cmp	r0, #0
   bd170:	d1f8      	bne.n	bd164 <__gethex+0x94>
   bd172:	9901      	ldr	r1, [sp, #4]
   bd174:	4652      	mov	r2, sl
   bd176:	4630      	mov	r0, r6
   bd178:	f7fe ffdf 	bl	bc13a <strncmp>
   bd17c:	b980      	cbnz	r0, bd1a0 <__gethex+0xd0>
   bd17e:	b94d      	cbnz	r5, bd194 <__gethex+0xc4>
   bd180:	eb06 050a 	add.w	r5, r6, sl
   bd184:	462a      	mov	r2, r5
   bd186:	4616      	mov	r6, r2
   bd188:	3201      	adds	r2, #1
   bd18a:	7830      	ldrb	r0, [r6, #0]
   bd18c:	f7ff ff8a 	bl	bd0a4 <__hexdig_fun>
   bd190:	2800      	cmp	r0, #0
   bd192:	d1f8      	bne.n	bd186 <__gethex+0xb6>
   bd194:	1bad      	subs	r5, r5, r6
   bd196:	00ad      	lsls	r5, r5, #2
   bd198:	e004      	b.n	bd1a4 <__gethex+0xd4>
   bd19a:	2400      	movs	r4, #0
   bd19c:	4625      	mov	r5, r4
   bd19e:	e7e0      	b.n	bd162 <__gethex+0x92>
   bd1a0:	2d00      	cmp	r5, #0
   bd1a2:	d1f7      	bne.n	bd194 <__gethex+0xc4>
   bd1a4:	7833      	ldrb	r3, [r6, #0]
   bd1a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd1aa:	2b50      	cmp	r3, #80	; 0x50
   bd1ac:	d13b      	bne.n	bd226 <__gethex+0x156>
   bd1ae:	7873      	ldrb	r3, [r6, #1]
   bd1b0:	2b2b      	cmp	r3, #43	; 0x2b
   bd1b2:	d02c      	beq.n	bd20e <__gethex+0x13e>
   bd1b4:	2b2d      	cmp	r3, #45	; 0x2d
   bd1b6:	d02e      	beq.n	bd216 <__gethex+0x146>
   bd1b8:	1c71      	adds	r1, r6, #1
   bd1ba:	f04f 0900 	mov.w	r9, #0
   bd1be:	7808      	ldrb	r0, [r1, #0]
   bd1c0:	f7ff ff70 	bl	bd0a4 <__hexdig_fun>
   bd1c4:	1e43      	subs	r3, r0, #1
   bd1c6:	b2db      	uxtb	r3, r3
   bd1c8:	2b18      	cmp	r3, #24
   bd1ca:	d82c      	bhi.n	bd226 <__gethex+0x156>
   bd1cc:	f1a0 0210 	sub.w	r2, r0, #16
   bd1d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd1d4:	f7ff ff66 	bl	bd0a4 <__hexdig_fun>
   bd1d8:	1e43      	subs	r3, r0, #1
   bd1da:	b2db      	uxtb	r3, r3
   bd1dc:	2b18      	cmp	r3, #24
   bd1de:	d91d      	bls.n	bd21c <__gethex+0x14c>
   bd1e0:	f1b9 0f00 	cmp.w	r9, #0
   bd1e4:	d000      	beq.n	bd1e8 <__gethex+0x118>
   bd1e6:	4252      	negs	r2, r2
   bd1e8:	4415      	add	r5, r2
   bd1ea:	f8cb 1000 	str.w	r1, [fp]
   bd1ee:	b1e4      	cbz	r4, bd22a <__gethex+0x15a>
   bd1f0:	9b00      	ldr	r3, [sp, #0]
   bd1f2:	2b00      	cmp	r3, #0
   bd1f4:	bf14      	ite	ne
   bd1f6:	2700      	movne	r7, #0
   bd1f8:	2706      	moveq	r7, #6
   bd1fa:	4638      	mov	r0, r7
   bd1fc:	b009      	add	sp, #36	; 0x24
   bd1fe:	ecbd 8b02 	vpop	{d8}
   bd202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd206:	463e      	mov	r6, r7
   bd208:	4625      	mov	r5, r4
   bd20a:	2401      	movs	r4, #1
   bd20c:	e7ca      	b.n	bd1a4 <__gethex+0xd4>
   bd20e:	f04f 0900 	mov.w	r9, #0
   bd212:	1cb1      	adds	r1, r6, #2
   bd214:	e7d3      	b.n	bd1be <__gethex+0xee>
   bd216:	f04f 0901 	mov.w	r9, #1
   bd21a:	e7fa      	b.n	bd212 <__gethex+0x142>
   bd21c:	230a      	movs	r3, #10
   bd21e:	fb03 0202 	mla	r2, r3, r2, r0
   bd222:	3a10      	subs	r2, #16
   bd224:	e7d4      	b.n	bd1d0 <__gethex+0x100>
   bd226:	4631      	mov	r1, r6
   bd228:	e7df      	b.n	bd1ea <__gethex+0x11a>
   bd22a:	1bf3      	subs	r3, r6, r7
   bd22c:	3b01      	subs	r3, #1
   bd22e:	4621      	mov	r1, r4
   bd230:	2b07      	cmp	r3, #7
   bd232:	dc0b      	bgt.n	bd24c <__gethex+0x17c>
   bd234:	ee18 0a10 	vmov	r0, s16
   bd238:	f000 fa68 	bl	bd70c <_Balloc>
   bd23c:	4604      	mov	r4, r0
   bd23e:	b940      	cbnz	r0, bd252 <__gethex+0x182>
   bd240:	4b5d      	ldr	r3, [pc, #372]	; (bd3b8 <__gethex+0x2e8>)
   bd242:	4602      	mov	r2, r0
   bd244:	21de      	movs	r1, #222	; 0xde
   bd246:	485d      	ldr	r0, [pc, #372]	; (bd3bc <__gethex+0x2ec>)
   bd248:	f7fa fd96 	bl	b7d78 <__assert_func>
   bd24c:	3101      	adds	r1, #1
   bd24e:	105b      	asrs	r3, r3, #1
   bd250:	e7ee      	b.n	bd230 <__gethex+0x160>
   bd252:	f100 0914 	add.w	r9, r0, #20
   bd256:	f04f 0b00 	mov.w	fp, #0
   bd25a:	f1ca 0301 	rsb	r3, sl, #1
   bd25e:	f8cd 9008 	str.w	r9, [sp, #8]
   bd262:	f8cd b000 	str.w	fp, [sp]
   bd266:	9306      	str	r3, [sp, #24]
   bd268:	42b7      	cmp	r7, r6
   bd26a:	d340      	bcc.n	bd2ee <__gethex+0x21e>
   bd26c:	9802      	ldr	r0, [sp, #8]
   bd26e:	9b00      	ldr	r3, [sp, #0]
   bd270:	f840 3b04 	str.w	r3, [r0], #4
   bd274:	eba0 0009 	sub.w	r0, r0, r9
   bd278:	1080      	asrs	r0, r0, #2
   bd27a:	0146      	lsls	r6, r0, #5
   bd27c:	6120      	str	r0, [r4, #16]
   bd27e:	4618      	mov	r0, r3
   bd280:	f000 fb36 	bl	bd8f0 <__hi0bits>
   bd284:	1a30      	subs	r0, r6, r0
   bd286:	f8d8 6000 	ldr.w	r6, [r8]
   bd28a:	42b0      	cmp	r0, r6
   bd28c:	dd63      	ble.n	bd356 <__gethex+0x286>
   bd28e:	1b87      	subs	r7, r0, r6
   bd290:	4639      	mov	r1, r7
   bd292:	4620      	mov	r0, r4
   bd294:	f000 feda 	bl	be04c <__any_on>
   bd298:	4682      	mov	sl, r0
   bd29a:	b1a8      	cbz	r0, bd2c8 <__gethex+0x1f8>
   bd29c:	1e7b      	subs	r3, r7, #1
   bd29e:	1159      	asrs	r1, r3, #5
   bd2a0:	f003 021f 	and.w	r2, r3, #31
   bd2a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd2a8:	f04f 0a01 	mov.w	sl, #1
   bd2ac:	fa0a f202 	lsl.w	r2, sl, r2
   bd2b0:	420a      	tst	r2, r1
   bd2b2:	d009      	beq.n	bd2c8 <__gethex+0x1f8>
   bd2b4:	4553      	cmp	r3, sl
   bd2b6:	dd05      	ble.n	bd2c4 <__gethex+0x1f4>
   bd2b8:	1eb9      	subs	r1, r7, #2
   bd2ba:	4620      	mov	r0, r4
   bd2bc:	f000 fec6 	bl	be04c <__any_on>
   bd2c0:	2800      	cmp	r0, #0
   bd2c2:	d145      	bne.n	bd350 <__gethex+0x280>
   bd2c4:	f04f 0a02 	mov.w	sl, #2
   bd2c8:	4639      	mov	r1, r7
   bd2ca:	4620      	mov	r0, r4
   bd2cc:	f7ff fe98 	bl	bd000 <rshift>
   bd2d0:	443d      	add	r5, r7
   bd2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd2d6:	42ab      	cmp	r3, r5
   bd2d8:	da4c      	bge.n	bd374 <__gethex+0x2a4>
   bd2da:	ee18 0a10 	vmov	r0, s16
   bd2de:	4621      	mov	r1, r4
   bd2e0:	f000 fa54 	bl	bd78c <_Bfree>
   bd2e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd2e6:	2300      	movs	r3, #0
   bd2e8:	6013      	str	r3, [r2, #0]
   bd2ea:	27a3      	movs	r7, #163	; 0xa3
   bd2ec:	e785      	b.n	bd1fa <__gethex+0x12a>
   bd2ee:	1e73      	subs	r3, r6, #1
   bd2f0:	9a05      	ldr	r2, [sp, #20]
   bd2f2:	9303      	str	r3, [sp, #12]
   bd2f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd2f8:	4293      	cmp	r3, r2
   bd2fa:	d019      	beq.n	bd330 <__gethex+0x260>
   bd2fc:	f1bb 0f20 	cmp.w	fp, #32
   bd300:	d107      	bne.n	bd312 <__gethex+0x242>
   bd302:	9b02      	ldr	r3, [sp, #8]
   bd304:	9a00      	ldr	r2, [sp, #0]
   bd306:	f843 2b04 	str.w	r2, [r3], #4
   bd30a:	9302      	str	r3, [sp, #8]
   bd30c:	2300      	movs	r3, #0
   bd30e:	9300      	str	r3, [sp, #0]
   bd310:	469b      	mov	fp, r3
   bd312:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd316:	f7ff fec5 	bl	bd0a4 <__hexdig_fun>
   bd31a:	9b00      	ldr	r3, [sp, #0]
   bd31c:	f000 000f 	and.w	r0, r0, #15
   bd320:	fa00 f00b 	lsl.w	r0, r0, fp
   bd324:	4303      	orrs	r3, r0
   bd326:	9300      	str	r3, [sp, #0]
   bd328:	f10b 0b04 	add.w	fp, fp, #4
   bd32c:	9b03      	ldr	r3, [sp, #12]
   bd32e:	e00d      	b.n	bd34c <__gethex+0x27c>
   bd330:	9b03      	ldr	r3, [sp, #12]
   bd332:	9a06      	ldr	r2, [sp, #24]
   bd334:	4413      	add	r3, r2
   bd336:	42bb      	cmp	r3, r7
   bd338:	d3e0      	bcc.n	bd2fc <__gethex+0x22c>
   bd33a:	4618      	mov	r0, r3
   bd33c:	9901      	ldr	r1, [sp, #4]
   bd33e:	9307      	str	r3, [sp, #28]
   bd340:	4652      	mov	r2, sl
   bd342:	f7fe fefa 	bl	bc13a <strncmp>
   bd346:	9b07      	ldr	r3, [sp, #28]
   bd348:	2800      	cmp	r0, #0
   bd34a:	d1d7      	bne.n	bd2fc <__gethex+0x22c>
   bd34c:	461e      	mov	r6, r3
   bd34e:	e78b      	b.n	bd268 <__gethex+0x198>
   bd350:	f04f 0a03 	mov.w	sl, #3
   bd354:	e7b8      	b.n	bd2c8 <__gethex+0x1f8>
   bd356:	da0a      	bge.n	bd36e <__gethex+0x29e>
   bd358:	1a37      	subs	r7, r6, r0
   bd35a:	4621      	mov	r1, r4
   bd35c:	ee18 0a10 	vmov	r0, s16
   bd360:	463a      	mov	r2, r7
   bd362:	f000 fc2f 	bl	bdbc4 <__lshift>
   bd366:	1bed      	subs	r5, r5, r7
   bd368:	4604      	mov	r4, r0
   bd36a:	f100 0914 	add.w	r9, r0, #20
   bd36e:	f04f 0a00 	mov.w	sl, #0
   bd372:	e7ae      	b.n	bd2d2 <__gethex+0x202>
   bd374:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd378:	42a8      	cmp	r0, r5
   bd37a:	dd72      	ble.n	bd462 <__gethex+0x392>
   bd37c:	1b45      	subs	r5, r0, r5
   bd37e:	42ae      	cmp	r6, r5
   bd380:	dc36      	bgt.n	bd3f0 <__gethex+0x320>
   bd382:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd386:	2b02      	cmp	r3, #2
   bd388:	d02a      	beq.n	bd3e0 <__gethex+0x310>
   bd38a:	2b03      	cmp	r3, #3
   bd38c:	d02c      	beq.n	bd3e8 <__gethex+0x318>
   bd38e:	2b01      	cmp	r3, #1
   bd390:	d11c      	bne.n	bd3cc <__gethex+0x2fc>
   bd392:	42ae      	cmp	r6, r5
   bd394:	d11a      	bne.n	bd3cc <__gethex+0x2fc>
   bd396:	2e01      	cmp	r6, #1
   bd398:	d112      	bne.n	bd3c0 <__gethex+0x2f0>
   bd39a:	9a04      	ldr	r2, [sp, #16]
   bd39c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd3a0:	6013      	str	r3, [r2, #0]
   bd3a2:	2301      	movs	r3, #1
   bd3a4:	6123      	str	r3, [r4, #16]
   bd3a6:	f8c9 3000 	str.w	r3, [r9]
   bd3aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd3ac:	2762      	movs	r7, #98	; 0x62
   bd3ae:	601c      	str	r4, [r3, #0]
   bd3b0:	e723      	b.n	bd1fa <__gethex+0x12a>
   bd3b2:	bf00      	nop
   bd3b4:	000bf968 	.word	0x000bf968
   bd3b8:	000bf8d1 	.word	0x000bf8d1
   bd3bc:	000bf8e2 	.word	0x000bf8e2
   bd3c0:	1e71      	subs	r1, r6, #1
   bd3c2:	4620      	mov	r0, r4
   bd3c4:	f000 fe42 	bl	be04c <__any_on>
   bd3c8:	2800      	cmp	r0, #0
   bd3ca:	d1e6      	bne.n	bd39a <__gethex+0x2ca>
   bd3cc:	ee18 0a10 	vmov	r0, s16
   bd3d0:	4621      	mov	r1, r4
   bd3d2:	f000 f9db 	bl	bd78c <_Bfree>
   bd3d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd3d8:	2300      	movs	r3, #0
   bd3da:	6013      	str	r3, [r2, #0]
   bd3dc:	2750      	movs	r7, #80	; 0x50
   bd3de:	e70c      	b.n	bd1fa <__gethex+0x12a>
   bd3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd3e2:	2b00      	cmp	r3, #0
   bd3e4:	d1f2      	bne.n	bd3cc <__gethex+0x2fc>
   bd3e6:	e7d8      	b.n	bd39a <__gethex+0x2ca>
   bd3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd3ea:	2b00      	cmp	r3, #0
   bd3ec:	d1d5      	bne.n	bd39a <__gethex+0x2ca>
   bd3ee:	e7ed      	b.n	bd3cc <__gethex+0x2fc>
   bd3f0:	1e6f      	subs	r7, r5, #1
   bd3f2:	f1ba 0f00 	cmp.w	sl, #0
   bd3f6:	d131      	bne.n	bd45c <__gethex+0x38c>
   bd3f8:	b127      	cbz	r7, bd404 <__gethex+0x334>
   bd3fa:	4639      	mov	r1, r7
   bd3fc:	4620      	mov	r0, r4
   bd3fe:	f000 fe25 	bl	be04c <__any_on>
   bd402:	4682      	mov	sl, r0
   bd404:	117b      	asrs	r3, r7, #5
   bd406:	2101      	movs	r1, #1
   bd408:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd40c:	f007 071f 	and.w	r7, r7, #31
   bd410:	fa01 f707 	lsl.w	r7, r1, r7
   bd414:	421f      	tst	r7, r3
   bd416:	4629      	mov	r1, r5
   bd418:	4620      	mov	r0, r4
   bd41a:	bf18      	it	ne
   bd41c:	f04a 0a02 	orrne.w	sl, sl, #2
   bd420:	1b76      	subs	r6, r6, r5
   bd422:	f7ff fded 	bl	bd000 <rshift>
   bd426:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd42a:	2702      	movs	r7, #2
   bd42c:	f1ba 0f00 	cmp.w	sl, #0
   bd430:	d048      	beq.n	bd4c4 <__gethex+0x3f4>
   bd432:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd436:	2b02      	cmp	r3, #2
   bd438:	d015      	beq.n	bd466 <__gethex+0x396>
   bd43a:	2b03      	cmp	r3, #3
   bd43c:	d017      	beq.n	bd46e <__gethex+0x39e>
   bd43e:	2b01      	cmp	r3, #1
   bd440:	d109      	bne.n	bd456 <__gethex+0x386>
   bd442:	f01a 0f02 	tst.w	sl, #2
   bd446:	d006      	beq.n	bd456 <__gethex+0x386>
   bd448:	f8d9 0000 	ldr.w	r0, [r9]
   bd44c:	ea4a 0a00 	orr.w	sl, sl, r0
   bd450:	f01a 0f01 	tst.w	sl, #1
   bd454:	d10e      	bne.n	bd474 <__gethex+0x3a4>
   bd456:	f047 0710 	orr.w	r7, r7, #16
   bd45a:	e033      	b.n	bd4c4 <__gethex+0x3f4>
   bd45c:	f04f 0a01 	mov.w	sl, #1
   bd460:	e7d0      	b.n	bd404 <__gethex+0x334>
   bd462:	2701      	movs	r7, #1
   bd464:	e7e2      	b.n	bd42c <__gethex+0x35c>
   bd466:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd468:	f1c3 0301 	rsb	r3, r3, #1
   bd46c:	9315      	str	r3, [sp, #84]	; 0x54
   bd46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd470:	2b00      	cmp	r3, #0
   bd472:	d0f0      	beq.n	bd456 <__gethex+0x386>
   bd474:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd478:	f104 0314 	add.w	r3, r4, #20
   bd47c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd480:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd484:	f04f 0c00 	mov.w	ip, #0
   bd488:	4618      	mov	r0, r3
   bd48a:	f853 2b04 	ldr.w	r2, [r3], #4
   bd48e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bd492:	d01c      	beq.n	bd4ce <__gethex+0x3fe>
   bd494:	3201      	adds	r2, #1
   bd496:	6002      	str	r2, [r0, #0]
   bd498:	2f02      	cmp	r7, #2
   bd49a:	f104 0314 	add.w	r3, r4, #20
   bd49e:	d13f      	bne.n	bd520 <__gethex+0x450>
   bd4a0:	f8d8 2000 	ldr.w	r2, [r8]
   bd4a4:	3a01      	subs	r2, #1
   bd4a6:	42b2      	cmp	r2, r6
   bd4a8:	d10a      	bne.n	bd4c0 <__gethex+0x3f0>
   bd4aa:	1171      	asrs	r1, r6, #5
   bd4ac:	2201      	movs	r2, #1
   bd4ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd4b2:	f006 061f 	and.w	r6, r6, #31
   bd4b6:	fa02 f606 	lsl.w	r6, r2, r6
   bd4ba:	421e      	tst	r6, r3
   bd4bc:	bf18      	it	ne
   bd4be:	4617      	movne	r7, r2
   bd4c0:	f047 0720 	orr.w	r7, r7, #32
   bd4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd4c6:	601c      	str	r4, [r3, #0]
   bd4c8:	9b04      	ldr	r3, [sp, #16]
   bd4ca:	601d      	str	r5, [r3, #0]
   bd4cc:	e695      	b.n	bd1fa <__gethex+0x12a>
   bd4ce:	4299      	cmp	r1, r3
   bd4d0:	f843 cc04 	str.w	ip, [r3, #-4]
   bd4d4:	d8d8      	bhi.n	bd488 <__gethex+0x3b8>
   bd4d6:	68a3      	ldr	r3, [r4, #8]
   bd4d8:	459b      	cmp	fp, r3
   bd4da:	db19      	blt.n	bd510 <__gethex+0x440>
   bd4dc:	6861      	ldr	r1, [r4, #4]
   bd4de:	ee18 0a10 	vmov	r0, s16
   bd4e2:	3101      	adds	r1, #1
   bd4e4:	f000 f912 	bl	bd70c <_Balloc>
   bd4e8:	4681      	mov	r9, r0
   bd4ea:	b918      	cbnz	r0, bd4f4 <__gethex+0x424>
   bd4ec:	4b1a      	ldr	r3, [pc, #104]	; (bd558 <__gethex+0x488>)
   bd4ee:	4602      	mov	r2, r0
   bd4f0:	2184      	movs	r1, #132	; 0x84
   bd4f2:	e6a8      	b.n	bd246 <__gethex+0x176>
   bd4f4:	6922      	ldr	r2, [r4, #16]
   bd4f6:	3202      	adds	r2, #2
   bd4f8:	f104 010c 	add.w	r1, r4, #12
   bd4fc:	0092      	lsls	r2, r2, #2
   bd4fe:	300c      	adds	r0, #12
   bd500:	f7fe fd9e 	bl	bc040 <memcpy>
   bd504:	4621      	mov	r1, r4
   bd506:	ee18 0a10 	vmov	r0, s16
   bd50a:	f000 f93f 	bl	bd78c <_Bfree>
   bd50e:	464c      	mov	r4, r9
   bd510:	6923      	ldr	r3, [r4, #16]
   bd512:	1c5a      	adds	r2, r3, #1
   bd514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd518:	6122      	str	r2, [r4, #16]
   bd51a:	2201      	movs	r2, #1
   bd51c:	615a      	str	r2, [r3, #20]
   bd51e:	e7bb      	b.n	bd498 <__gethex+0x3c8>
   bd520:	6922      	ldr	r2, [r4, #16]
   bd522:	455a      	cmp	r2, fp
   bd524:	dd0b      	ble.n	bd53e <__gethex+0x46e>
   bd526:	2101      	movs	r1, #1
   bd528:	4620      	mov	r0, r4
   bd52a:	f7ff fd69 	bl	bd000 <rshift>
   bd52e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd532:	3501      	adds	r5, #1
   bd534:	42ab      	cmp	r3, r5
   bd536:	f6ff aed0 	blt.w	bd2da <__gethex+0x20a>
   bd53a:	2701      	movs	r7, #1
   bd53c:	e7c0      	b.n	bd4c0 <__gethex+0x3f0>
   bd53e:	f016 061f 	ands.w	r6, r6, #31
   bd542:	d0fa      	beq.n	bd53a <__gethex+0x46a>
   bd544:	4453      	add	r3, sl
   bd546:	f1c6 0620 	rsb	r6, r6, #32
   bd54a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd54e:	f000 f9cf 	bl	bd8f0 <__hi0bits>
   bd552:	42b0      	cmp	r0, r6
   bd554:	dbe7      	blt.n	bd526 <__gethex+0x456>
   bd556:	e7f0      	b.n	bd53a <__gethex+0x46a>
   bd558:	000bf8d1 	.word	0x000bf8d1

000bd55c <L_shift>:
   bd55c:	f1c2 0208 	rsb	r2, r2, #8
   bd560:	0092      	lsls	r2, r2, #2
   bd562:	b570      	push	{r4, r5, r6, lr}
   bd564:	f1c2 0620 	rsb	r6, r2, #32
   bd568:	6843      	ldr	r3, [r0, #4]
   bd56a:	6804      	ldr	r4, [r0, #0]
   bd56c:	fa03 f506 	lsl.w	r5, r3, r6
   bd570:	432c      	orrs	r4, r5
   bd572:	40d3      	lsrs	r3, r2
   bd574:	6004      	str	r4, [r0, #0]
   bd576:	f840 3f04 	str.w	r3, [r0, #4]!
   bd57a:	4288      	cmp	r0, r1
   bd57c:	d3f4      	bcc.n	bd568 <L_shift+0xc>
   bd57e:	bd70      	pop	{r4, r5, r6, pc}

000bd580 <__match>:
   bd580:	b530      	push	{r4, r5, lr}
   bd582:	6803      	ldr	r3, [r0, #0]
   bd584:	3301      	adds	r3, #1
   bd586:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd58a:	b914      	cbnz	r4, bd592 <__match+0x12>
   bd58c:	6003      	str	r3, [r0, #0]
   bd58e:	2001      	movs	r0, #1
   bd590:	bd30      	pop	{r4, r5, pc}
   bd592:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd59a:	2d19      	cmp	r5, #25
   bd59c:	bf98      	it	ls
   bd59e:	3220      	addls	r2, #32
   bd5a0:	42a2      	cmp	r2, r4
   bd5a2:	d0f0      	beq.n	bd586 <__match+0x6>
   bd5a4:	2000      	movs	r0, #0
   bd5a6:	e7f3      	b.n	bd590 <__match+0x10>

000bd5a8 <__hexnan>:
   bd5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd5ac:	680b      	ldr	r3, [r1, #0]
   bd5ae:	115e      	asrs	r6, r3, #5
   bd5b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd5b4:	f013 031f 	ands.w	r3, r3, #31
   bd5b8:	b087      	sub	sp, #28
   bd5ba:	bf18      	it	ne
   bd5bc:	3604      	addne	r6, #4
   bd5be:	2500      	movs	r5, #0
   bd5c0:	1f37      	subs	r7, r6, #4
   bd5c2:	4690      	mov	r8, r2
   bd5c4:	6802      	ldr	r2, [r0, #0]
   bd5c6:	9301      	str	r3, [sp, #4]
   bd5c8:	4682      	mov	sl, r0
   bd5ca:	f846 5c04 	str.w	r5, [r6, #-4]
   bd5ce:	46b9      	mov	r9, r7
   bd5d0:	463c      	mov	r4, r7
   bd5d2:	9502      	str	r5, [sp, #8]
   bd5d4:	46ab      	mov	fp, r5
   bd5d6:	7851      	ldrb	r1, [r2, #1]
   bd5d8:	1c53      	adds	r3, r2, #1
   bd5da:	9303      	str	r3, [sp, #12]
   bd5dc:	b341      	cbz	r1, bd630 <__hexnan+0x88>
   bd5de:	4608      	mov	r0, r1
   bd5e0:	9205      	str	r2, [sp, #20]
   bd5e2:	9104      	str	r1, [sp, #16]
   bd5e4:	f7ff fd5e 	bl	bd0a4 <__hexdig_fun>
   bd5e8:	2800      	cmp	r0, #0
   bd5ea:	d14f      	bne.n	bd68c <__hexnan+0xe4>
   bd5ec:	9904      	ldr	r1, [sp, #16]
   bd5ee:	9a05      	ldr	r2, [sp, #20]
   bd5f0:	2920      	cmp	r1, #32
   bd5f2:	d818      	bhi.n	bd626 <__hexnan+0x7e>
   bd5f4:	9b02      	ldr	r3, [sp, #8]
   bd5f6:	459b      	cmp	fp, r3
   bd5f8:	dd13      	ble.n	bd622 <__hexnan+0x7a>
   bd5fa:	454c      	cmp	r4, r9
   bd5fc:	d206      	bcs.n	bd60c <__hexnan+0x64>
   bd5fe:	2d07      	cmp	r5, #7
   bd600:	dc04      	bgt.n	bd60c <__hexnan+0x64>
   bd602:	462a      	mov	r2, r5
   bd604:	4649      	mov	r1, r9
   bd606:	4620      	mov	r0, r4
   bd608:	f7ff ffa8 	bl	bd55c <L_shift>
   bd60c:	4544      	cmp	r4, r8
   bd60e:	d950      	bls.n	bd6b2 <__hexnan+0x10a>
   bd610:	2300      	movs	r3, #0
   bd612:	f1a4 0904 	sub.w	r9, r4, #4
   bd616:	f844 3c04 	str.w	r3, [r4, #-4]
   bd61a:	f8cd b008 	str.w	fp, [sp, #8]
   bd61e:	464c      	mov	r4, r9
   bd620:	461d      	mov	r5, r3
   bd622:	9a03      	ldr	r2, [sp, #12]
   bd624:	e7d7      	b.n	bd5d6 <__hexnan+0x2e>
   bd626:	2929      	cmp	r1, #41	; 0x29
   bd628:	d156      	bne.n	bd6d8 <__hexnan+0x130>
   bd62a:	3202      	adds	r2, #2
   bd62c:	f8ca 2000 	str.w	r2, [sl]
   bd630:	f1bb 0f00 	cmp.w	fp, #0
   bd634:	d050      	beq.n	bd6d8 <__hexnan+0x130>
   bd636:	454c      	cmp	r4, r9
   bd638:	d206      	bcs.n	bd648 <__hexnan+0xa0>
   bd63a:	2d07      	cmp	r5, #7
   bd63c:	dc04      	bgt.n	bd648 <__hexnan+0xa0>
   bd63e:	462a      	mov	r2, r5
   bd640:	4649      	mov	r1, r9
   bd642:	4620      	mov	r0, r4
   bd644:	f7ff ff8a 	bl	bd55c <L_shift>
   bd648:	4544      	cmp	r4, r8
   bd64a:	d934      	bls.n	bd6b6 <__hexnan+0x10e>
   bd64c:	f1a8 0204 	sub.w	r2, r8, #4
   bd650:	4623      	mov	r3, r4
   bd652:	f853 1b04 	ldr.w	r1, [r3], #4
   bd656:	f842 1f04 	str.w	r1, [r2, #4]!
   bd65a:	429f      	cmp	r7, r3
   bd65c:	d2f9      	bcs.n	bd652 <__hexnan+0xaa>
   bd65e:	1b3b      	subs	r3, r7, r4
   bd660:	f023 0303 	bic.w	r3, r3, #3
   bd664:	3304      	adds	r3, #4
   bd666:	3401      	adds	r4, #1
   bd668:	3e03      	subs	r6, #3
   bd66a:	42b4      	cmp	r4, r6
   bd66c:	bf88      	it	hi
   bd66e:	2304      	movhi	r3, #4
   bd670:	4443      	add	r3, r8
   bd672:	2200      	movs	r2, #0
   bd674:	f843 2b04 	str.w	r2, [r3], #4
   bd678:	429f      	cmp	r7, r3
   bd67a:	d2fb      	bcs.n	bd674 <__hexnan+0xcc>
   bd67c:	683b      	ldr	r3, [r7, #0]
   bd67e:	b91b      	cbnz	r3, bd688 <__hexnan+0xe0>
   bd680:	4547      	cmp	r7, r8
   bd682:	d127      	bne.n	bd6d4 <__hexnan+0x12c>
   bd684:	2301      	movs	r3, #1
   bd686:	603b      	str	r3, [r7, #0]
   bd688:	2005      	movs	r0, #5
   bd68a:	e026      	b.n	bd6da <__hexnan+0x132>
   bd68c:	3501      	adds	r5, #1
   bd68e:	2d08      	cmp	r5, #8
   bd690:	f10b 0b01 	add.w	fp, fp, #1
   bd694:	dd06      	ble.n	bd6a4 <__hexnan+0xfc>
   bd696:	4544      	cmp	r4, r8
   bd698:	d9c3      	bls.n	bd622 <__hexnan+0x7a>
   bd69a:	2300      	movs	r3, #0
   bd69c:	f844 3c04 	str.w	r3, [r4, #-4]
   bd6a0:	2501      	movs	r5, #1
   bd6a2:	3c04      	subs	r4, #4
   bd6a4:	6822      	ldr	r2, [r4, #0]
   bd6a6:	f000 000f 	and.w	r0, r0, #15
   bd6aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd6ae:	6022      	str	r2, [r4, #0]
   bd6b0:	e7b7      	b.n	bd622 <__hexnan+0x7a>
   bd6b2:	2508      	movs	r5, #8
   bd6b4:	e7b5      	b.n	bd622 <__hexnan+0x7a>
   bd6b6:	9b01      	ldr	r3, [sp, #4]
   bd6b8:	2b00      	cmp	r3, #0
   bd6ba:	d0df      	beq.n	bd67c <__hexnan+0xd4>
   bd6bc:	f04f 32ff 	mov.w	r2, #4294967295
   bd6c0:	f1c3 0320 	rsb	r3, r3, #32
   bd6c4:	fa22 f303 	lsr.w	r3, r2, r3
   bd6c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd6cc:	401a      	ands	r2, r3
   bd6ce:	f846 2c04 	str.w	r2, [r6, #-4]
   bd6d2:	e7d3      	b.n	bd67c <__hexnan+0xd4>
   bd6d4:	3f04      	subs	r7, #4
   bd6d6:	e7d1      	b.n	bd67c <__hexnan+0xd4>
   bd6d8:	2004      	movs	r0, #4
   bd6da:	b007      	add	sp, #28
   bd6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd6e0 <__retarget_lock_acquire_recursive>:
   bd6e0:	4770      	bx	lr

000bd6e2 <__retarget_lock_release>:
   bd6e2:	4770      	bx	lr

000bd6e4 <__retarget_lock_release_recursive>:
   bd6e4:	4770      	bx	lr

000bd6e6 <__ascii_mbtowc>:
   bd6e6:	b082      	sub	sp, #8
   bd6e8:	b901      	cbnz	r1, bd6ec <__ascii_mbtowc+0x6>
   bd6ea:	a901      	add	r1, sp, #4
   bd6ec:	b142      	cbz	r2, bd700 <__ascii_mbtowc+0x1a>
   bd6ee:	b14b      	cbz	r3, bd704 <__ascii_mbtowc+0x1e>
   bd6f0:	7813      	ldrb	r3, [r2, #0]
   bd6f2:	600b      	str	r3, [r1, #0]
   bd6f4:	7812      	ldrb	r2, [r2, #0]
   bd6f6:	1e10      	subs	r0, r2, #0
   bd6f8:	bf18      	it	ne
   bd6fa:	2001      	movne	r0, #1
   bd6fc:	b002      	add	sp, #8
   bd6fe:	4770      	bx	lr
   bd700:	4610      	mov	r0, r2
   bd702:	e7fb      	b.n	bd6fc <__ascii_mbtowc+0x16>
   bd704:	f06f 0001 	mvn.w	r0, #1
   bd708:	e7f8      	b.n	bd6fc <__ascii_mbtowc+0x16>
	...

000bd70c <_Balloc>:
   bd70c:	b570      	push	{r4, r5, r6, lr}
   bd70e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd710:	4604      	mov	r4, r0
   bd712:	460d      	mov	r5, r1
   bd714:	b976      	cbnz	r6, bd734 <_Balloc+0x28>
   bd716:	2010      	movs	r0, #16
   bd718:	f7fa faee 	bl	b7cf8 <malloc>
   bd71c:	4602      	mov	r2, r0
   bd71e:	6260      	str	r0, [r4, #36]	; 0x24
   bd720:	b920      	cbnz	r0, bd72c <_Balloc+0x20>
   bd722:	4b18      	ldr	r3, [pc, #96]	; (bd784 <_Balloc+0x78>)
   bd724:	4818      	ldr	r0, [pc, #96]	; (bd788 <_Balloc+0x7c>)
   bd726:	2166      	movs	r1, #102	; 0x66
   bd728:	f7fa fb26 	bl	b7d78 <__assert_func>
   bd72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd730:	6006      	str	r6, [r0, #0]
   bd732:	60c6      	str	r6, [r0, #12]
   bd734:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd736:	68f3      	ldr	r3, [r6, #12]
   bd738:	b183      	cbz	r3, bd75c <_Balloc+0x50>
   bd73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd73c:	68db      	ldr	r3, [r3, #12]
   bd73e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd742:	b9b8      	cbnz	r0, bd774 <_Balloc+0x68>
   bd744:	2101      	movs	r1, #1
   bd746:	fa01 f605 	lsl.w	r6, r1, r5
   bd74a:	1d72      	adds	r2, r6, #5
   bd74c:	0092      	lsls	r2, r2, #2
   bd74e:	4620      	mov	r0, r4
   bd750:	f000 fc9d 	bl	be08e <_calloc_r>
   bd754:	b160      	cbz	r0, bd770 <_Balloc+0x64>
   bd756:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd75a:	e00e      	b.n	bd77a <_Balloc+0x6e>
   bd75c:	2221      	movs	r2, #33	; 0x21
   bd75e:	2104      	movs	r1, #4
   bd760:	4620      	mov	r0, r4
   bd762:	f000 fc94 	bl	be08e <_calloc_r>
   bd766:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd768:	60f0      	str	r0, [r6, #12]
   bd76a:	68db      	ldr	r3, [r3, #12]
   bd76c:	2b00      	cmp	r3, #0
   bd76e:	d1e4      	bne.n	bd73a <_Balloc+0x2e>
   bd770:	2000      	movs	r0, #0
   bd772:	bd70      	pop	{r4, r5, r6, pc}
   bd774:	6802      	ldr	r2, [r0, #0]
   bd776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd77a:	2300      	movs	r3, #0
   bd77c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd780:	e7f7      	b.n	bd772 <_Balloc+0x66>
   bd782:	bf00      	nop
   bd784:	000bf6d9 	.word	0x000bf6d9
   bd788:	000bf97c 	.word	0x000bf97c

000bd78c <_Bfree>:
   bd78c:	b570      	push	{r4, r5, r6, lr}
   bd78e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd790:	4605      	mov	r5, r0
   bd792:	460c      	mov	r4, r1
   bd794:	b976      	cbnz	r6, bd7b4 <_Bfree+0x28>
   bd796:	2010      	movs	r0, #16
   bd798:	f7fa faae 	bl	b7cf8 <malloc>
   bd79c:	4602      	mov	r2, r0
   bd79e:	6268      	str	r0, [r5, #36]	; 0x24
   bd7a0:	b920      	cbnz	r0, bd7ac <_Bfree+0x20>
   bd7a2:	4b09      	ldr	r3, [pc, #36]	; (bd7c8 <_Bfree+0x3c>)
   bd7a4:	4809      	ldr	r0, [pc, #36]	; (bd7cc <_Bfree+0x40>)
   bd7a6:	218a      	movs	r1, #138	; 0x8a
   bd7a8:	f7fa fae6 	bl	b7d78 <__assert_func>
   bd7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd7b0:	6006      	str	r6, [r0, #0]
   bd7b2:	60c6      	str	r6, [r0, #12]
   bd7b4:	b13c      	cbz	r4, bd7c6 <_Bfree+0x3a>
   bd7b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd7b8:	6862      	ldr	r2, [r4, #4]
   bd7ba:	68db      	ldr	r3, [r3, #12]
   bd7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd7c0:	6021      	str	r1, [r4, #0]
   bd7c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd7c6:	bd70      	pop	{r4, r5, r6, pc}
   bd7c8:	000bf6d9 	.word	0x000bf6d9
   bd7cc:	000bf97c 	.word	0x000bf97c

000bd7d0 <__multadd>:
   bd7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd7d4:	690d      	ldr	r5, [r1, #16]
   bd7d6:	4607      	mov	r7, r0
   bd7d8:	460c      	mov	r4, r1
   bd7da:	461e      	mov	r6, r3
   bd7dc:	f101 0c14 	add.w	ip, r1, #20
   bd7e0:	2000      	movs	r0, #0
   bd7e2:	f8dc 3000 	ldr.w	r3, [ip]
   bd7e6:	b299      	uxth	r1, r3
   bd7e8:	fb02 6101 	mla	r1, r2, r1, r6
   bd7ec:	0c1e      	lsrs	r6, r3, #16
   bd7ee:	0c0b      	lsrs	r3, r1, #16
   bd7f0:	fb02 3306 	mla	r3, r2, r6, r3
   bd7f4:	b289      	uxth	r1, r1
   bd7f6:	3001      	adds	r0, #1
   bd7f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd7fc:	4285      	cmp	r5, r0
   bd7fe:	f84c 1b04 	str.w	r1, [ip], #4
   bd802:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd806:	dcec      	bgt.n	bd7e2 <__multadd+0x12>
   bd808:	b30e      	cbz	r6, bd84e <__multadd+0x7e>
   bd80a:	68a3      	ldr	r3, [r4, #8]
   bd80c:	42ab      	cmp	r3, r5
   bd80e:	dc19      	bgt.n	bd844 <__multadd+0x74>
   bd810:	6861      	ldr	r1, [r4, #4]
   bd812:	4638      	mov	r0, r7
   bd814:	3101      	adds	r1, #1
   bd816:	f7ff ff79 	bl	bd70c <_Balloc>
   bd81a:	4680      	mov	r8, r0
   bd81c:	b928      	cbnz	r0, bd82a <__multadd+0x5a>
   bd81e:	4602      	mov	r2, r0
   bd820:	4b0c      	ldr	r3, [pc, #48]	; (bd854 <__multadd+0x84>)
   bd822:	480d      	ldr	r0, [pc, #52]	; (bd858 <__multadd+0x88>)
   bd824:	21b5      	movs	r1, #181	; 0xb5
   bd826:	f7fa faa7 	bl	b7d78 <__assert_func>
   bd82a:	6922      	ldr	r2, [r4, #16]
   bd82c:	3202      	adds	r2, #2
   bd82e:	f104 010c 	add.w	r1, r4, #12
   bd832:	0092      	lsls	r2, r2, #2
   bd834:	300c      	adds	r0, #12
   bd836:	f7fe fc03 	bl	bc040 <memcpy>
   bd83a:	4621      	mov	r1, r4
   bd83c:	4638      	mov	r0, r7
   bd83e:	f7ff ffa5 	bl	bd78c <_Bfree>
   bd842:	4644      	mov	r4, r8
   bd844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd848:	3501      	adds	r5, #1
   bd84a:	615e      	str	r6, [r3, #20]
   bd84c:	6125      	str	r5, [r4, #16]
   bd84e:	4620      	mov	r0, r4
   bd850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd854:	000bf8d1 	.word	0x000bf8d1
   bd858:	000bf97c 	.word	0x000bf97c

000bd85c <__s2b>:
   bd85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd860:	460c      	mov	r4, r1
   bd862:	4615      	mov	r5, r2
   bd864:	461f      	mov	r7, r3
   bd866:	2209      	movs	r2, #9
   bd868:	3308      	adds	r3, #8
   bd86a:	4606      	mov	r6, r0
   bd86c:	fb93 f3f2 	sdiv	r3, r3, r2
   bd870:	2100      	movs	r1, #0
   bd872:	2201      	movs	r2, #1
   bd874:	429a      	cmp	r2, r3
   bd876:	db09      	blt.n	bd88c <__s2b+0x30>
   bd878:	4630      	mov	r0, r6
   bd87a:	f7ff ff47 	bl	bd70c <_Balloc>
   bd87e:	b940      	cbnz	r0, bd892 <__s2b+0x36>
   bd880:	4602      	mov	r2, r0
   bd882:	4b19      	ldr	r3, [pc, #100]	; (bd8e8 <__s2b+0x8c>)
   bd884:	4819      	ldr	r0, [pc, #100]	; (bd8ec <__s2b+0x90>)
   bd886:	21ce      	movs	r1, #206	; 0xce
   bd888:	f7fa fa76 	bl	b7d78 <__assert_func>
   bd88c:	0052      	lsls	r2, r2, #1
   bd88e:	3101      	adds	r1, #1
   bd890:	e7f0      	b.n	bd874 <__s2b+0x18>
   bd892:	9b08      	ldr	r3, [sp, #32]
   bd894:	6143      	str	r3, [r0, #20]
   bd896:	2d09      	cmp	r5, #9
   bd898:	f04f 0301 	mov.w	r3, #1
   bd89c:	6103      	str	r3, [r0, #16]
   bd89e:	dd16      	ble.n	bd8ce <__s2b+0x72>
   bd8a0:	f104 0909 	add.w	r9, r4, #9
   bd8a4:	46c8      	mov	r8, r9
   bd8a6:	442c      	add	r4, r5
   bd8a8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd8ac:	4601      	mov	r1, r0
   bd8ae:	3b30      	subs	r3, #48	; 0x30
   bd8b0:	220a      	movs	r2, #10
   bd8b2:	4630      	mov	r0, r6
   bd8b4:	f7ff ff8c 	bl	bd7d0 <__multadd>
   bd8b8:	45a0      	cmp	r8, r4
   bd8ba:	d1f5      	bne.n	bd8a8 <__s2b+0x4c>
   bd8bc:	f1a5 0408 	sub.w	r4, r5, #8
   bd8c0:	444c      	add	r4, r9
   bd8c2:	1b2d      	subs	r5, r5, r4
   bd8c4:	1963      	adds	r3, r4, r5
   bd8c6:	42bb      	cmp	r3, r7
   bd8c8:	db04      	blt.n	bd8d4 <__s2b+0x78>
   bd8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd8ce:	340a      	adds	r4, #10
   bd8d0:	2509      	movs	r5, #9
   bd8d2:	e7f6      	b.n	bd8c2 <__s2b+0x66>
   bd8d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd8d8:	4601      	mov	r1, r0
   bd8da:	3b30      	subs	r3, #48	; 0x30
   bd8dc:	220a      	movs	r2, #10
   bd8de:	4630      	mov	r0, r6
   bd8e0:	f7ff ff76 	bl	bd7d0 <__multadd>
   bd8e4:	e7ee      	b.n	bd8c4 <__s2b+0x68>
   bd8e6:	bf00      	nop
   bd8e8:	000bf8d1 	.word	0x000bf8d1
   bd8ec:	000bf97c 	.word	0x000bf97c

000bd8f0 <__hi0bits>:
   bd8f0:	0c03      	lsrs	r3, r0, #16
   bd8f2:	041b      	lsls	r3, r3, #16
   bd8f4:	b9d3      	cbnz	r3, bd92c <__hi0bits+0x3c>
   bd8f6:	0400      	lsls	r0, r0, #16
   bd8f8:	2310      	movs	r3, #16
   bd8fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd8fe:	bf04      	itt	eq
   bd900:	0200      	lsleq	r0, r0, #8
   bd902:	3308      	addeq	r3, #8
   bd904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd908:	bf04      	itt	eq
   bd90a:	0100      	lsleq	r0, r0, #4
   bd90c:	3304      	addeq	r3, #4
   bd90e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd912:	bf04      	itt	eq
   bd914:	0080      	lsleq	r0, r0, #2
   bd916:	3302      	addeq	r3, #2
   bd918:	2800      	cmp	r0, #0
   bd91a:	db05      	blt.n	bd928 <__hi0bits+0x38>
   bd91c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd920:	f103 0301 	add.w	r3, r3, #1
   bd924:	bf08      	it	eq
   bd926:	2320      	moveq	r3, #32
   bd928:	4618      	mov	r0, r3
   bd92a:	4770      	bx	lr
   bd92c:	2300      	movs	r3, #0
   bd92e:	e7e4      	b.n	bd8fa <__hi0bits+0xa>

000bd930 <__lo0bits>:
   bd930:	6803      	ldr	r3, [r0, #0]
   bd932:	f013 0207 	ands.w	r2, r3, #7
   bd936:	4601      	mov	r1, r0
   bd938:	d00b      	beq.n	bd952 <__lo0bits+0x22>
   bd93a:	07da      	lsls	r2, r3, #31
   bd93c:	d423      	bmi.n	bd986 <__lo0bits+0x56>
   bd93e:	0798      	lsls	r0, r3, #30
   bd940:	bf49      	itett	mi
   bd942:	085b      	lsrmi	r3, r3, #1
   bd944:	089b      	lsrpl	r3, r3, #2
   bd946:	2001      	movmi	r0, #1
   bd948:	600b      	strmi	r3, [r1, #0]
   bd94a:	bf5c      	itt	pl
   bd94c:	600b      	strpl	r3, [r1, #0]
   bd94e:	2002      	movpl	r0, #2
   bd950:	4770      	bx	lr
   bd952:	b298      	uxth	r0, r3
   bd954:	b9a8      	cbnz	r0, bd982 <__lo0bits+0x52>
   bd956:	0c1b      	lsrs	r3, r3, #16
   bd958:	2010      	movs	r0, #16
   bd95a:	b2da      	uxtb	r2, r3
   bd95c:	b90a      	cbnz	r2, bd962 <__lo0bits+0x32>
   bd95e:	3008      	adds	r0, #8
   bd960:	0a1b      	lsrs	r3, r3, #8
   bd962:	071a      	lsls	r2, r3, #28
   bd964:	bf04      	itt	eq
   bd966:	091b      	lsreq	r3, r3, #4
   bd968:	3004      	addeq	r0, #4
   bd96a:	079a      	lsls	r2, r3, #30
   bd96c:	bf04      	itt	eq
   bd96e:	089b      	lsreq	r3, r3, #2
   bd970:	3002      	addeq	r0, #2
   bd972:	07da      	lsls	r2, r3, #31
   bd974:	d403      	bmi.n	bd97e <__lo0bits+0x4e>
   bd976:	085b      	lsrs	r3, r3, #1
   bd978:	f100 0001 	add.w	r0, r0, #1
   bd97c:	d005      	beq.n	bd98a <__lo0bits+0x5a>
   bd97e:	600b      	str	r3, [r1, #0]
   bd980:	4770      	bx	lr
   bd982:	4610      	mov	r0, r2
   bd984:	e7e9      	b.n	bd95a <__lo0bits+0x2a>
   bd986:	2000      	movs	r0, #0
   bd988:	4770      	bx	lr
   bd98a:	2020      	movs	r0, #32
   bd98c:	4770      	bx	lr
	...

000bd990 <__i2b>:
   bd990:	b510      	push	{r4, lr}
   bd992:	460c      	mov	r4, r1
   bd994:	2101      	movs	r1, #1
   bd996:	f7ff feb9 	bl	bd70c <_Balloc>
   bd99a:	4602      	mov	r2, r0
   bd99c:	b928      	cbnz	r0, bd9aa <__i2b+0x1a>
   bd99e:	4b05      	ldr	r3, [pc, #20]	; (bd9b4 <__i2b+0x24>)
   bd9a0:	4805      	ldr	r0, [pc, #20]	; (bd9b8 <__i2b+0x28>)
   bd9a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd9a6:	f7fa f9e7 	bl	b7d78 <__assert_func>
   bd9aa:	2301      	movs	r3, #1
   bd9ac:	6144      	str	r4, [r0, #20]
   bd9ae:	6103      	str	r3, [r0, #16]
   bd9b0:	bd10      	pop	{r4, pc}
   bd9b2:	bf00      	nop
   bd9b4:	000bf8d1 	.word	0x000bf8d1
   bd9b8:	000bf97c 	.word	0x000bf97c

000bd9bc <__multiply>:
   bd9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd9c0:	4691      	mov	r9, r2
   bd9c2:	690a      	ldr	r2, [r1, #16]
   bd9c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd9c8:	429a      	cmp	r2, r3
   bd9ca:	bfb8      	it	lt
   bd9cc:	460b      	movlt	r3, r1
   bd9ce:	460c      	mov	r4, r1
   bd9d0:	bfbc      	itt	lt
   bd9d2:	464c      	movlt	r4, r9
   bd9d4:	4699      	movlt	r9, r3
   bd9d6:	6927      	ldr	r7, [r4, #16]
   bd9d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd9dc:	68a3      	ldr	r3, [r4, #8]
   bd9de:	6861      	ldr	r1, [r4, #4]
   bd9e0:	eb07 060a 	add.w	r6, r7, sl
   bd9e4:	42b3      	cmp	r3, r6
   bd9e6:	b085      	sub	sp, #20
   bd9e8:	bfb8      	it	lt
   bd9ea:	3101      	addlt	r1, #1
   bd9ec:	f7ff fe8e 	bl	bd70c <_Balloc>
   bd9f0:	b930      	cbnz	r0, bda00 <__multiply+0x44>
   bd9f2:	4602      	mov	r2, r0
   bd9f4:	4b44      	ldr	r3, [pc, #272]	; (bdb08 <__multiply+0x14c>)
   bd9f6:	4845      	ldr	r0, [pc, #276]	; (bdb0c <__multiply+0x150>)
   bd9f8:	f240 115d 	movw	r1, #349	; 0x15d
   bd9fc:	f7fa f9bc 	bl	b7d78 <__assert_func>
   bda00:	f100 0514 	add.w	r5, r0, #20
   bda04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bda08:	462b      	mov	r3, r5
   bda0a:	2200      	movs	r2, #0
   bda0c:	4543      	cmp	r3, r8
   bda0e:	d321      	bcc.n	bda54 <__multiply+0x98>
   bda10:	f104 0314 	add.w	r3, r4, #20
   bda14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bda18:	f109 0314 	add.w	r3, r9, #20
   bda1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bda20:	9202      	str	r2, [sp, #8]
   bda22:	1b3a      	subs	r2, r7, r4
   bda24:	3a15      	subs	r2, #21
   bda26:	f022 0203 	bic.w	r2, r2, #3
   bda2a:	3204      	adds	r2, #4
   bda2c:	f104 0115 	add.w	r1, r4, #21
   bda30:	428f      	cmp	r7, r1
   bda32:	bf38      	it	cc
   bda34:	2204      	movcc	r2, #4
   bda36:	9201      	str	r2, [sp, #4]
   bda38:	9a02      	ldr	r2, [sp, #8]
   bda3a:	9303      	str	r3, [sp, #12]
   bda3c:	429a      	cmp	r2, r3
   bda3e:	d80c      	bhi.n	bda5a <__multiply+0x9e>
   bda40:	2e00      	cmp	r6, #0
   bda42:	dd03      	ble.n	bda4c <__multiply+0x90>
   bda44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bda48:	2b00      	cmp	r3, #0
   bda4a:	d05a      	beq.n	bdb02 <__multiply+0x146>
   bda4c:	6106      	str	r6, [r0, #16]
   bda4e:	b005      	add	sp, #20
   bda50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bda54:	f843 2b04 	str.w	r2, [r3], #4
   bda58:	e7d8      	b.n	bda0c <__multiply+0x50>
   bda5a:	f8b3 a000 	ldrh.w	sl, [r3]
   bda5e:	f1ba 0f00 	cmp.w	sl, #0
   bda62:	d024      	beq.n	bdaae <__multiply+0xf2>
   bda64:	f104 0e14 	add.w	lr, r4, #20
   bda68:	46a9      	mov	r9, r5
   bda6a:	f04f 0c00 	mov.w	ip, #0
   bda6e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bda72:	f8d9 1000 	ldr.w	r1, [r9]
   bda76:	fa1f fb82 	uxth.w	fp, r2
   bda7a:	b289      	uxth	r1, r1
   bda7c:	fb0a 110b 	mla	r1, sl, fp, r1
   bda80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bda84:	f8d9 2000 	ldr.w	r2, [r9]
   bda88:	4461      	add	r1, ip
   bda8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bda8e:	fb0a c20b 	mla	r2, sl, fp, ip
   bda92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bda96:	b289      	uxth	r1, r1
   bda98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bda9c:	4577      	cmp	r7, lr
   bda9e:	f849 1b04 	str.w	r1, [r9], #4
   bdaa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdaa6:	d8e2      	bhi.n	bda6e <__multiply+0xb2>
   bdaa8:	9a01      	ldr	r2, [sp, #4]
   bdaaa:	f845 c002 	str.w	ip, [r5, r2]
   bdaae:	9a03      	ldr	r2, [sp, #12]
   bdab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bdab4:	3304      	adds	r3, #4
   bdab6:	f1b9 0f00 	cmp.w	r9, #0
   bdaba:	d020      	beq.n	bdafe <__multiply+0x142>
   bdabc:	6829      	ldr	r1, [r5, #0]
   bdabe:	f104 0c14 	add.w	ip, r4, #20
   bdac2:	46ae      	mov	lr, r5
   bdac4:	f04f 0a00 	mov.w	sl, #0
   bdac8:	f8bc b000 	ldrh.w	fp, [ip]
   bdacc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bdad0:	fb09 220b 	mla	r2, r9, fp, r2
   bdad4:	4492      	add	sl, r2
   bdad6:	b289      	uxth	r1, r1
   bdad8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bdadc:	f84e 1b04 	str.w	r1, [lr], #4
   bdae0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bdae4:	f8be 1000 	ldrh.w	r1, [lr]
   bdae8:	0c12      	lsrs	r2, r2, #16
   bdaea:	fb09 1102 	mla	r1, r9, r2, r1
   bdaee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bdaf2:	4567      	cmp	r7, ip
   bdaf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bdaf8:	d8e6      	bhi.n	bdac8 <__multiply+0x10c>
   bdafa:	9a01      	ldr	r2, [sp, #4]
   bdafc:	50a9      	str	r1, [r5, r2]
   bdafe:	3504      	adds	r5, #4
   bdb00:	e79a      	b.n	bda38 <__multiply+0x7c>
   bdb02:	3e01      	subs	r6, #1
   bdb04:	e79c      	b.n	bda40 <__multiply+0x84>
   bdb06:	bf00      	nop
   bdb08:	000bf8d1 	.word	0x000bf8d1
   bdb0c:	000bf97c 	.word	0x000bf97c

000bdb10 <__pow5mult>:
   bdb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdb14:	4615      	mov	r5, r2
   bdb16:	f012 0203 	ands.w	r2, r2, #3
   bdb1a:	4606      	mov	r6, r0
   bdb1c:	460f      	mov	r7, r1
   bdb1e:	d007      	beq.n	bdb30 <__pow5mult+0x20>
   bdb20:	4c25      	ldr	r4, [pc, #148]	; (bdbb8 <__pow5mult+0xa8>)
   bdb22:	3a01      	subs	r2, #1
   bdb24:	2300      	movs	r3, #0
   bdb26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bdb2a:	f7ff fe51 	bl	bd7d0 <__multadd>
   bdb2e:	4607      	mov	r7, r0
   bdb30:	10ad      	asrs	r5, r5, #2
   bdb32:	d03d      	beq.n	bdbb0 <__pow5mult+0xa0>
   bdb34:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bdb36:	b97c      	cbnz	r4, bdb58 <__pow5mult+0x48>
   bdb38:	2010      	movs	r0, #16
   bdb3a:	f7fa f8dd 	bl	b7cf8 <malloc>
   bdb3e:	4602      	mov	r2, r0
   bdb40:	6270      	str	r0, [r6, #36]	; 0x24
   bdb42:	b928      	cbnz	r0, bdb50 <__pow5mult+0x40>
   bdb44:	4b1d      	ldr	r3, [pc, #116]	; (bdbbc <__pow5mult+0xac>)
   bdb46:	481e      	ldr	r0, [pc, #120]	; (bdbc0 <__pow5mult+0xb0>)
   bdb48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bdb4c:	f7fa f914 	bl	b7d78 <__assert_func>
   bdb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdb54:	6004      	str	r4, [r0, #0]
   bdb56:	60c4      	str	r4, [r0, #12]
   bdb58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bdb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bdb60:	b94c      	cbnz	r4, bdb76 <__pow5mult+0x66>
   bdb62:	f240 2171 	movw	r1, #625	; 0x271
   bdb66:	4630      	mov	r0, r6
   bdb68:	f7ff ff12 	bl	bd990 <__i2b>
   bdb6c:	2300      	movs	r3, #0
   bdb6e:	f8c8 0008 	str.w	r0, [r8, #8]
   bdb72:	4604      	mov	r4, r0
   bdb74:	6003      	str	r3, [r0, #0]
   bdb76:	f04f 0900 	mov.w	r9, #0
   bdb7a:	07eb      	lsls	r3, r5, #31
   bdb7c:	d50a      	bpl.n	bdb94 <__pow5mult+0x84>
   bdb7e:	4639      	mov	r1, r7
   bdb80:	4622      	mov	r2, r4
   bdb82:	4630      	mov	r0, r6
   bdb84:	f7ff ff1a 	bl	bd9bc <__multiply>
   bdb88:	4639      	mov	r1, r7
   bdb8a:	4680      	mov	r8, r0
   bdb8c:	4630      	mov	r0, r6
   bdb8e:	f7ff fdfd 	bl	bd78c <_Bfree>
   bdb92:	4647      	mov	r7, r8
   bdb94:	106d      	asrs	r5, r5, #1
   bdb96:	d00b      	beq.n	bdbb0 <__pow5mult+0xa0>
   bdb98:	6820      	ldr	r0, [r4, #0]
   bdb9a:	b938      	cbnz	r0, bdbac <__pow5mult+0x9c>
   bdb9c:	4622      	mov	r2, r4
   bdb9e:	4621      	mov	r1, r4
   bdba0:	4630      	mov	r0, r6
   bdba2:	f7ff ff0b 	bl	bd9bc <__multiply>
   bdba6:	6020      	str	r0, [r4, #0]
   bdba8:	f8c0 9000 	str.w	r9, [r0]
   bdbac:	4604      	mov	r4, r0
   bdbae:	e7e4      	b.n	bdb7a <__pow5mult+0x6a>
   bdbb0:	4638      	mov	r0, r7
   bdbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdbb6:	bf00      	nop
   bdbb8:	000bfaf0 	.word	0x000bfaf0
   bdbbc:	000bf6d9 	.word	0x000bf6d9
   bdbc0:	000bf97c 	.word	0x000bf97c

000bdbc4 <__lshift>:
   bdbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdbc8:	460c      	mov	r4, r1
   bdbca:	6849      	ldr	r1, [r1, #4]
   bdbcc:	6923      	ldr	r3, [r4, #16]
   bdbce:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bdbd2:	68a3      	ldr	r3, [r4, #8]
   bdbd4:	4607      	mov	r7, r0
   bdbd6:	4691      	mov	r9, r2
   bdbd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bdbdc:	f108 0601 	add.w	r6, r8, #1
   bdbe0:	42b3      	cmp	r3, r6
   bdbe2:	db0b      	blt.n	bdbfc <__lshift+0x38>
   bdbe4:	4638      	mov	r0, r7
   bdbe6:	f7ff fd91 	bl	bd70c <_Balloc>
   bdbea:	4605      	mov	r5, r0
   bdbec:	b948      	cbnz	r0, bdc02 <__lshift+0x3e>
   bdbee:	4602      	mov	r2, r0
   bdbf0:	4b2a      	ldr	r3, [pc, #168]	; (bdc9c <__lshift+0xd8>)
   bdbf2:	482b      	ldr	r0, [pc, #172]	; (bdca0 <__lshift+0xdc>)
   bdbf4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bdbf8:	f7fa f8be 	bl	b7d78 <__assert_func>
   bdbfc:	3101      	adds	r1, #1
   bdbfe:	005b      	lsls	r3, r3, #1
   bdc00:	e7ee      	b.n	bdbe0 <__lshift+0x1c>
   bdc02:	2300      	movs	r3, #0
   bdc04:	f100 0114 	add.w	r1, r0, #20
   bdc08:	f100 0210 	add.w	r2, r0, #16
   bdc0c:	4618      	mov	r0, r3
   bdc0e:	4553      	cmp	r3, sl
   bdc10:	db37      	blt.n	bdc82 <__lshift+0xbe>
   bdc12:	6920      	ldr	r0, [r4, #16]
   bdc14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bdc18:	f104 0314 	add.w	r3, r4, #20
   bdc1c:	f019 091f 	ands.w	r9, r9, #31
   bdc20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bdc24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bdc28:	d02f      	beq.n	bdc8a <__lshift+0xc6>
   bdc2a:	f1c9 0e20 	rsb	lr, r9, #32
   bdc2e:	468a      	mov	sl, r1
   bdc30:	f04f 0c00 	mov.w	ip, #0
   bdc34:	681a      	ldr	r2, [r3, #0]
   bdc36:	fa02 f209 	lsl.w	r2, r2, r9
   bdc3a:	ea42 020c 	orr.w	r2, r2, ip
   bdc3e:	f84a 2b04 	str.w	r2, [sl], #4
   bdc42:	f853 2b04 	ldr.w	r2, [r3], #4
   bdc46:	4298      	cmp	r0, r3
   bdc48:	fa22 fc0e 	lsr.w	ip, r2, lr
   bdc4c:	d8f2      	bhi.n	bdc34 <__lshift+0x70>
   bdc4e:	1b03      	subs	r3, r0, r4
   bdc50:	3b15      	subs	r3, #21
   bdc52:	f023 0303 	bic.w	r3, r3, #3
   bdc56:	3304      	adds	r3, #4
   bdc58:	f104 0215 	add.w	r2, r4, #21
   bdc5c:	4290      	cmp	r0, r2
   bdc5e:	bf38      	it	cc
   bdc60:	2304      	movcc	r3, #4
   bdc62:	f841 c003 	str.w	ip, [r1, r3]
   bdc66:	f1bc 0f00 	cmp.w	ip, #0
   bdc6a:	d001      	beq.n	bdc70 <__lshift+0xac>
   bdc6c:	f108 0602 	add.w	r6, r8, #2
   bdc70:	3e01      	subs	r6, #1
   bdc72:	4638      	mov	r0, r7
   bdc74:	612e      	str	r6, [r5, #16]
   bdc76:	4621      	mov	r1, r4
   bdc78:	f7ff fd88 	bl	bd78c <_Bfree>
   bdc7c:	4628      	mov	r0, r5
   bdc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdc82:	f842 0f04 	str.w	r0, [r2, #4]!
   bdc86:	3301      	adds	r3, #1
   bdc88:	e7c1      	b.n	bdc0e <__lshift+0x4a>
   bdc8a:	3904      	subs	r1, #4
   bdc8c:	f853 2b04 	ldr.w	r2, [r3], #4
   bdc90:	f841 2f04 	str.w	r2, [r1, #4]!
   bdc94:	4298      	cmp	r0, r3
   bdc96:	d8f9      	bhi.n	bdc8c <__lshift+0xc8>
   bdc98:	e7ea      	b.n	bdc70 <__lshift+0xac>
   bdc9a:	bf00      	nop
   bdc9c:	000bf8d1 	.word	0x000bf8d1
   bdca0:	000bf97c 	.word	0x000bf97c

000bdca4 <__mcmp>:
   bdca4:	b530      	push	{r4, r5, lr}
   bdca6:	6902      	ldr	r2, [r0, #16]
   bdca8:	690c      	ldr	r4, [r1, #16]
   bdcaa:	1b12      	subs	r2, r2, r4
   bdcac:	d10e      	bne.n	bdccc <__mcmp+0x28>
   bdcae:	f100 0314 	add.w	r3, r0, #20
   bdcb2:	3114      	adds	r1, #20
   bdcb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bdcb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bdcbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bdcc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bdcc4:	42a5      	cmp	r5, r4
   bdcc6:	d003      	beq.n	bdcd0 <__mcmp+0x2c>
   bdcc8:	d305      	bcc.n	bdcd6 <__mcmp+0x32>
   bdcca:	2201      	movs	r2, #1
   bdccc:	4610      	mov	r0, r2
   bdcce:	bd30      	pop	{r4, r5, pc}
   bdcd0:	4283      	cmp	r3, r0
   bdcd2:	d3f3      	bcc.n	bdcbc <__mcmp+0x18>
   bdcd4:	e7fa      	b.n	bdccc <__mcmp+0x28>
   bdcd6:	f04f 32ff 	mov.w	r2, #4294967295
   bdcda:	e7f7      	b.n	bdccc <__mcmp+0x28>

000bdcdc <__mdiff>:
   bdcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdce0:	460c      	mov	r4, r1
   bdce2:	4606      	mov	r6, r0
   bdce4:	4611      	mov	r1, r2
   bdce6:	4620      	mov	r0, r4
   bdce8:	4690      	mov	r8, r2
   bdcea:	f7ff ffdb 	bl	bdca4 <__mcmp>
   bdcee:	1e05      	subs	r5, r0, #0
   bdcf0:	d110      	bne.n	bdd14 <__mdiff+0x38>
   bdcf2:	4629      	mov	r1, r5
   bdcf4:	4630      	mov	r0, r6
   bdcf6:	f7ff fd09 	bl	bd70c <_Balloc>
   bdcfa:	b930      	cbnz	r0, bdd0a <__mdiff+0x2e>
   bdcfc:	4b3a      	ldr	r3, [pc, #232]	; (bdde8 <__mdiff+0x10c>)
   bdcfe:	4602      	mov	r2, r0
   bdd00:	f240 2132 	movw	r1, #562	; 0x232
   bdd04:	4839      	ldr	r0, [pc, #228]	; (bddec <__mdiff+0x110>)
   bdd06:	f7fa f837 	bl	b7d78 <__assert_func>
   bdd0a:	2301      	movs	r3, #1
   bdd0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bdd10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdd14:	bfa4      	itt	ge
   bdd16:	4643      	movge	r3, r8
   bdd18:	46a0      	movge	r8, r4
   bdd1a:	4630      	mov	r0, r6
   bdd1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bdd20:	bfa6      	itte	ge
   bdd22:	461c      	movge	r4, r3
   bdd24:	2500      	movge	r5, #0
   bdd26:	2501      	movlt	r5, #1
   bdd28:	f7ff fcf0 	bl	bd70c <_Balloc>
   bdd2c:	b920      	cbnz	r0, bdd38 <__mdiff+0x5c>
   bdd2e:	4b2e      	ldr	r3, [pc, #184]	; (bdde8 <__mdiff+0x10c>)
   bdd30:	4602      	mov	r2, r0
   bdd32:	f44f 7110 	mov.w	r1, #576	; 0x240
   bdd36:	e7e5      	b.n	bdd04 <__mdiff+0x28>
   bdd38:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bdd3c:	6926      	ldr	r6, [r4, #16]
   bdd3e:	60c5      	str	r5, [r0, #12]
   bdd40:	f104 0914 	add.w	r9, r4, #20
   bdd44:	f108 0514 	add.w	r5, r8, #20
   bdd48:	f100 0e14 	add.w	lr, r0, #20
   bdd4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bdd50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bdd54:	f108 0210 	add.w	r2, r8, #16
   bdd58:	46f2      	mov	sl, lr
   bdd5a:	2100      	movs	r1, #0
   bdd5c:	f859 3b04 	ldr.w	r3, [r9], #4
   bdd60:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdd64:	fa1f f883 	uxth.w	r8, r3
   bdd68:	fa11 f18b 	uxtah	r1, r1, fp
   bdd6c:	0c1b      	lsrs	r3, r3, #16
   bdd6e:	eba1 0808 	sub.w	r8, r1, r8
   bdd72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdd76:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdd7a:	fa1f f888 	uxth.w	r8, r8
   bdd7e:	1419      	asrs	r1, r3, #16
   bdd80:	454e      	cmp	r6, r9
   bdd82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdd86:	f84a 3b04 	str.w	r3, [sl], #4
   bdd8a:	d8e7      	bhi.n	bdd5c <__mdiff+0x80>
   bdd8c:	1b33      	subs	r3, r6, r4
   bdd8e:	3b15      	subs	r3, #21
   bdd90:	f023 0303 	bic.w	r3, r3, #3
   bdd94:	3304      	adds	r3, #4
   bdd96:	3415      	adds	r4, #21
   bdd98:	42a6      	cmp	r6, r4
   bdd9a:	bf38      	it	cc
   bdd9c:	2304      	movcc	r3, #4
   bdd9e:	441d      	add	r5, r3
   bdda0:	4473      	add	r3, lr
   bdda2:	469e      	mov	lr, r3
   bdda4:	462e      	mov	r6, r5
   bdda6:	4566      	cmp	r6, ip
   bdda8:	d30e      	bcc.n	bddc8 <__mdiff+0xec>
   bddaa:	f10c 0203 	add.w	r2, ip, #3
   bddae:	1b52      	subs	r2, r2, r5
   bddb0:	f022 0203 	bic.w	r2, r2, #3
   bddb4:	3d03      	subs	r5, #3
   bddb6:	45ac      	cmp	ip, r5
   bddb8:	bf38      	it	cc
   bddba:	2200      	movcc	r2, #0
   bddbc:	441a      	add	r2, r3
   bddbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bddc2:	b17b      	cbz	r3, bdde4 <__mdiff+0x108>
   bddc4:	6107      	str	r7, [r0, #16]
   bddc6:	e7a3      	b.n	bdd10 <__mdiff+0x34>
   bddc8:	f856 8b04 	ldr.w	r8, [r6], #4
   bddcc:	fa11 f288 	uxtah	r2, r1, r8
   bddd0:	1414      	asrs	r4, r2, #16
   bddd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bddd6:	b292      	uxth	r2, r2
   bddd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bdddc:	f84e 2b04 	str.w	r2, [lr], #4
   bdde0:	1421      	asrs	r1, r4, #16
   bdde2:	e7e0      	b.n	bdda6 <__mdiff+0xca>
   bdde4:	3f01      	subs	r7, #1
   bdde6:	e7ea      	b.n	bddbe <__mdiff+0xe2>
   bdde8:	000bf8d1 	.word	0x000bf8d1
   bddec:	000bf97c 	.word	0x000bf97c

000bddf0 <__ulp>:
   bddf0:	b082      	sub	sp, #8
   bddf2:	ed8d 0b00 	vstr	d0, [sp]
   bddf6:	9b01      	ldr	r3, [sp, #4]
   bddf8:	4912      	ldr	r1, [pc, #72]	; (bde44 <__ulp+0x54>)
   bddfa:	4019      	ands	r1, r3
   bddfc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bde00:	2900      	cmp	r1, #0
   bde02:	dd05      	ble.n	bde10 <__ulp+0x20>
   bde04:	2200      	movs	r2, #0
   bde06:	460b      	mov	r3, r1
   bde08:	ec43 2b10 	vmov	d0, r2, r3
   bde0c:	b002      	add	sp, #8
   bde0e:	4770      	bx	lr
   bde10:	4249      	negs	r1, r1
   bde12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bde16:	ea4f 5021 	mov.w	r0, r1, asr #20
   bde1a:	f04f 0200 	mov.w	r2, #0
   bde1e:	f04f 0300 	mov.w	r3, #0
   bde22:	da04      	bge.n	bde2e <__ulp+0x3e>
   bde24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bde28:	fa41 f300 	asr.w	r3, r1, r0
   bde2c:	e7ec      	b.n	bde08 <__ulp+0x18>
   bde2e:	f1a0 0114 	sub.w	r1, r0, #20
   bde32:	291e      	cmp	r1, #30
   bde34:	bfda      	itte	le
   bde36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bde3a:	fa20 f101 	lsrle.w	r1, r0, r1
   bde3e:	2101      	movgt	r1, #1
   bde40:	460a      	mov	r2, r1
   bde42:	e7e1      	b.n	bde08 <__ulp+0x18>
   bde44:	7ff00000 	.word	0x7ff00000

000bde48 <__b2d>:
   bde48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bde4a:	6905      	ldr	r5, [r0, #16]
   bde4c:	f100 0714 	add.w	r7, r0, #20
   bde50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bde54:	1f2e      	subs	r6, r5, #4
   bde56:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bde5a:	4620      	mov	r0, r4
   bde5c:	f7ff fd48 	bl	bd8f0 <__hi0bits>
   bde60:	f1c0 0320 	rsb	r3, r0, #32
   bde64:	280a      	cmp	r0, #10
   bde66:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdee4 <__b2d+0x9c>
   bde6a:	600b      	str	r3, [r1, #0]
   bde6c:	dc14      	bgt.n	bde98 <__b2d+0x50>
   bde6e:	f1c0 0e0b 	rsb	lr, r0, #11
   bde72:	fa24 f10e 	lsr.w	r1, r4, lr
   bde76:	42b7      	cmp	r7, r6
   bde78:	ea41 030c 	orr.w	r3, r1, ip
   bde7c:	bf34      	ite	cc
   bde7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bde82:	2100      	movcs	r1, #0
   bde84:	3015      	adds	r0, #21
   bde86:	fa04 f000 	lsl.w	r0, r4, r0
   bde8a:	fa21 f10e 	lsr.w	r1, r1, lr
   bde8e:	ea40 0201 	orr.w	r2, r0, r1
   bde92:	ec43 2b10 	vmov	d0, r2, r3
   bde96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bde98:	42b7      	cmp	r7, r6
   bde9a:	bf3a      	itte	cc
   bde9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdea0:	f1a5 0608 	subcc.w	r6, r5, #8
   bdea4:	2100      	movcs	r1, #0
   bdea6:	380b      	subs	r0, #11
   bdea8:	d017      	beq.n	bdeda <__b2d+0x92>
   bdeaa:	f1c0 0c20 	rsb	ip, r0, #32
   bdeae:	fa04 f500 	lsl.w	r5, r4, r0
   bdeb2:	42be      	cmp	r6, r7
   bdeb4:	fa21 f40c 	lsr.w	r4, r1, ip
   bdeb8:	ea45 0504 	orr.w	r5, r5, r4
   bdebc:	bf8c      	ite	hi
   bdebe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdec2:	2400      	movls	r4, #0
   bdec4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdec8:	fa01 f000 	lsl.w	r0, r1, r0
   bdecc:	fa24 f40c 	lsr.w	r4, r4, ip
   bded0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bded4:	ea40 0204 	orr.w	r2, r0, r4
   bded8:	e7db      	b.n	bde92 <__b2d+0x4a>
   bdeda:	ea44 030c 	orr.w	r3, r4, ip
   bdede:	460a      	mov	r2, r1
   bdee0:	e7d7      	b.n	bde92 <__b2d+0x4a>
   bdee2:	bf00      	nop
   bdee4:	3ff00000 	.word	0x3ff00000

000bdee8 <__d2b>:
   bdee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdeec:	4689      	mov	r9, r1
   bdeee:	2101      	movs	r1, #1
   bdef0:	ec57 6b10 	vmov	r6, r7, d0
   bdef4:	4690      	mov	r8, r2
   bdef6:	f7ff fc09 	bl	bd70c <_Balloc>
   bdefa:	4604      	mov	r4, r0
   bdefc:	b930      	cbnz	r0, bdf0c <__d2b+0x24>
   bdefe:	4602      	mov	r2, r0
   bdf00:	4b25      	ldr	r3, [pc, #148]	; (bdf98 <__d2b+0xb0>)
   bdf02:	4826      	ldr	r0, [pc, #152]	; (bdf9c <__d2b+0xb4>)
   bdf04:	f240 310a 	movw	r1, #778	; 0x30a
   bdf08:	f7f9 ff36 	bl	b7d78 <__assert_func>
   bdf0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdf10:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdf14:	bb35      	cbnz	r5, bdf64 <__d2b+0x7c>
   bdf16:	2e00      	cmp	r6, #0
   bdf18:	9301      	str	r3, [sp, #4]
   bdf1a:	d028      	beq.n	bdf6e <__d2b+0x86>
   bdf1c:	4668      	mov	r0, sp
   bdf1e:	9600      	str	r6, [sp, #0]
   bdf20:	f7ff fd06 	bl	bd930 <__lo0bits>
   bdf24:	9900      	ldr	r1, [sp, #0]
   bdf26:	b300      	cbz	r0, bdf6a <__d2b+0x82>
   bdf28:	9a01      	ldr	r2, [sp, #4]
   bdf2a:	f1c0 0320 	rsb	r3, r0, #32
   bdf2e:	fa02 f303 	lsl.w	r3, r2, r3
   bdf32:	430b      	orrs	r3, r1
   bdf34:	40c2      	lsrs	r2, r0
   bdf36:	6163      	str	r3, [r4, #20]
   bdf38:	9201      	str	r2, [sp, #4]
   bdf3a:	9b01      	ldr	r3, [sp, #4]
   bdf3c:	61a3      	str	r3, [r4, #24]
   bdf3e:	2b00      	cmp	r3, #0
   bdf40:	bf14      	ite	ne
   bdf42:	2202      	movne	r2, #2
   bdf44:	2201      	moveq	r2, #1
   bdf46:	6122      	str	r2, [r4, #16]
   bdf48:	b1d5      	cbz	r5, bdf80 <__d2b+0x98>
   bdf4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdf4e:	4405      	add	r5, r0
   bdf50:	f8c9 5000 	str.w	r5, [r9]
   bdf54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdf58:	f8c8 0000 	str.w	r0, [r8]
   bdf5c:	4620      	mov	r0, r4
   bdf5e:	b003      	add	sp, #12
   bdf60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdf64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdf68:	e7d5      	b.n	bdf16 <__d2b+0x2e>
   bdf6a:	6161      	str	r1, [r4, #20]
   bdf6c:	e7e5      	b.n	bdf3a <__d2b+0x52>
   bdf6e:	a801      	add	r0, sp, #4
   bdf70:	f7ff fcde 	bl	bd930 <__lo0bits>
   bdf74:	9b01      	ldr	r3, [sp, #4]
   bdf76:	6163      	str	r3, [r4, #20]
   bdf78:	2201      	movs	r2, #1
   bdf7a:	6122      	str	r2, [r4, #16]
   bdf7c:	3020      	adds	r0, #32
   bdf7e:	e7e3      	b.n	bdf48 <__d2b+0x60>
   bdf80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdf84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdf88:	f8c9 0000 	str.w	r0, [r9]
   bdf8c:	6918      	ldr	r0, [r3, #16]
   bdf8e:	f7ff fcaf 	bl	bd8f0 <__hi0bits>
   bdf92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdf96:	e7df      	b.n	bdf58 <__d2b+0x70>
   bdf98:	000bf8d1 	.word	0x000bf8d1
   bdf9c:	000bf97c 	.word	0x000bf97c

000bdfa0 <__ratio>:
   bdfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfa4:	4688      	mov	r8, r1
   bdfa6:	4669      	mov	r1, sp
   bdfa8:	4681      	mov	r9, r0
   bdfaa:	f7ff ff4d 	bl	bde48 <__b2d>
   bdfae:	a901      	add	r1, sp, #4
   bdfb0:	4640      	mov	r0, r8
   bdfb2:	ec55 4b10 	vmov	r4, r5, d0
   bdfb6:	f7ff ff47 	bl	bde48 <__b2d>
   bdfba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdfbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdfc2:	eba3 0c02 	sub.w	ip, r3, r2
   bdfc6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdfca:	1a9b      	subs	r3, r3, r2
   bdfcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdfd0:	ec51 0b10 	vmov	r0, r1, d0
   bdfd4:	2b00      	cmp	r3, #0
   bdfd6:	bfd6      	itet	le
   bdfd8:	460a      	movle	r2, r1
   bdfda:	462a      	movgt	r2, r5
   bdfdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdfe0:	468b      	mov	fp, r1
   bdfe2:	462f      	mov	r7, r5
   bdfe4:	bfd4      	ite	le
   bdfe6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdfea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdfee:	4620      	mov	r0, r4
   bdff0:	ee10 2a10 	vmov	r2, s0
   bdff4:	465b      	mov	r3, fp
   bdff6:	4639      	mov	r1, r7
   bdff8:	f7f6 faf8 	bl	b45ec <__aeabi_ddiv>
   bdffc:	ec41 0b10 	vmov	d0, r0, r1
   be000:	b003      	add	sp, #12
   be002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be006 <__copybits>:
   be006:	3901      	subs	r1, #1
   be008:	b570      	push	{r4, r5, r6, lr}
   be00a:	1149      	asrs	r1, r1, #5
   be00c:	6914      	ldr	r4, [r2, #16]
   be00e:	3101      	adds	r1, #1
   be010:	f102 0314 	add.w	r3, r2, #20
   be014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be018:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be01c:	1f05      	subs	r5, r0, #4
   be01e:	42a3      	cmp	r3, r4
   be020:	d30c      	bcc.n	be03c <__copybits+0x36>
   be022:	1aa3      	subs	r3, r4, r2
   be024:	3b11      	subs	r3, #17
   be026:	f023 0303 	bic.w	r3, r3, #3
   be02a:	3211      	adds	r2, #17
   be02c:	42a2      	cmp	r2, r4
   be02e:	bf88      	it	hi
   be030:	2300      	movhi	r3, #0
   be032:	4418      	add	r0, r3
   be034:	2300      	movs	r3, #0
   be036:	4288      	cmp	r0, r1
   be038:	d305      	bcc.n	be046 <__copybits+0x40>
   be03a:	bd70      	pop	{r4, r5, r6, pc}
   be03c:	f853 6b04 	ldr.w	r6, [r3], #4
   be040:	f845 6f04 	str.w	r6, [r5, #4]!
   be044:	e7eb      	b.n	be01e <__copybits+0x18>
   be046:	f840 3b04 	str.w	r3, [r0], #4
   be04a:	e7f4      	b.n	be036 <__copybits+0x30>

000be04c <__any_on>:
   be04c:	f100 0214 	add.w	r2, r0, #20
   be050:	6900      	ldr	r0, [r0, #16]
   be052:	114b      	asrs	r3, r1, #5
   be054:	4298      	cmp	r0, r3
   be056:	b510      	push	{r4, lr}
   be058:	db11      	blt.n	be07e <__any_on+0x32>
   be05a:	dd0a      	ble.n	be072 <__any_on+0x26>
   be05c:	f011 011f 	ands.w	r1, r1, #31
   be060:	d007      	beq.n	be072 <__any_on+0x26>
   be062:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be066:	fa24 f001 	lsr.w	r0, r4, r1
   be06a:	fa00 f101 	lsl.w	r1, r0, r1
   be06e:	428c      	cmp	r4, r1
   be070:	d10b      	bne.n	be08a <__any_on+0x3e>
   be072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be076:	4293      	cmp	r3, r2
   be078:	d803      	bhi.n	be082 <__any_on+0x36>
   be07a:	2000      	movs	r0, #0
   be07c:	bd10      	pop	{r4, pc}
   be07e:	4603      	mov	r3, r0
   be080:	e7f7      	b.n	be072 <__any_on+0x26>
   be082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be086:	2900      	cmp	r1, #0
   be088:	d0f5      	beq.n	be076 <__any_on+0x2a>
   be08a:	2001      	movs	r0, #1
   be08c:	e7f6      	b.n	be07c <__any_on+0x30>

000be08e <_calloc_r>:
   be08e:	b513      	push	{r0, r1, r4, lr}
   be090:	434a      	muls	r2, r1
   be092:	4611      	mov	r1, r2
   be094:	9201      	str	r2, [sp, #4]
   be096:	f7f9 fe5f 	bl	b7d58 <_malloc_r>
   be09a:	4604      	mov	r4, r0
   be09c:	b118      	cbz	r0, be0a6 <_calloc_r+0x18>
   be09e:	9a01      	ldr	r2, [sp, #4]
   be0a0:	2100      	movs	r1, #0
   be0a2:	f7fd fff5 	bl	bc090 <memset>
   be0a6:	4620      	mov	r0, r4
   be0a8:	b002      	add	sp, #8
   be0aa:	bd10      	pop	{r4, pc}
   be0ac:	0000      	movs	r0, r0
	...

000be0b0 <nan>:
   be0b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; be0b8 <nan+0x8>
   be0b4:	4770      	bx	lr
   be0b6:	bf00      	nop
   be0b8:	00000000 	.word	0x00000000
   be0bc:	7ff80000 	.word	0x7ff80000

000be0c0 <__ascii_wctomb>:
   be0c0:	b149      	cbz	r1, be0d6 <__ascii_wctomb+0x16>
   be0c2:	2aff      	cmp	r2, #255	; 0xff
   be0c4:	bf85      	ittet	hi
   be0c6:	238a      	movhi	r3, #138	; 0x8a
   be0c8:	6003      	strhi	r3, [r0, #0]
   be0ca:	700a      	strbls	r2, [r1, #0]
   be0cc:	f04f 30ff 	movhi.w	r0, #4294967295
   be0d0:	bf98      	it	ls
   be0d2:	2001      	movls	r0, #1
   be0d4:	4770      	bx	lr
   be0d6:	4608      	mov	r0, r1
   be0d8:	4770      	bx	lr

000be0da <link_code_end>:
	...

000be0dc <link_const_data_start>:
   be0dc:	514d0400 	.word	0x514d0400
   be0e0:	00045454 	.word	0x00045454
   be0e4:	49514d06 	.word	0x49514d06
   be0e8:	03706473 	.word	0x03706473
   be0ec:	00000000 	.word	0x00000000
   be0f0:	34fb0000 	.word	0x34fb0000
   be0f4:	00805f9b 	.word	0x00805f9b
   be0f8:	10008000 	.word	0x10008000
	...

000be104 <dynalib_user>:
   be104:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   be114:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   be124:	72697620 6c617574 73737200 64253d69      virtual.rssi=%d
   be134:	72657320 3d726576 58323025 3230253a      server=%02X:%02
   be144:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   be154:	3230253a 69250058 696c2500 006e6900     :%02X.%i.%li.in.
   be164:	0074756f 006d7770 61007764 6d740077     out.pwm.dw.aw.tm
   be174:	54006c70 324c504d 4c555858 3143666b     pl.TMPL2XXULkfC1
   be184:	00777600 3a203141 6f4e0020 74616420     .vw.A1 : .No dat
   be194:	32410061 00203a20 3a203341 41420020     a.A2 : .A3 : .BA
   be1a4:	72612f52 336e6f67 5353522f 44670049     R/argon3/RSSI.gD
   be1b4:	555f6746 786d5659 754b4f6d 6f345975     Fg_UYVmxmOKuuY4o
   be1c4:	4e356f49 6f6e7334 36693473 62007635     Io5N4snos4i65v.b
   be1d4:	6b6e796c 6f6c632e 6c006475 742e6261     lynk.cloud.lab.t
   be1e4:	63776568 6f632e6c 4142006d 72612f52     hewcl.com.BAR/ar
   be1f4:	316e6f67 5353522f 41420049 72612f52     gon1/RSSI.BAR/ar
   be204:	326e6f67 5353522f 66610049 63613765     gon2/RSSI.afe7ac
   be214:	332d3563 2d396133 66383734 6562622d     c5-33a9-478f-bbe
   be224:	39382d31 61613434 38653830 00003438     1-8944aa08e884..

000be234 <_ZTVN5spark10LogHandlerE>:
	...
   be244:	000b4ac5 000b4aed                       .J...J..

000be24c <_ZTVN5spark16SerialLogHandlerE>:
	...
   be254:	000b4be5 000b4c19 000ba79d 000ba941     .K...L......A...

000be264 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   be264:	6b6e6c62 00666e69 00726576 2e312e31     blnkinf.ver.1.1.
   be274:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   be284:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   be294:	6c636974 72412065 006e6f67 742d7766     ticle Argon.fw-t
   be2a4:	00657079 4c504d54 55585832 43666b4c     ype.TMPL2XXULkfC
   be2b4:	75620031 00646c69 206c754a 32203231     1.build.Jul 12 2
   be2c4:	20333230 323a3332 34333a35 64000000     023 23:25:34...d
   be2d4:	75616665 0020746c 0042534d 0042534c     efault .MSB.LSB.
   be2e4:	4950533c 74746553 73676e69 66656420     <SPISettings def
   be2f4:	746c7561 533c003e 65534950 6e697474     ault>.<SPISettin
   be304:	25207367 20752573 4d207325 2545444f     gs %s%u %s MODE%
   be314:	                                         u>.

000be317 <_ZL4font>:
   be317:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   be327:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   be337:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   be347:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   be357:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   be367:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   be377:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   be387:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   be397:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   be3a7:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   be3b7:	00000000 5f000000 07000000 14000700     ......._........
   be3c7:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   be3d7:	00502056 00030708 41221c00 22410000     V P......."A..A"
   be3e7:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   be3f7:	08080800 00000808 20006060 02040810     ........``. ....
   be407:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   be417:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   be427:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   be437:	00001e29 00000014 00003440 22140800     ).......@4....."
   be447:	14141441 41001414 02081422 06095901     A......A"....Y..
   be457:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   be467:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   be477:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   be487:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   be497:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   be4a7:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   be4b7:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   be4c7:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   be4d7:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   be4e7:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   be4f7:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   be507:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   be517:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   be527:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   be537:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   be547:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   be557:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   be567:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   be577:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   be587:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   be597:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   be5a7:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   be5b7:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   be5c7:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   be5d7:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   be5e7:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   be5f7:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   be607:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   be617:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   be627:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   be637:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   be647:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   be657:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   be667:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   be677:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   be687:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   be697:	00ff0000 ff101010 14141400 101000ff     ................
   be6a7:	10ff00ff f010f010 fc141414 f7141400     ................
   be6b7:	0000ff00 14ff00ff fc04f414 10171414     ................
   be6c7:	1f10101f 14141f10 10001f14 00f01010     ................
   be6d7:	1f000000 10101010 1010101f 0010f010     ................
   be6e7:	10ff0000 10101010 10101010 000010ff     ................
   be6f7:	0014ff00 ff00ff00 101f0000 fc000017     ................
   be707:	1414f404 14171017 f404f414 00ff0000     ................
   be717:	141414f7 14141414 14f700f7 14171414     ................
   be727:	101f1010 1414141f 101014f4 00f010f0     ................
   be737:	1f101f00 1f000000 00000014 000014fc     ................
   be747:	10f010f0 ff10ff10 ff141414 10101014     ................
   be757:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   be767:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   be777:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   be787:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   be797:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   be7a7:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   be7b7:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   be7c7:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   be7d7:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   be7e7:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   be7f7:	00000018 30001010 0101ff40 01011f00     .......0@.......
   be807:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000be818 <_ZTV12Adafruit_GFX>:
	...
   be828:	000b620d 000b99fd 000b4ac5 000b5c13     .b.......J...\..
   be838:	000b5c15 000b5c47 000b5c23 000b5c35     .\..G\..#\..5\..
   be848:	000b5b55 000b5c13 000b5e3f 000b5e3d     U[...\..?^..=^..
   be858:	000b5c5f 000b5c9d 000b5cd7 000b5d1d     _\...\...\...]..
   be868:	000b5d39 000b5dbd                       9]...]..

000be870 <_ZTV16OledWingAdafruit>:
	...
   be878:	000b631d 000b633d 000b620d 000b99fd     .c..=c...b......
   be888:	000b6d85 000b5c13 000b5c15 000b5c47     .m...\...\..G\..
   be898:	000b5c23 000b5c35 000b5b55 000b5c13     #\..5\..U[...\..
   be8a8:	000b5e3f 000b6f23 000b74cb 000b747d     ?^..#o...t..}t..
   be8b8:	000b5cd7 000b5d1d 000b5d39 000b5dbd     .\...]..9]...]..

000be8c8 <_ZTVN8particle11SPISettingsE>:
	...
   be8d0:	000b5b01 000b5ad5 000b5ad7              .[...Z...Z..

000be8dc <_ZL12splash1_data>:
   be8dc:	00000000 00800100 00000000 00000000     ................
   be8ec:	00008003 00000000 07000000 000000c0     ................
   be8fc:	00000000 c0070000 00000000 00000000     ................
   be90c:	00c00f00 00000000 00000000 0000e01f     ................
   be91c:	00000000 1f000000 000000e0 00000000     ................
   be92c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   be944:	0000f07f 00000000 7ff81f00 000000f0     ................
   be954:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   be964:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   be974:	00000000 f9ff0f00 0000c0ff 00000000     ................
   be984:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   be994:	00000000 fc030000 80ffff73 00000000     ........s.......
   be9a4:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   be9b4:	000000ff 00000000 fc1ffe7f 00000000     ................
   be9c4:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   be9d4:	0000e0ff 00000000 ff191f00 000000c0     ................
   be9e4:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   be9f4:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bea04:	00000000 fcffff00 00000000 00000000     ................
   bea14:	00feffff 00000000 ff000000 0000feff     ................
   bea24:	00000000 efff0100 000000fe 00000000     ................
   bea34:	fecfff01 00000000 03000000 00fe07ff     ................
   bea44:	00000000 fc030000 0000fe07 00000000     ................
   bea54:	03f00300 000000fe 00000000 fe008001     ................
	...
   bea6c:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bea84:	0000000c 07000000 00fc0080 00c00300     ................
   bea94:	80070000 0000fc01 0000c003 01800700     ................
   beaa4:	030000fc 000000c0 e0018007 1e000000     ................
   beab4:	07000000 00e00180 001e0000 9ff7e37f     ................
   beac4:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bead4:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   beae4:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   beaf4:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   beb04:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   beb14:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   beb24:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   beb34:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   beb44:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   beb54:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   beb64:	ffffff00 ffffffff c0ffffff ffffffff     ................
   beb74:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   beb84:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   beb94:	5b6bfdff c0fd6adb                       ..k[.j..

000beb9c <_ZL12splash2_data>:
   beb9c:	00600000 00000000 00000000 00000000     ..`.............
   bebac:	0000e000 00000000 00000000 01000000     ................
   bebbc:	000000e0 00000000 00000000 f0010000     ................
	...
   bebd8:	00f00300 00000000 00000000 00000000     ................
   bebe8:	0000f007 00000000 00000000 07000000     ................
   bebf8:	000000f8 00000000 00000000 f80f0000     ................
   bec08:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bec18:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bec28:	00c00300 010000fe ffff00e0 000000f8     ................
   bec38:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bec48:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bec58:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bec68:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bec78:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bec88:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bec98:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   beca8:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   becb8:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   becc8:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   becd8:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bece8:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   becf8:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bed08:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bed18:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bed30:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bed40:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bed50:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bed60:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bed70:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bed7c <_ZTV16Adafruit_SSD1306>:
	...
   bed84:	000b6d59 000b6d71 000b620d 000b99fd     Ym..qm...b......
   bed94:	000b6d85 000b5c13 000b5c15 000b5c47     .m...\...\..G\..
   beda4:	000b5c23 000b5c35 000b5b55 000b5c13     #\..5\..U[...\..
   bedb4:	000b5e3f 000b6f23 000b74cb 000b747d     ?^..#o...t..}t..
   bedc4:	000b5cd7 000b5d1d 000b5d39 000b5dbd     .\...]..9]...]..

000bedd4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bedd4:	e0c08000 fefcf8f0                       ........

000beddc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   beddc:	07030100 7f3f1f0f                       ......?.

000bede4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bede4:	a880d5ae                                ....

000bede8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bede8:	8d4000d3                                ..@.

000bedec <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bedec:	c8a10020                                 ...

000bedf0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bedf0:	a6a440db                                 .@....

000bedf6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bedf6:	8f8102da                                ....

000bedfa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bedfa:	                                         ...

000bedfd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bedfd:	                                         ...

000bee00 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bee00:	21ff0022 00000000                       "..!....

000bee08 <_ZL22BlynkReadHandlerVector>:
   bee08:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee18:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee28:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee38:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee48:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee58:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee68:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee78:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee88:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bee98:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beea8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beeb8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beec8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beed8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beee8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beef8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef08:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef18:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef28:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef38:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef48:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef58:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef68:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef78:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef88:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   bef98:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   befa8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   befb8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   befc8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   befd8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   befe8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..
   beff8:	000b7667 000b7667 000b7667 000b7667     gv..gv..gv..gv..

000bf008 <_ZL23BlynkWriteHandlerVector>:
   bf008:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf018:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf028:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf038:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf048:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf058:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf068:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf078:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf088:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf098:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0a8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0b8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0c8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0d8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0e8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf0f8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf108:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf118:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf128:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf138:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf148:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf158:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf168:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf178:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf188:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf198:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1a8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1b8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1c8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1d8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1e8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..
   bf1f8:	000b7669 000b7669 000b7669 000b7669     iv..iv..iv..iv..

000bf208 <_ZTVN5spark13EthernetClassE>:
	...
   bf210:	000b7df7 000b7ded 000b7de3 000b7dd9     .}...}...}...}..
   bf220:	000b7dcd 000b7dc1 000bb675 000bb67d     .}...}..u...}...
   bf230:	000b7db5 000b7dad 000b7da3 000b7d99     .}...}...}...}..
   bf240:	000bb6ad                                ....

000bf244 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bf244:	18100800 38302820 65737341 6f697472     .... (08Assertio
   bf254:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bf264:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bf274:	63736964 7265766f 20676e69 76726573     discovering serv
   bf284:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bf294:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bf2a4:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bf2b4:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bf2c4:	4e5f524f 00454e4f 6c696146 74206465     OR_NONE.Failed t
   bf2d4:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   bf2e4:	46002179 656c6961 6f742064 70706120     y!.Failed to app
   bf2f4:	20646e65 72656570 6e654320 6c617274     end peer Central
   bf304:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   bf314:	44006465 6f637369 63656e6e 00646574     ed.Disconnected.

000bf324 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf32c:	000b8281 000b82a5 000b89ad 000b82b3     ................
   bf33c:	000b8285                                ....

000bf340 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bf348:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   bf358:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   bf368:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   bf378:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   bf388:	6f63005b 3d206564 65640020 6c696174     [.code = .detail
   bf398:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   bf3a8:	64006564 69617465 0000006c              de.detail...

000bf3b4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf3bc:	000b9b95 000b9bbb 000b9b79 000bb7c7     ........y.......

000bf3cc <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf3d4:	000ba045 000ba05d 000ba79d 000ba941     E...].......A...

000bf3e4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf3ec:	000ba071 000ba085 000ba979 000b9b81     q.......y.......

000bf3fc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf404:	000b9b93 000b9bc9 000ba701 000b9b83     ................

000bf414 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf41c:	000b9b91 000b9bd7 000b9fad 000b9bf9     ................
   bf42c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   bf43c:	007a2553 74637361 00656d69              S%z.asctime.

000bf448 <_ZTV9IPAddress>:
	...
   bf450:	000bac89 000bac79 000bac7b              ....y...{...

000bf45c <_ZTV9USBSerial>:
	...
   bf464:	000bad9b 000bae03 000badd9 000b99fd     ................
   bf474:	000badcb 000bad9d 000badad 000badfd     ................
   bf484:	000badbd 000bad95                       ........

000bf48c <_ZTV11USARTSerial>:
	...
   bf494:	000baea5 000baf11 000baee9 000b99fd     ................
   bf4a4:	000baeb9 000baed5 000baec7 000baee3     ................
   bf4b4:	000baea7 000baeab                       ........

000bf4bc <_ZTV7TwoWire>:
	...
   bf4c4:	000baf5d 000bafa7 000baf7f 000baf5f     ]..........._...
   bf4d4:	000baf87 000baf8f 000baf97 000baf9f     ................
   bf4e4:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bf4f4:	203d2072 00006425                       r = %d..

000bf4fc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf504:	000bb0a5 000bb0c9 000bb5b3 000bb0d7     ................
   bf514:	000bb0a9                                ....

000bf518 <_ZTV9TCPClient>:
	...
   bf520:	000bab09 000bab21 000bb021 000bb03b     ....!...!...;...
   bf530:	000bb449 000bb065 000bb2bf 000bb099     I...e...........
   bf540:	000bb351 000bb191 000bb2ed 000bb4fd     Q...............
   bf550:	000bb28d 000bb09b 000bb04d 000bb0dd     ........M.......
   bf560:	000bb171                                q...

000bf564 <_ZTVN5spark9WiFiClassE>:
	...
   bf56c:	000bb617 000bb60d 000bb603 000bb5b9     ................
   bf57c:	000bb5f7 000bb5eb 000bb675 000bb67d     ........u...}...
   bf58c:	000bb5df 000bb5d7 000bb5cd 000bb5c3     ................
   bf59c:	000bb6ad                                ....

000bf5a0 <_ZTVN5spark12NetworkClassE>:
	...
   bf5a8:	000bb635 000bb63f 000bb649 000bb653     5...?...I...S...
   bf5b8:	000bb65d 000bb669 000bb675 000bb67d     ]...i...u...}...
   bf5c8:	000bb685 000bb691 000bb699 000bb6a3     ................
   bf5d8:	000bb6ad 75007525 78343025               ....%u.u%04x.

000bf5e5 <_ZSt7nothrow>:
	...

000bf5e6 <_ZTSSt19_Sp_make_shared_tag>:
   bf5e6:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bf5f6:	5f646572 00676174                        red_tag...

000bf600 <_ZTISt19_Sp_make_shared_tag>:
   bf600:	000bf640 000bf5e6                       @.......

000bf608 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf608:	000bf6a0 000bf614 000bf6c4              ............

000bf614 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf614:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bf624:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bf634:	00000045                                E...

000bf638 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf638:	00000000 000bf608 000bbe15 000bbe29     ............)...
   bf648:	000bbfbd 000bbfbd 000bbe93 000bbdd5     ................
   bf658:	000bbe7b 000bbe3d 000bbe07              {...=.......

000bf664 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf664:	000bf6a0 000bf670 000bf608              ....p.......

000bf670 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf670:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bf680:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bf690:	456f666e 00000000                       nfoE....

000bf698 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf698:	00000000 000bf664 000bbebd 000bbed1     ....d...........
   bf6a8:	000bbfbd 000bbfbd 000bbe93 000bbdd5     ................
   bf6b8:	000bbf91 000bbf1d 000bbee5              ............

000bf6c4 <_ZTISt9type_info>:
   bf6c4:	000bf640 000bf6cc                       @.......

000bf6cc <_ZTSSt9type_info>:
   bf6cc:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bf6dc:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bf6ec:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bf6fc:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bf70c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bf71c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bf72c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bf73c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bf74c:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bf75c:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bf76c:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bf77c <fpi.1>:
   bf77c:	00000035 fffffbce 000003cb 00000001     5...............
   bf78c:	00000000                                ....

000bf790 <fpinan.0>:
   bf790:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bf7a8 <tinytens>:
   bf7a8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bf7b8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bf7c8:	64ac6f43 11680628                       Co.d(.h.

000bf7d0 <_ctype_>:
   bf7d0:	20202000 20202020 28282020 20282828     .         ((((( 
   bf7e0:	20202020 20202020 20202020 20202020                     
   bf7f0:	10108820 10101010 10101010 10101010      ...............
   bf800:	04040410 04040404 10040404 10101010     ................
   bf810:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bf820:	01010101 01010101 01010101 10101010     ................
   bf830:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bf840:	02020202 02020202 02020202 10101010     ................
   bf850:	00000020 00000000 00000000 00000000      ...............
	...
   bf8d0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bf8e0:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bf8f0:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bf900:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bf910:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bf920:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bf930:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bf940:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bf950:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bf960:	78656874 0000632e                       thex.c..

000bf968 <_C_numeric_locale>:
   bf968:	000bf30b 000bf39f 2003e350 4f500043     ........P.. C.PO
   bf978:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bf988:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bf998:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bf9a8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bf9b8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bf9c8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bf9d8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bf9e8:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bf9f8:	00000063 00000000                       c.......

000bfa00 <__mprec_bigtens>:
   bfa00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bfa10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bfa20:	7f73bf3c 75154fdd                       <.s..O.u

000bfa28 <__mprec_tens>:
   bfa28:	00000000 3ff00000 00000000 40240000     .......?......$@
   bfa38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bfa48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bfa58:	00000000 412e8480 00000000 416312d0     .......A......cA
   bfa68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bfa78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bfa88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bfa98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bfaa8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bfab8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bfac8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bfad8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bfae8:	79d99db4 44ea7843                       ...yCx.D

000bfaf0 <p05.0>:
   bfaf0:	00000005 00000019 0000007d              ........}...

000bfafc <link_const_data_end>:
   bfafc:	000b5991 	.word	0x000b5991
   bfb00:	000b7e01 	.word	0x000b7e01
   bfb04:	000b7f79 	.word	0x000b7f79
   bfb08:	000b99ed 	.word	0x000b99ed
   bfb0c:	000ba78d 	.word	0x000ba78d
   bfb10:	000baaed 	.word	0x000baaed
   bfb14:	000bab35 	.word	0x000bab35
   bfb18:	000bb621 	.word	0x000bb621
   bfb1c:	000bb785 	.word	0x000bb785
